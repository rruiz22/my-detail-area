import { useState, useEffect } from 'react';
import { getToken, onMessage } from 'firebase/messaging';
import { useAuth } from '@/contexts/AuthContext';
import { useDealerFilter } from '@/contexts/DealerFilterContext';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { getFirebaseMessaging, isFirebaseConfigured } from '@/config/firebase';

/**
 * Hook for managing Firebase Cloud Messaging (FCM) Push Notifications
 *
 * Features:
 * - Check browser and Firebase support
 * - Request notification permission
 * - Get FCM token and subscribe
 * - Save FCM token to database (fcm_tokens table)
 * - Test FCM notifications
 * - Receive foreground messages
 *
 * Differences from web-push (usePushNotifications):
 * - Uses FCM HTTP v1 API instead of web-push VAPID
 * - FCM tokens instead of push subscriptions
 * - Simplified token management
 * - Better reliability with Firebase infrastructure
 *
 * Requirements:
 * - Firebase Service Worker (firebase-messaging-sw.js) registered
 * - Firebase credentials in environment variables
 * - fcm_tokens table in database
 * - push-notification-fcm Edge Function deployed
 */
export function useFCMNotifications() {
  const { user } = useAuth();
  const { selectedDealerId } = useDealerFilter();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const [permission, setPermission] = useState<NotificationPermission>('default');
  const [isSupported, setIsSupported] = useState(false);
  const [isConfigured, setIsConfigured] = useState(false);
  const [fcmToken, setFcmToken] = useState<string | null>(null);

  // Check browser support and Firebase configuration
  useEffect(() => {
    const checkSupport = async () => {
      const supported =
        'Notification' in window &&
        'serviceWorker' in navigator &&
        'PushManager' in window;

      setIsSupported(supported);
      setIsConfigured(isFirebaseConfigured());

      if (supported) {
        setPermission(Notification.permission);

        // Register Firebase Messaging Service Worker manually
        // This is separate from the PWA service worker generated by Vite
        try {
          const registration = await navigator.serviceWorker.register(
            '/firebase-messaging-sw.js',
            { scope: '/firebase-cloud-messaging-push-scope' }
          );
          console.log('[FCM] Firebase Messaging SW registered:', registration.scope);
        } catch (error) {
          console.error('[FCM] Firebase Messaging SW registration failed:', error);
        }
      }
    };

    checkSupport();
  }, []);

  // Listen for foreground messages
  useEffect(() => {
    if (!isSupported || !isConfigured) return;

    const messaging = getFirebaseMessaging();
    if (!messaging) return;

    const unsubscribe = onMessage(messaging, (payload) => {
      console.log('[FCM] Foreground message received:', payload);

      // Show toast notification for foreground messages
      toast({
        title: payload.notification?.title || 'New Notification',
        description: payload.notification?.body || '',
      });

      // Also show browser notification if permission is granted
      if (Notification.permission === 'granted') {
        const notification = new Notification(
          payload.notification?.title || 'My Detail Area',
          {
            body: payload.notification?.body || 'You have a new notification',
            icon: '/favicon-mda.svg',
            badge: '/favicon-mda.svg',
            tag: payload.data?.type || 'fcm-foreground',
            data: payload.data,
          }
        );

        // Handle notification click
        notification.onclick = () => {
          window.focus();
          if (payload.data?.url) {
            window.location.href = payload.data.url;
          }
          notification.close();
        };
      }
    });

    return () => unsubscribe();
  }, [isSupported, isConfigured, toast]);

  // Get current FCM token from database
  const { data: tokenRecord, isLoading } = useQuery({
    queryKey: ['fcmToken', user?.id, selectedDealerId],
    queryFn: async () => {
      if (!user?.id || !selectedDealerId) return null;

      const { data, error } = await supabase
        .from('fcm_tokens')
        .select('*')
        .eq('user_id', user.id)
        .eq('dealer_id', selectedDealerId)
        .eq('is_active', true)
        .maybeSingle();

      if (error) {
        console.error('[FCM] Error fetching token:', error);
        return null;
      }

      if (data) {
        setFcmToken(data.fcm_token);
      }

      return data;
    },
    enabled: isSupported && isConfigured && !!user?.id && !!selectedDealerId,
  });

  // Request notification permission
  const requestPermission = async (): Promise<NotificationPermission> => {
    if (!isSupported) {
      throw new Error('Push notifications not supported in this browser');
    }

    if (!isConfigured) {
      throw new Error('Firebase is not properly configured. Check environment variables.');
    }

    try {
      const result = await Notification.requestPermission();
      setPermission(result);
      return result;
    } catch (error) {
      console.error('[FCM] Error requesting permission:', error);
      throw error;
    }
  };

  // Subscribe to FCM notifications
  const subscribeMutation = useMutation({
    mutationFn: async () => {
      if (!user?.id || !selectedDealerId) {
        throw new Error('User not authenticated or dealer not selected');
      }

      if (!isConfigured) {
        throw new Error('Firebase is not properly configured');
      }

      // Request permission if not granted
      if (permission !== 'granted') {
        const newPermission = await requestPermission();
        if (newPermission !== 'granted') {
          throw new Error('Notification permission denied');
        }
      }

      // Get Firebase Messaging instance
      const messaging = getFirebaseMessaging();
      if (!messaging) {
        throw new Error('Firebase Messaging not initialized');
      }

      // Get the Firebase Messaging service worker registration
      // This is registered separately in the useEffect above
      const registrations = await navigator.serviceWorker.getRegistrations();
      const fcmRegistration = registrations.find(reg =>
        reg.scope.includes('firebase-cloud-messaging-push-scope')
      );

      if (!fcmRegistration) {
        throw new Error('Firebase Messaging service worker not found. Please refresh the page.');
      }

      console.log('[FCM] Using FCM Service Worker:', fcmRegistration.scope);

      // Get FCM VAPID key from environment
      const fcmVapidKey = import.meta.env.VITE_FCM_VAPID_KEY;
      if (!fcmVapidKey) {
        throw new Error('VITE_FCM_VAPID_KEY not configured in environment variables');
      }

      // Get FCM token with VAPID key
      console.log('[FCM] Requesting FCM token with VAPID key...');
      const token = await getToken(messaging, {
        serviceWorkerRegistration: fcmRegistration,
        vapidKey: fcmVapidKey,
      });

      if (!token) {
        throw new Error('Failed to get FCM token');
      }

      console.log('[FCM] Token received:', token.substring(0, 20) + '...');
      setFcmToken(token);

      // Save to database
      const { data, error } = await supabase
        .from('fcm_tokens')
        .upsert(
          {
            user_id: user.id,
            dealer_id: selectedDealerId,
            fcm_token: token,
            is_active: true,
            updated_at: new Date().toISOString(),
          },
          {
            onConflict: 'user_id,dealer_id,fcm_token',
          }
        )
        .select()
        .single();

      if (error) {
        console.error('[FCM] Database save error:', error);
        throw error;
      }

      console.log('[FCM] Token saved to database:', data);
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['fcmToken'] });
      toast({
        title: 'FCM Notifications Enabled',
        description: 'You will now receive Firebase Cloud Messaging notifications',
      });
    },
    onError: (error: any) => {
      console.error('[FCM] Subscription error:', error);
      toast({
        title: 'Subscription Failed',
        description: error.message || 'Failed to enable FCM notifications',
        variant: 'destructive',
      });
    },
  });

  // Unsubscribe from FCM notifications
  const unsubscribeMutation = useMutation({
    mutationFn: async () => {
      if (!user?.id || !selectedDealerId) {
        throw new Error('User not authenticated or dealer not selected');
      }

      // Mark as inactive in database
      const { error } = await supabase
        .from('fcm_tokens')
        .update({ is_active: false, updated_at: new Date().toISOString() })
        .eq('user_id', user.id)
        .eq('dealer_id', selectedDealerId);

      if (error) throw error;

      setFcmToken(null);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['fcmToken'] });
      toast({
        title: 'FCM Notifications Disabled',
        description: 'You will no longer receive FCM notifications',
      });
    },
    onError: (error: any) => {
      console.error('[FCM] Unsubscribe error:', error);
      toast({
        title: 'Unsubscribe Failed',
        description: error.message || 'Failed to disable FCM notifications',
        variant: 'destructive',
      });
    },
  });

  // Test FCM notification
  const testNotificationMutation = useMutation({
    mutationFn: async () => {
      if (!user?.id || !selectedDealerId) {
        throw new Error('User not authenticated or dealer not selected');
      }

      console.log('[FCM Test] Sending test notification via Edge Function');

      const { data, error } = await supabase.functions.invoke('push-notification-fcm', {
        body: {
          userId: user.id,
          dealerId: selectedDealerId,
          notification: {
            title: 'FCM Test Notification',
            body: 'This is a test notification from Firebase Cloud Messaging',
          },
          data: {
            type: 'test',
            module: 'get_ready',
            url: '/get-ready',
          },
        },
      });

      if (error) {
        console.error('[FCM Test] Edge Function error:', error);
        throw error;
      }

      console.log('[FCM Test] Response:', data);
      return data;
    },
    onSuccess: (data: any) => {
      if (data?.success && data?.sentCount > 0) {
        toast({
          title: 'Test Notification Sent',
          description: `Successfully sent to ${data.sentCount} device(s)`,
        });
      } else {
        toast({
          title: 'No Active Tokens',
          description: 'Please enable FCM notifications first',
          variant: 'destructive',
        });
      }
    },
    onError: (error: any) => {
      console.error('[FCM Test] Error:', error);
      toast({
        title: 'Test Failed',
        description: error.message || 'Failed to send test notification',
        variant: 'destructive',
      });
    },
  });

  return {
    // State
    isSupported,
    isConfigured,
    permission,
    isSubscribed: !!tokenRecord && tokenRecord.is_active,
    fcmToken,
    tokenRecord,
    isLoading,

    // Actions
    requestPermission,
    subscribe: subscribeMutation.mutate,
    unsubscribe: unsubscribeMutation.mutate,
    testNotification: testNotificationMutation.mutate,

    // Mutation states
    isSubscribing: subscribeMutation.isPending,
    isUnsubscribing: unsubscribeMutation.isPending,
    isTesting: testNotificationMutation.isPending,
  };
}
