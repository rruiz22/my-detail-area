
> vite_react_shadcn_ts@0.0.0 lint
> eslint . --format=json

[{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\analyze_schema.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\analyze_schema.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\postcss.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\public\\sw.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\audit-translations.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\auto-type-generator.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\auto-validation-commit.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\check-dealerships-quick.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\check-dealerships.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\create-sample-dealerships.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\hybrid-schema-monitor.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\inspect-database.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\migrate-order-numbers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\notification-system.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\schema-dashboard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\schema-workflow-manager.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\test-authenticated-function.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\test-edge-function.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\translation-batch-fix.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\translation-scanner.cjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\scripts\\translation-scanner.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\DashboardLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\GlobalChatWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\LandingHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\LanguageSwitcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\NotificationProvider.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":64,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":64,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createContext, useContext, useCallback, ReactNode } from 'react';\r\nimport { toast } from '@/hooks/use-toast';\r\n\r\ninterface NotificationContextType {\r\n  showSuccess: (message: string, title?: string) => void;\r\n  showError: (message: string, title?: string) => void;\r\n  showInfo: (message: string, title?: string) => void;\r\n  showWarning: (message: string, title?: string) => void;\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\r\n\r\ninterface NotificationProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function NotificationProvider({ children }: NotificationProviderProps) {\r\n  const showSuccess = useCallback((message: string, title = 'Success') => {\r\n    toast({\r\n      title,\r\n      description: message,\r\n      variant: 'default'\r\n    });\r\n  }, []);\r\n\r\n  const showError = useCallback((message: string, title = 'Error') => {\r\n    toast({\r\n      title,\r\n      description: message,\r\n      variant: 'destructive'\r\n    });\r\n  }, []);\r\n\r\n  const showInfo = useCallback((message: string, title = 'Info') => {\r\n    toast({\r\n      title,\r\n      description: message,\r\n      variant: 'default'\r\n    });\r\n  }, []);\r\n\r\n  const showWarning = useCallback((message: string, title = 'Warning') => {\r\n    toast({\r\n      title,\r\n      description: message,\r\n      variant: 'default'\r\n    });\r\n  }, []);\r\n\r\n  const value = {\r\n    showSuccess,\r\n    showError,\r\n    showInfo,\r\n    showWarning\r\n  };\r\n\r\n  return (\r\n    <NotificationContext.Provider value={value}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useNotifications() {\r\n  const context = useContext(NotificationContext);\r\n  if (context === undefined) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ProtectedLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\StatusBadge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\StatusBadgeInteractive.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ThemeToggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\admin\\CloudSyncDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ai\\AIAssistant.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\analytics\\CommunicationAnalyticsDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":335,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14292,14295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14292,14295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  MessageSquare, \r\n  TrendingUp, \r\n  Clock, \r\n  Users, \r\n  BarChart3,\r\n  PieChart,\r\n  Activity,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  ArrowUpRight,\r\n  RefreshCw\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart as RechartsPieChart, Cell, AreaChart, Area, Pie } from 'recharts';\r\n\r\ninterface CommunicationAnalyticsDashboardProps {\r\n  dealerId: number;\r\n  timeRange?: '24h' | '7d' | '30d' | '90d';\r\n}\r\n\r\nexport const CommunicationAnalyticsDashboard: React.FC<CommunicationAnalyticsDashboardProps> = ({\r\n  dealerId,\r\n  timeRange = '7d'\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  // Mock data - in real implementation, this would come from hooks/API\r\n  const metrics = {\r\n    totalMessages: 2847,\r\n    responseTime: 12.3,\r\n    satisfaction: 94.2,\r\n    activeConversations: 34,\r\n    resolvedIssues: 89,\r\n    automationRate: 67\r\n  };\r\n\r\n  const trendData = [\r\n    { time: '00:00', messages: 45, responses: 42, satisfaction: 92 },\r\n    { time: '04:00', messages: 28, responses: 26, satisfaction: 94 },\r\n    { time: '08:00', messages: 156, responses: 149, satisfaction: 91 },\r\n    { time: '12:00', messages: 234, responses: 228, satisfaction: 96 },\r\n    { time: '16:00', messages: 189, responses: 185, satisfaction: 95 },\r\n    { time: '20:00', messages: 98, responses: 94, satisfaction: 93 }\r\n  ];\r\n\r\n  const channelData = [\r\n    { name: 'SMS', value: 45, color: '#8884d8' },\r\n    { name: 'Chat', value: 32, color: '#82ca9d' },\r\n    { name: 'Email', value: 18, color: '#ffc658' },\r\n    { name: 'Phone', value: 5, color: '#ff7300' }\r\n  ];\r\n\r\n  const performanceData = [\r\n    { category: 'Response Time', current: 12.3, target: 15, trend: -8.2 },\r\n    { category: 'First Contact Resolution', current: 89, target: 85, trend: 4.1 },\r\n    { category: 'Customer Satisfaction', current: 94.2, target: 90, trend: 2.3 },\r\n    { category: 'Automation Success', current: 67, target: 60, trend: 12.5 }\r\n  ];\r\n\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true);\r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    setIsRefreshing(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">{t('analytics.communication_dashboard', 'Communication Analytics')}</h2>\r\n          <p className=\"text-muted-foreground\">{t('analytics.real_time_insights', 'Real-time insights into your communication performance')}</p>\r\n        </div>\r\n        <Button onClick={handleRefresh} disabled={isRefreshing} variant=\"outline\">\r\n          <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n          {t('common.refresh', 'Refresh')}\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Key Metrics Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4\">\r\n        <MetricCard\r\n          title={t('analytics.total_messages', 'Total Messages')}\r\n          value={metrics.totalMessages.toLocaleString()}\r\n          icon={MessageSquare}\r\n          trend={12.5}\r\n          color=\"blue\"\r\n        />\r\n        <MetricCard\r\n          title={t('analytics.avg_response_time', 'Avg Response Time')}\r\n          value={`${metrics.responseTime}m`}\r\n          icon={Clock}\r\n          trend={-8.2}\r\n          color=\"green\"\r\n        />\r\n        <MetricCard\r\n          title={t('analytics.satisfaction_score', 'Satisfaction Score')}\r\n          value={`${metrics.satisfaction}%`}\r\n          icon={CheckCircle}\r\n          trend={2.3}\r\n          color=\"emerald\"\r\n        />\r\n        <MetricCard\r\n          title={t('analytics.active_conversations', 'Active Conversations')}\r\n          value={metrics.activeConversations.toString()}\r\n          icon={Users}\r\n          trend={-5.1}\r\n          color=\"orange\"\r\n        />\r\n        <MetricCard\r\n          title={t('analytics.resolved_issues', 'Resolved Issues')}\r\n          value={`${metrics.resolvedIssues}%`}\r\n          icon={CheckCircle}\r\n          trend={4.1}\r\n          color=\"green\"\r\n        />\r\n        <MetricCard\r\n          title={t('analytics.automation_rate', 'Automation Rate')}\r\n          value={`${metrics.automationRate}%`}\r\n          icon={Activity}\r\n          trend={12.5}\r\n          color=\"purple\"\r\n        />\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"overview\">{t('analytics.overview', 'Overview')}</TabsTrigger>\r\n          <TabsTrigger value=\"channels\">{t('analytics.channels', 'Channels')}</TabsTrigger>\r\n          <TabsTrigger value=\"performance\">{t('analytics.performance', 'Performance')}</TabsTrigger>\r\n          <TabsTrigger value=\"predictions\">{t('analytics.predictions', 'Predictions')}</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n            {/* Message Volume Trend */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <TrendingUp className=\"h-4 w-4\" />\r\n                  {t('analytics.message_volume', 'Message Volume')}\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  {t('analytics.messages_over_time', 'Messages and responses over time')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <AreaChart data={trendData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"time\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Area type=\"monotone\" dataKey=\"messages\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.3} />\r\n                    <Area type=\"monotone\" dataKey=\"responses\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.3} />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Satisfaction Trend */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <BarChart3 className=\"h-4 w-4\" />\r\n                  {t('analytics.satisfaction_trend', 'Satisfaction Trend')}\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  {t('analytics.customer_satisfaction_over_time', 'Customer satisfaction over time')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <LineChart data={trendData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"time\" />\r\n                    <YAxis domain={[80, 100]} />\r\n                    <Tooltip />\r\n                    <Line type=\"monotone\" dataKey=\"satisfaction\" stroke=\"#10b981\" strokeWidth={3} />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"channels\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n            {/* Channel Distribution */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <PieChart className=\"h-4 w-4\" />\r\n                  {t('analytics.channel_distribution', 'Channel Distribution')}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <RechartsPieChart>\r\n                    <Pie\r\n                      data={channelData}\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      outerRadius={80}\r\n                      dataKey=\"value\"\r\n                    >\r\n                      {channelData.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={entry.color} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip />\r\n                  </RechartsPieChart>\r\n                </ResponsiveContainer>\r\n                <div className=\"flex flex-wrap gap-2 mt-4\">\r\n                  {channelData.map((channel) => (\r\n                    <Badge key={channel.name} variant=\"outline\" className=\"flex items-center gap-1\">\r\n                      <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: channel.color }} />\r\n                      {channel.name}: {channel.value}%\r\n                    </Badge>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Channel Performance */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>{t('analytics.channel_performance', 'Channel Performance')}</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {channelData.map((channel) => (\r\n                    <div key={channel.name} className=\"space-y-2\">\r\n                      <div className=\"flex justify-between text-sm\">\r\n                        <span>{channel.name}</span>\r\n                        <span>{channel.value}%</span>\r\n                      </div>\r\n                      <Progress value={channel.value} className=\"h-2\" />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"performance\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 gap-4\">\r\n            {performanceData.map((metric) => (\r\n              <Card key={metric.category}>\r\n                <CardContent className=\"p-6\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <div className=\"space-y-1\">\r\n                      <p className=\"text-sm font-medium\">{metric.category}</p>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <span className=\"text-2xl font-bold\">{metric.current}</span>\r\n                        <Badge variant={metric.trend > 0 ? \"default\" : \"secondary\"} className=\"flex items-center gap-1\">\r\n                          <ArrowUpRight className={`h-3 w-3 ${metric.trend < 0 ? 'rotate-90' : ''}`} />\r\n                          {Math.abs(metric.trend)}%\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                      <p className=\"text-sm text-muted-foreground\">Target: {metric.target}</p>\r\n                      <Progress \r\n                        value={Math.min((metric.current / metric.target) * 100, 100)} \r\n                        className=\"w-24 h-2 mt-1\" \r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"predictions\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <AlertTriangle className=\"h-4 w-4 text-amber-500\" />\r\n                {t('analytics.predictive_insights', 'Predictive Insights')}\r\n              </CardTitle>\r\n              <CardDescription>\r\n                {t('analytics.ai_powered_predictions', 'AI-powered predictions and recommendations')}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                <div className=\"p-4 border rounded-lg bg-amber-50 dark:bg-amber-950/20\">\r\n                  <h4 className=\"font-medium text-amber-800 dark:text-amber-200\">\r\n                    {t('analytics.peak_volume_warning', 'Peak Volume Expected')}\r\n                  </h4>\r\n                  <p className=\"text-sm text-amber-700 dark:text-amber-300 mt-1\">\r\n                    {t('analytics.peak_volume_description', 'Based on historical data, expect 40% increase in message volume tomorrow between 2-4 PM.')}\r\n                  </p>\r\n                </div>\r\n                <div className=\"p-4 border rounded-lg bg-blue-50 dark:bg-blue-950/20\">\r\n                  <h4 className=\"font-medium text-blue-800 dark:text-blue-200\">\r\n                    {t('analytics.automation_opportunity', 'Automation Opportunity')}\r\n                  </h4>\r\n                  <p className=\"text-sm text-blue-700 dark:text-blue-300 mt-1\">\r\n                    {t('analytics.automation_description', '23% of incoming messages could be automated with improved workflows.')}\r\n                  </p>\r\n                </div>\r\n                <div className=\"p-4 border rounded-lg bg-green-50 dark:bg-green-950/20\">\r\n                  <h4 className=\"font-medium text-green-800 dark:text-green-200\">\r\n                    {t('analytics.satisfaction_improvement', 'Satisfaction Improvement')}\r\n                  </h4>\r\n                  <p className=\"text-sm text-green-700 dark:text-green-300 mt-1\">\r\n                    {t('analytics.satisfaction_description', 'Response time improvements could increase satisfaction by 12%.')}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface MetricCardProps {\r\n  title: string;\r\n  value: string;\r\n  icon: React.ComponentType<any>;\r\n  trend: number;\r\n  color: string;\r\n}\r\n\r\nconst MetricCard: React.FC<MetricCardProps> = ({ title, value, icon: Icon, trend, color }) => {\r\n  const trendColor = trend > 0 ? 'text-green-600' : 'text-red-600';\r\n  const trendIcon = trend > 0 ? '↗' : '↘';\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent className=\"p-6\">\r\n        <div className=\"flex items-center justify-between space-y-0 pb-2\">\r\n          <Icon className={`h-4 w-4 text-${color}-600`} />\r\n          <span className={`text-xs font-medium ${trendColor}`}>\r\n            {trendIcon} {Math.abs(trend)}%\r\n          </span>\r\n        </div>\r\n        <div className=\"text-2xl font-bold\">{value}</div>\r\n        <p className=\"text-xs text-muted-foreground\">{title}</p>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\ChatHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\ChatLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\ContextualChatLauncher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\ConversationList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\DateSeparator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\EnhancedChatInterface.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\FloatingChatBubble.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\MessageBubble.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\MessageComposer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\MessageThread.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\TypingIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\chat\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\common\\LazyComponentWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[262,265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[262,265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[328,331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[328,331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { lazy, Suspense, ComponentType } from 'react';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { Card, CardContent } from '@/components/ui/card';\r\n\r\ninterface LazyComponentWrapperProps {\r\n  component: () => Promise<{ default: ComponentType<any> }>;\r\n  fallback?: React.ReactNode;\r\n  props?: Record<string, any>;\r\n}\r\n\r\nconst DefaultFallback = () => (\r\n  <Card className=\"w-full\">\r\n    <CardContent className=\"p-6\">\r\n      <div className=\"space-y-4\">\r\n        <Skeleton className=\"h-6 w-48\" />\r\n        <Skeleton className=\"h-64 w-full\" />\r\n        <div className=\"flex space-x-2\">\r\n          <Skeleton className=\"h-4 w-16\" />\r\n          <Skeleton className=\"h-4 w-16\" />\r\n          <Skeleton className=\"h-4 w-16\" />\r\n        </div>\r\n      </div>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nexport function LazyComponentWrapper({\r\n  component,\r\n  fallback = <DefaultFallback />,\r\n  props = {}\r\n}: LazyComponentWrapperProps) {\r\n  const LazyComponent = lazy(component);\r\n\r\n  return (\r\n    <Suspense fallback={fallback}>\r\n      <LazyComponent {...props} />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\n// Predefined lazy loaders for common heavy components\r\nexport const LazyAnalyticsWrapper = ({ children }: { children: React.ReactNode }) => (\r\n  <Suspense fallback={<DefaultFallback />}>\r\n    {children}\r\n  </Suspense>\r\n);\r\n\r\nexport const LazyChartsWrapper = ({ children }: { children: React.ReactNode }) => (\r\n  <Suspense fallback={\r\n    <Card className=\"w-full\">\r\n      <CardContent className=\"p-6\">\r\n        <div className=\"space-y-4\">\r\n          <Skeleton className=\"h-6 w-32\" />\r\n          <div className=\"h-64 w-full bg-gray-50 rounded-lg flex items-center justify-center\">\r\n            <div className=\"text-center space-y-2\">\r\n              <div className=\"animate-spin h-8 w-8 border-2 border-gray-300 border-t-gray-600 rounded-full mx-auto\" />\r\n              <p className=\"text-sm text-gray-500\">Loading chart...</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  }>\r\n    {children}\r\n  </Suspense>\r\n);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\contacts\\ContactDetailModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\contacts\\ContactModal.tsx","messages":[{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":38,"column":25,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":38,"endColumn":26,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1235,1236],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1235,1235],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":38,"column":42,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":38,"endColumn":43,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1252,1253],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1252,1252],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":38,"column":44,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":38,"endColumn":45,"suggestions":[{"messageId":"removeEscape","fix":{"range":[1254,1255],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[1254,1254],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { ContactFormData, ContactDepartment, DealershipStatus, LanguageCode } from '@/types/dealership';\r\nimport { toast } from 'sonner';\r\nimport { User, Building2, XCircle } from 'lucide-react';\r\n\r\n// Security utility functions\r\nconst sanitizeInput = (input: string) => {\r\n  return input.trim().replace(/[<>]/g, '');\r\n};\r\n\r\nconst validateEmail = (email: string) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\nconst validatePhone = (phone: string) => {\r\n  const phoneRegex = /^[\\+]?[1-9]?[\\d\\s\\-\\(\\)]{7,15}$/;\r\n  return phoneRegex.test(phone);\r\n};\r\n\r\ninterface Contact {\r\n  id: number;\r\n  dealership_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  phone?: string;\r\n  mobile_phone?: string;\r\n  position?: string;\r\n  department: ContactDepartment;\r\n  is_primary: boolean;\r\n  can_receive_notifications: boolean;\r\n  preferred_language: LanguageCode;\r\n  notes?: string;\r\n  avatar_url?: string;\r\n  status: DealershipStatus;\r\n}\r\n\r\ninterface ContactModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSuccess: () => void;\r\n  contact?: Contact | null;\r\n  dealerships: { id: number; name: string }[];\r\n}\r\n\r\nexport function ContactModal({ isOpen, onClose, onSuccess, contact, dealerships }: ContactModalProps) {\r\n  const { t } = useTranslation();\r\n  const [loading, setLoading] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState<string[]>([]);\r\n  const isEditing = !!contact;\r\n\r\n  const [formData, setFormData] = useState<ContactFormData>({\r\n    dealership_id: dealerships.length > 0 ? dealerships[0]?.id || 0 : 0,\r\n    first_name: '',\r\n    last_name: '',\r\n    email: '',\r\n    phone: '',\r\n    mobile_phone: '',\r\n    position: '',\r\n    department: 'other',\r\n    is_primary: false,\r\n    can_receive_notifications: true,\r\n    preferred_language: 'en',\r\n    notes: '',\r\n    avatar_url: '',\r\n    status: 'active',\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (contact) {\r\n      setFormData({\r\n        dealership_id: contact.dealership_id,\r\n        first_name: contact.first_name,\r\n        last_name: contact.last_name,\r\n        email: contact.email,\r\n        phone: contact.phone || '',\r\n        mobile_phone: contact.mobile_phone || '',\r\n        position: contact.position || '',\r\n        department: contact.department,\r\n        is_primary: contact.is_primary,\r\n        can_receive_notifications: contact.can_receive_notifications,\r\n        preferred_language: contact.preferred_language,\r\n        notes: contact.notes || '',\r\n        avatar_url: contact.avatar_url || '',\r\n        status: contact.status,\r\n      });\r\n    } else {\r\n      setFormData({\r\n        dealership_id: dealerships.length > 0 ? dealerships[0]?.id || 0 : 0,\r\n        first_name: '',\r\n        last_name: '',\r\n        email: '',\r\n        phone: '',\r\n        mobile_phone: '',\r\n        position: '',\r\n        department: 'other',\r\n        is_primary: false,\r\n        can_receive_notifications: true,\r\n        preferred_language: 'en',\r\n        notes: '',\r\n        avatar_url: '',\r\n        status: 'active',\r\n      });\r\n    }\r\n    setValidationErrors([]);\r\n  }, [contact, dealerships]);\r\n\r\n  const handleInputChange = <K extends keyof ContactFormData>(\r\n    field: K,\r\n    value: ContactFormData[K]\r\n  ): void => {\r\n    // Sanitization específica por tipo\r\n    let sanitizedValue: ContactFormData[K] = value;\r\n\r\n    if (typeof value === 'string' &&\r\n        ['first_name', 'last_name', 'email', 'phone', 'mobile_phone', 'position', 'notes'].includes(field as string)) {\r\n      sanitizedValue = sanitizeInput(value) as ContactFormData[K];\r\n    }\r\n\r\n    setFormData(prev => ({ ...prev, [field]: sanitizedValue }));\r\n\r\n    // Clear validation errors when user starts typing\r\n    if (validationErrors.length > 0) {\r\n      setValidationErrors([]);\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const errors: string[] = [];\r\n    \r\n    if (!formData.first_name.trim()) {\r\n      errors.push('First name is required');\r\n    }\r\n    \r\n    if (!formData.last_name.trim()) {\r\n      errors.push('Last name is required');\r\n    }\r\n    \r\n    if (!formData.email.trim()) {\r\n      errors.push('Email is required');\r\n    } else if (!validateEmail(formData.email)) {\r\n      errors.push('Please enter a valid email address');\r\n    }\r\n    \r\n    if (formData.phone && !validatePhone(formData.phone)) {\r\n      errors.push('Please enter a valid phone number');\r\n    }\r\n    \r\n    if (formData.mobile_phone && !validatePhone(formData.mobile_phone)) {\r\n      errors.push('Please enter a valid mobile phone number');\r\n    }\r\n    \r\n    return errors;\r\n  };\r\n\r\n  const onSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    // Validate form\r\n    const errors = validateForm();\r\n    if (errors.length > 0) {\r\n      setValidationErrors(errors);\r\n      toast.error('Please fix the validation errors');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Prepare sanitized data for submission\r\n      const sanitizedData = {\r\n        dealership_id: formData.dealership_id,\r\n        first_name: sanitizeInput(formData.first_name),\r\n        last_name: sanitizeInput(formData.last_name),\r\n        email: sanitizeInput(formData.email),\r\n        phone: formData.phone ? sanitizeInput(formData.phone) : null,\r\n        mobile_phone: formData.mobile_phone ? sanitizeInput(formData.mobile_phone) : null,\r\n        position: formData.position ? sanitizeInput(formData.position) : null,\r\n        department: formData.department,\r\n        is_primary: formData.is_primary,\r\n        can_receive_notifications: formData.can_receive_notifications,\r\n        preferred_language: formData.preferred_language,\r\n        notes: formData.notes ? sanitizeInput(formData.notes) : null,\r\n        avatar_url: formData.avatar_url ? sanitizeInput(formData.avatar_url) : null,\r\n        status: formData.status,\r\n      };\r\n\r\n      if (isEditing && contact) {\r\n        const { error } = await supabase\r\n          .from('dealership_contacts')\r\n          .update(sanitizedData)\r\n          .eq('id', contact.id);\r\n\r\n        if (error) throw error;\r\n        toast.success(t('contacts.contact_updated'));\r\n      } else {\r\n        const { error } = await supabase\r\n          .from('dealership_contacts')\r\n          .insert(sanitizedData);\r\n\r\n        if (error) throw error;\r\n        toast.success(t('contacts.contact_created'));\r\n      }\r\n\r\n      onSuccess();\r\n    } catch (error) {\r\n      console.error('Error saving contact:', error);\r\n      toast.error(t('messages.error'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <User className=\"h-5 w-5\" />\r\n            {isEditing ? t('contacts.edit_contact') : t('contacts.add_new')}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        {validationErrors.length > 0 && (\r\n          <Alert variant=\"destructive\">\r\n            <XCircle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              <ul className=\"list-disc list-inside\">\r\n                {validationErrors.map((error, index) => (\r\n                  <li key={index}>{error}</li>\r\n                ))}\r\n              </ul>\r\n            </AlertDescription>\r\n          </Alert>\r\n        )}\r\n\r\n        <form onSubmit={onSubmit} className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Left Column - Basic Info */}\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"dealership_id\" className=\"flex items-center gap-2\">\r\n                  <Building2 className=\"h-4 w-4\" />\r\n                  {t('dealerships.title')} *\r\n                </Label>\r\n                <Select \r\n                  value={formData.dealership_id.toString()} \r\n                  onValueChange={(value) => handleInputChange('dealership_id', parseInt(value))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {dealerships.map((dealership) => (\r\n                      <SelectItem key={dealership.id} value={dealership.id.toString()}>\r\n                        {dealership.name}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label htmlFor=\"first_name\">{t('contacts.first_name')} *</Label>\r\n                  <Input\r\n                    id=\"first_name\"\r\n                    value={formData.first_name}\r\n                    onChange={(e) => handleInputChange('first_name', e.target.value)}\r\n                    placeholder={t('contacts.first_name_placeholder', 'John')}\r\n                    maxLength={50}\r\n                    required\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"last_name\">{t('contacts.last_name')} *</Label>\r\n                  <Input\r\n                    id=\"last_name\"\r\n                    value={formData.last_name}\r\n                    onChange={(e) => handleInputChange('last_name', e.target.value)}\r\n                    placeholder={t('contacts.last_name_placeholder', 'Doe')}\r\n                    maxLength={50}\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"email\">{t('contacts.email')} *</Label>\r\n                <Input\r\n                  id=\"email\"\r\n                  type=\"email\"\r\n                  value={formData.email}\r\n                  onChange={(e) => handleInputChange('email', e.target.value)}\r\n                  placeholder=\"john.doe@example.com\"\r\n                  maxLength={100}\r\n                  required\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label htmlFor=\"phone\">{t('contacts.phone')}</Label>\r\n                  <Input\r\n                    id=\"phone\"\r\n                    value={formData.phone}\r\n                    onChange={(e) => handleInputChange('phone', e.target.value)}\r\n                    placeholder=\"+1 (555) 123-4567\"\r\n                    maxLength={20}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <Label htmlFor=\"mobile_phone\">{t('contacts.mobile_phone')}</Label>\r\n                  <Input\r\n                    id=\"mobile_phone\"\r\n                    value={formData.mobile_phone}\r\n                    onChange={(e) => handleInputChange('mobile_phone', e.target.value)}\r\n                    placeholder=\"+1 (555) 987-6543\"\r\n                    maxLength={20}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"position\">{t('contacts.position')}</Label>\r\n                <Input\r\n                  id=\"position\"\r\n                  value={formData.position}\r\n                  onChange={(e) => handleInputChange('position', e.target.value)}\r\n                  placeholder={t('contacts.position_placeholder', 'Sales Manager')}\r\n                  maxLength={100}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Right Column - Settings */}\r\n            <div className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"department\">{t('contacts.department')}</Label>\r\n                <Select \r\n                  value={formData.department} \r\n                  onValueChange={(value: ContactDepartment) => handleInputChange('department', value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"sales\">{t('contacts.sales')}</SelectItem>\r\n                    <SelectItem value=\"service\">{t('contacts.service')}</SelectItem>\r\n                    <SelectItem value=\"parts\">{t('contacts.parts')}</SelectItem>\r\n                    <SelectItem value=\"management\">{t('contacts.management')}</SelectItem>\r\n                    <SelectItem value=\"other\">{t('contacts.other')}</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"preferred_language\">{t('contacts.preferred_language')}</Label>\r\n                <Select \r\n                  value={formData.preferred_language} \r\n                  onValueChange={(value: LanguageCode) => handleInputChange('preferred_language', value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"en\">English</SelectItem>\r\n                    <SelectItem value=\"es\">Español</SelectItem>\r\n                    <SelectItem value=\"pt-BR\">Português</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"status\">{t('contacts.status')}</Label>\r\n                <Select \r\n                  value={formData.status} \r\n                  onValueChange={(value: DealershipStatus) => handleInputChange('status', value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"active\">{t('contacts.active')}</SelectItem>\r\n                    <SelectItem value=\"inactive\">{t('contacts.inactive')}</SelectItem>\r\n                    <SelectItem value=\"suspended\">{t('contacts.suspended')}</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label htmlFor=\"is_primary\">{t('contacts.primary_contact')}</Label>\r\n                <Switch\r\n                  id=\"is_primary\"\r\n                  checked={formData.is_primary}\r\n                  onCheckedChange={(checked) => handleInputChange('is_primary', checked)}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex items-center justify-between\">\r\n                <Label htmlFor=\"can_receive_notifications\">{t('contacts.can_receive_notifications')}</Label>\r\n                <Switch\r\n                  id=\"can_receive_notifications\"\r\n                  checked={formData.can_receive_notifications}\r\n                  onCheckedChange={(checked) => handleInputChange('can_receive_notifications', checked)}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"avatar_url\">{t('contacts.avatar_url')}</Label>\r\n                <Input\r\n                  id=\"avatar_url\"\r\n                  type=\"url\"\r\n                  value={formData.avatar_url}\r\n                  onChange={(e) => handleInputChange('avatar_url', e.target.value)}\r\n                  placeholder=\"https://example.com/avatar.jpg\"\r\n                  maxLength={500}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"notes\">{t('contacts.notes')}</Label>\r\n                <Textarea\r\n                  id=\"notes\"\r\n                  value={formData.notes}\r\n                  onChange={(e) => handleInputChange('notes', e.target.value)}\r\n                  placeholder={t('contacts.notes_placeholder', 'Additional notes about this contact')}\r\n                  className=\"min-h-[80px]\"\r\n                  maxLength={1000}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex justify-end gap-4 pt-4 border-t\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\r\n              {t('common.cancel')}\r\n            </Button>\r\n            <Button type=\"submit\" disabled={loading}>\r\n              {loading ? t('common.loading') : t('common.save')}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dashboard\\DashboardMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dashboard\\DepartmentOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dashboard\\RecentActivity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dealer\\DealerCategories.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7311,7314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7311,7314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Plus, Edit2, Trash2, Tag, Palette, Settings } from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'sonner';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { usePermissions } from '@/hooks/usePermissions';\r\nimport { canViewPricing } from '@/utils/permissions';\r\n\r\ninterface ServiceCategory {\r\n  id: string;\r\n  name: string;\r\n  description: string | null;\r\n  color: string;\r\n  icon: string | null;\r\n  is_system_category: boolean;\r\n  dealer_id: number | null;\r\n  is_active: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface CategoryModuleMapping {\r\n  id: string;\r\n  category_id: string;\r\n  module: string;\r\n  dealer_id: number | null;\r\n  is_active: boolean;\r\n}\r\n\r\ninterface DealerCategoriesProps {\r\n  dealerId: string;\r\n}\r\n\r\nconst DEFAULT_COLORS = [\r\n  '#3B82F6', '#EF4444', '#10B981', '#F59E0B', \r\n  '#8B5CF6', '#EC4899', '#06B6D4', '#84CC16',\r\n  '#F97316', '#6366F1', '#14B8A6', '#F43F5E'\r\n];\r\n\r\nconst MODULE_OPTIONS = [\r\n  { value: 'dashboard', label: 'Dashboard' },\r\n  { value: 'sales_orders', label: 'Sales Orders' },\r\n  { value: 'service_orders', label: 'Service Orders' },\r\n  { value: 'recon_orders', label: 'Recon Orders' },\r\n  { value: 'car_wash', label: 'Car Wash' },\r\n  { value: 'reports', label: 'Reports' }\r\n] as const;\r\n\r\nexport function DealerCategories({ dealerId }: DealerCategoriesProps) {\r\n  const { t } = useTranslation();\r\n  const { roles } = usePermissions();\r\n  const canManageCategories = canViewPricing(roles);\r\n  \r\n  const [categories, setCategories] = useState<ServiceCategory[]>([]);\r\n  const [mappings, setMappings] = useState<CategoryModuleMapping[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [editingCategory, setEditingCategory] = useState<ServiceCategory | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  // Form state\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    color: DEFAULT_COLORS[0],\r\n    icon: '',\r\n    modules: [] as string[]\r\n  });\r\n\r\n  const fetchCategories = useCallback(async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('service_categories')\r\n        .select('*')\r\n        .or(`is_system_category.eq.true,dealer_id.eq.${dealerId}`)\r\n        .eq('is_active', true)\r\n        .order('is_system_category', { ascending: false })\r\n        .order('name');\r\n\r\n      if (error) throw error;\r\n      setCategories(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching categories:', error);\r\n      toast.error(t('categories.error_fetching'));\r\n    }\r\n  }, [dealerId, t]);\r\n\r\n  const fetchMappings = useCallback(async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('category_module_mappings')\r\n        .select('*')\r\n        .or(`dealer_id.is.null,dealer_id.eq.${dealerId}`)\r\n        .eq('is_active', true);\r\n\r\n      if (error) throw error;\r\n      setMappings(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching mappings:', error);\r\n    }\r\n  }, [dealerId]);\r\n\r\n  const loadData = useCallback(async () => {\r\n    setLoading(true);\r\n    await Promise.all([fetchCategories(), fetchMappings()]);\r\n    setLoading(false);\r\n  }, [fetchCategories, fetchMappings]);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [loadData]);\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      description: '',\r\n      color: DEFAULT_COLORS[0],\r\n      icon: '',\r\n      modules: []\r\n    });\r\n    setEditingCategory(null);\r\n  };\r\n\r\n  const openEditModal = (category: ServiceCategory) => {\r\n    setEditingCategory(category);\r\n    setFormData({\r\n      name: category.name,\r\n      description: category.description || '',\r\n      color: category.color,\r\n      icon: category.icon || '',\r\n      modules: mappings\r\n        .filter(m => m.category_id === category.id)\r\n        .map(m => m.module)\r\n    });\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!canManageCategories) {\r\n      toast.error(t('categories.insufficient_permissions'));\r\n      return;\r\n    }\r\n\r\n    if (!formData.name.trim()) {\r\n      toast.error(t('categories.name_required'));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (editingCategory) {\r\n        // Update existing category (only custom categories can be edited)\r\n        if (editingCategory.is_system_category) {\r\n          toast.error(t('categories.cannot_edit_system'));\r\n          return;\r\n        }\r\n\r\n        const { error: updateError } = await supabase\r\n          .from('service_categories')\r\n          .update({\r\n            name: formData.name,\r\n            description: formData.description || null,\r\n            color: formData.color || null,\r\n            icon: formData.icon || null\r\n          })\r\n          .eq('id', editingCategory.id);\r\n\r\n        if (updateError) throw updateError;\r\n\r\n        // Update module mappings\r\n        await updateCategoryMappings(editingCategory.id, formData.modules);\r\n\r\n        toast.success(t('categories.updated_successfully'));\r\n      } else {\r\n        // Create new category\r\n        const { data: newCategory, error: insertError } = await supabase\r\n          .from('service_categories')\r\n          .insert({\r\n            name: formData.name,\r\n            description: formData.description || null,\r\n            color: formData.color || null,\r\n            icon: formData.icon || null,\r\n            dealer_id: parseInt(dealerId),\r\n            is_system_category: false\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (insertError) throw insertError;\r\n\r\n        // Create module mappings\r\n        await updateCategoryMappings(newCategory.id, formData.modules);\r\n\r\n        toast.success(t('categories.created_successfully'));\r\n      }\r\n\r\n      setIsModalOpen(false);\r\n      resetForm();\r\n      await loadData();\r\n    } catch (error) {\r\n      console.error('Error saving category:', error);\r\n      toast.error(t('categories.error_saving'));\r\n    }\r\n  };\r\n\r\n  const updateCategoryMappings = async (categoryId: string, moduleNames: string[]) => {\r\n    // Delete existing mappings for this category\r\n    await supabase\r\n      .from('category_module_mappings')\r\n      .delete()\r\n      .eq('category_id', categoryId)\r\n      .eq('dealer_id', parseInt(dealerId));\r\n\r\n    // Insert new mappings\r\n    if (moduleNames.length > 0) {\r\n      const mappingsToInsert = moduleNames.map(module => ({\r\n        category_id: categoryId,\r\n        module: module as any,\r\n        dealer_id: parseInt(dealerId)\r\n      }));\r\n\r\n      const { error } = await supabase\r\n        .from('category_module_mappings')\r\n        .insert(mappingsToInsert);\r\n\r\n      if (error) throw error;\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (categoryId: string) => {\r\n    const category = categories.find(c => c.id === categoryId);\r\n    if (!category) return;\r\n\r\n    if (category.is_system_category) {\r\n      toast.error(t('categories.cannot_delete_system'));\r\n      return;\r\n    }\r\n\r\n    if (!canManageCategories) {\r\n      toast.error(t('categories.insufficient_permissions'));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Soft delete the category\r\n      const { error } = await supabase\r\n        .from('service_categories')\r\n        .update({ is_active: false })\r\n        .eq('id', categoryId);\r\n\r\n      if (error) throw error;\r\n\r\n      toast.success(t('categories.deleted_successfully'));\r\n      await loadData();\r\n    } catch (error) {\r\n      console.error('Error deleting category:', error);\r\n      toast.error(t('categories.error_deleting'));\r\n    }\r\n  };\r\n\r\n  const getCategoryModules = (categoryId: string) => {\r\n    return mappings\r\n      .filter(m => m.category_id === categoryId)\r\n      .map(m => m.module);\r\n  };\r\n\r\n  const filteredCategories = categories.filter(category =>\r\n    category.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    (category.description && category.description.toLowerCase().includes(searchTerm.toLowerCase()))\r\n  );\r\n\r\n  if (loading) {\r\n    return <div className=\"flex justify-center p-6\">{t('common.loading')}</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">{t('categories.title')}</h2>\r\n          <p className=\"text-muted-foreground\">{t('categories.description')}</p>\r\n        </div>\r\n        {canManageCategories && (\r\n          <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\r\n            <DialogTrigger asChild>\r\n              <Button onClick={resetForm} size=\"lg\" className=\"bg-primary hover:bg-primary/90\">\r\n                <Plus className=\"h-5 w-5 mr-2\" />\r\n                {t('categories.add_category')}\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent className=\"max-w-2xl\">\r\n              <DialogHeader>\r\n                <DialogTitle>\r\n                  {editingCategory ? t('categories.edit_category') : t('categories.add_category')}\r\n                </DialogTitle>\r\n              </DialogHeader>\r\n              \r\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"name\">{t('categories.name')} *</Label>\r\n                    <Input\r\n                      id=\"name\"\r\n                      value={formData.name}\r\n                      onChange={(e) => setFormData({ ...formData, name: e.target.value })}\r\n                      placeholder={t('categories.name_placeholder')}\r\n                      required\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"color\">{t('categories.color')}</Label>\r\n                    <div className=\"flex space-x-2\">\r\n                      <Select value={formData.color} onValueChange={(value) => setFormData({ ...formData, color: value })}>\r\n                        <SelectTrigger className=\"w-full\">\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: formData.color }} />\r\n                            <SelectValue />\r\n                          </div>\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          {DEFAULT_COLORS.map((color) => (\r\n                            <SelectItem key={color} value={color}>\r\n                              <div className=\"flex items-center space-x-2\">\r\n                                <div className=\"w-4 h-4 rounded\" style={{ backgroundColor: color }} />\r\n                                <span>{color}</span>\r\n                              </div>\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"description\">{t('categories.description')}</Label>\r\n                  <Textarea\r\n                    id=\"description\"\r\n                    value={formData.description}\r\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\r\n                    placeholder={t('categories.description_placeholder')}\r\n                    rows={3}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"icon\">{t('categories.icon')}</Label>\r\n                  <Input\r\n                    id=\"icon\"\r\n                    value={formData.icon}\r\n                    onChange={(e) => setFormData({ ...formData, icon: e.target.value })}\r\n                    placeholder={t('categories.icon_placeholder')}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"space-y-4\">\r\n                  <Label>{t('categories.available_modules')}</Label>\r\n                  <div className=\"grid grid-cols-2 gap-3\">\r\n                    {MODULE_OPTIONS.map((module) => (\r\n                      <div key={module.value} className=\"flex items-center space-x-2\">\r\n                        <Checkbox\r\n                          id={module.value}\r\n                          checked={formData.modules.includes(module.value)}\r\n                          onCheckedChange={(checked) => {\r\n                            if (checked) {\r\n                              setFormData({\r\n                                ...formData,\r\n                                modules: [...formData.modules, module.value]\r\n                              });\r\n                            } else {\r\n                              setFormData({\r\n                                ...formData,\r\n                                modules: formData.modules.filter(m => m !== module.value)\r\n                              });\r\n                            }\r\n                          }}\r\n                        />\r\n                        <Label htmlFor={module.value}>{module.label}</Label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex justify-end space-x-2\">\r\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsModalOpen(false)}>\r\n                    {t('common.cancel')}\r\n                  </Button>\r\n                  <Button type=\"submit\">\r\n                    {editingCategory ? t('common.update') : t('common.create')}\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </DialogContent>\r\n          </Dialog>\r\n        )}\r\n      </div>\r\n\r\n      {/* Search */}\r\n      <div className=\"max-w-sm\">\r\n        <Input\r\n          placeholder={t('categories.search_placeholder')}\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          className=\"w-full\"\r\n        />\r\n      </div>\r\n\r\n      {/* Categories Grid or Empty State */}\r\n      {filteredCategories.length === 0 ? (\r\n        <div className=\"text-center py-12\">\r\n          <Tag className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\r\n          <h3 className=\"text-lg font-semibold mb-2\">{t('categories.no_categories_found')}</h3>\r\n          <p className=\"text-muted-foreground mb-6\">{t('categories.no_categories_description')}</p>\r\n          {canManageCategories && (\r\n            <Button onClick={() => { resetForm(); setIsModalOpen(true); }}>\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              {t('categories.add_category')}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n          {filteredCategories.map((category) => {\r\n          const categoryModules = getCategoryModules(category.id);\r\n          \r\n          return (\r\n            <Card key={category.id} className=\"relative hover:shadow-md transition-shadow\">\r\n              <CardHeader className=\"pb-3\">\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <div \r\n                      className=\"w-5 h-5 rounded-full border-2 border-white shadow-sm\" \r\n                      style={{ backgroundColor: category.color || undefined }}\r\n                    />\r\n                    <div>\r\n                      <CardTitle className=\"text-lg flex items-center gap-2\">\r\n                        {category.name}\r\n                        {category.is_system_category && (\r\n                          <Badge variant=\"secondary\" className=\"text-xs\">\r\n                            <Settings className=\"h-3 w-3 mr-1\" />\r\n                            {t('categories.system')}\r\n                          </Badge>\r\n                        )}\r\n                      </CardTitle>\r\n                    </div>\r\n                  </div>\r\n                  {canManageCategories && !category.is_system_category && (\r\n                    <div className=\"flex space-x-1 opacity-70 hover:opacity-100 transition-opacity\">\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => openEditModal(category)}\r\n                        className=\"h-8 w-8 p-0 hover:bg-primary/10\"\r\n                      >\r\n                        <Edit2 className=\"h-4 w-4 text-primary\" />\r\n                      </Button>\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => handleDelete(category.id)}\r\n                        className=\"h-8 w-8 p-0 hover:bg-destructive/10\"\r\n                      >\r\n                        <Trash2 className=\"h-4 w-4 text-destructive\" />\r\n                      </Button>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                {category.description && (\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    {category.description}\r\n                  </p>\r\n                )}\r\n\r\n                <div>\r\n                  <Label className=\"text-xs font-medium text-muted-foreground\">\r\n                    {t('categories.available_in_modules')}\r\n                  </Label>\r\n                  <div className=\"flex flex-wrap gap-1 mt-1\">\r\n                    {categoryModules.length > 0 ? (\r\n                      categoryModules.map((module) => (\r\n                        <Badge key={module} variant=\"outline\" className=\"text-xs\">\r\n                          {MODULE_OPTIONS.find(m => m.value === module)?.label || module}\r\n                        </Badge>\r\n                      ))\r\n                    ) : (\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        {t('categories.no_modules_assigned')}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"text-xs text-muted-foreground\">\r\n                  {t('categories.created_at', { \r\n                    date: new Date(category.created_at).toLocaleDateString() \r\n                  })}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n          })}\r\n        </div>\r\n      )}\r\n\r\n      {filteredCategories.length === 0 && (\r\n        <div className=\"text-center py-8 space-y-4\">\r\n          <Tag className=\"h-12 w-12 text-muted-foreground mx-auto\" />\r\n          <div>\r\n            <h3 className=\"text-lg font-semibold\">{t('categories.no_categories_found')}</h3>\r\n            <p className=\"text-muted-foreground\">{t('categories.no_categories_description')}</p>\r\n            {canManageCategories && (\r\n              <Button className=\"mt-4\" onClick={() => setIsModalOpen(true)}>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                {t('categories.add_first_category')}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dealer\\DealerGroups.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dealer\\DealerModules.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dealer\\DealerOverview.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1977,1980],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1977,1980],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2793,2796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2793,2796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3777,3780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3777,3780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  TrendingUp, \r\n  Calendar, \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle, \r\n  AlertCircle,\r\n  Car,\r\n  Wrench,\r\n  RefreshCw,\r\n  Droplets\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface DealerOverviewProps {\r\n  dealerId: string;\r\n}\r\n\r\ninterface KPIData {\r\n  total_orders: number;\r\n  orders_today: number;\r\n  pending_orders: number;\r\n  in_progress_orders: number;\r\n  completed_orders: number;\r\n  cancelled_orders: number;\r\n  avg_sla_hours: number;\r\n  sla_compliance_rate: number;\r\n}\r\n\r\ninterface OrdersByType {\r\n  sales: number;\r\n  service: number;\r\n  recon: number;\r\n  carwash: number;\r\n}\r\n\r\nexport const DealerOverview: React.FC<DealerOverviewProps> = ({ dealerId }) => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [kpis, setKpis] = useState<KPIData | null>(null);\r\n  const [ordersByType, setOrdersByType] = useState<OrdersByType>({\r\n    sales: 0,\r\n    service: 0,\r\n    recon: 0,\r\n    carwash: 0\r\n  });\r\n  const [topServices, setTopServices] = useState<Array<{ name: string; count: number }>>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchKPIs();\r\n    fetchOrdersByType();\r\n    fetchTopServices();\r\n  }, [dealerId, fetchKPIs, fetchOrdersByType, fetchTopServices]);\r\n\r\n  const fetchKPIs = useCallback(async () => {\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_dealer_kpis', {\r\n        p_dealer_id: parseInt(dealerId)\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      if (data && data.length > 0 && data[0]) {\r\n        setKpis(data[0]);\r\n      }\r\n    } catch (error: any) {\r\n      console.error('Error fetching KPIs:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('dealer.overview.error_loading_kpis'),\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  }, [dealerId, t, toast]);\r\n\r\n  const fetchOrdersByType = useCallback(async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .select('order_type')\r\n        .eq('dealer_id', parseInt(dealerId));\r\n\r\n      if (error) throw error;\r\n\r\n      const counts = data.reduce((acc: OrdersByType, order) => {\r\n        acc[order.order_type as keyof OrdersByType] = (acc[order.order_type as keyof OrdersByType] || 0) + 1;\r\n        return acc;\r\n      }, { sales: 0, service: 0, recon: 0, carwash: 0 });\r\n\r\n      setOrdersByType(counts);\r\n    } catch (error: any) {\r\n      console.error('Error fetching orders by type:', error);\r\n    }\r\n  }, [dealerId]);\r\n\r\n  const fetchTopServices = useCallback(async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .select('services')\r\n        .eq('dealer_id', parseInt(dealerId))\r\n        .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString());\r\n\r\n      if (error) throw error;\r\n\r\n      const serviceCounts: Record<string, number> = {};\r\n\r\n      data.forEach(order => {\r\n        if (order.services && Array.isArray(order.services)) {\r\n          order.services.forEach((service: string) => {\r\n            serviceCounts[service] = (serviceCounts[service] || 0) + 1;\r\n          });\r\n        }\r\n      });\r\n\r\n      const topThree = Object.entries(serviceCounts)\r\n        .sort(([, a], [, b]) => b - a)\r\n        .slice(0, 3)\r\n        .map(([name, count]) => ({ name, count }));\r\n\r\n      setTopServices(topThree);\r\n    } catch (error: any) {\r\n      console.error('Error fetching top services:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dealerId]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          {[...Array(8)].map((_, i) => (\r\n            <Card key={i} className=\"animate-pulse\">\r\n              <CardHeader className=\"pb-2\">\r\n                <div className=\"h-4 bg-muted rounded w-3/4\"></div>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"h-8 bg-muted rounded w-1/2\"></div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* KPI Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              {t('dealer.overview.total_orders')}\r\n            </CardTitle>\r\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{kpis?.total_orders || 0}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              {t('dealer.overview.orders_today')}\r\n            </CardTitle>\r\n            <Calendar className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{kpis?.orders_today || 0}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              {t('dealer.overview.avg_sla_hours')}\r\n            </CardTitle>\r\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {kpis?.avg_sla_hours ? `${Math.round(kpis.avg_sla_hours)}h` : 'N/A'}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              {t('dealer.overview.sla_compliance')}\r\n            </CardTitle>\r\n            <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">\r\n              {kpis?.sla_compliance_rate ? `${Math.round(kpis.sla_compliance_rate)}%` : 'N/A'}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Order Status Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              {t('dealer.overview.pending_orders')}\r\n            </CardTitle>\r\n            <AlertCircle className=\"h-4 w-4 text-yellow-500\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{kpis?.pending_orders || 0}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              {t('dealer.overview.in_progress_orders')}\r\n            </CardTitle>\r\n            <Clock className=\"h-4 w-4 text-blue-500\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{kpis?.in_progress_orders || 0}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              {t('dealer.overview.completed_orders')}\r\n            </CardTitle>\r\n            <CheckCircle className=\"h-4 w-4 text-green-500\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{kpis?.completed_orders || 0}</div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\r\n            <CardTitle className=\"text-sm font-medium\">\r\n              {t('dealer.overview.cancelled_orders')}\r\n            </CardTitle>\r\n            <XCircle className=\"h-4 w-4 text-red-500\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"text-2xl font-bold\">{kpis?.cancelled_orders || 0}</div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Orders by Module and Top Services */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>{t('dealer.overview.orders_by_module')}</CardTitle>\r\n            <CardDescription>\r\n              {t('dealer.overview.orders_by_module_desc')}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <Button \r\n                variant=\"outline\" \r\n                className=\"flex items-center justify-between p-4 h-auto\"\r\n              >\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Car className=\"h-5 w-5 text-blue-500\" />\r\n                  <span>{t('dealer.overview.sales')}</span>\r\n                </div>\r\n                <Badge variant=\"secondary\">{ordersByType.sales}</Badge>\r\n              </Button>\r\n\r\n              <Button \r\n                variant=\"outline\" \r\n                className=\"flex items-center justify-between p-4 h-auto\"\r\n              >\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Wrench className=\"h-5 w-5 text-green-500\" />\r\n                  <span>{t('dealer.overview.service')}</span>\r\n                </div>\r\n                <Badge variant=\"secondary\">{ordersByType.service}</Badge>\r\n              </Button>\r\n\r\n              <Button \r\n                variant=\"outline\" \r\n                className=\"flex items-center justify-between p-4 h-auto\"\r\n              >\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <RefreshCw className=\"h-5 w-5 text-purple-500\" />\r\n                  <span>{t('dealer.overview.recon')}</span>\r\n                </div>\r\n                <Badge variant=\"secondary\">{ordersByType.recon}</Badge>\r\n              </Button>\r\n\r\n              <Button \r\n                variant=\"outline\" \r\n                className=\"flex items-center justify-between p-4 h-auto\"\r\n              >\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Droplets className=\"h-5 w-5 text-cyan-500\" />\r\n                  <span>{t('dealer.overview.carwash')}</span>\r\n                </div>\r\n                <Badge variant=\"secondary\">{ordersByType.carwash}</Badge>\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>{t('dealer.overview.top_services')}</CardTitle>\r\n            <CardDescription>\r\n              {t('dealer.overview.top_services_desc')}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-3\">\r\n              {topServices.length > 0 ? (\r\n                topServices.map((service, index) => (\r\n                  <div key={service.name} className=\"flex items-center justify-between\">\r\n                    <div className=\"flex items-center space-x-3\">\r\n                      <div className=\"w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-sm font-medium\">\r\n                        {index + 1}\r\n                      </div>\r\n                      <span className=\"font-medium\">{service.name}</span>\r\n                    </div>\r\n                    <Badge variant=\"outline\">{service.count}</Badge>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <p className=\"text-muted-foreground text-center py-4\">\r\n                  {t('dealer.overview.no_services_data')}\r\n                </p>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dealer\\DealerServices.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dealer\\DealerUsers.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3185,3188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3185,3188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3841,3844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3841,3844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4441,4444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4441,4444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5410,5413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5410,5413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableHead, \r\n  TableHeader, \r\n  TableRow \r\n} from '@/components/ui/table';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { \r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { \r\n  Plus, \r\n  Edit, \r\n  UserX, \r\n  UserCheck,\r\n  MoreHorizontal,\r\n  Users,\r\n  Mail,\r\n  Shield\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { safeFormatDateOnly } from '@/utils/dateUtils';\r\nimport { DealerInvitationModal } from '@/components/dealerships/DealerInvitationModal';\r\n\r\ninterface DealerUsersProps {\r\n  dealerId: string;\r\n}\r\n\r\ninterface DealerMembership {\r\n  id: string;\r\n  is_active: boolean;\r\n  joined_at: string;\r\n  profiles: {\r\n    first_name: string | null;\r\n    last_name: string | null;\r\n    email: string;\r\n  };\r\n  dealer_membership_groups: Array<{\r\n    group_id: string;\r\n    dealer_groups: {\r\n      id: string;\r\n      name: string;\r\n      slug: string;\r\n    };\r\n  }>;\r\n}\r\n\r\ninterface DealerGroup {\r\n  id: string;\r\n  name: string;\r\n  slug: string;\r\n}\r\n\r\nexport const DealerUsers: React.FC<DealerUsersProps> = ({ dealerId }) => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [users, setUsers] = useState<DealerMembership[]>([]);\r\n  const [groups, setGroups] = useState<DealerGroup[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showInviteModal, setShowInviteModal] = useState(false);\r\n  const [showManageGroupsModal, setShowManageGroupsModal] = useState(false);\r\n  const [selectedUser, setSelectedUser] = useState<DealerMembership | null>(null);\r\n  const [selectedGroupIds, setSelectedGroupIds] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n    fetchGroups();\r\n  }, [dealerId, fetchUsers, fetchGroups]);\r\n\r\n  const fetchUsers = useCallback(async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('dealer_memberships')\r\n        .select(`\r\n          id,\r\n          is_active,\r\n          joined_at,\r\n          profiles(first_name, last_name, email),\r\n          dealer_membership_groups(\r\n            group_id,\r\n            dealer_groups(id, name, slug)\r\n          )\r\n        `)\r\n        .eq('dealer_id', parseInt(dealerId))\r\n        .order('joined_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setUsers(data || []);\r\n    } catch (error: any) {\r\n      console.error('Error fetching users:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('dealer.users.error_loading_users'),\r\n        variant: 'destructive'\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dealerId, t, toast]);\r\n\r\n  const fetchGroups = useCallback(async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('dealer_groups')\r\n        .select('id, name, slug')\r\n        .eq('dealer_id', parseInt(dealerId))\r\n        .eq('is_active', true)\r\n        .order('name');\r\n\r\n      if (error) throw error;\r\n      setGroups(data || []);\r\n    } catch (error: any) {\r\n      console.error('Error fetching groups:', error);\r\n    }\r\n  }, [dealerId]);\r\n\r\n  const handleToggleUserStatus = async (user: DealerMembership) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('dealer_memberships')\r\n        .update({ is_active: !user.is_active })\r\n        .eq('id', user.id);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: user.is_active \r\n          ? t('dealer.users.user_deactivated')\r\n          : t('dealer.users.user_activated')\r\n      });\r\n\r\n      fetchUsers();\r\n    } catch (error: any) {\r\n      console.error('Error updating user status:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('dealer.users.error_updating_status'),\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleManageUserGroups = (user: DealerMembership) => {\r\n    setSelectedUser(user);\r\n    setSelectedGroupIds(\r\n      user.dealer_membership_groups.map(mg => mg.dealer_groups.id)\r\n    );\r\n    setShowManageGroupsModal(true);\r\n  };\r\n\r\n  const handleSaveUserGroups = async () => {\r\n    if (!selectedUser) return;\r\n\r\n    try {\r\n      const { error } = await supabase.rpc('set_membership_groups', {\r\n        p_membership_id: selectedUser.id,\r\n        p_group_ids: selectedGroupIds\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('dealer.users.groups_updated')\r\n      });\r\n\r\n      setShowManageGroupsModal(false);\r\n      fetchUsers();\r\n    } catch (error: any) {\r\n      console.error('Error updating user groups:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('dealer.users.error_updating_groups'),\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleGroupToggle = (groupId: string) => {\r\n    setSelectedGroupIds(prev =>\r\n      prev.includes(groupId)\r\n        ? prev.filter(id => id !== groupId)\r\n        : [...prev, groupId]\r\n    );\r\n  };\r\n\r\n  const getFullName = (user: DealerMembership) => {\r\n    if (!user.profiles) {\r\n      return t('common.unnamed');\r\n    }\r\n    const { first_name, last_name } = user.profiles;\r\n    if (first_name && last_name) {\r\n      return `${first_name} ${last_name}`;\r\n    }\r\n    return first_name || last_name || t('common.unnamed');\r\n  };\r\n\r\n  const getInitials = (user: DealerMembership) => {\r\n    if (!user.profiles) {\r\n      return '??';\r\n    }\r\n    const { first_name, last_name, email } = user.profiles;\r\n    const initials = `${first_name?.[0] || ''}${last_name?.[0] || ''}`.toUpperCase();\r\n    return initials || email[0].toUpperCase();\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"animate-pulse\">\r\n          <div className=\"h-8 bg-muted rounded w-1/4 mb-4\"></div>\r\n          <div className=\"space-y-2\">\r\n            {[...Array(3)].map((_, i) => (\r\n              <div key={i} className=\"h-16 bg-muted rounded\"></div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">{t('dealer.users.title')}</h2>\r\n          <p className=\"text-muted-foreground\">{t('dealer.users.description')}</p>\r\n        </div>\r\n        <Button onClick={() => setShowInviteModal(true)}>\r\n          <Plus className=\"h-4 w-4 mr-2\" />\r\n          {t('dealer.users.invite_user')}\r\n        </Button>\r\n      </div>\r\n\r\n      <Card>\r\n        <CardContent>\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                <TableHead>{t('dealer.users.table.user')}</TableHead>\r\n                <TableHead>{t('dealer.users.table.email')}</TableHead>\r\n                <TableHead>{t('dealer.users.table.status')}</TableHead>\r\n                <TableHead>{t('dealer.users.table.groups')}</TableHead>\r\n                <TableHead>{t('dealer.users.table.joined')}</TableHead>\r\n                <TableHead className=\"w-[70px]\"></TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {users.length === 0 ? (\r\n                <TableRow>\r\n                  <TableCell colSpan={6} className=\"text-center py-8\">\r\n                    <div className=\"flex flex-col items-center space-y-2\">\r\n                      <Users className=\"h-8 w-8 text-muted-foreground\" />\r\n                      <p className=\"text-muted-foreground\">{t('dealer.users.no_users')}</p>\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ) : (\r\n                users.map((user) => (\r\n                  <TableRow key={user.id}>\r\n                    <TableCell>\r\n                      <div className=\"flex items-center space-x-3\">\r\n                        <Avatar className=\"h-8 w-8\">\r\n                          <AvatarImage src=\"\" />\r\n                          <AvatarFallback className=\"text-xs\">\r\n                            {getInitials(user)}\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                        <span className=\"font-medium\">{getFullName(user)}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>{user.profiles?.email || t('common.no_email')}</TableCell>\r\n                    <TableCell>\r\n                      <Badge variant={user.is_active ? \"default\" : \"secondary\"}>\r\n                        {user.is_active ? t('common.active') : t('common.inactive')}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <div className=\"flex flex-wrap gap-1\">\r\n                        {user.dealer_membership_groups.map((mg) => (\r\n                          <Badge key={mg.group_id} variant=\"outline\" className=\"text-xs\">\r\n                            {mg.dealer_groups.name}\r\n                          </Badge>\r\n                        ))}\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {safeFormatDateOnly(user.joined_at)}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <DropdownMenu>\r\n                        <DropdownMenuTrigger asChild>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <MoreHorizontal className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </DropdownMenuTrigger>\r\n                        <DropdownMenuContent align=\"end\">\r\n                          <DropdownMenuItem onClick={() => handleManageUserGroups(user)}>\r\n                            <Shield className=\"h-4 w-4 mr-2\" />\r\n                            {t('dealer.users.manage_groups')}\r\n                          </DropdownMenuItem>\r\n                          <DropdownMenuItem onClick={() => handleToggleUserStatus(user)}>\r\n                            {user.is_active ? (\r\n                              <>\r\n                                <UserX className=\"h-4 w-4 mr-2\" />\r\n                                {t('dealer.users.deactivate')}\r\n                              </>\r\n                            ) : (\r\n                              <>\r\n                                <UserCheck className=\"h-4 w-4 mr-2\" />\r\n                                {t('dealer.users.activate')}\r\n                              </>\r\n                            )}\r\n                          </DropdownMenuItem>\r\n                        </DropdownMenuContent>\r\n                      </DropdownMenu>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Invitation Modal */}\r\n      <DealerInvitationModal\r\n        isOpen={showInviteModal}\r\n        onClose={() => setShowInviteModal(false)}\r\n        dealerId={parseInt(dealerId)} // Fixed dealership from route\r\n        onInvitationSent={fetchUsers}\r\n      />\r\n\r\n      {/* Manage User Groups Modal */}\r\n      <Dialog open={showManageGroupsModal} onOpenChange={setShowManageGroupsModal}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>{t('dealer.users.manage_groups')}</DialogTitle>\r\n            <DialogDescription>\r\n              {selectedUser && (\r\n                <>\r\n                  {t('dealer.users.manage_groups_desc')} <strong>{getFullName(selectedUser)}</strong>\r\n                </>\r\n              )}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-4\">\r\n            {groups.map((group) => (\r\n              <div key={group.id} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\r\n                <Checkbox\r\n                  id={`group-${group.id}`}\r\n                  checked={selectedGroupIds.includes(group.id)}\r\n                  onCheckedChange={() => handleGroupToggle(group.id)}\r\n                />\r\n                <div className=\"flex-1\">\r\n                  <Label htmlFor={`group-${group.id}`} className=\"font-medium\">\r\n                    {group.name}\r\n                  </Label>\r\n                  <p className=\"text-sm text-muted-foreground\">{group.slug}</p>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setShowManageGroupsModal(false)}>\r\n              {t('common.cancel')}\r\n            </Button>\r\n            <Button onClick={handleSaveUserGroups}>\r\n              {t('common.save')}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dealerships\\DealerInvitationModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3937,3940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3937,3940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Loader2, Mail, UserPlus, Send, Building2 } from 'lucide-react';\r\n\r\ninterface DealerInvitationModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  dealerId?: number | null; // Optional now\r\n  onInvitationSent?: () => void;\r\n}\r\n\r\nconst DEALER_ROLES = [\r\n  { \r\n    value: 'dealer_user', \r\n    key: 'dealer_user',\r\n    description: 'Acceso de lectura a módulos básicos' \r\n  },\r\n  { \r\n    value: 'dealer_salesperson', \r\n    key: 'dealer_salesperson',\r\n    description: 'Gestión de órdenes de venta' \r\n  },\r\n  { \r\n    value: 'dealer_service_advisor', \r\n    key: 'dealer_service_advisor',\r\n    description: 'Gestión de órdenes de servicio' \r\n  },\r\n  { \r\n    value: 'dealer_sales_manager', \r\n    key: 'dealer_sales_manager',\r\n    description: 'Administración completa de ventas' \r\n  },\r\n  { \r\n    value: 'dealer_service_manager', \r\n    key: 'dealer_service_manager',\r\n    description: 'Administración completa de servicio' \r\n  },\r\n  { \r\n    value: 'dealer_manager', \r\n    key: 'dealer_manager',\r\n    description: 'Administración general del concesionario' \r\n  },\r\n  { \r\n    value: 'dealer_admin', \r\n    key: 'dealer_admin',\r\n    description: 'Acceso completo al concesionario' \r\n  },\r\n];\r\n\r\nexport const DealerInvitationModal: React.FC<DealerInvitationModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  dealerId,\r\n  onInvitationSent,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const { user } = useAuth();\r\n  const { toast } = useToast();\r\n  const { dealerships, loading: dealershipsLoading } = useAccessibleDealerships();\r\n  \r\n  const [email, setEmail] = useState('');\r\n  const [selectedRole, setSelectedRole] = useState<string>('');\r\n  const [selectedDealerId, setSelectedDealerId] = useState<number | null>(dealerId || null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!email || !selectedRole || !selectedDealerId) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('messages.required_field'),\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!user) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('invitations.accept.auth_required_desc'),\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n\r\n    try {\r\n      // Create dealer invitation using RPC function\r\n      const { data: invitationToken, error } = await supabase\r\n        .rpc('create_dealer_invitation', {\r\n          p_dealer_id: selectedDealerId,\r\n          p_email: email,\r\n          p_role_name: selectedRole,\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      // In a real application, you would send an email with the invitation link\r\n      const invitationLink = `${window.location.origin}/invitation/${invitationToken}`;\r\n      \r\n      console.log('Invitation created:', invitationLink);\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('invitations.invitation_sent'),\r\n      });\r\n\r\n      // Reset form\r\n      setEmail('');\r\n      setSelectedRole('');\r\n      setSelectedDealerId(dealerId || null);\r\n      onInvitationSent?.();\r\n      onClose();\r\n    } catch (error: any) {\r\n      console.error('Error sending invitation:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('messages.error'),\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (!loading) {\r\n      setEmail('');\r\n      setSelectedRole('');\r\n      setSelectedDealerId(dealerId || null);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const getDealershipName = () => {\r\n    if (!selectedDealerId) return 'No dealership selected';\r\n    const dealership = dealerships.find(d => d.id === selectedDealerId);\r\n    return dealership?.name || `Dealership #${selectedDealerId}`;\r\n  };\r\n\r\n  const selectedRoleInfo = DEALER_ROLES.find(role => role.value === selectedRole);\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={handleClose}>\r\n      <DialogContent className=\"sm:max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <UserPlus className=\"h-5 w-5\" />\r\n            {t('invitations.send_invitation')}\r\n          </DialogTitle>\r\n          <DialogDescription>\r\n            {selectedDealerId \r\n              ? t('invitations.invite_user_to', { dealership: getDealershipName() })\r\n              : 'Invite a user to join a dealership'\r\n            }\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n          {/* Dealership Selection */}\r\n          {dealerId ? (\r\n            <div className=\"space-y-2\">\r\n              <Label>{t('dealerships.dealership')} *</Label>\r\n              <div className=\"flex items-center gap-2 p-3 bg-muted/50 rounded-lg\">\r\n                <Building2 className=\"h-4 w-4 text-muted-foreground\" />\r\n                <span className=\"font-medium\">{getDealershipName()}</span>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"dealership\">{t('dealerships.select_dealership')} *</Label>\r\n              <Select \r\n                value={selectedDealerId?.toString() || ''} \r\n                onValueChange={(value) => setSelectedDealerId(parseInt(value))}\r\n                disabled={loading || dealershipsLoading}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder={t('dealerships.select_dealership')} />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {dealerships.map((dealership) => (\r\n                    <SelectItem key={dealership.id} value={dealership.id.toString()}>\r\n                      {dealership.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor=\"email\">{t('invitations.email')} *</Label>\r\n            <div className=\"relative\">\r\n              <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                placeholder={t('invitations.email_placeholder')}\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                className=\"pl-10\"\r\n                disabled={loading}\r\n                required\r\n              />\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n              El usuario recibirá un enlace de invitación en este email\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor=\"role\">{t('invitations.role')} *</Label>\r\n            <Select value={selectedRole} onValueChange={setSelectedRole} disabled={loading}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder={t('invitations.select_role')} />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {DEALER_ROLES.map((role) => (\r\n                  <SelectItem key={role.value} value={role.value}>\r\n                    <div className=\"flex flex-col\">\r\n                      <span className=\"font-medium\">{t(`invitations.${role.key}`)}</span>\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        {role.description}\r\n                      </span>\r\n                    </div>\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n            {selectedRoleInfo && (\r\n              <div className=\"p-3 bg-muted/50 rounded-lg\">\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  <strong>{t(`invitations.${selectedRoleInfo.key}`)}:</strong> {selectedRoleInfo.description}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"outline\"\r\n              onClick={handleClose}\r\n              disabled={loading}\r\n            >\r\n              {t('common.cancel')}\r\n            </Button>\r\n            <Button type=\"submit\" disabled={loading || !email || !selectedRole || !selectedDealerId}>\r\n              {loading ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  {t('invitations.sending')}\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Send className=\"mr-2 h-4 w-4\" />\r\n                  {t('invitations.send')}\r\n                </>\r\n              )}\r\n            </Button>\r\n          </DialogFooter>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dealerships\\DealershipModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2882,2885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2882,2885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Dealership, DealershipFormData, DealershipStatus, SubscriptionPlan } from '@/types/dealership';\r\nimport { toast } from 'sonner';\r\nimport { Building2, Palette } from 'lucide-react';\r\n\r\ninterface DealershipModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSuccess: () => void;\r\n  dealership?: Dealership | null;\r\n}\r\n\r\nexport function DealershipModal({ isOpen, onClose, onSuccess, dealership }: DealershipModalProps) {\r\n  const { t } = useTranslation();\r\n  const [loading, setLoading] = useState(false);\r\n  const isEditing = !!dealership;\r\n\r\n  const [formData, setFormData] = useState<DealershipFormData>({\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    address: '',\r\n    city: '',\r\n    state: '',\r\n    zip_code: '',\r\n    country: 'US',\r\n    website: '',\r\n    tax_number: '',\r\n    logo_url: '',\r\n    primary_color: '#3B82F6',\r\n    status: 'active',\r\n    subscription_plan: 'basic',\r\n    max_users: 5,\r\n    notes: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (dealership) {\r\n      setFormData({\r\n        name: dealership.name,\r\n        email: dealership.email,\r\n        phone: dealership.phone || '',\r\n        address: dealership.address || '',\r\n        city: dealership.city || '',\r\n        state: dealership.state || '',\r\n        zip_code: dealership.zip_code || '',\r\n        country: dealership.country || 'US',\r\n        website: dealership.website || '',\r\n        tax_number: dealership.tax_number || '',\r\n        logo_url: dealership.logo_url || '',\r\n        primary_color: dealership.primary_color,\r\n        status: dealership.status,\r\n        subscription_plan: dealership.subscription_plan,\r\n        max_users: dealership.max_users,\r\n        notes: dealership.notes || '',\r\n      });\r\n    } else {\r\n      setFormData({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        address: '',\r\n        city: '',\r\n        state: '',\r\n        zip_code: '',\r\n        country: 'US',\r\n        website: '',\r\n        tax_number: '',\r\n        logo_url: '',\r\n        primary_color: '#3B82F6',\r\n        status: 'active',\r\n        subscription_plan: 'basic',\r\n        max_users: 5,\r\n        notes: '',\r\n      });\r\n    }\r\n  }, [dealership]);\r\n\r\n  const handleInputChange = (field: keyof DealershipFormData, value: any) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const onSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    // Basic validation\r\n    if (!formData.name.trim() || !formData.email.trim()) {\r\n      toast.error(t('messages.required_field'));\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      if (isEditing && dealership) {\r\n        const { error } = await supabase\r\n          .from('dealerships')\r\n          .update(formData)\r\n          .eq('id', dealership.id);\r\n\r\n        if (error) throw error;\r\n        toast.success(t('messages.saved'));\r\n      } else {\r\n        const { error } = await supabase\r\n          .from('dealerships')\r\n          .insert(formData);\r\n\r\n        if (error) throw error;\r\n        toast.success(t('messages.saved'));\r\n      }\r\n\r\n      onSuccess();\r\n    } catch (error) {\r\n      console.error('Error saving dealership:', error);\r\n      toast.error(t('messages.error'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const maxUsersByPlan = {\r\n    basic: 5,\r\n    premium: 25,\r\n    enterprise: 100,\r\n  };\r\n\r\n  const handlePlanChange = (plan: SubscriptionPlan) => {\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      subscription_plan: plan,\r\n      max_users: maxUsersByPlan[plan]\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <Building2 className=\"h-5 w-5\" />\r\n            {isEditing ? t('dealerships.edit') : t('dealerships.add_new')}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <div className=\"max-w-3xl mx-auto\">\r\n          <form onSubmit={onSubmit} className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n            {/* Left Column */}\r\n            <div className=\"space-y-6\">\r\n              {/* Business Information */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-4\">{t('dealerships.business_info')}</h3>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"name\" className=\"block mb-3\">{t('dealerships.name')} *</Label>\r\n                    <Input\r\n                      id=\"name\"\r\n                      value={formData.name}\r\n                      onChange={(e) => handleInputChange('name', e.target.value)}\r\n                      placeholder=\"Enter dealership name\"\r\n                      required\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"tax_number\" className=\"block mb-3\">{t('dealerships.tax_number')}</Label>\r\n                    <Input\r\n                      id=\"tax_number\"\r\n                      value={formData.tax_number}\r\n                      onChange={(e) => handleInputChange('tax_number', e.target.value)}\r\n                      placeholder=\"Enter tax number\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"website\" className=\"block mb-3\">{t('dealerships.website')}</Label>\r\n                    <Input\r\n                      id=\"website\"\r\n                      value={formData.website}\r\n                      onChange={(e) => handleInputChange('website', e.target.value)}\r\n                      placeholder=\"https://example.com\"\r\n                      type=\"url\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <Separator />\r\n\r\n              {/* Contact Information */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-4\">{t('dealerships.contact_info')}</h3>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"email\" className=\"block mb-3\">{t('dealerships.email')} *</Label>\r\n                    <Input\r\n                      id=\"email\"\r\n                      value={formData.email}\r\n                      onChange={(e) => handleInputChange('email', e.target.value)}\r\n                      placeholder=\"Enter email address\"\r\n                      type=\"email\"\r\n                      required\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"phone\" className=\"block mb-3\">{t('dealerships.phone')}</Label>\r\n                    <Input\r\n                      id=\"phone\"\r\n                      value={formData.phone}\r\n                      onChange={(e) => handleInputChange('phone', e.target.value)}\r\n                      placeholder=\"Enter phone number\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <Separator />\r\n\r\n              {/* Subscription Settings */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-4\">{t('dealerships.subscription_settings')}</h3>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"subscription_plan\" className=\"block mb-3\">{t('dealerships.subscription_plan')}</Label>\r\n                    <Select value={formData.subscription_plan} onValueChange={handlePlanChange}>\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"basic\">{t('dealerships.basic_plan')}</SelectItem>\r\n                        <SelectItem value=\"premium\">{t('dealerships.premium_plan')}</SelectItem>\r\n                        <SelectItem value=\"enterprise\">{t('dealerships.enterprise_plan')}</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"max_users\" className=\"block mb-3\">{t('dealerships.max_users')}</Label>\r\n                    <Input\r\n                      id=\"max_users\"\r\n                      value={formData.max_users}\r\n                      onChange={(e) => handleInputChange('max_users', parseInt(e.target.value))}\r\n                      type=\"number\"\r\n                      min=\"1\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"status\" className=\"block mb-3\">{t('dealerships.status')}</Label>\r\n                    <Select value={formData.status} onValueChange={(value: DealershipStatus) => handleInputChange('status', value)}>\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"active\">{t('dealerships.active')}</SelectItem>\r\n                        <SelectItem value=\"inactive\">{t('dealerships.inactive')}</SelectItem>\r\n                        <SelectItem value=\"suspended\">{t('dealerships.suspended')}</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Right Column */}\r\n            <div className=\"space-y-6\">\r\n              {/* Address Information */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-4\">{t('dealerships.address_info')}</h3>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"address\" className=\"block mb-3\">{t('dealerships.address')}</Label>\r\n                    <Input\r\n                      id=\"address\"\r\n                      value={formData.address}\r\n                      onChange={(e) => handleInputChange('address', e.target.value)}\r\n                      placeholder=\"Enter street address\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"city\" className=\"block mb-3\">{t('dealerships.city')}</Label>\r\n                      <Input\r\n                        id=\"city\"\r\n                        value={formData.city}\r\n                        onChange={(e) => handleInputChange('city', e.target.value)}\r\n                        placeholder=\"Enter city\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Label htmlFor=\"state\" className=\"block mb-3\">{t('dealerships.state')}</Label>\r\n                      <Input\r\n                        id=\"state\"\r\n                        value={formData.state}\r\n                        onChange={(e) => handleInputChange('state', e.target.value)}\r\n                        placeholder=\"Enter state\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"zip_code\" className=\"block mb-3\">{t('dealerships.zip')}</Label>\r\n                      <Input\r\n                        id=\"zip_code\"\r\n                        value={formData.zip_code}\r\n                        onChange={(e) => handleInputChange('zip_code', e.target.value)}\r\n                        placeholder=\"Enter ZIP code\"\r\n                      />\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Label htmlFor=\"country\" className=\"block mb-3\">{t('dealerships.country')}</Label>\r\n                      <Select value={formData.country} onValueChange={(value) => handleInputChange('country', value)}>\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"US\">United States</SelectItem>\r\n                          <SelectItem value=\"CA\">Canada</SelectItem>\r\n                          <SelectItem value=\"MX\">Mexico</SelectItem>\r\n                          <SelectItem value=\"BR\">Brazil</SelectItem>\r\n                          <SelectItem value=\"ES\">Spain</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <Separator />\r\n\r\n              {/* Branding */}\r\n              <div>\r\n                <h3 className=\"text-lg font-semibold mb-4\">{t('dealerships.branding')}</h3>\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"logo_url\" className=\"block mb-3\">{t('dealerships.logo')}</Label>\r\n                    <Input\r\n                      id=\"logo_url\"\r\n                      value={formData.logo_url}\r\n                      onChange={(e) => handleInputChange('logo_url', e.target.value)}\r\n                      placeholder=\"Enter logo URL\"\r\n                      type=\"url\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"primary_color\" className=\"flex items-center gap-2 mb-3\">\r\n                      <Palette className=\"h-4 w-4\" />\r\n                      {t('dealerships.primary_color')}\r\n                    </Label>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Input\r\n                        type=\"color\"\r\n                        value={formData.primary_color}\r\n                        onChange={(e) => handleInputChange('primary_color', e.target.value)}\r\n                        className=\"w-16 h-10 p-1 border rounded\"\r\n                      />\r\n                      <Input\r\n                        value={formData.primary_color}\r\n                        onChange={(e) => handleInputChange('primary_color', e.target.value)}\r\n                        placeholder=\"#3B82F6\"\r\n                        className=\"flex-1\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <Separator />\r\n\r\n              {/* Notes */}\r\n              <div>\r\n                <Label htmlFor=\"notes\" className=\"block mb-3\">{t('dealerships.notes')}</Label>\r\n                <Textarea\r\n                  id=\"notes\"\r\n                  value={formData.notes}\r\n                  onChange={(e) => handleInputChange('notes', e.target.value)}\r\n                  placeholder=\"Enter internal notes or comments\"\r\n                  className=\"min-h-[100px]\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex justify-end gap-4 pt-4 border-t\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\r\n              {t('common.cancel')}\r\n            </Button>\r\n            <Button type=\"submit\" disabled={loading}>\r\n              {loading ? t('common.loading') : t('common.save')}\r\n            </Button>\r\n          </div>\r\n          </form>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dealerships\\DealershipStatsCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1499,1502],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1499,1502],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Users, \r\n  UserCheck, \r\n  Mail, \r\n  ClipboardList, \r\n  TrendingUp,\r\n  Activity,\r\n  ArrowUpRight,\r\n  ArrowDownRight\r\n} from 'lucide-react';\r\n\r\ninterface DealershipStats {\r\n  total_users: number;\r\n  active_users: number;\r\n  pending_invitations: number;\r\n  total_orders: number;\r\n  orders_this_month: number;\r\n}\r\n\r\ninterface DealershipStatsCardProps {\r\n  dealerId: number;\r\n  className?: string;\r\n}\r\n\r\nexport const DealershipStatsCard: React.FC<DealershipStatsCardProps> = ({\r\n  dealerId,\r\n  className,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const [stats, setStats] = useState<DealershipStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchStats();\r\n  }, [dealerId, fetchStats]);\r\n\r\n  const fetchStats = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const { data, error } = await supabase\r\n        .rpc('get_dealership_stats', { p_dealer_id: dealerId });\r\n\r\n      if (error) throw error;\r\n\r\n      if (data && data.length > 0) {\r\n        setStats(data[0]);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching dealership stats:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dealerId]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Activity className=\"h-5 w-5\" />\r\n            {t('dealerships.statistics')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"animate-pulse space-y-3\">\r\n            <div className=\"h-4 bg-muted rounded w-3/4\"></div>\r\n            <div className=\"h-4 bg-muted rounded w-1/2\"></div>\r\n            <div className=\"h-4 bg-muted rounded w-2/3\"></div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"text-center text-muted-foreground\">\r\n            <Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n            <p>{t('messages.error')}</p>\r\n            <p className=\"text-xs\">{error}</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (!stats) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"text-center text-muted-foreground\">\r\n            <Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n            <p>{t('common.no_data')}</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const statsItems = [\r\n    {\r\n      icon: Users,\r\n      label: t('dealerships.total_users'),\r\n      value: stats.total_users,\r\n      color: 'blue',\r\n      subtext: `${stats.active_users} ${t('dealerships.users_active')}`\r\n    },\r\n    {\r\n      icon: UserCheck,\r\n      label: t('dealerships.active_users'),\r\n      value: stats.active_users,\r\n      color: 'green',\r\n      percentage: stats.total_users > 0 ? Math.round((stats.active_users / stats.total_users) * 100) : 0\r\n    },\r\n    {\r\n      icon: Mail,\r\n      label: t('dealerships.pending_invitations'),\r\n      value: stats.pending_invitations,\r\n      color: 'orange',\r\n      badge: stats.pending_invitations > 0 ? t('dealerships.action_required') : t('dealerships.up_to_date')\r\n    },\r\n    {\r\n      icon: ClipboardList,\r\n      label: t('dealerships.total_orders'),\r\n      value: stats.total_orders,\r\n      color: 'purple',\r\n      subtext: `${stats.orders_this_month} ${t('dealerships.orders_this_month')}`\r\n    },\r\n  ];\r\n\r\n  const monthlyGrowth = stats.total_orders > 0 \r\n    ? Math.round((stats.orders_this_month / stats.total_orders) * 100) \r\n    : 0;\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Activity className=\"h-5 w-5\" />\r\n          {t('dealerships.statistics')}\r\n        </CardTitle>\r\n        <CardDescription>\r\n          {t('dealerships.activity_summary')}\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          {statsItems.map((item, index) => {\r\n            const Icon = item.icon;\r\n            return (\r\n              <div \r\n                key={index}\r\n                className=\"flex flex-col p-4 border rounded-lg hover:shadow-md transition-shadow\"\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <Icon className={`h-5 w-5 text-${item.color}-500`} />\r\n                  {item.badge && (\r\n                    <Badge \r\n                      variant={item.badge === t('dealerships.action_required') ? 'destructive' : 'secondary'}\r\n                      className=\"text-xs\"\r\n                    >\r\n                      {item.badge}\r\n                    </Badge>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"space-y-1\">\r\n                  <p className=\"text-2xl font-bold\">{item.value.toLocaleString()}</p>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">\r\n                    {item.label}\r\n                  </p>\r\n                  \r\n                  {item.subtext && (\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      {item.subtext}\r\n                    </p>\r\n                  )}\r\n                  \r\n                  {item.percentage !== undefined && (\r\n                    <div className=\"flex items-center gap-1 text-xs\">\r\n                      {item.percentage > 80 ? (\r\n                        <ArrowUpRight className=\"h-3 w-3 text-green-500\" />\r\n                      ) : (\r\n                        <ArrowDownRight className=\"h-3 w-3 text-orange-500\" />\r\n                      )}\r\n                      <span className={item.percentage > 80 ? 'text-green-600' : 'text-orange-600'}>\r\n                        {item.percentage}% {t('dealerships.users_active')}\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* Growth Indicator */}\r\n        {stats.total_orders > 0 && (\r\n          <div className=\"mt-4 p-3 bg-muted/50 rounded-lg\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium\">{t('dealerships.orders_growth')}</p>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  {stats.orders_this_month} {t('dealerships.of_total', { total: stats.total_orders })}\r\n                </p>\r\n              </div>\r\n              <div className=\"flex items-center gap-1\">\r\n                <TrendingUp className=\"h-4 w-4 text-blue-500\" />\r\n                <span className=\"text-sm font-medium text-blue-600\">\r\n                  {monthlyGrowth}%\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\debug\\DebugOutlet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\debug\\DuplicateTooltipTester.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1258,1261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1258,1261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Comprehensive Duplicate Tooltip Testing Component\r\n * \r\n * This component provides a comprehensive testing environment for the\r\n * DuplicateTooltip functionality with real-time debugging and validation.\r\n */\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { \r\n  RefreshCw, \r\n  Play, \r\n  AlertCircle, \r\n  CheckCircle, \r\n  Settings, \r\n  Bug,\r\n  Eye,\r\n  Copy,\r\n  TestTube\r\n} from 'lucide-react';\r\nimport { DuplicateTooltip } from '@/components/ui/duplicate-tooltip';\r\nimport { DuplicateBadge } from '@/components/ui/duplicate-badge';\r\nimport { duplicateTestDataGenerator } from '@/utils/duplicateTestData';\r\nimport { getDuplicateCount, getDuplicateOrders, Order } from '@/utils/duplicateUtils';\r\nimport { toast } from 'sonner';\r\n\r\nexport function DuplicateTooltipTester() {\r\n  const [testOrders, setTestOrders] = useState<Order[]>([]);\r\n  const [debugMode, setDebugMode] = useState(true);\r\n  const [testResults, setTestResults] = useState<any>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selectedTest, setSelectedTest] = useState<'quick' | 'comprehensive' | 'edge-cases'>('quick');\r\n\r\n  // Auto-generate quick test data on mount\r\n  useEffect(() => {\r\n    generateQuickTestData();\r\n  }, [generateQuickTestData]);\r\n\r\n  const generateQuickTestData = useCallback(() => {\r\n    console.log('🚀 Generating quick test data...');\r\n    const quickData = duplicateTestDataGenerator.createQuickTestData();\r\n    setTestOrders(quickData);\r\n    validateTestResults(quickData);\r\n    toast.success('Quick test data generated with guaranteed duplicates');\r\n  }, []);\r\n\r\n  const generateComprehensiveTestData = () => {\r\n    setIsLoading(true);\r\n    console.log('🧪 Generating comprehensive test data...');\r\n    \r\n    setTimeout(() => {\r\n      const testData = duplicateTestDataGenerator.generateTestData({\r\n        totalOrders: 50,\r\n        duplicateStockRatio: 0.4,\r\n        duplicateVinRatio: 0.3,\r\n        dealerIds: [1, 2, 3],\r\n        includeEdgeCases: true\r\n      });\r\n      \r\n      setTestOrders(testData.orders);\r\n      setTestResults(testData);\r\n      validateTestResults(testData.orders);\r\n      setIsLoading(false);\r\n      toast.success(`Generated ${testData.orders.length} orders with ${testData.metadata.expectedDuplicates} duplicate groups`);\r\n    }, 100);\r\n  };\r\n\r\n  const generateEdgeCases = () => {\r\n    console.log('⚠️ Generating edge case test data...');\r\n    const edgeCases: Order[] = [\r\n      {\r\n        id: 'edge-case-1',\r\n        createdAt: new Date().toISOString(),\r\n        stockNumber: '', // Empty stock number\r\n        vehicleVin: 'EMPTY-VIN-TEST',\r\n        customerName: 'Edge Case Customer 1',\r\n        status: 'pending',\r\n        dealer_id: 1,\r\n        dealershipName: 'Test Dealer'\r\n      },\r\n      {\r\n        id: 'edge-case-2',\r\n        createdAt: new Date().toISOString(),\r\n        stockNumber: 'VERY-LONG-STOCK-NUMBER-THAT-SHOULD-BE-TRUNCATED-IN-TOOLTIP',\r\n        vehicleVin: 'VERY-LONG-VIN-NUMBER-THAT-SHOULD-BE-HANDLED-PROPERLY-IN-TOOLTIP',\r\n        customerName: 'Edge Case Customer 2',\r\n        status: 'in_progress',\r\n        dealer_id: 1,\r\n        dealershipName: 'Test Dealer'\r\n      },\r\n      {\r\n        id: 'edge-case-3',\r\n        createdAt: new Date().toISOString(),\r\n        stockNumber: 'CASE-SENSITIVE-test',\r\n        vehicleVin: 'case-sensitive-VIN-test',\r\n        customerName: 'Edge Case Customer 3',\r\n        status: 'completed',\r\n        dealer_id: 1,\r\n        dealershipName: 'Test Dealer'\r\n      },\r\n      {\r\n        id: 'edge-case-4',\r\n        createdAt: new Date().toISOString(),\r\n        stockNumber: 'CASE-SENSITIVE-TEST', // Should match previous one (case insensitive)\r\n        vehicleVin: 'CASE-SENSITIVE-VIN-TEST', // Should match previous one (case insensitive)\r\n        customerName: 'Edge Case Customer 4',\r\n        status: 'cancelled',\r\n        dealer_id: 1,\r\n        dealershipName: 'Test Dealer'\r\n      }\r\n    ];\r\n\r\n    setTestOrders(edgeCases);\r\n    validateTestResults(edgeCases);\r\n    toast.info('Edge case test data generated');\r\n  };\r\n\r\n  const validateTestResults = (orders: Order[]) => {\r\n    const validation = duplicateTestDataGenerator.validateTestData(orders);\r\n    setTestResults(validation);\r\n    \r\n    if (validation.isValid) {\r\n      console.log('✅ Test data validation passed:', validation);\r\n    } else {\r\n      console.warn('⚠️ Test data validation issues:', validation.issues);\r\n    }\r\n  };\r\n\r\n  const runFullDiagnostic = () => {\r\n    console.log('🔧 Running full tooltip diagnostic...');\r\n    \r\n    // Test tooltip implementation\r\n    const hasTooltipProvider = !!document.querySelector('[data-radix-tooltip-provider]');\r\n    const hasRadixTooltip = !!document.querySelector('[data-radix-tooltip-trigger]');\r\n    const hasCustomTooltip = !!document.querySelector('[data-duplicate-tooltip]');\r\n    \r\n    const diagnosticResults = {\r\n      hasTooltipProvider,\r\n      hasRadixTooltip,\r\n      hasCustomTooltip,\r\n      testOrdersCount: testOrders.length,\r\n      duplicateOrdersFound: testOrders.filter((order, index, arr) => \r\n        getDuplicateCount(arr, 'stockNumber', order.stockNumber, order.dealer_id) > 1 ||\r\n        getDuplicateCount(arr, 'vehicleVin', order.vehicleVin, order.dealer_id) > 1\r\n      ).length\r\n    };\r\n    \r\n    console.table(diagnosticResults);\r\n    toast.info('Diagnostic complete - check console for details');\r\n  };\r\n\r\n  const copyTestData = () => {\r\n    const testDataJson = JSON.stringify(testOrders, null, 2);\r\n    navigator.clipboard.writeText(testDataJson);\r\n    toast.success('Test data copied to clipboard');\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6 p-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <TestTube className=\"w-5 h-5\" />\r\n            Duplicate Tooltip Tester\r\n          </CardTitle>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Comprehensive testing environment for duplicate badge tooltips\r\n          </p>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {/* Controls */}\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-4\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Switch checked={debugMode} onCheckedChange={setDebugMode} />\r\n                <label className=\"text-sm\">Debug Mode</label>\r\n              </div>\r\n              <Badge variant=\"outline\">{testOrders.length} Test Orders</Badge>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={copyTestData}\r\n                className=\"flex items-center gap-1\"\r\n              >\r\n                <Copy className=\"w-4 h-4\" />\r\n                Copy Data\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={runFullDiagnostic}\r\n                className=\"flex items-center gap-1\"\r\n              >\r\n                <Bug className=\"w-4 h-4\" />\r\n                Diagnose\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Test Data Generation */}\r\n          <div className=\"flex gap-2\">\r\n            <Button\r\n              variant={selectedTest === 'quick' ? 'default' : 'outline'}\r\n              onClick={() => {\r\n                setSelectedTest('quick');\r\n                generateQuickTestData();\r\n              }}\r\n              disabled={isLoading}\r\n              className=\"flex items-center gap-1\"\r\n            >\r\n              <Play className=\"w-4 h-4\" />\r\n              Quick Test\r\n            </Button>\r\n            <Button\r\n              variant={selectedTest === 'comprehensive' ? 'default' : 'outline'}\r\n              onClick={() => {\r\n                setSelectedTest('comprehensive');\r\n                generateComprehensiveTestData();\r\n              }}\r\n              disabled={isLoading}\r\n              className=\"flex items-center gap-1\"\r\n            >\r\n              {isLoading ? <RefreshCw className=\"w-4 h-4 animate-spin\" /> : <Settings className=\"w-4 h-4\" />}\r\n              Comprehensive\r\n            </Button>\r\n            <Button\r\n              variant={selectedTest === 'edge-cases' ? 'default' : 'outline'}\r\n              onClick={() => {\r\n                setSelectedTest('edge-cases');\r\n                generateEdgeCases();\r\n              }}\r\n              disabled={isLoading}\r\n              className=\"flex items-center gap-1\"\r\n            >\r\n              <AlertCircle className=\"w-4 h-4\" />\r\n              Edge Cases\r\n            </Button>\r\n          </div>\r\n\r\n          {/* Validation Results */}\r\n          {testResults && (\r\n            <Card className=\"bg-muted/50\">\r\n              <CardContent className=\"pt-4\">\r\n                <div className=\"flex items-center gap-2 mb-2\">\r\n                  {testResults.isValid ? (\r\n                    <CheckCircle className=\"w-4 h-4 text-green-600\" />\r\n                  ) : (\r\n                    <AlertCircle className=\"w-4 h-4 text-red-600\" />\r\n                  )}\r\n                  <span className=\"font-medium\">\r\n                    Validation {testResults.isValid ? 'Passed' : 'Failed'}\r\n                  </span>\r\n                </div>\r\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n                  <div>Stock Duplicates: <Badge variant=\"secondary\">{testResults.stockDuplicates || 0}</Badge></div>\r\n                  <div>VIN Duplicates: <Badge variant=\"secondary\">{testResults.vinDuplicates || 0}</Badge></div>\r\n                </div>\r\n                {testResults.issues?.length > 0 && (\r\n                  <div className=\"mt-2 text-xs text-destructive\">\r\n                    Issues: {testResults.issues.join(', ')}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Test Cases Display */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Test Cases</CardTitle>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Hover over stock numbers and VINs to test tooltip functionality\r\n          </p>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n            {testOrders.map((order) => {\r\n              const stockDuplicates = getDuplicateOrders(testOrders, 'stockNumber', order.stockNumber, order.dealer_id);\r\n              const vinDuplicates = getDuplicateOrders(testOrders, 'vehicleVin', order.vehicleVin, order.dealer_id);\r\n              \r\n              return (\r\n                <Card key={order.id} className=\"border-border\">\r\n                  <CardContent className=\"p-4 space-y-3\">\r\n                    {/* Order Header */}\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"font-medium text-sm\">{order.id.slice(-8)}</div>\r\n                      <Badge variant=\"outline\" className=\"text-xs\">{order.status}</Badge>\r\n                    </div>\r\n\r\n                    {/* Stock Number Test */}\r\n                    <div className=\"space-y-1\">\r\n                      <label className=\"text-xs text-muted-foreground uppercase tracking-wide\">Stock Number</label>\r\n                      <div className=\"relative inline-block\">\r\n                        <DuplicateTooltip\r\n                          orders={stockDuplicates}\r\n                          field=\"stockNumber\"\r\n                          value={order.stockNumber || ''}\r\n                          onOrderClick={(order) => {\r\n                            console.log('Order clicked:', order.id);\r\n                            toast.info(`Clicked order: ${order.id}`);\r\n                          }}\r\n                          debug={debugMode}\r\n                        >\r\n                          <div className=\"text-sm font-semibold text-foreground cursor-pointer hover:text-blue-600 p-2 rounded border border-transparent hover:border-border transition-colors\">\r\n                            {order.stockNumber || 'No Stock'}\r\n                          </div>\r\n                        </DuplicateTooltip>\r\n                        <DuplicateBadge count={stockDuplicates.length} />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <Separator />\r\n\r\n                    {/* VIN Test */}\r\n                    <div className=\"space-y-1\">\r\n                      <label className=\"text-xs text-muted-foreground uppercase tracking-wide\">VIN</label>\r\n                      <div className=\"relative inline-block\">\r\n                        <DuplicateTooltip\r\n                          orders={vinDuplicates}\r\n                          field=\"vehicleVin\"\r\n                          value={order.vehicleVin || ''}\r\n                          onOrderClick={(order) => {\r\n                            console.log('Order clicked:', order.id);\r\n                            toast.info(`Clicked order: ${order.id}`);\r\n                          }}\r\n                          debug={debugMode}\r\n                        >\r\n                          <div className=\"text-xs font-mono text-muted-foreground cursor-pointer hover:text-orange-600 p-2 rounded border border-transparent hover:border-border transition-colors\">\r\n                            {order.vehicleVin || 'No VIN'}\r\n                          </div>\r\n                        </DuplicateTooltip>\r\n                        <DuplicateBadge count={vinDuplicates.length} />\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Debug Info */}\r\n                    {debugMode && (\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        <div>Stock: {stockDuplicates.length} duplicate(s)</div>\r\n                        <div>VIN: {vinDuplicates.length} duplicate(s)</div>\r\n                      </div>\r\n                    )}\r\n                  </CardContent>\r\n                </Card>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          {testOrders.length === 0 && (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <TestTube className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\r\n              <p>No test data generated yet</p>\r\n              <p className=\"text-xs\">Click a test button above to generate test orders</p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\debug\\RouteLogger.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\debug\\SimpleSalesOrders.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\debug\\SimpleServiceOrders.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1841,1844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1841,1844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1934,1937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1934,1937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useLocation } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useTabPersistence, useViewModePersistence, useSearchPersistence } from '@/hooks/useTabPersistence';\r\nimport { useServiceOrderManagement } from '@/hooks/useServiceOrderManagement';\r\nimport { QuickFilterBar } from '@/components/sales/QuickFilterBar';\r\nimport { SmartDashboard } from '@/components/sales/SmartDashboard';\r\nimport { OrderKanbanBoard } from '@/components/sales/OrderKanbanBoard';\r\n\r\nexport default function SimpleServiceOrders() {\r\n  const location = useLocation();\r\n  const { t } = useTranslation();\r\n\r\n  // Add persistence hooks\r\n  const [activeFilter, setActiveFilter] = useTabPersistence('service_orders');\r\n  const [viewMode, setViewMode] = useViewModePersistence('service_orders');\r\n  const [searchTerm, setSearchTerm] = useSearchPersistence('service_orders');\r\n\r\n  // Add the problematic hook\r\n  const {\r\n    orders,\r\n    tabCounts,\r\n    filters,\r\n    loading,\r\n    updateFilters,\r\n    refreshData,\r\n    createOrder,\r\n    updateOrder,\r\n    deleteOrder,\r\n  } = useServiceOrderManagement(activeFilter);\r\n\r\n  console.log('🔵 SimpleServiceOrders is RENDERING at', location.pathname);\r\n  console.log('🔵 Persistence hooks:', { activeFilter, viewMode, searchTerm });\r\n  console.log('🔵 Service management hook:', { orders: orders?.length, loading, tabCounts });\r\n\r\n  // Dummy handlers for QuickFilterBar\r\n  const handleToggleFilters = () => console.log('Toggle filters');\r\n  const showFilters = false;\r\n\r\n  // Handler for SmartDashboard card clicks\r\n  const handleCardClick = (filter: string) => {\r\n    console.log('Card clicked:', filter);\r\n    setActiveFilter(filter);\r\n    if (filter !== 'dashboard') {\r\n      setViewMode('kanban');\r\n    }\r\n  };\r\n\r\n  // Handlers for OrderKanbanBoard\r\n  const handleEditOrder = (order: any) => {\r\n    console.log('Edit order:', order);\r\n  };\r\n\r\n  const handleViewOrder = (order: any) => {\r\n    console.log('View order:', order);\r\n  };\r\n\r\n  const handleDeleteOrder = async (orderId: string) => {\r\n    console.log('Delete order:', orderId);\r\n  };\r\n\r\n  const handleStatusChange = async (orderId: string, newStatus: string) => {\r\n    console.log('Status change:', orderId, newStatus);\r\n  };\r\n\r\n  return (\r\n    <div style={{\r\n      padding: '20px',\r\n      border: '2px solid blue',\r\n      backgroundColor: '#e8f0ff',\r\n      margin: '20px'\r\n    }}>\r\n      <h1 style={{ color: 'blue', fontSize: '24px' }}>\r\n        🔵 {t('pages.service_orders')} (Simple)\r\n      </h1>\r\n      <p><strong>Current Path:</strong> {location.pathname}</p>\r\n      <p><strong>Timestamp:</strong> {new Date().toLocaleTimeString()}</p>\r\n      <p>This is a minimal Service Orders component.</p>\r\n\r\n      {/* Test QuickFilterBar */}\r\n      <div style={{ margin: '20px 0', padding: '10px', border: '1px dashed orange' }}>\r\n        <h3>Testing QuickFilterBar:</h3>\r\n        <QuickFilterBar\r\n          activeFilter={activeFilter}\r\n          tabCounts={tabCounts}\r\n          onFilterChange={setActiveFilter}\r\n          searchTerm={searchTerm}\r\n          onSearchChange={setSearchTerm}\r\n          viewMode={viewMode}\r\n          onViewModeChange={setViewMode}\r\n          showFilters={showFilters}\r\n          onToggleFilters={handleToggleFilters}\r\n        />\r\n      </div>\r\n\r\n      {/* Test SmartDashboard */}\r\n      {activeFilter === 'dashboard' && (\r\n        <div style={{ margin: '20px 0', padding: '10px', border: '1px dashed green' }}>\r\n          <h3>Testing SmartDashboard:</h3>\r\n          <SmartDashboard\r\n            tabCounts={tabCounts}\r\n            onCardClick={handleCardClick}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Test OrderKanbanBoard */}\r\n      {activeFilter !== 'dashboard' && viewMode === 'kanban' && (\r\n        <div style={{ margin: '20px 0', padding: '10px', border: '1px dashed red' }}>\r\n          <h3>Testing OrderKanbanBoard:</h3>\r\n          <OrderKanbanBoard\r\n            orders={orders || []}\r\n            onEdit={handleEditOrder}\r\n            onView={handleViewOrder}\r\n            onDelete={handleDeleteOrder}\r\n            onStatusChange={handleStatusChange}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {/* Gradually add complexity */}\r\n      <div style={{ marginTop: '20px', padding: '10px', border: '1px solid #ccc' }}>\r\n        <h2>Hooks Status:</h2>\r\n        <p>✅ useTranslation: Working</p>\r\n        <p>✅ Persistence hooks: Working</p>\r\n        <p>🔵 useServiceOrderManagement: {loading ? 'Loading...' : 'Loaded'}</p>\r\n        <ul>\r\n          <li>activeFilter: {activeFilter}</li>\r\n          <li>viewMode: {viewMode}</li>\r\n          <li>searchTerm: {searchTerm}</li>\r\n          <li>orders count: {orders?.length || 0}</li>\r\n          <li>loading: {loading ? 'true' : 'false'}</li>\r\n        </ul>\r\n        {tabCounts && (\r\n          <div>\r\n            <strong>Tab counts:</strong> {JSON.stringify(tabCounts)}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\debug\\SimpleTestPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\debug\\TooltipTester.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1249,1252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1249,1252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { DuplicateTooltip } from '@/components/ui/duplicate-tooltip';\r\nimport { Badge } from '@/components/ui/badge';\r\n\r\n// Mock order data with intentional duplicates for testing\r\nconst mockTestOrders = [\r\n  {\r\n    id: \"test1\",\r\n    stockNumber: \"DUPLICATE-STOCK\",\r\n    vehicleVin: \"1HGCM82633A123456\",\r\n    dealer_id: 1,\r\n    status: \"pending\",\r\n    createdAt: \"2024-01-01T10:00:00Z\",\r\n    vehicleYear: 2024,\r\n    vehicleMake: \"Honda\",\r\n    vehicleModel: \"Civic\",\r\n    orderNumber: \"SA-001\"\r\n  },\r\n  {\r\n    id: \"test2\", \r\n    stockNumber: \"DUPLICATE-STOCK\", // INTENTIONAL DUPLICATE\r\n    vehicleVin: \"2HGCM82633A123457\",\r\n    dealer_id: 1,\r\n    status: \"in_progress\",\r\n    createdAt: \"2024-01-02T10:00:00Z\",\r\n    vehicleYear: 2024,\r\n    vehicleMake: \"Toyota\",\r\n    vehicleModel: \"Camry\",\r\n    orderNumber: \"SA-002\"\r\n  },\r\n  {\r\n    id: \"test3\",\r\n    stockNumber: \"UNIQUE-STOCK\",\r\n    vehicleVin: \"1HGCM82633A123456\", // INTENTIONAL VIN DUPLICATE\r\n    dealer_id: 1,\r\n    status: \"completed\",\r\n    createdAt: \"2024-01-03T10:00:00Z\",\r\n    vehicleYear: 2024,\r\n    vehicleMake: \"Honda\",\r\n    vehicleModel: \"Accord\",\r\n    orderNumber: \"SA-003\"\r\n  }\r\n];\r\n\r\nexport function TooltipTester() {\r\n  const handleOrderClick = (order: any) => {\r\n    console.log('Order clicked:', order);\r\n    alert(`Clicked order: ${order.orderNumber}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-8 bg-gray-50 min-h-screen\">\r\n      <div className=\"max-w-4xl mx-auto\">\r\n        <h1 className=\"text-2xl font-bold mb-6\">Tooltip Testing Dashboard</h1>\r\n        \r\n        <div className=\"bg-white rounded-lg shadow p-6 mb-6\">\r\n          <h2 className=\"text-lg font-semibold mb-4\">Debug Information</h2>\r\n          <div className=\"space-y-2 text-sm\">\r\n            <p><strong>Total Test Orders:</strong> {mockTestOrders.length}</p>\r\n            <p><strong>Expected Stock Duplicates:</strong> DUPLICATE-STOCK (2 orders)</p>\r\n            <p><strong>Expected VIN Duplicates:</strong> 1HGCM82633A123456 (2 orders)</p>\r\n            <p><strong>Instructions:</strong> Hover over the elements below. Check browser console for debug output.</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n          {mockTestOrders.map((order) => (\r\n            <div key={order.id} className=\"bg-white rounded-lg shadow p-4\">\r\n              <div className=\"space-y-3\">\r\n                <div>\r\n                  <Badge variant=\"outline\">{order.orderNumber}</Badge>\r\n                  <Badge className=\"ml-2\" variant=\"secondary\">{order.status}</Badge>\r\n                </div>\r\n                \r\n                <div className=\"space-y-2\">\r\n                  <div>\r\n                    <label className=\"text-xs font-medium text-gray-500 uppercase\">Stock Number</label>\r\n                    <DuplicateTooltip\r\n                      orders={mockTestOrders.filter(o => \r\n                        o.stockNumber === order.stockNumber && \r\n                        o.dealer_id === order.dealer_id\r\n                      )}\r\n                      field=\"stockNumber\"\r\n                      value={order.stockNumber}\r\n                      onOrderClick={handleOrderClick}\r\n                    >\r\n                      <div className=\"text-sm font-semibold text-blue-600 cursor-pointer hover:bg-blue-50 p-2 rounded\">\r\n                        {order.stockNumber}\r\n                      </div>\r\n                    </DuplicateTooltip>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label className=\"text-xs font-medium text-gray-500 uppercase\">VIN</label>\r\n                    <DuplicateTooltip\r\n                      orders={mockTestOrders.filter(o => \r\n                        o.vehicleVin === order.vehicleVin && \r\n                        o.dealer_id === order.dealer_id\r\n                      )}\r\n                      field=\"vehicleVin\"\r\n                      value={order.vehicleVin}\r\n                      onOrderClick={handleOrderClick}\r\n                    >\r\n                      <div className=\"text-xs font-mono text-gray-600 cursor-pointer hover:bg-gray-50 p-2 rounded\">\r\n                        {order.vehicleVin}\r\n                      </div>\r\n                    </DuplicateTooltip>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"text-sm text-gray-600\">\r\n                  <div>{order.vehicleYear} {order.vehicleMake} {order.vehicleModel}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <div className=\"mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\r\n          <h3 className=\"font-semibold text-yellow-800 mb-2\">Testing Instructions:</h3>\r\n          <ol className=\"text-sm text-yellow-700 space-y-1\">\r\n            <li>1. Open browser developer tools (F12)</li>\r\n            <li>2. Go to the Console tab</li>\r\n            <li>3. Hover over the blue stock numbers and gray VIN numbers above</li>\r\n            <li>4. Look for debug messages in the console</li>\r\n            <li>5. Tooltips should appear for \"DUPLICATE-STOCK\" and the repeated VIN</li>\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\detail-hub\\DetailHubAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\detail-hub\\DetailHubDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\detail-hub\\EmployeePortal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\detail-hub\\FacialEnrollment.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[613,616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[613,616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useCallback } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\r\nimport { Camera, CheckCircle, AlertCircle, RotateCcw, User, Loader2 } from \"lucide-react\";\r\n\r\ninterface FacialEnrollmentProps {\r\n  employeeId: string;\r\n  employeeName: string;\r\n  onComplete: (enrollmentData: any) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst FacialEnrollment = ({ employeeId, employeeName, onComplete, onCancel }: FacialEnrollmentProps) => {\r\n  const { t } = useTranslation();\r\n  const [enrollmentStep, setEnrollmentStep] = useState<'instructions' | 'capturing' | 'processing' | 'complete' | 'error'>('instructions');\r\n  const [progress, setProgress] = useState(0);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [capturedImages, setCapturedImages] = useState<string[]>([]);\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const streamRef = useRef<MediaStream | null>(null);\r\n\r\n  const startEnrollment = useCallback(async () => {\r\n    try {\r\n      setEnrollmentStep('capturing');\r\n      setProgress(0);\r\n\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n          facingMode: 'user',\r\n          width: { ideal: 640 },\r\n          height: { ideal: 480 }\r\n        }\r\n      });\r\n\r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = stream;\r\n        streamRef.current = stream;\r\n      }\r\n\r\n      // Simulate enrollment process with multiple captures\r\n      await performEnrollmentCaptures();\r\n\r\n    } catch (error) {\r\n      console.error('Error starting enrollment:', error);\r\n      setErrorMessage('Unable to access camera. Please check permissions.');\r\n      setEnrollmentStep('error');\r\n    }\r\n  }, [performEnrollmentCaptures]);\r\n\r\n  const performEnrollmentCaptures = useCallback(async () => {\r\n    const totalCaptures = 5;\r\n    const captures: string[] = [];\r\n\r\n    for (let i = 0; i < totalCaptures; i++) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Wait between captures\r\n\r\n      // Capture frame\r\n      const imageData = captureFrame();\r\n      if (imageData) {\r\n        captures.push(imageData);\r\n        setCapturedImages([...captures]);\r\n        setProgress(((i + 1) / totalCaptures) * 60); // 60% for capture phase\r\n      }\r\n    }\r\n\r\n    // Processing phase\r\n    setEnrollmentStep('processing');\r\n    setProgress(70);\r\n\r\n    // Simulate AWS Rekognition enrollment\r\n    await simulateEnrollment(captures);\r\n  }, [captureFrame, simulateEnrollment]);\r\n\r\n  const captureFrame = useCallback((): string | null => {\r\n    if (!videoRef.current || !canvasRef.current) return null;\r\n    \r\n    const video = videoRef.current;\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n    \r\n    if (!context) return null;\r\n    \r\n    canvas.width = video.videoWidth;\r\n    canvas.height = video.videoHeight;\r\n    context.drawImage(video, 0, 0);\r\n    \r\n    return canvas.toDataURL('image/jpeg', 0.8);\r\n  }, []);\r\n\r\n  const simulateEnrollment = useCallback(async (images: string[]) => {\r\n    try {\r\n      // Simulate API call to AWS Rekognition\r\n      setProgress(80);\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      setProgress(90);\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Simulate successful enrollment\r\n      const enrollmentData = {\r\n        employeeId,\r\n        faceId: `face_${employeeId}_${Date.now()}`,\r\n        enrollmentDate: new Date().toISOString(),\r\n        images: images.length,\r\n        confidence: 0.95\r\n      };\r\n      \r\n      setProgress(100);\r\n      setEnrollmentStep('complete');\r\n      \r\n      setTimeout(() => {\r\n        onComplete(enrollmentData);\r\n      }, 2000);\r\n      \r\n    } catch (error) {\r\n      console.error('Enrollment failed:', error);\r\n      setErrorMessage('Enrollment failed. Please try again.');\r\n      setEnrollmentStep('error');\r\n    }\r\n  }, [employeeId, onComplete]);\r\n\r\n  const stopCamera = useCallback(() => {\r\n    if (streamRef.current) {\r\n      streamRef.current.getTracks().forEach(track => track.stop());\r\n      streamRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  const resetEnrollment = () => {\r\n    stopCamera();\r\n    setEnrollmentStep('instructions');\r\n    setProgress(0);\r\n    setCapturedImages([]);\r\n    setErrorMessage('');\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    stopCamera();\r\n    onCancel();\r\n  };\r\n\r\n  const renderInstructions = () => (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"text-center space-y-4\">\r\n        <User className=\"w-16 h-16 text-blue-600 mx-auto\" />\r\n        <div>\r\n          <h3 className=\"text-xl font-semibold\">Facial Recognition Enrollment</h3>\r\n          <p className=\"text-muted-foreground\">Setting up face ID for {employeeName}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <Alert>\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertDescription>\r\n          Please follow these instructions for successful enrollment:\r\n        </AlertDescription>\r\n      </Alert>\r\n      \r\n      <div className=\"space-y-3\">\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n            <span className=\"text-sm font-medium text-blue-600\">1</span>\r\n          </div>\r\n          <p>Position your face in the center of the camera</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n            <span className=\"text-sm font-medium text-blue-600\">2</span>\r\n          </div>\r\n          <p>Look directly at the camera</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n            <span className=\"text-sm font-medium text-blue-600\">3</span>\r\n          </div>\r\n          <p>Remain still during the capture process</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-3\">\r\n          <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n            <span className=\"text-sm font-medium text-blue-600\">4</span>\r\n          </div>\r\n          <p>Ensure good lighting on your face</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"flex justify-end space-x-2\">\r\n        <Button variant=\"outline\" onClick={handleCancel}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={startEnrollment}>\r\n          <Camera className=\"w-4 h-4 mr-2\" />\r\n          Start Enrollment\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderCapturing = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"text-center\">\r\n        <h3 className=\"text-xl font-semibold\">Capturing Face Data</h3>\r\n        <p className=\"text-muted-foreground\">Please remain still while we capture your face</p>\r\n      </div>\r\n      \r\n      <div className=\"relative\">\r\n        <video\r\n          ref={videoRef}\r\n          autoPlay\r\n          playsInline\r\n          className=\"w-full h-64 bg-black rounded-lg object-cover\"\r\n        />\r\n        <canvas ref={canvasRef} className=\"hidden\" />\r\n        \r\n        {/* Overlay guide */}\r\n        <div className=\"absolute inset-0 flex items-center justify-center\">\r\n          <div className=\"w-48 h-48 border-2 border-blue-500 rounded-full animate-pulse\" />\r\n        </div>\r\n        \r\n        <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2\">\r\n          <Badge className=\"bg-blue-600 text-white\">\r\n            Capturing... {capturedImages.length}/5\r\n          </Badge>\r\n        </div>\r\n      </div>\r\n      \r\n      <Progress value={progress} className=\"w-full\" />\r\n      \r\n      <div className=\"flex justify-center\">\r\n        <Button variant=\"outline\" onClick={resetEnrollment}>\r\n          <RotateCcw className=\"w-4 h-4 mr-2\" />\r\n          Restart\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderProcessing = () => (\r\n    <div className=\"space-y-6 text-center\">\r\n      <Loader2 className=\"w-16 h-16 text-blue-600 mx-auto animate-spin\" />\r\n      <div>\r\n        <h3 className=\"text-xl font-semibold\">Processing Face Data</h3>\r\n        <p className=\"text-muted-foreground\">Creating your facial recognition profile...</p>\r\n      </div>\r\n      <Progress value={progress} className=\"w-full\" />\r\n    </div>\r\n  );\r\n\r\n  const renderComplete = () => (\r\n    <div className=\"space-y-6 text-center\">\r\n      <CheckCircle className=\"w-16 h-16 text-green-600 mx-auto\" />\r\n      <div>\r\n        <h3 className=\"text-xl font-semibold text-green-600\">Enrollment Complete!</h3>\r\n        <p className=\"text-muted-foreground\">\r\n          {employeeName} can now use facial recognition for time tracking\r\n        </p>\r\n      </div>\r\n      <Progress value={100} className=\"w-full\" />\r\n    </div>\r\n  );\r\n\r\n  const renderError = () => (\r\n    <div className=\"space-y-6\">\r\n      <Alert variant=\"destructive\">\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertDescription>{errorMessage}</AlertDescription>\r\n      </Alert>\r\n      \r\n      <div className=\"flex justify-center space-x-2\">\r\n        <Button variant=\"outline\" onClick={handleCancel}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={resetEnrollment}>\r\n          <RotateCcw className=\"w-4 h-4 mr-2\" />\r\n          Try Again\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Card className=\"max-w-2xl mx-auto\">\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Camera className=\"w-5 h-5\" />\r\n          Face ID Enrollment\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {enrollmentStep === 'instructions' && renderInstructions()}\r\n        {enrollmentStep === 'capturing' && renderCapturing()}\r\n        {enrollmentStep === 'processing' && renderProcessing()}\r\n        {enrollmentStep === 'complete' && renderComplete()}\r\n        {enrollmentStep === 'error' && renderError()}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FacialEnrollment;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\detail-hub\\InvoiceCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\detail-hub\\KioskManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\detail-hub\\PunchClockKiosk.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\detail-hub\\ReportsCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\detail-hub\\TimecardSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dev\\OrderNumberMigrationTool.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\dev\\StorageDevTools.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\followers\\FollowersAvatarStack.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1671,1674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1671,1674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport {\r\n  Tooltip,\r\n  TooltipContent,\r\n  TooltipProvider,\r\n  TooltipTrigger,\r\n} from '@/components/ui/tooltip';\r\nimport { UserPresenceIndicator } from '../presence/UserPresenceIndicator';\r\nimport type { EntityFollower } from '@/hooks/useEntityFollowers';\r\n\r\ninterface FollowersAvatarStackProps {\r\n  followers: EntityFollower[];\r\n  maxVisible?: number;\r\n  showCount?: boolean;\r\n  size?: 'sm' | 'md' | 'lg';\r\n  className?: string;\r\n}\r\n\r\nexport function FollowersAvatarStack({\r\n  followers,\r\n  maxVisible = 3,\r\n  showCount = false,\r\n  size = 'sm',\r\n  className = ''\r\n}: FollowersAvatarStackProps) {\r\n  const visibleFollowers = followers.slice(0, maxVisible);\r\n  const remainingCount = Math.max(0, followers.length - maxVisible);\r\n\r\n  const sizeClasses = {\r\n    sm: 'h-6 w-6',\r\n    md: 'h-8 w-8',\r\n    lg: 'h-10 w-10'\r\n  };\r\n\r\n  const offsetClasses = {\r\n    sm: '-ml-2',\r\n    md: '-ml-3',\r\n    lg: '-ml-4'\r\n  };\r\n\r\n  return (\r\n    <TooltipProvider>\r\n      <div className={`flex items-center ${className}`}>\r\n        <div className=\"flex\">\r\n          {visibleFollowers.map((follower, index) => (\r\n            <Tooltip key={follower.id}>\r\n              <TooltipTrigger asChild>\r\n                <div \r\n                  className={`relative ${index > 0 ? offsetClasses[size] : ''} transition-transform hover:scale-110 hover:z-10`}\r\n                  style={{ zIndex: visibleFollowers.length - index }}\r\n                >\r\n                  <UserPresenceIndicator\r\n                    status={follower.presence_status as any}\r\n                    size={size}\r\n                    showRing\r\n                  >\r\n                    <Avatar className={`${sizeClasses[size]} border-2 border-background`}>\r\n                      <AvatarImage \r\n                        src={`https://api.dicebear.com/7.x/initials/svg?seed=${follower.user_name}`}\r\n                        alt={follower.user_name}\r\n                      />\r\n                      <AvatarFallback className=\"text-xs\">\r\n                        {follower.user_name\r\n                          .split(' ')\r\n                          .map(n => n[0])\r\n                          .join('')\r\n                          .toUpperCase()\r\n                          .slice(0, 2)\r\n                        }\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                  </UserPresenceIndicator>\r\n                </div>\r\n              </TooltipTrigger>\r\n              <TooltipContent>\r\n                <div className=\"text-center\">\r\n                  <div className=\"font-medium\">{follower.user_name}</div>\r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    {follower.user_email}\r\n                  </div>\r\n                  <div className=\"text-xs text-muted-foreground mt-1\">\r\n                    Following since {new Date(follower.followed_at).toLocaleDateString()}\r\n                  </div>\r\n                  <Badge \r\n                    variant=\"outline\" \r\n                    className=\"mt-1 text-xs\"\r\n                  >\r\n                    {follower.notification_level}\r\n                  </Badge>\r\n                </div>\r\n              </TooltipContent>\r\n            </Tooltip>\r\n          ))}\r\n          \r\n          {remainingCount > 0 && (\r\n            <Tooltip>\r\n              <TooltipTrigger asChild>\r\n                <div \r\n                  className={`relative ${offsetClasses[size]} transition-transform hover:scale-110`}\r\n                  style={{ zIndex: 0 }}\r\n                >\r\n                  <Avatar className={`${sizeClasses[size]} border-2 border-background bg-muted`}>\r\n                    <AvatarFallback className=\"text-xs font-medium\">\r\n                      +{remainingCount}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                </div>\r\n              </TooltipTrigger>\r\n              <TooltipContent>\r\n                <div className=\"text-center\">\r\n                  <div className=\"font-medium\">\r\n                    {remainingCount} more follower{remainingCount === 1 ? '' : 's'}\r\n                  </div>\r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    {followers.length} total followers\r\n                  </div>\r\n                </div>\r\n              </TooltipContent>\r\n            </Tooltip>\r\n          )}\r\n        </div>\r\n        \r\n        {showCount && (\r\n          <Badge \r\n            variant=\"secondary\" \r\n            className=\"ml-3 text-xs\"\r\n          >\r\n            {followers.length} follower{followers.length === 1 ? '' : 's'}\r\n          </Badge>\r\n        )}\r\n      </div>\r\n    </TooltipProvider>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\followers\\UniversalFollowButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\get-ready\\GetReadyContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\get-ready\\GetReadySplitContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\get-ready\\GetReadyStepsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\get-ready\\GetReadyTopbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\get-ready\\VehicleDetailPanel.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":96,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3380,3383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3380,3383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3436,3439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3436,3439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":98,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3466,3469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3466,3469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3552,3555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3552,3555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3737,3740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3737,3740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3914,3917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3914,3917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9668,9671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9668,9671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { \r\n  Wrench, \r\n  Image, \r\n  MessageSquare, \r\n  Users, \r\n  Clock, \r\n  DollarSign,\r\n  Plus,\r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Circle,\r\n  Pause\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\nimport { useVehicleDetail } from '@/hooks/useGetReadyVehicles';\r\nimport { useGetReadyStore } from '@/hooks/useGetReadyStore';\r\n\r\ninterface VehicleDetailPanelProps {\r\n  className?: string;\r\n}\r\n\r\nexport function VehicleDetailPanel({ className }: VehicleDetailPanelProps) {\r\n  const { t } = useTranslation();\r\n  const { selectedVehicleId } = useGetReadyStore();\r\n  const { data: vehicleDetail, isLoading } = useVehicleDetail(selectedVehicleId);\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n      case 'in_progress': return <Circle className=\"h-4 w-4 text-blue-600\" />;\r\n      case 'pending': return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\r\n      case 'declined': return <Pause className=\"h-4 w-4 text-red-600\" />;\r\n      default: return <Circle className=\"h-4 w-4 text-gray-400\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'text-green-600 bg-green-50 border-green-200';\r\n      case 'in_progress': return 'text-blue-600 bg-blue-50 border-blue-200';\r\n      case 'pending': return 'text-yellow-600 bg-yellow-50 border-yellow-200';\r\n      case 'declined': return 'text-red-600 bg-red-50 border-red-200';\r\n      default: return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  };\r\n\r\n  if (!selectedVehicleId) {\r\n    return (\r\n      <div className={cn(\"flex items-center justify-center h-full bg-muted/20\", className)}>\r\n        <div className=\"text-center text-muted-foreground\">\r\n          <Circle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n          <h3 className=\"text-lg font-medium mb-2\">\r\n            {t('get_ready.detail_panel.no_selection.title')}\r\n          </h3>\r\n          <p className=\"text-sm\">\r\n            {t('get_ready.detail_panel.no_selection.description')}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className={cn(\"p-4\", className)}>\r\n        <div className=\"space-y-4\">\r\n          <div className=\"h-8 bg-muted animate-pulse rounded\" />\r\n          <div className=\"h-64 bg-muted animate-pulse rounded\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!vehicleDetail) {\r\n    return (\r\n      <div className={cn(\"flex items-center justify-center h-full\", className)}>\r\n        <div className=\"text-center text-muted-foreground\">\r\n          <AlertTriangle className=\"h-12 w-12 mx-auto mb-4 text-red-500 opacity-50\" />\r\n          <h3 className=\"text-lg font-medium mb-2\">\r\n            {t('get_ready.detail_panel.error.title')}\r\n          </h3>\r\n          <p className=\"text-sm\">\r\n            {t('get_ready.detail_panel.error.description')}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const vehicle = vehicleDetail as any;\r\n  const workItems = (vehicleDetail.work_orders as any[]) || [];\r\n  const media: any[] = []; // Empty for now since attachments property doesn't exist\r\n  const notes: any[] = []; // Empty for now since comments property doesn't exist\r\n\r\n  // Calculate work item counters\r\n  const workItemCounters = workItems.reduce((acc: Record<string, number>, item: any) => {\r\n    acc[item.status] = (acc[item.status] || 0) + 1;\r\n    return acc;\r\n  }, {});\r\n\r\n  const needAttention = (workItemCounters.pending || 0) + (workItems.filter((item: any) => item.approval_required).length || 0);\r\n  const inProgress = workItemCounters.in_progress || 0;\r\n  const declined = workItemCounters.declined || 0;\r\n  const completed = workItemCounters.completed || 0;\r\n\r\n  return (\r\n    <div className={cn(\"h-full flex flex-col\", className)}>\r\n      {/* Vehicle Header */}\r\n      <div className=\"p-4 border-b bg-card/50\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h2 className=\"text-lg font-semibold\">\r\n              {vehicle.vehicle_year} {vehicle.vehicle_make} {vehicle.vehicle_model}\r\n            </h2>\r\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n              <span>Stock: {vehicle.stock_number}</span>\r\n              <span>•</span>\r\n              <span>VIN: {vehicle.vin}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right\">\r\n            <div className=\"text-lg font-semibold\">\r\n              ${vehicle.retail_value?.toLocaleString() || 'N/A'}\r\n            </div>\r\n            <Badge variant=\"outline\" className=\"text-xs\">\r\n              {vehicle.current_step?.name || 'No Step'}\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabs Content */}\r\n      <div className=\"flex-1 overflow-hidden\">\r\n        <Tabs defaultValue=\"work-items\" className=\"h-full flex flex-col\">\r\n          <TabsList className=\"grid w-full grid-cols-6 mx-4 mt-4\">\r\n            <TabsTrigger value=\"work-items\" className=\"flex items-center gap-2\">\r\n              <Wrench className=\"h-4 w-4\" />\r\n              <span className=\"hidden sm:inline\">{t('get_ready.tabs.work_items')}</span>\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"media\" className=\"flex items-center gap-2\">\r\n              <Image className=\"h-4 w-4\" />\r\n              <span className=\"hidden sm:inline\">{t('get_ready.tabs.media')}</span>\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"notes\" className=\"flex items-center gap-2\">\r\n              <MessageSquare className=\"h-4 w-4\" />\r\n              <span className=\"hidden sm:inline\">{t('get_ready.tabs.notes')}</span>\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"vendors\" className=\"flex items-center gap-2\">\r\n              <Users className=\"h-4 w-4\" />\r\n              <span className=\"hidden sm:inline\">{t('get_ready.tabs.vendors')}</span>\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"timeline\" className=\"flex items-center gap-2\">\r\n              <Clock className=\"h-4 w-4\" />\r\n              <span className=\"hidden sm:inline\">{t('get_ready.tabs.timeline')}</span>\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"appraisal\" className=\"flex items-center gap-2\">\r\n              <DollarSign className=\"h-4 w-4\" />\r\n              <span className=\"hidden sm:inline\">{t('get_ready.tabs.appraisal')}</span>\r\n            </TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Work Items Tab */}\r\n          <TabsContent value=\"work-items\" className=\"flex-1 overflow-hidden p-4\">\r\n            <div className=\"h-full flex flex-col\">\r\n              {/* Counters */}\r\n              <div className=\"grid grid-cols-4 gap-4 mb-4\">\r\n                <Card className=\"p-3\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\r\n                    <div>\r\n                      <div className=\"text-2xl font-bold\">{needAttention}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {t('get_ready.work_items.need_attention')}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n                <Card className=\"p-3\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Circle className=\"h-4 w-4 text-blue-600\" />\r\n                    <div>\r\n                      <div className=\"text-2xl font-bold\">{inProgress}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {t('get_ready.work_items.in_progress')}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n                <Card className=\"p-3\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Pause className=\"h-4 w-4 text-red-600\" />\r\n                    <div>\r\n                      <div className=\"text-2xl font-bold\">{declined}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {t('get_ready.work_items.declined')}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n                <Card className=\"p-3\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n                    <div>\r\n                      <div className=\"text-2xl font-bold\">{completed}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {t('get_ready.work_items.completed')}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </Card>\r\n              </div>\r\n\r\n              {/* Add Work Item Button */}\r\n              <div className=\"mb-4\">\r\n                <Button size=\"sm\">\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  {t('get_ready.work_items.add_work_item')}\r\n                </Button>\r\n              </div>\r\n\r\n              {/* Work Items List */}\r\n              <div className=\"flex-1 overflow-y-auto space-y-2\">\r\n                {workItems.length > 0 ? (\r\n                  workItems.map((item: any) => (\r\n                    <Card key={item.id} className=\"p-3\">\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"flex items-start gap-3 flex-1\">\r\n                          {getStatusIcon(item.status)}\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"font-medium text-sm\">{item.title}</div>\r\n                            {item.description && (\r\n                              <div className=\"text-xs text-muted-foreground mt-1\">\r\n                                {item.description}\r\n                              </div>\r\n                            )}\r\n                            <div className=\"flex items-center gap-2 mt-2\">\r\n                              <Badge variant=\"outline\" className={cn(\"text-xs\", getStatusColor(item.status))}>\r\n                                {t(`get_ready.work_items.status.${item.status}`)}\r\n                              </Badge>\r\n                              <Badge variant=\"outline\" className=\"text-xs\">\r\n                                {item.work_type}\r\n                              </Badge>\r\n                              {item.estimated_cost > 0 && (\r\n                                <span className=\"text-xs text-muted-foreground\">\r\n                                  ${item.estimated_cost}\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </Card>\r\n                  ))\r\n                ) : (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    <Wrench className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n                    <div className=\"text-sm\">{t('get_ready.work_items.no_items')}</div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* Other tabs with placeholder content */}\r\n          <TabsContent value=\"media\" className=\"flex-1 p-4\">\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Image className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n              <div className=\"text-sm\">{t('get_ready.media.coming_soon')}</div>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"notes\" className=\"flex-1 p-4\">\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <MessageSquare className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n              <div className=\"text-sm\">{t('get_ready.notes.coming_soon')}</div>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"vendors\" className=\"flex-1 p-4\">\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Users className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n              <div className=\"text-sm\">{t('get_ready.vendors.coming_soon')}</div>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"timeline\" className=\"flex-1 p-4\">\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Clock className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n              <div className=\"text-sm\">{t('get_ready.timeline.coming_soon')}</div>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"appraisal\" className=\"flex-1 p-4\">\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <DollarSign className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n              <div className=\"text-sm\">{t('get_ready.appraisal.coming_soon')}</div>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\get-ready\\VehicleTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\invitations\\InvitationManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2751,2754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2751,2754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5496,5499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5496,5499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6384,6387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6384,6387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { PermissionGuard } from '@/components/permissions/PermissionGuard';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { \r\n  Mail, \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle, \r\n  Send, \r\n  Trash2, \r\n  RotateCcw,\r\n  Calendar,\r\n  User,\r\n  Building2,\r\n  AlertCircle\r\n} from 'lucide-react';\r\nimport { formatDistanceToNow, format, isAfter } from 'date-fns';\r\nimport { DealerInvitationModal } from '@/components/dealerships/DealerInvitationModal';\r\nimport { InvitationTemplateModal } from './InvitationTemplateModal';\r\n\r\ninterface Invitation {\r\n  id: string;\r\n  email: string;\r\n  role_name: string;\r\n  dealer_id: number;\r\n  inviter_id: string;\r\n  invitation_token: string;\r\n  created_at: string;\r\n  expires_at: string;\r\n  accepted_at?: string;\r\n  updated_at: string;\r\n  dealer?: {\r\n    name: string;\r\n  };\r\n  inviter?: {\r\n    email: string;\r\n    first_name?: string;\r\n    last_name?: string;\r\n  };\r\n}\r\n\r\ntype InvitationStatus = 'all' | 'pending' | 'accepted' | 'expired';\r\n\r\nexport const InvitationManagement: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  \r\n  // State management\r\n  const [invitations, setInvitations] = useState<Invitation[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [selectedStatus, setSelectedStatus] = useState<InvitationStatus>('all');\r\n  const [isInviteModalOpen, setIsInviteModalOpen] = useState(false);\r\n  const [isTemplateModalOpen, setIsTemplateModalOpen] = useState(false);\r\n  const [selectedDealership, setSelectedDealership] = useState<number | null>(null);\r\n\r\n  // Data fetching\r\n  const fetchInvitations = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const { data, error } = await supabase\r\n        .from('dealer_invitations')\r\n        .select(`\r\n          *,\r\n          dealerships!inner (\r\n            name\r\n          ),\r\n          profiles!dealer_invitations_inviter_id_fkey (\r\n            email,\r\n            first_name,\r\n            last_name\r\n          )\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      setInvitations(data || []);\r\n    } catch (error: any) {\r\n      console.error('Error fetching invitations:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error loading invitations',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [t, toast]);\r\n\r\n  // Filter invitations by status\r\n  const getFilteredInvitations = () => {\r\n    const now = new Date();\r\n    \r\n    return invitations.filter(invitation => {\r\n      const isExpired = isAfter(now, new Date(invitation.expires_at));\r\n      const isAccepted = !!invitation.accepted_at;\r\n      \r\n      switch (selectedStatus) {\r\n        case 'pending':\r\n          return !isAccepted && !isExpired;\r\n        case 'accepted':\r\n          return isAccepted;\r\n        case 'expired':\r\n          return isExpired && !isAccepted;\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n  };\r\n\r\n  // Get invitation status\r\n  const getInvitationStatus = (invitation: Invitation) => {\r\n    const now = new Date();\r\n    const isExpired = isAfter(now, new Date(invitation.expires_at));\r\n    \r\n    if (invitation.accepted_at) return 'accepted';\r\n    if (isExpired) return 'expired';\r\n    return 'pending';\r\n  };\r\n\r\n  // Get status badge variant\r\n  const getStatusBadgeVariant = (status: string) => {\r\n    switch (status) {\r\n      case 'accepted':\r\n        return 'default';\r\n      case 'expired':\r\n        return 'destructive';\r\n      case 'pending':\r\n        return 'secondary';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  // Get status icon\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'accepted':\r\n        return <CheckCircle className=\"h-4 w-4\" />;\r\n      case 'expired':\r\n        return <XCircle className=\"h-4 w-4\" />;\r\n      case 'pending':\r\n        return <Clock className=\"h-4 w-4\" />;\r\n      default:\r\n        return <Mail className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  // Resend invitation\r\n  const handleResendInvitation = useCallback(async (invitation: Invitation) => {\r\n    try {\r\n      // For now, we'll just extend the expiration date\r\n      // In a real implementation, you'd want to call an edge function to resend the email\r\n      const newExpirationDate = new Date();\r\n      newExpirationDate.setDate(newExpirationDate.getDate() + 7);\r\n\r\n      const { error } = await supabase\r\n        .from('dealer_invitations')\r\n        .update({\r\n          expires_at: newExpirationDate.toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', invitation.id);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: 'Invitation resent successfully',\r\n      });\r\n\r\n      fetchInvitations();\r\n    } catch (error: any) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error resending invitation',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [t, toast, fetchInvitations]);\r\n\r\n  // Cancel invitation\r\n  const handleCancelInvitation = useCallback(async (invitation: Invitation) => {\r\n    if (!confirm('Are you sure you want to cancel this invitation?')) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('dealer_invitations')\r\n        .update({\r\n          expires_at: new Date().toISOString(), // Set to now to expire it\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', invitation.id);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: 'Invitation cancelled successfully',\r\n      });\r\n\r\n      fetchInvitations();\r\n    } catch (error: any) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error cancelling invitation',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  }, [t, toast, fetchInvitations]);\r\n\r\n  // Get invitation stats\r\n  const getInvitationStats = () => {\r\n    const now = new Date();\r\n    const total = invitations.length;\r\n    const pending = invitations.filter(inv => \r\n      !inv.accepted_at && !isAfter(now, new Date(inv.expires_at))\r\n    ).length;\r\n    const accepted = invitations.filter(inv => !!inv.accepted_at).length;\r\n    const expired = invitations.filter(inv => \r\n      !inv.accepted_at && isAfter(now, new Date(inv.expires_at))\r\n    ).length;\r\n\r\n    return { total, pending, accepted, expired };\r\n  };\r\n\r\n  const stats = getInvitationStats();\r\n  const filteredInvitations = getFilteredInvitations();\r\n\r\n  useEffect(() => {\r\n    fetchInvitations();\r\n  }, [fetchInvitations]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          {[...Array(4)].map((_, i) => (\r\n            <Card key={i} className=\"animate-pulse\">\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"h-4 bg-muted rounded w-1/2 mb-2\"></div>\r\n                <div className=\"h-8 bg-muted rounded w-1/3\"></div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PermissionGuard module=\"users\" permission=\"write\">\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h2 className=\"text-2xl font-bold tracking-tight\">Invitation Management</h2>\r\n            <p className=\"text-muted-foreground\">\r\n              Manage user invitations and track their status\r\n            </p>\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => setIsTemplateModalOpen(true)}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Mail className=\"h-4 w-4\" />\r\n              Templates\r\n            </Button>\r\n            <Button\r\n              onClick={() => setIsInviteModalOpen(true)}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Send className=\"h-4 w-4\" />\r\n              Send Invitation\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.total}</p>\r\n                </div>\r\n                <Mail className=\"h-8 w-8 text-blue-500\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.pending}</p>\r\n                </div>\r\n                <Clock className=\"h-8 w-8 text-yellow-500\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Accepted</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.accepted}</p>\r\n                </div>\r\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Expired</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.expired}</p>\r\n                </div>\r\n                <XCircle className=\"h-8 w-8 text-red-500\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filter Tabs */}\r\n        <Tabs value={selectedStatus} onValueChange={(value) => setSelectedStatus(value as InvitationStatus)}>\r\n          <TabsList className=\"grid w-full grid-cols-4\">\r\n            <TabsTrigger value=\"all\">All ({stats.total})</TabsTrigger>\r\n            <TabsTrigger value=\"pending\">Pending ({stats.pending})</TabsTrigger>\r\n            <TabsTrigger value=\"accepted\">Accepted ({stats.accepted})</TabsTrigger>\r\n            <TabsTrigger value=\"expired\">Expired ({stats.expired})</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value={selectedStatus} className=\"mt-6\">\r\n            <Card>\r\n              <CardContent className=\"p-0\">\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Invitee</TableHead>\r\n                      <TableHead>Role</TableHead>\r\n                      <TableHead>Dealership</TableHead>\r\n                      <TableHead>Inviter</TableHead>\r\n                      <TableHead>Status</TableHead>\r\n                      <TableHead>Sent</TableHead>\r\n                      <TableHead>Expires</TableHead>\r\n                      <TableHead className=\"text-right\">Actions</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {filteredInvitations.length === 0 ? (\r\n                      <TableRow>\r\n                        <TableCell colSpan={8} className=\"text-center py-8\">\r\n                          <div className=\"flex flex-col items-center gap-2\">\r\n                            <Mail className=\"h-8 w-8 text-muted-foreground\" />\r\n                            <p className=\"text-muted-foreground\">No invitations found</p>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ) : (\r\n                      filteredInvitations.map((invitation) => {\r\n                        const status = getInvitationStatus(invitation);\r\n                        \r\n                        return (\r\n                          <TableRow key={invitation.id}>\r\n                            <TableCell>\r\n                              <div className=\"flex items-center gap-3\">\r\n                                <Avatar className=\"h-8 w-8\">\r\n                                  <AvatarFallback className=\"text-xs\">\r\n                                    {invitation.email.slice(0, 2).toUpperCase()}\r\n                                  </AvatarFallback>\r\n                                </Avatar>\r\n                                <div>\r\n                                  <p className=\"font-medium\">{invitation.email}</p>\r\n                                </div>\r\n                              </div>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Badge variant=\"outline\">{invitation.role_name}</Badge>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <Building2 className=\"h-4 w-4 text-muted-foreground\" />\r\n                                <span className=\"text-sm\">{invitation.dealer?.name || 'Unknown'}</span>\r\n                              </div>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <User className=\"h-4 w-4 text-muted-foreground\" />\r\n                                <span className=\"text-sm\">\r\n                                  {invitation.inviter?.first_name || invitation.inviter?.email || 'Unknown'}\r\n                                </span>\r\n                              </div>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <Badge variant={getStatusBadgeVariant(status)} className=\"flex items-center gap-1 w-fit\">\r\n                                {getStatusIcon(status)}\r\n                                {status.charAt(0).toUpperCase() + status.slice(1)}\r\n                              </Badge>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                                <Calendar className=\"h-4 w-4\" />\r\n                                {formatDistanceToNow(new Date(invitation.created_at), { addSuffix: true })}\r\n                              </div>\r\n                            </TableCell>\r\n                            <TableCell>\r\n                              <div className=\"text-sm\">\r\n                                {status === 'expired' ? (\r\n                                  <div className=\"flex items-center gap-1 text-red-600\">\r\n                                    <AlertCircle className=\"h-4 w-4\" />\r\n                                    Expired\r\n                                  </div>\r\n                                ) : (\r\n                                  format(new Date(invitation.expires_at), 'MMM dd, yyyy')\r\n                                )}\r\n                              </div>\r\n                            </TableCell>\r\n                            <TableCell className=\"text-right\">\r\n                              <div className=\"flex items-center gap-1 justify-end\">\r\n                                {status === 'pending' && (\r\n                                  <Button\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleResendInvitation(invitation)}\r\n                                    className=\"h-8 w-8 p-0\"\r\n                                  >\r\n                                    <RotateCcw className=\"h-4 w-4\" />\r\n                                  </Button>\r\n                                )}\r\n                                {(status === 'expired' || status === 'pending') && (\r\n                                  <Button\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleResendInvitation(invitation)}\r\n                                    className=\"h-8 w-8 p-0\"\r\n                                  >\r\n                                    <Send className=\"h-4 w-4\" />\r\n                                  </Button>\r\n                                )}\r\n                                {status !== 'accepted' && (\r\n                                  <Button\r\n                                    variant=\"ghost\"\r\n                                    size=\"sm\"\r\n                                    onClick={() => handleCancelInvitation(invitation)}\r\n                                    className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\r\n                                  >\r\n                                    <Trash2 className=\"h-4 w-4\" />\r\n                                  </Button>\r\n                                )}\r\n                              </div>\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        {/* Modals */}\r\n        <DealerInvitationModal\r\n          isOpen={isInviteModalOpen}\r\n          onClose={() => setIsInviteModalOpen(false)}\r\n          dealerId={selectedDealership || 1}\r\n          onInvitationSent={() => {\r\n            fetchInvitations();\r\n            setIsInviteModalOpen(false);\r\n          }}\r\n        />\r\n\r\n        <InvitationTemplateModal\r\n          isOpen={isTemplateModalOpen}\r\n          onClose={() => setIsTemplateModalOpen(false)}\r\n        />\r\n      </div>\r\n    </PermissionGuard>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\invitations\\InvitationTemplateModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\management\\DealershipManagementSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\management\\DealershipPerformanceTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":79,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2007,2010],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2007,2010],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { \r\n  Building2, \r\n  Users, \r\n  ClipboardList, \r\n  TrendingUp,\r\n  TrendingDown,\r\n  Activity,\r\n  Eye,\r\n  RefreshCw,\r\n  AlertCircle,\r\n  BarChart3\r\n} from 'lucide-react';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { es, ptBR } from 'date-fns/locale';\r\n\r\ninterface DealershipPerformance {\r\n  dealership_id: number;\r\n  dealership_name: string;\r\n  total_users: number;\r\n  active_users: number;\r\n  total_orders: number;\r\n  orders_this_month: number;\r\n  avg_orders_per_user: number;\r\n  user_growth_rate: number;\r\n  last_activity: string;\r\n  status: string;\r\n}\r\n\r\ninterface DealershipPerformanceTableProps {\r\n  className?: string;\r\n}\r\n\r\nexport const DealershipPerformanceTable: React.FC<DealershipPerformanceTableProps> = ({ \r\n  className \r\n}) => {\r\n  const { t, i18n } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const [performance, setPerformance] = useState<DealershipPerformance[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchPerformanceStats();\r\n  }, []);\r\n\r\n  const fetchPerformanceStats = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const { data, error } = await supabase\r\n        .rpc('get_dealership_performance_stats');\r\n\r\n      if (error) throw error;\r\n\r\n      setPerformance(data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching performance stats:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getStatusBadgeVariant = (status: string) => {\r\n    switch (status) {\r\n      case 'active': return 'default';\r\n      case 'inactive': return 'secondary';\r\n      case 'suspended': return 'destructive';\r\n      default: return 'secondary';\r\n    }\r\n  };\r\n\r\n  const getPerformanceIndicator = (rate: number) => {\r\n    if (rate >= 80) {\r\n      return { icon: TrendingUp, color: 'text-green-600', label: t('common.excellent') };\r\n    } else if (rate >= 60) {\r\n      return { icon: TrendingUp, color: 'text-yellow-600', label: t('common.good') };\r\n    } else {\r\n      return { icon: TrendingDown, color: 'text-red-600', label: t('common.low') };\r\n    }\r\n  };\r\n\r\n  const getDateLocale = () => {\r\n    switch (i18n.language) {\r\n      case 'es':\r\n        return es;\r\n      case 'pt-BR':\r\n        return ptBR;\r\n      default:\r\n        return undefined;\r\n    }\r\n  };\r\n\r\n  const handleViewDealership = (dealershipId: number) => {\r\n    navigate(`/dealers/${dealershipId}`);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Activity className=\"h-5 w-5\" />\r\n            Rendimiento de Concesionarios\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"animate-pulse space-y-4\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"h-12 bg-muted rounded\"></div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"text-center text-muted-foreground\">\r\n            <AlertCircle className=\"h-8 w-8 mx-auto mb-2 text-destructive\" />\r\n            <p>{t('messages.error')}</p>\r\n            <Button variant=\"outline\" size=\"sm\" onClick={fetchPerformanceStats} className=\"mt-2\">\r\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n              {t('common.retry')}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <BarChart3 className=\"h-5 w-5\" />\r\n              {t('management.dealership_performance')}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {t('management.performance_desc')}\r\n            </CardDescription>\r\n            <CardDescription>\r\n              Análisis de actividad y métricas de rendimiento por concesionario\r\n            </CardDescription>\r\n          </div>\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            onClick={fetchPerformanceStats}\r\n            disabled={loading}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n          </Button>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {performance.length === 0 ? (\r\n          <div className=\"text-center py-8 text-muted-foreground\">\r\n            <Building2 className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n            <p>{t('common.no_data')}</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"overflow-x-auto\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>{t('dealerships.name')}</TableHead>\r\n                  <TableHead className=\"text-center\">{t('users.title')}</TableHead>\r\n                  <TableHead className=\"text-center\">{t('dealerships.total_orders')}</TableHead>\r\n                  <TableHead className=\"text-center\">{t('management.performance_metrics')}</TableHead>\r\n                  <TableHead className=\"text-center\">{t('management.last_activity')}</TableHead>\r\n                  <TableHead className=\"text-center\">{t('common.status')}</TableHead>\r\n                  <TableHead className=\"w-12\"></TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {performance.map((dealership) => {\r\n                  const performanceIndicator = getPerformanceIndicator(dealership.user_growth_rate);\r\n                  const PerformanceIcon = performanceIndicator.icon;\r\n                  \r\n                  return (\r\n                    <TableRow \r\n                      key={dealership.dealership_id} \r\n                      className=\"cursor-pointer hover:bg-muted/50\"\r\n                      onClick={() => handleViewDealership(dealership.dealership_id)}\r\n                    >\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <Avatar className=\"h-10 w-10\">\r\n                            <AvatarFallback>\r\n                              <Building2 className=\"h-4 w-4\" />\r\n                            </AvatarFallback>\r\n                          </Avatar>\r\n                          <div>\r\n                            <div className=\"font-medium\">{dealership.dealership_name}</div>\r\n                            <div className=\"text-sm text-muted-foreground\">\r\n                              ID: {dealership.dealership_id}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell className=\"text-center\">\r\n                        <div className=\"flex flex-col items-center gap-1\">\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n                            <span className=\"font-medium\">{dealership.total_users}</span>\r\n                          </div>\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {dealership.active_users} {t('dealerships.active_users')}\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell className=\"text-center\">\r\n                        <div className=\"flex flex-col items-center gap-1\">\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <ClipboardList className=\"h-4 w-4 text-muted-foreground\" />\r\n                            <span className=\"font-medium\">{dealership.total_orders}</span>\r\n                          </div>\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {dealership.orders_this_month} {t('dealerships.orders_this_month')}\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell className=\"text-center\">\r\n                        <div className=\"flex flex-col items-center gap-1\">\r\n                          <div className={`flex items-center gap-1 ${performanceIndicator.color}`}>\r\n                            <PerformanceIcon className=\"h-4 w-4\" />\r\n                            <span className=\"font-medium\">{dealership.user_growth_rate}%</span>\r\n                          </div>\r\n                          <div className={`text-xs ${performanceIndicator.color}`}>\r\n                            {performanceIndicator.label}\r\n                          </div>\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {dealership.avg_orders_per_user.toFixed(1)} {t('management.orders_per_user').toLowerCase()}\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell className=\"text-center\">\r\n                        <div className=\"text-xs text-muted-foreground\">\r\n                          {formatDistanceToNow(new Date(dealership.last_activity), {\r\n                            addSuffix: true,\r\n                            locale: getDateLocale()\r\n                          })}\r\n                        </div>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell className=\"text-center\">\r\n                        <Badge variant={getStatusBadgeVariant(dealership.status)}>\r\n                          {t(`dealerships.${dealership.status}`)}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      \r\n                      <TableCell>\r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleViewDealership(dealership.dealership_id);\r\n                          }}\r\n                        >\r\n                          <Eye className=\"h-4 w-4\" />\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\management\\EnhancedUserManagementSection.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3091,3094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3091,3094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3691,3694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3691,3694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { PermissionGuard } from '@/components/permissions/PermissionGuard';\r\nimport { DealerInvitationModal } from '@/components/dealerships/DealerInvitationModal';\r\nimport { RoleAssignmentModal } from '@/components/permissions/RoleAssignmentModal';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { Search, UserPlus, Settings, Activity } from 'lucide-react';\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  first_name?: string;\r\n  last_name?: string;\r\n  user_type: 'dealer' | 'detail' | 'system_admin';\r\n  dealership_id?: number;\r\n  roles: UserRole[];\r\n}\r\n\r\ninterface UserRole {\r\n  role_id: string;\r\n  role_name: string;\r\n  display_name: string;\r\n  expires_at?: string;\r\n}\r\n\r\ninterface DealershipInfo {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\nexport const EnhancedUserManagementSection: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const { user } = useAuth();\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [filteredUsers, setFilteredUsers] = useState<User[]>([]);\r\n  const [dealerships, setDealerships] = useState<DealershipInfo[]>([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [userTypeFilter, setUserTypeFilter] = useState<string>('all');\r\n  const [selectedDealership, setSelectedDealership] = useState<number | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\r\n  const [isInvitationModalOpen, setIsInvitationModalOpen] = useState(false);\r\n  const [isRoleModalOpen, setIsRoleModalOpen] = useState(false);\r\n\r\n  const fetchUsersWithRoles = useCallback(async () => {\r\n    try {\r\n      setIsLoading(true);\r\n\r\n      // Fetch users from profiles\r\n      const { data: profilesData, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .order('email');\r\n\r\n      if (profilesError) throw profilesError;\r\n\r\n      // Fetch roles for each user\r\n      const usersWithRoles = await Promise.all(\r\n        (profilesData || []).map(async (profile) => {\r\n          const { data: rolesData } = await supabase\r\n            .rpc('get_user_roles', { user_uuid: profile.id });\r\n\r\n          return {\r\n            ...profile,\r\n            roles: rolesData || [],\r\n          };\r\n        })\r\n      );\r\n\r\n      setUsers(usersWithRoles);\r\n    } catch (error: any) {\r\n      console.error('Error fetching users:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error al cargar usuarios',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [t, toast]);\r\n\r\n  const fetchDealerships = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('dealerships')\r\n        .select('id, name')\r\n        .eq('status', 'active')\r\n        .order('name');\r\n\r\n      if (error) throw error;\r\n      setDealerships(data || []);\r\n    } catch (error: any) {\r\n      console.error('Error fetching dealerships:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchUsersWithRoles();\r\n    fetchDealerships();\r\n  }, [fetchUsersWithRoles]);\r\n\r\n  const filterUsers = useCallback(() => {\r\n    let filtered = users;\r\n\r\n    if (searchQuery) {\r\n      filtered = filtered.filter(user =>\r\n        user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        getDisplayName(user).toLowerCase().includes(searchQuery.toLowerCase())\r\n      );\r\n    }\r\n\r\n    if (userTypeFilter !== 'all') {\r\n      filtered = filtered.filter(user => user.user_type === userTypeFilter);\r\n    }\r\n\r\n    if (selectedDealership) {\r\n      filtered = filtered.filter(user => user.dealership_id === selectedDealership);\r\n    }\r\n\r\n    setFilteredUsers(filtered);\r\n  }, [users, searchQuery, userTypeFilter, selectedDealership]);\r\n\r\n  useEffect(() => {\r\n    filterUsers();\r\n  }, [filterUsers]);\r\n\r\n\r\n  const getDisplayName = (user: User) => {\r\n    if (user.first_name || user.last_name) {\r\n      return `${user.first_name || ''} ${user.last_name || ''}`.trim();\r\n    }\r\n    return user.email.split('@')[0];\r\n  };\r\n\r\n  const getInitials = (user: User) => {\r\n    const name = getDisplayName(user);\r\n    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);\r\n  };\r\n\r\n  const getDealershipName = (dealershipId?: number) => {\r\n    if (!dealershipId) return 'Sin asignar';\r\n    const dealership = dealerships.find(d => d.id === dealershipId);\r\n    return dealership?.name || `Dealership ${dealershipId}`;\r\n  };\r\n\r\n  const handleManageRoles = (user: User) => {\r\n    setSelectedUser(user);\r\n    setIsRoleModalOpen(true);\r\n  };\r\n\r\n  const handleRoleModalClose = () => {\r\n    setIsRoleModalOpen(false);\r\n    setSelectedUser(null);\r\n  };\r\n\r\n  const handleRoleModalSuccess = () => {\r\n    fetchUsersWithRoles();\r\n    handleRoleModalClose();\r\n  };\r\n\r\n  const handleInvitationSent = () => {\r\n    fetchUsersWithRoles();\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Card>\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"animate-pulse space-y-4\">\r\n            <div className=\"h-4 bg-muted rounded w-1/4\"></div>\r\n            <div className=\"space-y-2\">\r\n              <div className=\"h-4 bg-muted rounded\"></div>\r\n              <div className=\"h-4 bg-muted rounded w-3/4\"></div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PermissionGuard module=\"users\" permission=\"read\">\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Settings className=\"h-5 w-5\" />\r\n            Gestión de Usuarios\r\n          </CardTitle>\r\n          <PermissionGuard module=\"users\" permission=\"write\">\r\n            <Button\r\n              onClick={() => setIsInvitationModalOpen(true)}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <UserPlus className=\"h-4 w-4\" />\r\n              Invitar Usuario\r\n            </Button>\r\n          </PermissionGuard>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-4\">\r\n          {/* Filters */}\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"relative flex-1\">\r\n              <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder=\"Buscar usuarios...\"\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                className=\"pl-9\"\r\n              />\r\n            </div>\r\n            <Select value={userTypeFilter} onValueChange={setUserTypeFilter}>\r\n              <SelectTrigger className=\"w-[180px]\">\r\n                <SelectValue placeholder=\"Tipo de usuario\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">Todos</SelectItem>\r\n                <SelectItem value=\"dealer\">Dealer</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n            <Select \r\n              value={selectedDealership?.toString() || 'all'} \r\n              onValueChange={(value) => setSelectedDealership(value === 'all' ? null : parseInt(value))}\r\n            >\r\n              <SelectTrigger className=\"w-[200px]\">\r\n                <SelectValue placeholder=\"Dealership\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">Todos</SelectItem>\r\n                {dealerships.map((dealership) => (\r\n                  <SelectItem key={dealership.id} value={dealership.id.toString()}>\r\n                    {dealership.name}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {/* Users Table */}\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Usuario</TableHead>\r\n                  <TableHead>Tipo</TableHead>\r\n                  <TableHead>Dealership</TableHead>\r\n                  <TableHead>Roles</TableHead>\r\n                  <TableHead>Estado</TableHead>\r\n                  <TableHead className=\"text-right\">Acciones</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredUsers.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={6} className=\"text-center py-4 text-muted-foreground\">\r\n                      No se encontraron usuarios\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  filteredUsers.map((user) => (\r\n                    <TableRow key={user.id}>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <Avatar className=\"h-8 w-8\">\r\n                            <AvatarFallback className=\"bg-primary/10 text-primary text-xs\">\r\n                              {getInitials(user)}\r\n                            </AvatarFallback>\r\n                          </Avatar>\r\n                          <div>\r\n                            <div className=\"font-medium\">{getDisplayName(user)}</div>\r\n                            <div className=\"text-sm text-muted-foreground\">{user.email}</div>\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge variant=\"default\">\r\n                          Dealer\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell>{getDealershipName(user.dealership_id)}</TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex flex-wrap gap-1\">\r\n                          {user.roles.length > 0 ? (\r\n                            user.roles.map((role) => (\r\n                              <Badge key={role.role_id} variant=\"outline\" className=\"text-xs\">\r\n                                {role.display_name}\r\n                              </Badge>\r\n                            ))\r\n                          ) : (\r\n                            <span className=\"text-sm text-muted-foreground\">Sin roles</span>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Activity className=\"h-4 w-4 text-green-500\" />\r\n                          <span className=\"text-sm\">Activo</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell className=\"text-right\">\r\n                        <PermissionGuard module=\"users\" permission=\"write\">\r\n                          <Button\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={() => handleManageRoles(user)}\r\n                          >\r\n                            Gestionar\r\n                          </Button>\r\n                        </PermissionGuard>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Invitation Modal */}\r\n      <DealerInvitationModal\r\n        isOpen={isInvitationModalOpen}\r\n        onClose={() => setIsInvitationModalOpen(false)}\r\n        dealerId={selectedDealership} // Pass selected dealership or null for selector\r\n        onInvitationSent={handleInvitationSent}\r\n      />\r\n\r\n      {selectedUser && (\r\n        <RoleAssignmentModal\r\n          isOpen={isRoleModalOpen}\r\n          onClose={handleRoleModalClose}\r\n          user={selectedUser}\r\n          onSuccess={handleRoleModalSuccess}\r\n        />\r\n      )}\r\n    </PermissionGuard>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\management\\ManagementOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\management\\OrderNumberMigration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\management\\RecentActivityFeed.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2657,2660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2657,2660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { \r\n  Building2, \r\n  Mail, \r\n  UserPlus, \r\n  Activity,\r\n  RefreshCw,\r\n  Clock,\r\n  AlertCircle\r\n} from 'lucide-react';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { es, ptBR } from 'date-fns/locale';\r\n\r\ninterface SystemActivity {\r\n  activity_type: string;\r\n  activity_description: string;\r\n  entity_type: string;\r\n  entity_id: string;\r\n  created_at: string;\r\n  user_email: string;\r\n}\r\n\r\ninterface RecentActivityFeedProps {\r\n  className?: string;\r\n}\r\n\r\nexport const RecentActivityFeed: React.FC<RecentActivityFeedProps> = ({ className }) => {\r\n  const { t, i18n } = useTranslation();\r\n  const [activities, setActivities] = useState<SystemActivity[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchRecentActivity();\r\n    \r\n    // Real-time subscription for dealer activities\r\n    const channel = supabase\r\n      .channel('system_activity_realtime')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'dealerships'\r\n        },\r\n        () => {\r\n          console.log('System activity changed, refreshing...');\r\n          fetchRecentActivity();\r\n        }\r\n      )\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'dealer_invitations'\r\n        },\r\n        () => {\r\n          console.log('Invitations changed, refreshing activity...');\r\n          fetchRecentActivity();\r\n        }\r\n      )\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'dealer_memberships'\r\n        },\r\n        () => {\r\n          console.log('Memberships changed, refreshing activity...');\r\n          fetchRecentActivity();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, []);\r\n\r\n  const fetchRecentActivity = async () => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const { data, error } = await supabase\r\n        .rpc('get_recent_system_activity');\r\n\r\n      if (error) throw error;\r\n\r\n      setActivities(data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching recent activity:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getActivityIcon = (activityType: string) => {\r\n    switch (activityType) {\r\n      case 'dealership_created':\r\n        return Building2;\r\n      case 'invitation_sent':\r\n        return Mail;\r\n      case 'user_joined':\r\n        return UserPlus;\r\n      default:\r\n        return Activity;\r\n    }\r\n  };\r\n\r\n  const getActivityColor = (activityType: string) => {\r\n    switch (activityType) {\r\n      case 'dealership_created':\r\n        return 'text-blue-600 bg-blue-100';\r\n      case 'invitation_sent':\r\n        return 'text-orange-600 bg-orange-100';\r\n      case 'user_joined':\r\n        return 'text-green-600 bg-green-100';\r\n      default:\r\n        return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  const getActivityBadge = (activityType: string) => {\r\n    switch (activityType) {\r\n      case 'dealership_created':\r\n        return { label: t('common.new'), variant: 'secondary' as const };\r\n      case 'invitation_sent':\r\n        return { label: t('invitations.title'), variant: 'outline' as const };\r\n      case 'user_joined':\r\n        return { label: t('users.title'), variant: 'default' as const };\r\n      default:\r\n        return { label: t('common.activity'), variant: 'secondary' as const };\r\n    }\r\n  };\r\n\r\n  const getDateLocale = () => {\r\n    switch (i18n.language) {\r\n      case 'es':\r\n        return es;\r\n      case 'pt-BR':\r\n        return ptBR;\r\n      default:\r\n        return undefined;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Activity className=\"h-5 w-5\" />\r\n            {t('management.recent_activity')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-3\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"flex items-center gap-3 animate-pulse\">\r\n                <div className=\"h-10 w-10 bg-muted rounded-full\"></div>\r\n                <div className=\"flex-1 space-y-2\">\r\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\r\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"text-center text-muted-foreground\">\r\n            <AlertCircle className=\"h-8 w-8 mx-auto mb-2 text-destructive\" />\r\n            <p>{t('messages.error')}</p>\r\n            <Button variant=\"outline\" size=\"sm\" onClick={fetchRecentActivity} className=\"mt-2\">\r\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n              {t('common.retry')}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Activity className=\"h-5 w-5\" />\r\n              {t('management.recent_activity')}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {t('management.recent_activity')} (7 {t('invitations.accept.days')})\r\n            </CardDescription>\r\n          </div>\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            onClick={fetchRecentActivity}\r\n            disabled={loading}\r\n          >\r\n            <RefreshCw className={`h-4 w-4 ${loading ? 'animate-spin' : ''}`} />\r\n          </Button>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        {activities.length === 0 ? (\r\n          <div className=\"text-center py-8 text-muted-foreground\">\r\n            <Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n            <p>{t('management.no_activity')}</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-4\">\r\n            {activities.map((activity, index) => {\r\n              const Icon = getActivityIcon(activity.activity_type);\r\n              const iconColorClass = getActivityColor(activity.activity_type);\r\n              const badge = getActivityBadge(activity.activity_type);\r\n              \r\n              return (\r\n                <div key={index} className=\"flex items-start gap-3 p-3 rounded-lg hover:bg-muted/50 transition-colors\">\r\n                  <div className={`p-2 rounded-full ${iconColorClass}`}>\r\n                    <Icon className=\"h-4 w-4\" />\r\n                  </div>\r\n                  \r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      <Badge variant={badge.variant} className=\"text-xs\">\r\n                        {badge.label}\r\n                      </Badge>\r\n                      <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\r\n                        <Clock className=\"h-3 w-3\" />\r\n                        {formatDistanceToNow(new Date(activity.created_at), {\r\n                          addSuffix: true,\r\n                          locale: getDateLocale()\r\n                        })}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <p className=\"text-sm font-medium text-foreground mb-1\">\r\n                      {activity.activity_description}\r\n                    </p>\r\n                    \r\n                    {activity.user_email && (\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Avatar className=\"h-5 w-5\">\r\n                          <AvatarFallback className=\"text-xs\">\r\n                            {activity.user_email.charAt(0).toUpperCase()}\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                        <span className=\"text-xs text-muted-foreground\">\r\n                          {activity.user_email}\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    ID: {activity.entity_id.slice(0, 8)}...\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\management\\SystemStatsCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2598,2601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2598,2601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Building2, \r\n  Users, \r\n  ClipboardList, \r\n  Mail, \r\n  Activity,\r\n  TrendingUp,\r\n  CheckCircle,\r\n  AlertTriangle\r\n} from 'lucide-react';\r\n\r\ninterface SystemStats {\r\n  total_dealerships: number;\r\n  active_dealerships: number;\r\n  total_users: number;\r\n  active_users: number;\r\n  total_orders: number;\r\n  orders_this_month: number;\r\n  orders_this_week: number;\r\n  pending_invitations: number;\r\n  system_health_score: number;\r\n}\r\n\r\ninterface SystemStatsCardProps {\r\n  className?: string;\r\n}\r\n\r\nexport const SystemStatsCard: React.FC<SystemStatsCardProps> = ({ className }) => {\r\n  const { t } = useTranslation();\r\n  const [stats, setStats] = useState<SystemStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    fetchSystemStats();\r\n    \r\n    // Real-time subscription for system changes\r\n    const channel = supabase\r\n      .channel('system_stats_realtime')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'dealerships'\r\n        },\r\n        () => {\r\n          console.log('Dealerships changed, refreshing stats...');\r\n          fetchSystemStats();\r\n        }\r\n      )\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'dealer_memberships'\r\n        },\r\n        () => {\r\n          console.log('Memberships changed, refreshing stats...');\r\n          fetchSystemStats();\r\n        }\r\n      )\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'orders'\r\n        },\r\n        () => {\r\n          console.log('Orders changed, refreshing stats...');\r\n          fetchSystemStats();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, []);\r\n\r\n  const fetchSystemStats = async () => {\r\n    try {\r\n      setError(null);\r\n      \r\n      const { data, error } = await supabase\r\n        .rpc('get_system_stats');\r\n\r\n      if (error) throw error;\r\n\r\n      if (data && data.length > 0) {\r\n        setStats(data[0]);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching system stats:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Activity className=\"h-5 w-5\" />\r\n            {t('management.system_status')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"animate-pulse space-y-4\">\r\n            <div className=\"h-4 bg-muted rounded w-3/4\"></div>\r\n            <div className=\"h-4 bg-muted rounded w-1/2\"></div>\r\n            <div className=\"h-4 bg-muted rounded w-2/3\"></div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error || !stats) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"text-center text-muted-foreground\">\r\n            <AlertTriangle className=\"h-8 w-8 mx-auto mb-2 text-destructive\" />\r\n            <p>{error || t('messages.error')}</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const healthColor = stats.system_health_score >= 80 ? 'text-green-600' : \r\n                     stats.system_health_score >= 60 ? 'text-yellow-600' : 'text-red-600';\r\n  \r\n  const healthStatus = stats.system_health_score >= 80 ? t('common.active') : \r\n                       stats.system_health_score >= 60 ? 'Atención' : 'Crítico';\r\n\r\n  const statsItems = [\r\n    {\r\n      icon: Building2,\r\n      label: t('management.dealerships'),\r\n      value: stats.total_dealerships,\r\n      subValue: stats.active_dealerships,\r\n      subLabel: t('dealerships.active'),\r\n      color: 'blue',\r\n      percentage: stats.total_dealerships > 0 ? Math.round((stats.active_dealerships / stats.total_dealerships) * 100) : 0\r\n    },\r\n    {\r\n      icon: Users,\r\n      label: t('management.total_users'),\r\n      value: stats.total_users,\r\n      subValue: stats.active_users,\r\n      subLabel: t('dealerships.active_users'),\r\n      color: 'green',\r\n      percentage: stats.total_users > 0 ? Math.round((stats.active_users / stats.total_users) * 100) : 0\r\n    },\r\n    {\r\n      icon: ClipboardList,\r\n      label: t('dealerships.total_orders'),\r\n      value: stats.total_orders,\r\n      subValue: stats.orders_this_month,\r\n      subLabel: t('dealerships.orders_this_month'),\r\n      color: 'purple'\r\n    },\r\n    {\r\n      icon: Mail,\r\n      label: t('dealerships.pending_invitations'),\r\n      value: stats.pending_invitations,\r\n      color: 'orange',\r\n      badge: stats.pending_invitations > 0 ? t('dealerships.action_required') : t('dealerships.up_to_date')\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Activity className=\"h-5 w-5\" />\r\n          {t('management.system_status')}\r\n        </CardTitle>\r\n        <CardDescription>\r\n          {t('management.system_overview')}\r\n        </CardDescription>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-6\">\r\n        {/* System Health Score */}\r\n        <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className={`p-2 rounded-full ${stats.system_health_score >= 80 ? 'bg-green-100 text-green-600' : \r\n              stats.system_health_score >= 60 ? 'bg-yellow-100 text-yellow-600' : 'bg-red-100 text-red-600'}`}>\r\n              {stats.system_health_score >= 80 ? (\r\n                <CheckCircle className=\"h-5 w-5\" />\r\n              ) : (\r\n                <AlertTriangle className=\"h-5 w-5\" />\r\n              )}\r\n            </div>\r\n            <div>\r\n              <p className=\"font-medium\">{t('management.system_health')}</p>\r\n              <p className={`text-sm ${healthColor}`}>{healthStatus}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"text-right\">\r\n            <p className={`text-2xl font-bold ${healthColor}`}>{stats.system_health_score}%</p>\r\n            <Progress value={stats.system_health_score} className=\"w-20 mt-1\" />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Grid */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          {statsItems.map((item, index) => {\r\n            const Icon = item.icon;\r\n            return (\r\n              <div \r\n                key={index}\r\n                className=\"flex items-center justify-between p-4 border rounded-lg hover:shadow-sm transition-shadow\"\r\n              >\r\n                <div className=\"flex items-center gap-3\">\r\n                  <Icon className={`h-8 w-8 text-${item.color}-500`} />\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold\">{item.value.toLocaleString()}</p>\r\n                    <p className=\"text-sm text-muted-foreground\">{item.label}</p>\r\n                    {item.subValue !== undefined && (\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        {item.subValue} {item.subLabel}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  {item.badge && (\r\n                    <Badge \r\n                      variant={item.badge === t('dealerships.action_required') ? 'destructive' : 'secondary'}\r\n                      className=\"text-xs mb-1\"\r\n                    >\r\n                      {item.badge}\r\n                    </Badge>\r\n                  )}\r\n                  {item.percentage !== undefined && (\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <TrendingUp className={`h-3 w-3 ${item.percentage > 80 ? 'text-green-500' : 'text-yellow-500'}`} />\r\n                      <span className={`text-sm font-medium ${item.percentage > 80 ? 'text-green-600' : 'text-yellow-600'}`}>\r\n                        {item.percentage}%\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* Weekly Activity Summary */}\r\n        {stats.orders_this_week > 0 && (\r\n          <div className=\"p-4 bg-primary/5 border border-primary/20 rounded-lg\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"font-medium text-primary\">{t('management.weekly_activity')}</p>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  {stats.orders_this_week} {t('management.orders_processed')}\r\n                </p>\r\n              </div>\r\n              <div className=\"flex items-center gap-1 text-primary\">\r\n                <TrendingUp className=\"h-4 w-4\" />\r\n                <span className=\"text-sm font-medium\">\r\n                  +{Math.round((stats.orders_this_week / stats.total_orders) * 100)}%\r\n                </span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\management\\UserManagementSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCGeolocationMap.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":192,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7018,7021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7018,7021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { \r\n  MapPin, \r\n  Navigation, \r\n  Zap, \r\n  Activity, \r\n  Clock, \r\n  Car, \r\n  RefreshCw,\r\n  Maximize2,\r\n  Filter,\r\n  Search\r\n} from 'lucide-react';\r\nimport { useNFCManagement } from '@/hooks/useNFCManagement';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface NFCLocation {\r\n  id: string;\r\n  name: string;\r\n  coordinates: { lat: number; lng: number };\r\n  tag_count: number;\r\n  recent_activity: number;\r\n  vehicles: Array<{\r\n    vin: string;\r\n    make: string;\r\n    model: string;\r\n    last_scan: string;\r\n  }>;\r\n}\r\n\r\ninterface NFCGeolocationMapProps {\r\n  className?: string;\r\n}\r\n\r\nexport function NFCGeolocationMap({ className }: NFCGeolocationMapProps) {\r\n  const { t } = useTranslation();\r\n  const { tags, scans, loadTags, loadScans } = useNFCManagement();\r\n  const mapContainerRef = useRef<HTMLDivElement>(null);\r\n  const [selectedLocation, setSelectedLocation] = useState<NFCLocation | null>(null);\r\n  const [locations, setLocations] = useState<NFCLocation[]>([]);\r\n  const [filterType, setFilterType] = useState<'all' | 'active' | 'recent'>('all');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [mapMode, setMapMode] = useState<'list' | 'map'>('list');\r\n\r\n  useEffect(() => {\r\n    loadTags();\r\n    loadScans();\r\n  }, [loadTags, loadScans]);\r\n\r\n  useEffect(() => {\r\n    // Generate mock locations with real-looking data\r\n    const mockLocations: NFCLocation[] = [\r\n      {\r\n        id: 'service-bay-1',\r\n        name: 'Service Bay 1',\r\n        coordinates: { lat: 40.7128, lng: -74.0060 },\r\n        tag_count: 12,\r\n        recent_activity: 8,\r\n        vehicles: [\r\n          { vin: '1HGBH41JXMN109186', make: 'Honda', model: 'Civic', last_scan: new Date(Date.now() - 1000 * 60 * 15).toISOString() },\r\n          { vin: '1FTFW1ET5DFC10312', make: 'Ford', model: 'F-150', last_scan: new Date(Date.now() - 1000 * 60 * 45).toISOString() }\r\n        ]\r\n      },\r\n      {\r\n        id: 'service-bay-2',\r\n        name: 'Service Bay 2',\r\n        coordinates: { lat: 40.7130, lng: -74.0058 },\r\n        tag_count: 8,\r\n        recent_activity: 15,\r\n        vehicles: [\r\n          { vin: '2T1BURHE0JC014906', make: 'Toyota', model: 'Corolla', last_scan: new Date(Date.now() - 1000 * 60 * 5).toISOString() }\r\n        ]\r\n      },\r\n      {\r\n        id: 'detail-area',\r\n        name: 'Detail Area',\r\n        coordinates: { lat: 40.7125, lng: -74.0065 },\r\n        tag_count: 15,\r\n        recent_activity: 23,\r\n        vehicles: [\r\n          { vin: '1G1BE5SM3J7123456', make: 'Chevrolet', model: 'Cruze', last_scan: new Date(Date.now() - 1000 * 60 * 2).toISOString() },\r\n          { vin: '3VWD07AJ5EM123456', make: 'Volkswagen', model: 'Jetta', last_scan: new Date(Date.now() - 1000 * 60 * 12).toISOString() }\r\n        ]\r\n      },\r\n      {\r\n        id: 'parking-lot',\r\n        name: 'Customer Parking',\r\n        coordinates: { lat: 40.7132, lng: -74.0062 },\r\n        tag_count: 25,\r\n        recent_activity: 5,\r\n        vehicles: [\r\n          { vin: '5NPE34AF2JH123456', make: 'Hyundai', model: 'Elantra', last_scan: new Date(Date.now() - 1000 * 60 * 30).toISOString() }\r\n        ]\r\n      }\r\n    ];\r\n    \r\n    setLocations(mockLocations);\r\n  }, [tags, scans]);\r\n\r\n  const filteredLocations = locations.filter(location => {\r\n    const matchesSearch = location.name.toLowerCase().includes(searchQuery.toLowerCase());\r\n    \r\n    switch (filterType) {\r\n      case 'active':\r\n        return matchesSearch && location.vehicles.length > 0;\r\n      case 'recent':\r\n        return matchesSearch && location.recent_activity > 0;\r\n      default:\r\n        return matchesSearch;\r\n    }\r\n  });\r\n\r\n  const getActivityColor = (activity: number) => {\r\n    if (activity >= 20) return 'bg-success text-success-foreground';\r\n    if (activity >= 10) return 'bg-warning text-warning-foreground';\r\n    if (activity >= 5) return 'bg-secondary text-secondary-foreground';\r\n    return 'bg-muted text-muted-foreground';\r\n  };\r\n\r\n  const getTimeAgo = (timestamp: string) => {\r\n    const diff = Date.now() - new Date(timestamp).getTime();\r\n    const minutes = Math.floor(diff / (1000 * 60));\r\n    \r\n    if (minutes < 1) return t('nfc_geolocation.just_now');\r\n    if (minutes < 60) return t('nfc_geolocation.minutes_ago', { count: minutes });\r\n    \r\n    const hours = Math.floor(minutes / 60);\r\n    if (hours < 24) return t('nfc_geolocation.hours_ago', { count: hours });\r\n    \r\n    const days = Math.floor(hours / 24);\r\n    return t('nfc_geolocation.days_ago', { count: days });\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"space-y-6\", className)}>\r\n      {/* Header and Controls */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <MapPin className=\"w-5 h-5 text-primary\" />\r\n                {t('nfc_geolocation.title')}\r\n              </CardTitle>\r\n              <p className=\"text-sm text-muted-foreground mt-1\">\r\n                {t('nfc_geolocation.subtitle')}\r\n              </p>\r\n            </div>\r\n            \r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                variant={mapMode === 'list' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setMapMode('list')}\r\n              >\r\n                <Activity className=\"w-4 h-4 mr-2\" />\r\n                {t('nfc_geolocation.list_view')}\r\n              </Button>\r\n              <Button\r\n                variant={mapMode === 'map' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setMapMode('map')}\r\n                disabled\r\n              >\r\n                <Navigation className=\"w-4 h-4 mr-2\" />\r\n                {t('nfc_geolocation.map_view')}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n        \r\n        <CardContent className=\"space-y-4\">\r\n          {/* Filters */}\r\n          <div className=\"flex flex-col sm:flex-row gap-4\">\r\n            <div className=\"relative flex-1\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder={t('nfc_geolocation.search_locations')}\r\n                value={searchQuery}\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n            \r\n            <Select value={filterType} onValueChange={(value: any) => setFilterType(value)}>\r\n              <SelectTrigger className=\"w-full sm:w-48\">\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">{t('nfc_geolocation.all_locations')}</SelectItem>\r\n                <SelectItem value=\"active\">{t('nfc_geolocation.active_only')}</SelectItem>\r\n                <SelectItem value=\"recent\">{t('nfc_geolocation.recent_activity')}</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {/* Summary Stats */}\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-muted/20 rounded-lg\">\r\n            <div className=\"text-center\">\r\n              <p className=\"text-lg font-bold text-primary\">{locations.length}</p>\r\n              <p className=\"text-xs text-muted-foreground\">{t('nfc_geolocation.total_locations')}</p>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <p className=\"text-lg font-bold text-success\">\r\n                {locations.filter(l => l.vehicles.length > 0).length}\r\n              </p>\r\n              <p className=\"text-xs text-muted-foreground\">{t('nfc_geolocation.active_locations')}</p>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <p className=\"text-lg font-bold text-warning\">\r\n                {locations.reduce((sum, l) => sum + l.tag_count, 0)}\r\n              </p>\r\n              <p className=\"text-xs text-muted-foreground\">{t('nfc_geolocation.total_tags')}</p>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <p className=\"text-lg font-bold text-secondary\">\r\n                {locations.reduce((sum, l) => sum + l.vehicles.length, 0)}\r\n              </p>\r\n              <p className=\"text-xs text-muted-foreground\">{t('nfc_geolocation.tracked_vehicles')}</p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Locations List */}\r\n      {mapMode === 'list' && (\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n          {filteredLocations.map((location) => (\r\n            <Card \r\n              key={location.id} \r\n              className={cn(\r\n                \"cursor-pointer hover:shadow-md transition-all duration-200\",\r\n                selectedLocation?.id === location.id && \"ring-2 ring-primary\"\r\n              )}\r\n              onClick={() => setSelectedLocation(location)}\r\n            >\r\n              <CardHeader className=\"pb-3\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\r\n                      <MapPin className=\"w-5 h-5 text-primary\" />\r\n                    </div>\r\n                    <div>\r\n                      <CardTitle className=\"text-base\">{location.name}</CardTitle>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        {location.tag_count} {t('nfc_geolocation.tags_deployed')}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <Badge className={getActivityColor(location.recent_activity)}>\r\n                    <Zap className=\"w-3 h-3 mr-1\" />\r\n                    {location.recent_activity}\r\n                  </Badge>\r\n                </div>\r\n              </CardHeader>\r\n              \r\n              <CardContent className=\"space-y-4\">\r\n                {/* Current Vehicles */}\r\n                <div>\r\n                  <div className=\"flex items-center gap-2 mb-2\">\r\n                    <Car className=\"w-4 h-4 text-muted-foreground\" />\r\n                    <span className=\"text-sm font-medium\">\r\n                      {t('nfc_geolocation.current_vehicles')} ({location.vehicles.length})\r\n                    </span>\r\n                  </div>\r\n                  \r\n                  {location.vehicles.length > 0 ? (\r\n                    <div className=\"space-y-2\">\r\n                      {location.vehicles.slice(0, 2).map((vehicle, idx) => (\r\n                        <div key={idx} className=\"flex justify-between items-center p-2 bg-muted/30 rounded-md\">\r\n                          <div>\r\n                            <p className=\"text-sm font-medium\">\r\n                              {vehicle.make} {vehicle.model}\r\n                            </p>\r\n                            <p className=\"text-xs text-muted-foreground font-mono\">\r\n                              {vehicle.vin.slice(-6)}\r\n                            </p>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            <div className=\"flex items-center gap-1\">\r\n                              <Clock className=\"w-3 h-3 text-muted-foreground\" />\r\n                              <span className=\"text-xs text-muted-foreground\">\r\n                                {getTimeAgo(vehicle.last_scan)}\r\n                              </span>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                      \r\n                      {location.vehicles.length > 2 && (\r\n                        <p className=\"text-xs text-muted-foreground text-center py-1\">\r\n                          +{location.vehicles.length - 2} {t('nfc_geolocation.more_vehicles')}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-sm text-muted-foreground italic\">\r\n                      {t('nfc_geolocation.no_vehicles')}\r\n                    </p>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Activity Indicator */}\r\n                <Separator />\r\n                <div className=\"flex justify-between items-center text-sm\">\r\n                  <span className=\"text-muted-foreground\">\r\n                    {t('nfc_geolocation.recent_activity')}\r\n                  </span>\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <Activity className={cn(\r\n                      \"w-4 h-4\",\r\n                      location.recent_activity > 10 ? \"text-success\" : \"text-muted-foreground\"\r\n                    )} />\r\n                    <span className=\"font-medium\">\r\n                      {location.recent_activity} {t('nfc_geolocation.scans_today')}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Map Placeholder - Would integrate with actual mapping service */}\r\n      {mapMode === 'map' && (\r\n        <Card>\r\n          <CardContent className=\"p-8 text-center\">\r\n            <div className=\"max-w-md mx-auto space-y-4\">\r\n              <div className=\"w-20 h-20 bg-muted rounded-full flex items-center justify-center mx-auto\">\r\n                <Navigation className=\"w-10 h-10 text-muted-foreground\" />\r\n              </div>\r\n              <h3 className=\"text-lg font-semibold\">{t('nfc_geolocation.map_coming_soon')}</h3>\r\n              <p className=\"text-muted-foreground\">\r\n                {t('nfc_geolocation.map_description')}\r\n              </p>\r\n              <Button variant=\"outline\">\r\n                <Maximize2 className=\"w-4 h-4 mr-2\" />\r\n                {t('nfc_geolocation.request_integration')}\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* No Results */}\r\n      {filteredLocations.length === 0 && (\r\n        <Card>\r\n          <CardContent className=\"text-center py-8\">\r\n            <MapPin className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-semibold mb-2\">\r\n              {t('nfc_geolocation.no_locations_found')}\r\n            </h3>\r\n            <p className=\"text-muted-foreground\">\r\n              {searchQuery \r\n                ? t('nfc_geolocation.no_search_results') \r\n                : t('nfc_geolocation.no_locations_available')\r\n              }\r\n            </p>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCLocationHeatmap.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCMobileDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1122,1125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1122,1125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2153,2156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2153,2156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { useNFCManagement } from '../../hooks/useNFCManagement';\r\nimport { useWebNFC } from '../../hooks/useWebNFC';\r\nimport { NFCPhysicalWriter } from './NFCPhysicalWriter';\r\nimport { NFCPhysicalReader } from './NFCPhysicalReader';\r\nimport { \r\n  Smartphone, \r\n  Wifi, \r\n  Radio, \r\n  Zap,\r\n  AlertCircle,\r\n  CheckCircle,\r\n  Eye,\r\n  Edit3,\r\n  Activity,\r\n  TrendingUp\r\n} from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface NFCMobileDashboardProps {\r\n  className?: string;\r\n}\r\n\r\nexport function NFCMobileDashboard({ className }: NFCMobileDashboardProps) {\r\n  const { t } = useTranslation();\r\n  const { tags, loading, loadTags } = useNFCManagement();\r\n  const { \r\n    isSupported, \r\n    isReading, \r\n    isWriting, \r\n    error, \r\n    lastRead, \r\n    startReading, \r\n    stopReading \r\n  } = useWebNFC();\r\n  \r\n  const [selectedTag, setSelectedTag] = useState<any>(null);\r\n  const [isWriterOpen, setIsWriterOpen] = useState(false);\r\n  const [isReaderOpen, setIsReaderOpen] = useState(false);\r\n  const [quickActions, setQuickActions] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadTags();\r\n  }, [loadTags]);\r\n\r\n  const activeTags = tags?.filter(tag => tag.is_active) || [];\r\n  const recentScans = tags?.filter(tag => tag.last_scanned_at).slice(0, 5) || [];\r\n\r\n  const getConnectionStatus = () => {\r\n    if (!isSupported) {\r\n      return { status: 'unsupported', color: 'text-destructive', icon: AlertCircle };\r\n    }\r\n    if (isReading || isWriting) {\r\n      return { status: 'active', color: 'text-success', icon: Zap };\r\n    }\r\n    return { status: 'ready', color: 'text-primary', icon: CheckCircle };\r\n  };\r\n\r\n  const connectionStatus = getConnectionStatus();\r\n  const StatusIcon = connectionStatus.icon;\r\n\r\n  const handleQuickScan = async () => {\r\n    if (isReading) {\r\n      stopReading();\r\n    } else {\r\n      setIsReaderOpen(true);\r\n    }\r\n  };\r\n\r\n  const handleQuickWrite = (tag: any) => {\r\n    setSelectedTag(tag);\r\n    setIsWriterOpen(true);\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"space-y-4 p-4\", className)}>\r\n      {/* Mobile Header */}\r\n      <div className=\"text-center space-y-2\">\r\n        <div className=\"flex items-center justify-center gap-2\">\r\n          <Smartphone className=\"h-6 w-6 text-primary\" />\r\n          <h1 className=\"text-xl font-bold\">{t('nfc.mobile.title')}</h1>\r\n        </div>\r\n        <p className=\"text-sm text-muted-foreground\">\r\n          {t('nfc.mobile.subtitle')}\r\n        </p>\r\n      </div>\r\n\r\n      {/* Connection Status */}\r\n      <Card>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className={cn(\r\n                \"p-2 rounded-full bg-muted\",\r\n                connectionStatus.color\r\n              )}>\r\n                <StatusIcon className=\"h-4 w-4\" />\r\n              </div>\r\n              <div>\r\n                <p className=\"font-medium\">\r\n                  {isSupported ? t('nfc.mobile.status.ready') : t('nfc.mobile.status.unsupported')}\r\n                </p>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  {isSupported \r\n                    ? t('nfc.mobile.status.ready_desc') \r\n                    : t('nfc.mobile.status.unsupported_desc')\r\n                  }\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex items-center gap-1\">\r\n              <div className={cn(\r\n                \"w-2 h-2 rounded-full animate-pulse\",\r\n                isSupported ? \"bg-success\" : \"bg-destructive\"\r\n              )} />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Quick Actions */}\r\n      <div className=\"grid grid-cols-2 gap-3\">\r\n        <Button \r\n          variant=\"outline\" \r\n          size=\"lg\" \r\n          className=\"h-20 flex-col gap-2\"\r\n          onClick={handleQuickScan}\r\n          disabled={!isSupported}\r\n        >\r\n          <Eye className=\"h-6 w-6\" />\r\n          <span className=\"text-xs\">\r\n            {isReading ? t('nfc.reader.stop_scanning') : t('nfc.reader.start_scanning')}\r\n          </span>\r\n        </Button>\r\n        \r\n        <Button \r\n          variant=\"outline\" \r\n          size=\"lg\" \r\n          className=\"h-20 flex-col gap-2\"\r\n          onClick={() => setQuickActions(!quickActions)}\r\n          disabled={!isSupported || activeTags.length === 0}\r\n        >\r\n          <Edit3 className=\"h-6 w-6\" />\r\n          <span className=\"text-xs\">{t('nfc.mobile.quick_write')}</span>\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Last Read Tag */}\r\n      {lastRead && (\r\n        <Card>\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle className=\"text-sm flex items-center gap-2\">\r\n              <Wifi className=\"h-4 w-4 text-success\" />\r\n              {t('nfc.mobile.last_read')}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-2\">\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.name')}</span>\r\n              <span className=\"text-sm font-medium\">{lastRead.name || 'Unknown'}</span>\r\n            </div>\r\n            <div className=\"flex justify-between\">\r\n              <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.type')}</span>\r\n              <Badge variant=\"secondary\" className=\"text-xs\">\r\n                {lastRead.type || 'general'}\r\n              </Badge>\r\n            </div>\r\n            {lastRead.vehicleVin && (\r\n              <div className=\"flex justify-between\">\r\n                <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.vin')}</span>\r\n                <span className=\"text-xs font-mono\">{lastRead.vehicleVin}</span>\r\n              </div>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Quick Write Tags */}\r\n      {quickActions && (\r\n        <Card>\r\n          <CardHeader className=\"pb-3\">\r\n            <CardTitle className=\"text-sm\">{t('nfc.mobile.select_tag_to_write')}</CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-2\">\r\n            {activeTags.slice(0, 5).map((tag) => (\r\n              <div \r\n                key={tag.id}\r\n                className=\"flex items-center justify-between p-2 rounded border hover:bg-muted cursor-pointer\"\r\n                onClick={() => handleQuickWrite(tag)}\r\n              >\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Radio className=\"h-4 w-4 text-muted-foreground\" />\r\n                  <div>\r\n                    <p className=\"text-sm font-medium truncate max-w-32\">{tag.name}</p>\r\n                    <p className=\"text-xs text-muted-foreground\">#{tag.tag_uid}</p>\r\n                  </div>\r\n                </div>\r\n                <Badge variant=\"outline\" className=\"text-xs\">\r\n                  {tag.tag_type}\r\n                </Badge>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Recent Activity */}\r\n      <Card>\r\n        <CardHeader className=\"pb-3\">\r\n          <CardTitle className=\"text-sm flex items-center gap-2\">\r\n            <Activity className=\"h-4 w-4\" />\r\n            {t('nfc.mobile.recent_activity')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-2\">\r\n          {recentScans.length > 0 ? (\r\n            recentScans.map((tag) => (\r\n              <div key={tag.id} className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"w-2 h-2 rounded-full bg-primary\" />\r\n                  <span className=\"text-sm truncate max-w-32\">{tag.name}</span>\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    {tag.scan_count} {t('nfc.mobile.scans')}\r\n                  </div>\r\n                  <div className=\"text-xs text-muted-foreground\">\r\n                    {new Date(tag.last_scanned_at).toLocaleDateString()}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <p className=\"text-sm text-muted-foreground text-center py-4\">\r\n              {t('nfc.mobile.no_recent_activity')}\r\n            </p>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Stats Overview */}\r\n      <div className=\"grid grid-cols-3 gap-2\">\r\n        <Card>\r\n          <CardContent className=\"pt-4 pb-2 text-center\">\r\n            <div className=\"text-lg font-bold\">{activeTags.length}</div>\r\n            <div className=\"text-xs text-muted-foreground\">{t('nfc.mobile.active_tags')}</div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className=\"pt-4 pb-2 text-center\">\r\n            <div className=\"text-lg font-bold\">\r\n              {tags?.reduce((sum, tag) => sum + tag.scan_count, 0) || 0}\r\n            </div>\r\n            <div className=\"text-xs text-muted-foreground\">{t('nfc.mobile.total_scans')}</div>\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className=\"pt-4 pb-2 text-center\">\r\n            <div className=\"text-lg font-bold flex items-center justify-center gap-1\">\r\n              <TrendingUp className=\"h-3 w-3 text-success\" />\r\n              {recentScans.length}\r\n            </div>\r\n            <div className=\"text-xs text-muted-foreground\">{t('nfc.mobile.recent')}</div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Card className=\"border-destructive\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex items-center gap-2 text-destructive\">\r\n              <AlertCircle className=\"h-4 w-4\" />\r\n              <span className=\"text-sm\">{error}</span>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* NFC Writer Dialog */}\r\n      {selectedTag && (\r\n        <NFCPhysicalWriter\r\n          isOpen={isWriterOpen}\r\n          onClose={() => {\r\n            setIsWriterOpen(false);\r\n            setSelectedTag(null);\r\n            setQuickActions(false);\r\n          }}\r\n          tag={selectedTag}\r\n          onSuccess={() => {\r\n            setQuickActions(false);\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {/* NFC Reader Dialog */}\r\n      <NFCPhysicalReader\r\n        isOpen={isReaderOpen}\r\n        onClose={() => setIsReaderOpen(false)}\r\n        onTagRead={(tagData) => {\r\n          console.log('Tag read in mobile dashboard:', tagData);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCPhysicalReader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[686,689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[686,689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1148,1151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1148,1151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport { Button } from '../ui/button';\r\nimport { Alert, AlertDescription } from '../ui/alert';\r\nimport { Badge } from '../ui/badge';\r\nimport { Card, CardContent, CardHeader } from '../ui/card';\r\nimport { useWebNFC } from '../../hooks/useWebNFC';\r\nimport { \r\n  Smartphone, \r\n  Wifi, \r\n  CheckCircle, \r\n  XCircle, \r\n  Loader2,\r\n  AlertTriangle,\r\n  Radio,\r\n  Eye,\r\n  EyeOff\r\n} from 'lucide-react';\r\n\r\ninterface NFCPhysicalReaderProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onTagRead?: (tagData: any) => void;\r\n}\r\n\r\nexport function NFCPhysicalReader({ isOpen, onClose, onTagRead }: NFCPhysicalReaderProps) {\r\n  const { t } = useTranslation();\r\n  const { \r\n    isSupported, \r\n    isReading, \r\n    error, \r\n    lastRead, \r\n    startReading, \r\n    stopReading, \r\n    requestPermissions \r\n  } = useWebNFC();\r\n  \r\n  const [readStatus, setReadStatus] = useState<'idle' | 'scanning' | 'success' | 'error'>('idle');\r\n  const [scannedData, setScannedData] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    if (lastRead) {\r\n      setScannedData(lastRead);\r\n      setReadStatus('success');\r\n      onTagRead?.(lastRead);\r\n    }\r\n  }, [lastRead, onTagRead]);\r\n\r\n  useEffect(() => {\r\n    if (isReading) {\r\n      setReadStatus('scanning');\r\n    }\r\n  }, [isReading]);\r\n\r\n  useEffect(() => {\r\n    if (error) {\r\n      setReadStatus('error');\r\n    }\r\n  }, [error]);\r\n\r\n  const handleStartScanning = async () => {\r\n    setReadStatus('scanning');\r\n    setScannedData(null);\r\n    \r\n    const hasPermissions = await requestPermissions();\r\n    if (!hasPermissions) {\r\n      setReadStatus('error');\r\n      return;\r\n    }\r\n\r\n    startReading();\r\n  };\r\n\r\n  const handleStopScanning = () => {\r\n    stopReading();\r\n    setReadStatus('idle');\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (isReading) {\r\n      stopReading();\r\n    }\r\n    setReadStatus('idle');\r\n    setScannedData(null);\r\n    onClose();\r\n  };\r\n\r\n  const getStatusIcon = () => {\r\n    switch (readStatus) {\r\n      case 'scanning':\r\n        return <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />;\r\n      case 'success':\r\n        return <CheckCircle className=\"h-12 w-12 text-success\" />;\r\n      case 'error':\r\n        return <XCircle className=\"h-12 w-12 text-destructive\" />;\r\n      default:\r\n        return <Radio className=\"h-12 w-12 text-muted-foreground\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusText = () => {\r\n    switch (readStatus) {\r\n      case 'scanning':\r\n        return t('nfc.reader.scanning');\r\n      case 'success':\r\n        return t('nfc.reader.success');\r\n      case 'error':\r\n        return t('nfc.reader.error');\r\n      default:\r\n        return t('nfc.reader.ready');\r\n    }\r\n  };\r\n\r\n  const getInstructionText = () => {\r\n    switch (readStatus) {\r\n      case 'scanning':\r\n        return t('nfc.reader.instructions.scanning');\r\n      case 'success':\r\n        return t('nfc.reader.instructions.success');\r\n      case 'error':\r\n        return t('nfc.reader.instructions.error');\r\n      default:\r\n        return t('nfc.reader.instructions.ready');\r\n    }\r\n  };\r\n\r\n  if (!isSupported) {\r\n    return (\r\n      <Dialog open={isOpen} onOpenChange={handleClose}>\r\n        <DialogContent className=\"max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"flex items-center gap-2\">\r\n              <Eye className=\"h-5 w-5\" />\r\n              {t('nfc.reader.title')}\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n          \r\n          <Alert>\r\n            <AlertTriangle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              {t('nfc.errors.not_supported')}\r\n            </AlertDescription>\r\n          </Alert>\r\n\r\n          <div className=\"flex justify-end gap-2 pt-4\">\r\n            <Button variant=\"outline\" onClick={handleClose}>\r\n              {t('common.close')}\r\n            </Button>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={handleClose}>\r\n      <DialogContent className=\"max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <Eye className=\"h-5 w-5\" />\r\n            {t('nfc.reader.title')}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        {/* Read Status */}\r\n        <div className=\"text-center py-6\">\r\n          <div className=\"flex justify-center mb-4\">\r\n            {getStatusIcon()}\r\n          </div>\r\n          <h3 className=\"text-lg font-semibold mb-2\">\r\n            {getStatusText()}\r\n          </h3>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {getInstructionText()}\r\n          </p>\r\n        </div>\r\n\r\n        {/* Animation for scanning state */}\r\n        {readStatus === 'scanning' && (\r\n          <div className=\"flex justify-center\">\r\n            <div className=\"relative\">\r\n              <Smartphone className=\"h-8 w-8 text-muted-foreground\" />\r\n              <div className=\"absolute -top-2 -right-2\">\r\n                <div className=\"animate-ping absolute inline-flex h-4 w-4 rounded-full bg-primary opacity-75\"></div>\r\n                <div className=\"relative inline-flex rounded-full h-4 w-4 bg-primary\">\r\n                  <Wifi className=\"h-3 w-3 text-white m-auto\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Scanned Data Display */}\r\n        {scannedData && readStatus === 'success' && (\r\n          <Card>\r\n            <CardHeader>\r\n              <h4 className=\"font-semibold flex items-center gap-2\">\r\n                <CheckCircle className=\"h-4 w-4 text-success\" />\r\n                {t('nfc.reader.tag_data')}\r\n              </h4>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-2\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.id')}</span>\r\n                <span className=\"font-mono text-xs\">{scannedData.tagId}</span>\r\n              </div>\r\n              \r\n              {scannedData.name && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.name')}</span>\r\n                  <span className=\"text-sm\">{scannedData.name}</span>\r\n                </div>\r\n              )}\r\n              \r\n              {scannedData.type && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.type')}</span>\r\n                  <Badge variant=\"secondary\">{scannedData.type}</Badge>\r\n                </div>\r\n              )}\r\n              \r\n              {scannedData.vehicleVin && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.vin')}</span>\r\n                  <span className=\"font-mono text-xs\">{scannedData.vehicleVin}</span>\r\n                </div>\r\n              )}\r\n              \r\n              {scannedData.locationName && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.location')}</span>\r\n                  <span className=\"text-sm\">{scannedData.locationName}</span>\r\n                </div>\r\n              )}\r\n              \r\n              {scannedData.url && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.url')}</span>\r\n                  <span className=\"text-xs text-primary truncate max-w-40\">{scannedData.url}</span>\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n\r\n        {/* Error Display */}\r\n        {error && readStatus === 'error' && (\r\n          <Alert variant=\"destructive\">\r\n            <XCircle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              {error}\r\n            </AlertDescription>\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Action Buttons */}\r\n        <div className=\"flex justify-end gap-2 pt-4\">\r\n          <Button variant=\"outline\" onClick={handleClose}>\r\n            {t('common.close')}\r\n          </Button>\r\n          \r\n          {readStatus === 'idle' && (\r\n            <Button onClick={handleStartScanning}>\r\n              <Eye className=\"h-4 w-4 mr-2\" />\r\n              {t('nfc.reader.start_scanning')}\r\n            </Button>\r\n          )}\r\n          \r\n          {readStatus === 'scanning' && (\r\n            <Button variant=\"destructive\" onClick={handleStopScanning}>\r\n              <EyeOff className=\"h-4 w-4 mr-2\" />\r\n              {t('nfc.reader.stop_scanning')}\r\n            </Button>\r\n          )}\r\n          \r\n          {readStatus === 'success' && (\r\n            <Button onClick={handleStartScanning}>\r\n              {t('nfc.reader.scan_another')}\r\n            </Button>\r\n          )}\r\n          \r\n          {readStatus === 'error' && (\r\n            <Button onClick={handleStartScanning}>\r\n              {t('nfc.reader.retry')}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCPhysicalWriter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2110,2113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2110,2113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport { Button } from '../ui/button';\r\nimport { Alert, AlertDescription } from '../ui/alert';\r\nimport { Badge } from '../ui/badge';\r\nimport { Card, CardContent } from '../ui/card';\r\nimport { useWebNFC } from '../../hooks/useWebNFC';\r\nimport { NFCTag } from '../../hooks/useNFCManagement';\r\nimport { \r\n  Smartphone, \r\n  Wifi, \r\n  CheckCircle, \r\n  XCircle, \r\n  Loader2,\r\n  AlertTriangle,\r\n  Radio\r\n} from 'lucide-react';\r\n\r\ninterface NFCPhysicalWriterProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  tag: NFCTag;\r\n  onSuccess?: () => void;\r\n}\r\n\r\nexport function NFCPhysicalWriter({ isOpen, onClose, tag, onSuccess }: NFCPhysicalWriterProps) {\r\n  const { t } = useTranslation();\r\n  const { isSupported, isWriting, error, writeTag, requestPermissions } = useWebNFC();\r\n  const [writeStatus, setWriteStatus] = useState<'idle' | 'preparing' | 'writing' | 'success' | 'error'>('idle');\r\n  const [writeError, setWriteError] = useState<string | null>(null);\r\n\r\n  const handleWrite = async () => {\r\n    setWriteStatus('preparing');\r\n    setWriteError(null);\r\n\r\n    // Request permissions first\r\n    const hasPermissions = await requestPermissions();\r\n    if (!hasPermissions) {\r\n      setWriteStatus('error');\r\n      setWriteError(t('nfc.errors.permission_denied'));\r\n      return;\r\n    }\r\n\r\n    setWriteStatus('writing');\r\n\r\n    try {\r\n      const nfcData = {\r\n        tagId: tag.id,\r\n        name: tag.name,\r\n        type: tag.tag_type,\r\n        dealerId: tag.dealer_id,\r\n        vehicleVin: tag.vehicle_vin || undefined,\r\n        locationName: tag.location_name || undefined\r\n      };\r\n\r\n      const success = await writeTag(nfcData);\r\n      \r\n      if (success) {\r\n        setWriteStatus('success');\r\n        setTimeout(() => {\r\n          onSuccess?.();\r\n          onClose();\r\n        }, 2000);\r\n      } else {\r\n        setWriteStatus('error');\r\n        setWriteError(error || t('nfc.errors.write_failed'));\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Write error:', err);\r\n      setWriteStatus('error');\r\n      setWriteError(err.message || t('nfc.errors.write_failed'));\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (writeStatus !== 'writing') {\r\n      setWriteStatus('idle');\r\n      setWriteError(null);\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = () => {\r\n    switch (writeStatus) {\r\n      case 'preparing':\r\n      case 'writing':\r\n        return <Loader2 className=\"h-12 w-12 animate-spin text-primary\" />;\r\n      case 'success':\r\n        return <CheckCircle className=\"h-12 w-12 text-success\" />;\r\n      case 'error':\r\n        return <XCircle className=\"h-12 w-12 text-destructive\" />;\r\n      default:\r\n        return <Radio className=\"h-12 w-12 text-muted-foreground\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusText = () => {\r\n    switch (writeStatus) {\r\n      case 'preparing':\r\n        return t('nfc.writer.preparing');\r\n      case 'writing':\r\n        return t('nfc.writer.writing');\r\n      case 'success':\r\n        return t('nfc.writer.success');\r\n      case 'error':\r\n        return t('nfc.writer.error');\r\n      default:\r\n        return t('nfc.writer.ready');\r\n    }\r\n  };\r\n\r\n  const getInstructionText = () => {\r\n    switch (writeStatus) {\r\n      case 'preparing':\r\n        return t('nfc.writer.instructions.preparing');\r\n      case 'writing':\r\n        return t('nfc.writer.instructions.writing');\r\n      case 'success':\r\n        return t('nfc.writer.instructions.success');\r\n      case 'error':\r\n        return t('nfc.writer.instructions.error');\r\n      default:\r\n        return t('nfc.writer.instructions.ready');\r\n    }\r\n  };\r\n\r\n  if (!isSupported) {\r\n    return (\r\n      <Dialog open={isOpen} onOpenChange={handleClose}>\r\n        <DialogContent className=\"max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"flex items-center gap-2\">\r\n              <Smartphone className=\"h-5 w-5\" />\r\n              {t('nfc.writer.title')}\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n          \r\n          <Alert>\r\n            <AlertTriangle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              {t('nfc.errors.not_supported')}\r\n            </AlertDescription>\r\n          </Alert>\r\n\r\n          <div className=\"flex justify-end gap-2 pt-4\">\r\n            <Button variant=\"outline\" onClick={handleClose}>\r\n              {t('common.close')}\r\n            </Button>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={handleClose}>\r\n      <DialogContent className=\"max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <Smartphone className=\"h-5 w-5\" />\r\n            {t('nfc.writer.title')}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        {/* Tag Information */}\r\n        <Card>\r\n          <CardContent className=\"pt-4\">\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.name')}</span>\r\n                <span className=\"font-medium\">{tag.name}</span>\r\n              </div>\r\n              <div className=\"flex items-center justify-between\">\r\n                <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.type')}</span>\r\n                <Badge variant=\"secondary\">{tag.tag_type}</Badge>\r\n              </div>\r\n              {tag.vehicle_vin && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.vin')}</span>\r\n                  <span className=\"font-mono text-sm\">{tag.vehicle_vin}</span>\r\n                </div>\r\n              )}\r\n              {tag.location_name && (\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-sm text-muted-foreground\">{t('nfc.tag_info.location')}</span>\r\n                  <span className=\"text-sm\">{tag.location_name}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Write Status */}\r\n        <div className=\"text-center py-6\">\r\n          <div className=\"flex justify-center mb-4\">\r\n            {getStatusIcon()}\r\n          </div>\r\n          <h3 className=\"text-lg font-semibold mb-2\">\r\n            {getStatusText()}\r\n          </h3>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {getInstructionText()}\r\n          </p>\r\n        </div>\r\n\r\n        {/* Animation for writing state */}\r\n        {(writeStatus === 'writing' || writeStatus === 'preparing') && (\r\n          <div className=\"flex justify-center\">\r\n            <div className=\"relative\">\r\n              <Smartphone className=\"h-8 w-8 text-muted-foreground\" />\r\n              <div className=\"absolute -top-2 -right-2\">\r\n                <div className=\"animate-ping absolute inline-flex h-4 w-4 rounded-full bg-primary opacity-75\"></div>\r\n                <div className=\"relative inline-flex rounded-full h-4 w-4 bg-primary\">\r\n                  <Wifi className=\"h-3 w-3 text-white m-auto\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Error Display */}\r\n        {(writeError || error) && writeStatus === 'error' && (\r\n          <Alert variant=\"destructive\">\r\n            <XCircle className=\"h-4 w-4\" />\r\n            <AlertDescription>\r\n              {writeError || error}\r\n            </AlertDescription>\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Action Buttons */}\r\n        <div className=\"flex justify-end gap-2 pt-4\">\r\n          <Button \r\n            variant=\"outline\" \r\n            onClick={handleClose}\r\n            disabled={writeStatus === 'writing' || writeStatus === 'preparing'}\r\n          >\r\n            {writeStatus === 'success' ? t('common.close') : t('common.cancel')}\r\n          </Button>\r\n          {writeStatus === 'idle' && (\r\n            <Button onClick={handleWrite} disabled={isWriting}>\r\n              <Radio className=\"h-4 w-4 mr-2\" />\r\n              {t('nfc.writer.write_tag')}\r\n            </Button>\r\n          )}\r\n          {writeStatus === 'error' && (\r\n            <Button onClick={handleWrite} disabled={isWriting}>\r\n              {t('nfc.writer.retry')}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCTagManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2321,2324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2321,2324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5014,5017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5014,5017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { \r\n  Plus, \r\n  Radio, \r\n  Car, \r\n  MapPin, \r\n  Edit, \r\n  Trash2, \r\n  Search,\r\n  Filter,\r\n  QrCode,\r\n  Settings,\r\n  Activity,\r\n  Smartphone,\r\n  Eye,\r\n  MoreVertical\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { NFCTag, useNFCManagement } from '@/hooks/useNFCManagement';\r\nimport { NFCPhysicalWriter } from './NFCPhysicalWriter';\r\nimport { NFCPhysicalReader } from './NFCPhysicalReader';\r\nimport { NFCTagTemplates } from './NFCTagTemplates';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { es, ptBR } from 'date-fns/locale';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface NFCTagManagerProps {\r\n  className?: string;\r\n}\r\n\r\ninterface TagFormData {\r\n  name: string;\r\n  tag_uid: string;\r\n  tag_type: string;\r\n  description: string;\r\n  vehicle_vin: string;\r\n  location_name: string;\r\n  is_active: boolean;\r\n  is_permanent: boolean;\r\n}\r\n\r\nexport function NFCTagManager({ className }: NFCTagManagerProps) {\r\n  const { t, i18n } = useTranslation();\r\n  const { \r\n    tags, \r\n    loading, \r\n    loadTags, \r\n    createTag, \r\n    updateTag, \r\n    deleteTag \r\n  } = useNFCManagement();\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState<string>('all');\r\n  const [filterStatus, setFilterStatus] = useState<string>('all');\r\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\r\n  const [editingTag, setEditingTag] = useState<any>(null);\r\n  const [isWriterDialogOpen, setIsWriterDialogOpen] = useState(false);\r\n  const [isReaderDialogOpen, setIsReaderDialogOpen] = useState(false);\r\n  const [writingTag, setWritingTag] = useState<NFCTag | null>(null);\r\n  const [isTemplatesDialogOpen, setIsTemplatesDialogOpen] = useState(false);\r\n  \r\n  const [formData, setFormData] = useState<TagFormData>({\r\n    name: '',\r\n    tag_uid: '',\r\n    tag_type: 'vehicle',\r\n    description: '',\r\n    vehicle_vin: '',\r\n    location_name: '',\r\n    is_active: true,\r\n    is_permanent: false\r\n  });\r\n\r\n  // Get locale for date-fns\r\n  const getLocale = () => {\r\n    switch (i18n.language) {\r\n      case 'es': return es;\r\n      case 'pt-BR': return ptBR;\r\n      default: return undefined;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadTags();\r\n  }, [loadTags]);\r\n\r\n  // Filter tags based on search and filters\r\n  const filteredTags = tags.filter(tag => {\r\n    const matchesSearch = tag.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         tag.tag_uid.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         tag.vehicle_vin?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    \r\n    const matchesType = filterType === 'all' || tag.tag_type === filterType;\r\n    const matchesStatus = filterStatus === 'all' || \r\n                         (filterStatus === 'active' && tag.is_active) ||\r\n                         (filterStatus === 'inactive' && !tag.is_active);\r\n    \r\n    return matchesSearch && matchesType && matchesStatus;\r\n  });\r\n\r\n  const handleCreateTag = async () => {\r\n    try {\r\n      await createTag({\r\n        ...formData,\r\n        dealer_id: 1 // This should come from auth context\r\n      });\r\n      \r\n      setShowCreateDialog(false);\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Failed to create tag:', error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateTag = async () => {\r\n    if (!editingTag) return;\r\n    \r\n    try {\r\n      await updateTag(editingTag.id, formData);\r\n      setEditingTag(null);\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Failed to update tag:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteTag = async (tagId: string) => {\r\n    if (confirm(t('nfc_tracking.tag_manager.confirm_delete'))) {\r\n      try {\r\n        await deleteTag(tagId);\r\n      } catch (error) {\r\n        console.error('Failed to delete tag:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      tag_uid: '',\r\n      tag_type: 'vehicle',\r\n      description: '',\r\n      vehicle_vin: '',\r\n      location_name: '',\r\n      is_active: true,\r\n      is_permanent: false\r\n    });\r\n  };\r\n\r\n  const openEditDialog = (tag: any) => {\r\n    setEditingTag(tag);\r\n    setFormData({\r\n      name: tag.name || '',\r\n      tag_uid: tag.tag_uid || '',\r\n      tag_type: tag.tag_type || 'vehicle',\r\n      description: tag.description || '',\r\n      vehicle_vin: tag.vehicle_vin || '',\r\n      location_name: tag.location_name || '',\r\n      is_active: tag.is_active,\r\n      is_permanent: tag.is_permanent\r\n    });\r\n  };\r\n\r\n  const generateTagUID = () => {\r\n    const uid = Array.from({ length: 8 }, () => Math.floor(Math.random() * 16).toString(16)).join('').toUpperCase();\r\n    setFormData(prev => ({ ...prev, tag_uid: uid }));\r\n  };\r\n\r\n  const TagForm = ({ isEditing = false }) => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div>\r\n          <Label htmlFor=\"name\">{t('nfc_tracking.tag_manager.tag_name')}</Label>\r\n          <Input\r\n            id=\"name\"\r\n            value={formData.name}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\r\n            placeholder={t('nfc_tracking.tag_manager.tag_name_placeholder')}\r\n          />\r\n        </div>\r\n        \r\n        <div>\r\n          <Label htmlFor=\"tag_uid\">{t('nfc_tracking.tag_manager.tag_uid')}</Label>\r\n          <div className=\"flex gap-2\">\r\n            <Input\r\n              id=\"tag_uid\"\r\n              value={formData.tag_uid}\r\n              onChange={(e) => setFormData(prev => ({ ...prev, tag_uid: e.target.value }))}\r\n              placeholder={t('nfc_tracking.tag_manager.uid_placeholder')}\r\n            />\r\n            <Button type=\"button\" variant=\"outline\" onClick={generateTagUID}>\r\n              <QrCode className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <Label htmlFor=\"tag_type\">{t('nfc_tracking.tag_manager.tag_type')}</Label>\r\n        <Select \r\n          value={formData.tag_type} \r\n          onValueChange={(value) => setFormData(prev => ({ ...prev, tag_type: value }))}\r\n        >\r\n          <SelectTrigger>\r\n            <SelectValue />\r\n          </SelectTrigger>\r\n          <SelectContent>\r\n            <SelectItem value=\"vehicle\">{t('nfc_tracking.tag_manager.vehicle_tag')}</SelectItem>\r\n            <SelectItem value=\"location\">{t('nfc_tracking.tag_manager.location_tag')}</SelectItem>\r\n            <SelectItem value=\"equipment\">{t('nfc_tracking.tag_manager.equipment_tag')}</SelectItem>\r\n            <SelectItem value=\"process\">{t('nfc_tracking.tag_manager.process_tag')}</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      </div>\r\n\r\n      {formData.tag_type === 'vehicle' && (\r\n        <div>\r\n          <Label htmlFor=\"vehicle_vin\">{t('nfc_tracking.tag_manager.vehicle_vin')}</Label>\r\n          <Input\r\n            id=\"vehicle_vin\"\r\n            value={formData.vehicle_vin}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, vehicle_vin: e.target.value }))}\r\n            placeholder={t('nfc_tracking.tag_manager.vin_placeholder')}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      {(formData.tag_type === 'location' || formData.tag_type === 'equipment') && (\r\n        <div>\r\n          <Label htmlFor=\"location_name\">{t('nfc_tracking.tag_manager.location_name')}</Label>\r\n          <Input\r\n            id=\"location_name\"\r\n            value={formData.location_name}\r\n            onChange={(e) => setFormData(prev => ({ ...prev, location_name: e.target.value }))}\r\n            placeholder={t('nfc_tracking.tag_manager.location_placeholder')}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <Label htmlFor=\"description\">{t('nfc_tracking.tag_manager.description')}</Label>\r\n        <Textarea\r\n          id=\"description\"\r\n          value={formData.description}\r\n          onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\r\n          placeholder={t('nfc_tracking.tag_manager.description_placeholder')}\r\n          rows={3}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex items-center space-x-6\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Switch\r\n            id=\"is_active\"\r\n            checked={formData.is_active}\r\n            onCheckedChange={(checked) => setFormData(prev => ({ ...prev, is_active: checked }))}\r\n          />\r\n          <Label htmlFor=\"is_active\">{t('nfc_tracking.tag_manager.active_tag')}</Label>\r\n        </div>\r\n\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Switch\r\n            id=\"is_permanent\"\r\n            checked={formData.is_permanent}\r\n            onCheckedChange={(checked) => setFormData(prev => ({ ...prev, is_permanent: checked }))}\r\n          />\r\n          <Label htmlFor=\"is_permanent\">{t('nfc_tracking.tag_manager.permanent_tag')}</Label>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const getTagIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'vehicle': return <Car className=\"w-4 h-4\" />;\r\n      case 'location': return <MapPin className=\"w-4 h-4\" />;\r\n      case 'equipment': return <Settings className=\"w-4 h-4\" />;\r\n      case 'process': return <Activity className=\"w-4 h-4\" />;\r\n      default: return <Radio className=\"w-4 h-4\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (isActive: boolean) => {\r\n    return isActive ? 'text-success' : 'text-muted-foreground';\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"space-y-6\", className)}>\r\n      {/* Header and Controls */}\r\n      <div className=\"flex flex-col md:flex-row gap-4 items-start md:items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-xl font-semibold\">{t('nfc_tracking.tag_manager.title')}</h2>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {t('nfc_tracking.tag_manager.subtitle')}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button \r\n            variant=\"outline\"\r\n            onClick={() => setIsTemplatesDialogOpen(true)}\r\n            className=\"mr-2\"\r\n          >\r\n            <Settings className=\"h-4 w-4 mr-2\" />\r\n            {t('nfc.templates.quick_create')}\r\n          </Button>\r\n          <Button \r\n            variant=\"outline\"\r\n            onClick={() => setIsReaderDialogOpen(true)}\r\n            className=\"mr-2\"\r\n          >\r\n            <Eye className=\"h-4 w-4 mr-2\" />\r\n            {t('nfc.reader.title')}\r\n          </Button>\r\n          <Button onClick={() => setShowCreateDialog(true)}>\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            {t('nfc_tracking.tag_manager.register_new')}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Filters */}\r\n      <Card>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder={t('nfc_tracking.tag_manager.search_placeholder')}\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n\r\n            <Select value={filterType} onValueChange={setFilterType}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder={t('nfc_tracking.tag_manager.filter_type')} />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">{t('nfc_tracking.tag_manager.all_types')}</SelectItem>\r\n                <SelectItem value=\"vehicle\">{t('nfc_tracking.tag_manager.vehicle_tag')}</SelectItem>\r\n                <SelectItem value=\"location\">{t('nfc_tracking.tag_manager.location_tag')}</SelectItem>\r\n                <SelectItem value=\"equipment\">{t('nfc_tracking.tag_manager.equipment_tag')}</SelectItem>\r\n                <SelectItem value=\"process\">{t('nfc_tracking.tag_manager.process_tag')}</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder={t('nfc_tracking.tag_manager.filter_status')} />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">{t('nfc_tracking.tag_manager.all_status')}</SelectItem>\r\n                <SelectItem value=\"active\">{t('nfc_tracking.tag_manager.active_only')}</SelectItem>\r\n                <SelectItem value=\"inactive\">{t('nfc_tracking.tag_manager.inactive_only')}</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n              <Filter className=\"w-4 h-4\" />\r\n              {filteredTags.length} {t('nfc_tracking.tag_manager.results')}\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Tags List */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n        {filteredTags.map((tag) => (\r\n          <Card key={tag.id} className=\"hover:shadow-md transition-all duration-200\">\r\n            <CardHeader className=\"pb-3\">\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex items-center gap-3\">\r\n                  <div className={cn(\r\n                    \"w-10 h-10 rounded-full bg-muted flex items-center justify-center\",\r\n                    getStatusColor(tag.is_active)\r\n                  )}>\r\n                    {getTagIcon(tag.tag_type)}\r\n                  </div>\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <h3 className=\"font-semibold truncate\">{tag.name}</h3>\r\n                    <p className=\"text-xs text-muted-foreground\">#{tag.tag_uid}</p>\r\n                  </div>\r\n                </div>\r\n                <DropdownMenu>\r\n                  <DropdownMenuTrigger asChild>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <MoreVertical className=\"w-3 h-3\" />\r\n                    </Button>\r\n                  </DropdownMenuTrigger>\r\n                  <DropdownMenuContent align=\"end\">\r\n                    <DropdownMenuItem onClick={() => {\r\n                      setWritingTag(tag);\r\n                      setIsWriterDialogOpen(true);\r\n                    }}>\r\n                      <Smartphone className=\"h-4 w-4 mr-2\" />\r\n                      {t('nfc.writer.write_to_physical')}\r\n                    </DropdownMenuItem>\r\n                    <DropdownMenuItem onClick={() => setEditingTag(tag)}>\r\n                      <Edit className=\"h-4 w-4 mr-2\" />\r\n                      {t('common.edit')}\r\n                    </DropdownMenuItem>\r\n                    <DropdownMenuItem \r\n                      onClick={() => handleDeleteTag(tag.id)}\r\n                      className=\"text-destructive\"\r\n                    >\r\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                      {t('common.delete')}\r\n                    </DropdownMenuItem>\r\n                  </DropdownMenuContent>\r\n                </DropdownMenu>\r\n              </div>\r\n            </CardHeader>\r\n\r\n            <CardContent className=\"space-y-3\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Badge variant={tag.is_active ? \"default\" : \"secondary\"}>\r\n                  {tag.is_active ? t('nfc_tracking.tag_manager.active') : t('nfc_tracking.tag_manager.inactive')}\r\n                </Badge>\r\n                {tag.is_permanent && (\r\n                  <Badge variant=\"outline\">\r\n                    {t('nfc_tracking.tag_manager.permanent')}\r\n                  </Badge>\r\n                )}\r\n                <Badge variant=\"outline\">\r\n                  {tag.tag_type}\r\n                </Badge>\r\n              </div>\r\n\r\n              {tag.vehicle_vin && (\r\n                <div className=\"text-sm\">\r\n                  <span className=\"text-muted-foreground\">{t('nfc_tracking.tag_manager.vin')}: </span>\r\n                  <code className=\"bg-muted px-1 rounded text-xs\">{tag.vehicle_vin}</code>\r\n                </div>\r\n              )}\r\n\r\n              {tag.location_name && (\r\n                <div className=\"text-sm\">\r\n                  <span className=\"text-muted-foreground\">{t('nfc_tracking.tag_manager.location')}: </span>\r\n                  {tag.location_name}\r\n                </div>\r\n              )}\r\n\r\n              {tag.description && (\r\n                <p className=\"text-xs text-muted-foreground line-clamp-2\">\r\n                  {tag.description}\r\n                </p>\r\n              )}\r\n\r\n              <Separator />\r\n\r\n              <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\r\n                <span>{tag.scan_count} {t('nfc_tracking.tag_manager.scans')}</span>\r\n                <span>\r\n                  {tag.last_scanned_at\r\n                    ? formatDistanceToNow(new Date(tag.last_scanned_at), { \r\n                        addSuffix: true, \r\n                        locale: getLocale() \r\n                      })\r\n                    : t('nfc_tracking.tag_manager.never_scanned')\r\n                  }\r\n                </span>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {filteredTags.length === 0 && (\r\n        <Card>\r\n          <CardContent className=\"text-center py-12\">\r\n            <Radio className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\r\n            <h3 className=\"text-lg font-medium mb-2\">\r\n              {searchTerm || filterType !== 'all' || filterStatus !== 'all'\r\n                ? t('nfc_tracking.tag_manager.no_results')\r\n                : t('nfc_tracking.tag_manager.no_tags')\r\n              }\r\n            </h3>\r\n            <p className=\"text-muted-foreground mb-4\">\r\n              {searchTerm || filterType !== 'all' || filterStatus !== 'all'\r\n                ? t('nfc_tracking.tag_manager.try_different_filters')\r\n                : t('nfc_tracking.tag_manager.create_first_tag')\r\n              }\r\n            </p>\r\n            {!searchTerm && filterType === 'all' && filterStatus === 'all' && (\r\n              <Button onClick={() => setShowCreateDialog(true)}>\r\n                <Plus className=\"w-4 h-4 mr-2\" />\r\n                {t('nfc_tracking.tag_manager.register_new')}\r\n              </Button>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Edit Dialog */}\r\n      {editingTag && (\r\n        <Dialog open={!!editingTag} onOpenChange={() => setEditingTag(null)}>\r\n          <DialogContent className=\"max-w-2xl\">\r\n            <DialogHeader>\r\n              <DialogTitle>\r\n                {t('nfc_tracking.tag_manager.edit_tag')}: {editingTag.name}\r\n              </DialogTitle>\r\n            </DialogHeader>\r\n            <TagForm isEditing={true} />\r\n            <DialogFooter>\r\n              <Button variant=\"outline\" onClick={() => setEditingTag(null)}>\r\n                {t('common.cancel')}\r\n              </Button>\r\n              <Button onClick={handleUpdateTag} disabled={loading}>\r\n                {t('common.save')}\r\n              </Button>\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n\r\n      {/* Create Dialog */}\r\n      <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\r\n        <DialogContent className=\"max-w-2xl\">\r\n          <DialogHeader>\r\n            <DialogTitle>{t('nfc_tracking.tag_manager.create_tag')}</DialogTitle>\r\n          </DialogHeader>\r\n          <TagForm />\r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\r\n              {t('common.cancel')}\r\n            </Button>\r\n            <Button onClick={handleCreateTag} disabled={loading}>\r\n              {t('common.create')}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Physical NFC Writer */}\r\n      {writingTag && (\r\n        <NFCPhysicalWriter\r\n          isOpen={isWriterDialogOpen}\r\n          onClose={() => {\r\n            setIsWriterDialogOpen(false);\r\n            setWritingTag(null);\r\n          }}\r\n          tag={writingTag}\r\n          onSuccess={() => console.log('NFC tag written successfully')}\r\n        />\r\n      )}\r\n\r\n      {/* Physical NFC Reader */}\r\n      <NFCPhysicalReader\r\n        isOpen={isReaderDialogOpen}\r\n        onClose={() => setIsReaderDialogOpen(false)}\r\n        onTagRead={(tagData) => console.log('Tag read:', tagData)}\r\n      />\r\n\r\n      {/* NFC Tag Templates */}\r\n      <NFCTagTemplates\r\n        isOpen={isTemplatesDialogOpen}\r\n        onClose={() => setIsTemplatesDialogOpen(false)}\r\n        onTemplateSelect={() => {\r\n          // Refresh tags after creating from template\r\n          loadTags();\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCTagTemplates.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCVehicleTracker.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":97,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":100,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2676,2679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2676,2679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Car, \r\n  MapPin, \r\n  Navigation, \r\n  Clock,\r\n  Search,\r\n  Route,\r\n  History,\r\n  Activity,\r\n  AlertTriangle,\r\n  CheckCircle2,\r\n  Timer\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNFCManagement } from '@/hooks/useNFCManagement';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { es, ptBR } from 'date-fns/locale';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface NFCVehicleTrackerProps {\r\n  className?: string;\r\n}\r\n\r\ninterface VehicleLocation {\r\n  id: string;\r\n  vehicle_vin: string;\r\n  vehicle_info?: string;\r\n  current_location: string;\r\n  coordinates?: [number, number];\r\n  last_updated: string;\r\n  status: 'in_process' | 'waiting' | 'completed' | 'moved';\r\n  stage: string;\r\n  estimated_completion?: string;\r\n  progress_percentage: number;\r\n}\r\n\r\ninterface LocationHistory {\r\n  location: string;\r\n  timestamp: string;\r\n  duration: number; // in minutes\r\n  status: string;\r\n  notes?: string;\r\n}\r\n\r\nexport function NFCVehicleTracker({ className }: NFCVehicleTrackerProps) {\r\n  const { t, i18n } = useTranslation();\r\n  const { vehicleTags, scans, loadTags, loadScans } = useNFCManagement();\r\n  \r\n  const [searchVin, setSearchVin] = useState('');\r\n  const [selectedVehicle, setSelectedVehicle] = useState<string | null>(null);\r\n  const [locationHistory, setLocationHistory] = useState<LocationHistory[]>([]);\r\n\r\n  // Get locale for date-fns\r\n  const getLocale = () => {\r\n    switch (i18n.language) {\r\n      case 'es': return es;\r\n      case 'pt-BR': return ptBR;\r\n      default: return undefined;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadTags();\r\n    loadScans();\r\n  }, [loadTags, loadScans]);\r\n\r\n  // Mock vehicle location data - in real app this would come from NFC scan aggregation\r\n  const mockVehicleLocations: VehicleLocation[] = vehicleTags\r\n    .filter(tag => tag.vehicle_vin)\r\n    .map(tag => ({\r\n      id: tag.id,\r\n      vehicle_vin: tag.vehicle_vin!,\r\n      vehicle_info: `2024 ${tag.name}`,\r\n      current_location: tag.location_name || 'Service Bay 1',\r\n      coordinates: tag.location_coordinates,\r\n      last_updated: tag.last_scanned_at || tag.created_at,\r\n      status: ['in_process', 'waiting', 'completed', 'moved'][Math.floor(Math.random() * 4)] as any,\r\n      stage: ['Reception', 'Wash Bay', 'Detail Bay', 'Quality Check', 'Ready for Pickup'][Math.floor(Math.random() * 5)],\r\n      estimated_completion: new Date(Date.now() + Math.random() * 4 * 60 * 60 * 1000).toISOString(),\r\n      progress_percentage: Math.floor(Math.random() * 100)\r\n    }));\r\n\r\n  // Filter vehicles based on search\r\n  const filteredVehicles = mockVehicleLocations.filter(vehicle =>\r\n    vehicle.vehicle_vin.toLowerCase().includes(searchVin.toLowerCase()) ||\r\n    vehicle.vehicle_info?.toLowerCase().includes(searchVin.toLowerCase())\r\n  );\r\n\r\n  // Mock location history for selected vehicle\r\n  const generateLocationHistory = (vehicleId: string): LocationHistory[] => {\r\n    const locations = ['Reception', 'Wash Bay 1', 'Detail Bay 2', 'Quality Check', 'Ready Zone'];\r\n    return locations.map((location, index) => ({\r\n      location,\r\n      timestamp: new Date(Date.now() - (locations.length - index) * 60 * 60 * 1000).toISOString(),\r\n      duration: Math.floor(Math.random() * 120) + 30, // 30-150 minutes\r\n      status: index < locations.length - 1 ? 'completed' : 'current',\r\n      notes: index === 2 ? 'Additional paint correction required' : undefined\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedVehicle) {\r\n      setLocationHistory(generateLocationHistory(selectedVehicle));\r\n    }\r\n  }, [selectedVehicle]);\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'in_process': return 'bg-primary text-primary-foreground';\r\n      case 'waiting': return 'bg-warning text-warning-foreground';\r\n      case 'completed': return 'bg-success text-success-foreground';\r\n      case 'moved': return 'bg-secondary text-secondary-foreground';\r\n      default: return 'bg-muted text-muted-foreground';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'in_process': return <Activity className=\"w-3 h-3\" />;\r\n      case 'waiting': return <Clock className=\"w-3 h-3\" />;\r\n      case 'completed': return <CheckCircle2 className=\"w-3 h-3\" />;\r\n      case 'moved': return <Navigation className=\"w-3 h-3\" />;\r\n      default: return <AlertTriangle className=\"w-3 h-3\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"space-y-6\", className)}>\r\n      {/* Header and Search */}\r\n      <div className=\"flex flex-col md:flex-row gap-4 items-start md:items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-xl font-semibold\">{t('nfc_tracking.vehicle_tracker.title')}</h2>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {t('nfc_tracking.vehicle_tracker.subtitle')}\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"relative w-full md:w-80\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\r\n          <Input\r\n            placeholder={t('nfc_tracking.vehicle_tracker.search_placeholder')}\r\n            value={searchVin}\r\n            onChange={(e) => setSearchVin(e.target.value)}\r\n            className=\"pl-10\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Vehicle List */}\r\n        <Card className=\"lg:col-span-1\">\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Car className=\"w-5 h-5 text-primary\" />\r\n              {t('nfc_tracking.vehicle_tracker.tracked_vehicles')}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <ScrollArea className=\"h-96\">\r\n              <div className=\"space-y-3\">\r\n                {filteredVehicles.map((vehicle) => (\r\n                  <div\r\n                    key={vehicle.id}\r\n                    className={cn(\r\n                      \"p-3 rounded-lg border cursor-pointer transition-all hover:shadow-md\",\r\n                      selectedVehicle === vehicle.id ? \"border-primary bg-primary/5\" : \"border-border\"\r\n                    )}\r\n                    onClick={() => setSelectedVehicle(vehicle.id)}\r\n                  >\r\n                    <div className=\"flex items-start justify-between mb-2\">\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <p className=\"font-medium truncate\">{vehicle.vehicle_info}</p>\r\n                        <p className=\"text-xs text-muted-foreground\">VIN: {vehicle.vehicle_vin}</p>\r\n                      </div>\r\n                      <Badge className={cn(\"ml-2\", getStatusColor(vehicle.status))}>\r\n                        {getStatusIcon(vehicle.status)}\r\n                        <span className=\"ml-1 capitalize\">{vehicle.status.replace('_', ' ')}</span>\r\n                      </Badge>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center gap-2 mb-2\">\r\n                      <MapPin className=\"w-3 h-3 text-muted-foreground\" />\r\n                      <span className=\"text-sm\">{vehicle.current_location}</span>\r\n                    </div>\r\n                    \r\n                    <div className=\"space-y-1\">\r\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\r\n                        <span>{t('nfc_tracking.vehicle_tracker.progress')}</span>\r\n                        <span>{vehicle.progress_percentage}%</span>\r\n                      </div>\r\n                      <Progress value={vehicle.progress_percentage} className=\"h-1\" />\r\n                    </div>\r\n                    \r\n                    <div className=\"mt-2 text-xs text-muted-foreground\">\r\n                      {t('nfc_tracking.vehicle_tracker.last_update')}: {formatDistanceToNow(new Date(vehicle.last_updated), { \r\n                        addSuffix: true, \r\n                        locale: getLocale() \r\n                      })}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n                \r\n                {filteredVehicles.length === 0 && (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    <Car className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\r\n                    <p className=\"text-sm\">\r\n                      {searchVin ? t('nfc_tracking.vehicle_tracker.no_results') : t('nfc_tracking.vehicle_tracker.no_vehicles')}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </ScrollArea>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Vehicle Details and Location History */}\r\n        <div className=\"lg:col-span-2 space-y-6\">\r\n          {selectedVehicle ? (\r\n            <>\r\n              {/* Current Status */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Navigation className=\"w-5 h-5 text-primary\" />\r\n                    {t('nfc_tracking.vehicle_tracker.current_status')}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {(() => {\r\n                    const vehicle = filteredVehicles.find(v => v.id === selectedVehicle);\r\n                    if (!vehicle) return null;\r\n\r\n                    return (\r\n                      <div className=\"space-y-4\">\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                          <div className=\"space-y-3\">\r\n                            <div>\r\n                              <p className=\"text-sm font-medium\">{t('nfc_tracking.vehicle_tracker.vehicle')}</p>\r\n                              <p className=\"text-lg\">{vehicle.vehicle_info}</p>\r\n                              <p className=\"text-xs text-muted-foreground\">VIN: {vehicle.vehicle_vin}</p>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                              <p className=\"text-sm font-medium\">{t('nfc_tracking.vehicle_tracker.current_location')}</p>\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <MapPin className=\"w-4 h-4 text-muted-foreground\" />\r\n                                <span>{vehicle.current_location}</span>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          \r\n                          <div className=\"space-y-3\">\r\n                            <div>\r\n                              <p className=\"text-sm font-medium\">{t('nfc_tracking.vehicle_tracker.current_stage')}</p>\r\n                              <Badge className={getStatusColor(vehicle.status)}>\r\n                                {getStatusIcon(vehicle.status)}\r\n                                <span className=\"ml-1\">{vehicle.stage}</span>\r\n                              </Badge>\r\n                            </div>\r\n                            \r\n                            <div>\r\n                              <p className=\"text-sm font-medium\">{t('nfc_tracking.vehicle_tracker.estimated_completion')}</p>\r\n                              <div className=\"flex items-center gap-2\">\r\n                                <Timer className=\"w-4 h-4 text-muted-foreground\" />\r\n                                <span>\r\n                                  {vehicle.estimated_completion && formatDistanceToNow(new Date(vehicle.estimated_completion), { \r\n                                    addSuffix: true, \r\n                                    locale: getLocale() \r\n                                  })}\r\n                                </span>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        <div>\r\n                          <div className=\"flex justify-between text-sm mb-2\">\r\n                            <span>{t('nfc_tracking.vehicle_tracker.overall_progress')}</span>\r\n                            <span>{vehicle.progress_percentage}%</span>\r\n                          </div>\r\n                          <Progress value={vehicle.progress_percentage} className=\"h-2\" />\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })()}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Movement History */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <History className=\"w-5 h-5 text-primary\" />\r\n                    {t('nfc_tracking.vehicle_tracker.movement_history')}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <ScrollArea className=\"h-64\">\r\n                    <div className=\"space-y-4\">\r\n                      {locationHistory.map((entry, index) => (\r\n                        <div key={index} className=\"relative\">\r\n                          {index > 0 && (\r\n                            <div className=\"absolute left-4 -top-2 w-px h-4 bg-border\" />\r\n                          )}\r\n                          <div className=\"flex items-start gap-4\">\r\n                            <div className={cn(\r\n                              \"w-8 h-8 rounded-full border-2 flex items-center justify-center flex-shrink-0\",\r\n                              entry.status === 'current' \r\n                                ? \"border-primary bg-primary text-primary-foreground\" \r\n                                : \"border-success bg-success text-success-foreground\"\r\n                            )}>\r\n                              {entry.status === 'current' ? (\r\n                                <Activity className=\"w-3 h-3\" />\r\n                              ) : (\r\n                                <CheckCircle2 className=\"w-3 h-3\" />\r\n                              )}\r\n                            </div>\r\n                            \r\n                            <div className=\"flex-1 min-w-0\">\r\n                              <div className=\"flex items-center justify-between mb-1\">\r\n                                <p className=\"font-medium\">{entry.location}</p>\r\n                                <span className=\"text-xs text-muted-foreground\">\r\n                                  {formatDistanceToNow(new Date(entry.timestamp), { \r\n                                    addSuffix: true, \r\n                                    locale: getLocale() \r\n                                  })}\r\n                                </span>\r\n                              </div>\r\n                              \r\n                              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\r\n                                <div className=\"flex items-center gap-1\">\r\n                                  <Clock className=\"w-3 h-3\" />\r\n                                  <span>{entry.duration} {t('nfc_tracking.vehicle_tracker.minutes')}</span>\r\n                                </div>\r\n                                {entry.status === 'current' && (\r\n                                  <Badge variant=\"outline\" className=\"text-xs\">\r\n                                    {t('nfc_tracking.vehicle_tracker.current_location')}\r\n                                  </Badge>\r\n                                )}\r\n                              </div>\r\n                              \r\n                              {entry.notes && (\r\n                                <p className=\"text-xs text-muted-foreground mt-1 italic\">\r\n                                  {entry.notes}\r\n                                </p>\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          \r\n                          {index < locationHistory.length - 1 && (\r\n                            <div className=\"absolute left-4 bottom-0 w-px h-4 bg-border\" />\r\n                          )}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </ScrollArea>\r\n                </CardContent>\r\n              </Card>\r\n            </>\r\n          ) : (\r\n            <Card>\r\n              <CardContent className=\"text-center py-12\">\r\n                <Route className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\r\n                <h3 className=\"text-lg font-medium mb-2\">\r\n                  {t('nfc_tracking.vehicle_tracker.select_vehicle')}\r\n                </h3>\r\n                <p className=\"text-muted-foreground\">\r\n                  {t('nfc_tracking.vehicle_tracker.select_vehicle_desc')}\r\n                </p>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\nfc\\NFCWorkflowManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1843,1846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1843,1846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4684,4687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4684,4687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":409,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":409,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15650,15653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15650,15653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":454,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":454,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17843,17846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17843,17846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { \r\n  Plus, \r\n  Search, \r\n  MoreHorizontal, \r\n  Edit, \r\n  Trash2, \r\n  Zap, \r\n  Mail, \r\n  MessageSquare, \r\n  Bell, \r\n  Calendar, \r\n  Link, \r\n  Play,\r\n  Pause,\r\n  Settings,\r\n  Activity,\r\n  ArrowRight\r\n} from 'lucide-react';\r\nimport { useNFCWorkflows, NFCWorkflow } from '@/hooks/useNFCWorkflows';\r\n\r\ninterface NFCWorkflowManagerProps {\r\n  className?: string;\r\n}\r\n\r\nexport function NFCWorkflowManager({ className }: NFCWorkflowManagerProps) {\r\n  const { t } = useTranslation();\r\n  const { \r\n    workflows, \r\n    loading, \r\n    createWorkflow, \r\n    updateWorkflow, \r\n    deleteWorkflow, \r\n    toggleWorkflow,\r\n    loadWorkflows \r\n  } = useNFCWorkflows();\r\n\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\r\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\r\n  const [selectedWorkflow, setSelectedWorkflow] = useState<NFCWorkflow | null>(null);\r\n  \r\n  const [formData, setFormData] = useState<any>({\r\n    name: '',\r\n    description: '',\r\n    trigger_type: 'tag_scan',\r\n    trigger_conditions: {},\r\n    actions: [{\r\n      type: 'send_email',\r\n      config: {}\r\n    }]\r\n  });\r\n\r\n  useEffect(() => {\r\n    loadWorkflows();\r\n  }, [loadWorkflows]);\r\n\r\n  const filteredWorkflows = workflows.filter(workflow =>\r\n    workflow.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n    workflow.description.toLowerCase().includes(searchQuery.toLowerCase())\r\n  );\r\n\r\n  const handleCreateWorkflow = async () => {\r\n    try {\r\n      await createWorkflow(formData);\r\n      setIsCreateDialogOpen(false);\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Failed to create workflow:', error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateWorkflow = async () => {\r\n    if (!selectedWorkflow) return;\r\n    \r\n    try {\r\n      await updateWorkflow(selectedWorkflow.id, formData);\r\n      setIsEditDialogOpen(false);\r\n      setSelectedWorkflow(null);\r\n      resetForm();\r\n    } catch (error) {\r\n      console.error('Failed to update workflow:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteWorkflow = async (workflow: NFCWorkflow) => {\r\n    try {\r\n      await deleteWorkflow(workflow.id);\r\n    } catch (error) {\r\n      console.error('Failed to delete workflow:', error);\r\n    }\r\n  };\r\n\r\n  const handleToggleWorkflow = async (workflow: NFCWorkflow) => {\r\n    try {\r\n      await toggleWorkflow(workflow.id, !workflow.is_active);\r\n    } catch (error) {\r\n      console.error('Failed to toggle workflow:', error);\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      name: '',\r\n      description: '',\r\n      trigger_type: 'tag_scan',\r\n      trigger_conditions: {\r\n        tag_type: '',\r\n        location: '',\r\n        time_range: ''\r\n      },\r\n      actions: [{\r\n        type: 'send_email',\r\n        config: {\r\n          recipient: '',\r\n          subject: '',\r\n          message: ''\r\n        }\r\n      }]\r\n    });\r\n  };\r\n\r\n  const openEditDialog = (workflow: NFCWorkflow) => {\r\n    setSelectedWorkflow(workflow);\r\n    setFormData({\r\n      name: workflow.name,\r\n      description: workflow.description || '',\r\n      trigger_type: workflow.trigger_type,\r\n      trigger_conditions: workflow.trigger_conditions || {\r\n        tag_type: '',\r\n        location: '',\r\n        time_range: ''\r\n      },\r\n      actions: workflow.actions || [{\r\n        type: 'send_email',\r\n        config: {\r\n          recipient: '',\r\n          subject: '',\r\n          message: ''\r\n        }\r\n      }]\r\n    });\r\n    setIsEditDialogOpen(true);\r\n  };\r\n\r\n  const addAction = () => {\r\n    setFormData({\r\n      ...formData,\r\n      actions: [...formData.actions, {\r\n        type: 'send_email',\r\n        config: {\r\n          recipient: '',\r\n          subject: '',\r\n          message: ''\r\n        }\r\n      }]\r\n    });\r\n  };\r\n\r\n  const updateAction = (index: number, updates: any) => {\r\n    const newActions = [...formData.actions];\r\n    newActions[index] = { ...newActions[index], ...updates };\r\n    setFormData({ ...formData, actions: newActions });\r\n  };\r\n\r\n  const removeAction = (index: number) => {\r\n    const newActions = formData.actions.filter((_, i) => i !== index);\r\n    setFormData({ ...formData, actions: newActions });\r\n  };\r\n\r\n  const getActionIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'send_email': return Mail;\r\n      case 'send_sms': return MessageSquare;\r\n      case 'send_notification': return Bell;\r\n      case 'update_order_status': return Activity;\r\n      case 'create_task': return Calendar;\r\n      case 'webhook': return Link;\r\n      default: return Zap;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (isActive: boolean) => {\r\n    return isActive ? 'bg-success/20 text-success-foreground' : 'bg-muted text-muted-foreground';\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <div className=\"flex flex-col gap-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-between\">\r\n          <div>\r\n            <h2 className=\"text-xl font-semibold\">{t('nfc_tracking.workflows.title')}</h2>\r\n            <p className=\"text-muted-foreground\">\r\n              {t('nfc_tracking.workflows.subtitle')}\r\n            </p>\r\n          </div>\r\n          <Button \r\n            onClick={() => setIsCreateDialogOpen(true)}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <Plus className=\"w-4 h-4\" />\r\n            {t('nfc_tracking.workflows.create_workflow')}\r\n          </Button>\r\n        </div>\r\n\r\n        {/* Search */}\r\n        <div className=\"relative\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\r\n          <Input\r\n            placeholder={t('nfc_tracking.workflows.search_placeholder')}\r\n            value={searchQuery}\r\n            onChange={(e) => setSearchQuery(e.target.value)}\r\n            className=\"pl-10\"\r\n          />\r\n        </div>\r\n\r\n        {/* Workflows List */}\r\n        {loading ? (\r\n          <div className=\"space-y-4\">\r\n            {[...Array(3)].map((_, i) => (\r\n              <Card key={i} className=\"animate-pulse\">\r\n                <CardHeader>\r\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\r\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"h-20 bg-muted rounded\"></div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-4\">\r\n            {filteredWorkflows.map((workflow) => (\r\n              <Card key={workflow.id} className=\"hover:shadow-lg transition-shadow\">\r\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-3\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className=\"w-10 h-10 rounded-full bg-gradient-primary flex items-center justify-center\">\r\n                      <Zap className=\"w-5 h-5 text-primary-foreground\" />\r\n                    </div>\r\n                    <div>\r\n                      <CardTitle className=\"text-base\">{workflow.name}</CardTitle>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Badge className={getStatusColor(workflow.is_active)}>\r\n                          {workflow.is_active ? t('nfc_tracking.workflows.active') : t('nfc_tracking.workflows.inactive')}\r\n                        </Badge>\r\n                        <Badge variant=\"outline\">\r\n                          {t(`nfc_tracking.workflows.triggers.${workflow.trigger_type}`)}\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Switch\r\n                      checked={workflow.is_active}\r\n                      onCheckedChange={() => handleToggleWorkflow(workflow)}\r\n                    />\r\n                    <DropdownMenu>\r\n                      <DropdownMenuTrigger asChild>\r\n                        <Button variant=\"ghost\" size=\"sm\">\r\n                          <MoreHorizontal className=\"w-4 h-4\" />\r\n                        </Button>\r\n                      </DropdownMenuTrigger>\r\n                      <DropdownMenuContent align=\"end\">\r\n                        <DropdownMenuItem onClick={() => openEditDialog(workflow)}>\r\n                          <Edit className=\"w-4 h-4 mr-2\" />\r\n                          {t('nfc_tracking.workflows.edit')}\r\n                        </DropdownMenuItem>\r\n                        <DropdownMenuItem onClick={() => handleToggleWorkflow(workflow)}>\r\n                          {workflow.is_active ? (\r\n                            <>\r\n                              <Pause className=\"w-4 h-4 mr-2\" />\r\n                              {t('nfc_tracking.workflows.disable')}\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              <Play className=\"w-4 h-4 mr-2\" />\r\n                              {t('nfc_tracking.workflows.enable')}\r\n                            </>\r\n                          )}\r\n                        </DropdownMenuItem>\r\n                        <DropdownMenuItem \r\n                          onClick={() => handleDeleteWorkflow(workflow)}\r\n                          className=\"text-destructive\"\r\n                        >\r\n                          <Trash2 className=\"w-4 h-4 mr-2\" />\r\n                          {t('nfc_tracking.workflows.delete')}\r\n                        </DropdownMenuItem>\r\n                      </DropdownMenuContent>\r\n                    </DropdownMenu>\r\n                  </div>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    {workflow.description}\r\n                  </p>\r\n                  \r\n                  {/* Workflow Actions Preview */}\r\n                  <div className=\"flex flex-wrap gap-2\">\r\n                    {workflow.actions?.slice(0, 3).map((action, index) => {\r\n                      const ActionIcon = getActionIcon(action.type);\r\n                      return (\r\n                        <div key={index} className=\"flex items-center gap-1 px-2 py-1 bg-muted rounded-md text-xs\">\r\n                          <ActionIcon className=\"w-3 h-3\" />\r\n                          <span>{t(`nfc_tracking.workflows.actions.${action.type}`)}</span>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                    {workflow.actions && workflow.actions.length > 3 && (\r\n                      <div className=\"px-2 py-1 bg-muted rounded-md text-xs\">\r\n                        +{workflow.actions.length - 3} {t('nfc_tracking.workflows.more_actions')}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Statistics */}\r\n                  <div className=\"grid grid-cols-3 gap-4 pt-2 border-t\">\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-lg font-semibold\">{workflow.execution_count || 0}</p>\r\n                      <p className=\"text-xs text-muted-foreground\">{t('nfc_tracking.workflows.executions')}</p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-lg font-semibold text-success\">\r\n                        {Math.round((workflow.success_count || 0) / Math.max(workflow.execution_count || 1, 1) * 100)}%\r\n                      </p>\r\n                      <p className=\"text-xs text-muted-foreground\">{t('nfc_tracking.workflows.success_rate')}</p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-lg font-semibold\">\r\n                        {workflow.last_executed ? new Date(workflow.last_executed).toLocaleDateString() : '-'}\r\n                      </p>\r\n                      <p className=\"text-xs text-muted-foreground\">{t('nfc_tracking.workflows.last_run')}</p>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        )}\r\n\r\n        {filteredWorkflows.length === 0 && !loading && (\r\n          <div className=\"text-center py-8 text-muted-foreground\">\r\n            {searchQuery ? t('nfc_tracking.workflows.no_results') : t('nfc_tracking.workflows.no_workflows')}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {/* Create/Edit Workflow Dialog */}\r\n      <Dialog open={isCreateDialogOpen || isEditDialogOpen} onOpenChange={(open) => {\r\n        if (!open) {\r\n          setIsCreateDialogOpen(false);\r\n          setIsEditDialogOpen(false);\r\n          setSelectedWorkflow(null);\r\n          resetForm();\r\n        }\r\n      }}>\r\n        <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>\r\n              {isEditDialogOpen ? t('nfc_tracking.workflows.edit_workflow') : t('nfc_tracking.workflows.create_workflow')}\r\n            </DialogTitle>\r\n            <DialogDescription>\r\n              {t('nfc_tracking.workflows.workflow_description')}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          <div className=\"grid gap-6 py-4\">\r\n            {/* Basic Info */}\r\n            <div className=\"space-y-4\">\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"workflow-name\">{t('nfc_tracking.workflows.name')}</Label>\r\n                <Input\r\n                  id=\"workflow-name\"\r\n                  value={formData.name}\r\n                  onChange={(e) => setFormData({...formData, name: e.target.value})}\r\n                  placeholder={t('nfc_tracking.workflows.name_placeholder')}\r\n                />\r\n              </div>\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"workflow-description\">{t('nfc_tracking.workflows.description')}</Label>\r\n                <Textarea\r\n                  id=\"workflow-description\"\r\n                  value={formData.description}\r\n                  onChange={(e) => setFormData({...formData, description: e.target.value})}\r\n                  placeholder={t('nfc_tracking.workflows.description_placeholder')}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            {/* Trigger Configuration */}\r\n            <div className=\"space-y-4\">\r\n              <h4 className=\"font-medium\">{t('nfc_tracking.workflows.trigger_config')}</h4>\r\n              <div className=\"grid gap-2\">\r\n                <Label htmlFor=\"trigger-type\">{t('nfc_tracking.workflows.trigger_type')}</Label>\r\n                <Select \r\n                  value={formData.trigger_type} \r\n                  onValueChange={(value: any) => setFormData({...formData, trigger_type: value})}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"tag_scan\">{t('nfc_tracking.workflows.triggers.tag_scan')}</SelectItem>\r\n                    <SelectItem value=\"location_entry\">{t('nfc_tracking.workflows.triggers.location_entry')}</SelectItem>\r\n                    <SelectItem value=\"time_based\">{t('nfc_tracking.workflows.triggers.time_based')}</SelectItem>\r\n                    <SelectItem value=\"status_change\">{t('nfc_tracking.workflows.triggers.status_change')}</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Actions */}\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h4 className=\"font-medium\">{t('nfc_tracking.workflows.actions')}</h4>\r\n                <Button variant=\"outline\" size=\"sm\" onClick={addAction}>\r\n                  <Plus className=\"w-4 h-4 mr-2\" />\r\n                  {t('nfc_tracking.workflows.add_action')}\r\n                </Button>\r\n              </div>\r\n              \r\n              {formData.actions.map((action, index) => (\r\n                <Card key={index} className=\"p-4\">\r\n                  <div className=\"flex justify-between items-start mb-3\">\r\n                    <h5 className=\"font-medium text-sm\">\r\n                      {t('nfc_tracking.workflows.action')} {index + 1}\r\n                    </h5>\r\n                    {formData.actions.length > 1 && (\r\n                      <Button \r\n                        variant=\"ghost\" \r\n                        size=\"sm\" \r\n                        onClick={() => removeAction(index)}\r\n                      >\r\n                        <Trash2 className=\"w-4 h-4\" />\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                  \r\n                  <div className=\"grid gap-3\">\r\n                    <Select \r\n                      value={action.type} \r\n                      onValueChange={(value: any) => updateAction(index, { type: value })}\r\n                    >\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"send_email\">{t('nfc_tracking.workflows.actions.send_email')}</SelectItem>\r\n                        <SelectItem value=\"send_sms\">{t('nfc_tracking.workflows.actions.send_sms')}</SelectItem>\r\n                        <SelectItem value=\"send_notification\">{t('nfc_tracking.workflows.actions.send_notification')}</SelectItem>\r\n                        <SelectItem value=\"update_order_status\">{t('nfc_tracking.workflows.actions.update_order_status')}</SelectItem>\r\n                        <SelectItem value=\"create_task\">{t('nfc_tracking.workflows.actions.create_task')}</SelectItem>\r\n                        <SelectItem value=\"webhook\">{t('nfc_tracking.workflows.actions.webhook')}</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n\r\n                    {/* Action-specific configuration */}\r\n                    {(action.type === 'send_email' || action.type === 'send_sms') && (\r\n                      <>\r\n                        <Input\r\n                          placeholder={t('nfc_tracking.workflows.recipient')}\r\n                          value={action.config.recipient || ''}\r\n                          onChange={(e) => updateAction(index, {\r\n                            config: { ...action.config, recipient: e.target.value }\r\n                          })}\r\n                        />\r\n                        {action.type === 'send_email' && (\r\n                          <Input\r\n                            placeholder={t('nfc_tracking.workflows.subject')}\r\n                            value={action.config.subject || ''}\r\n                            onChange={(e) => updateAction(index, {\r\n                              config: { ...action.config, subject: e.target.value }\r\n                            })}\r\n                          />\r\n                        )}\r\n                        <Textarea\r\n                          placeholder={t('nfc_tracking.workflows.message')}\r\n                          value={action.config.message || ''}\r\n                          onChange={(e) => updateAction(index, {\r\n                            config: { ...action.config, message: e.target.value }\r\n                          })}\r\n                        />\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={() => {\r\n              setIsCreateDialogOpen(false);\r\n              setIsEditDialogOpen(false);\r\n              setSelectedWorkflow(null);\r\n              resetForm();\r\n            }}>\r\n              {t('nfc_tracking.workflows.cancel')}\r\n            </Button>\r\n            <Button onClick={isEditDialogOpen ? handleUpdateWorkflow : handleCreateWorkflow}>\r\n              {isEditDialogOpen ? t('nfc_tracking.workflows.save') : t('nfc_tracking.workflows.create')}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\notifications\\NotificationAnalyticsDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\notifications\\NotificationBell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\notifications\\NotificationPreferencesModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2312,2315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2312,2315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2698,2701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2698,2701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3085,3088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3085,3088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3384,3387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3384,3387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3682,3685],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3682,3685],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":142,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4003,4006],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4003,4006],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6570,6573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6570,6573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6633,6636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6633,6636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":246,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6686,6689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6686,6689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6748,6751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6748,6751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":248,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6815,6818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6815,6818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7866,7869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7866,7869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":356,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12386,12389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12386,12389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":490,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":490,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18303,18306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18303,18306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n} from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { \r\n  Bell, \r\n  Mail, \r\n  MessageSquare, \r\n  Smartphone, \r\n  Volume2, \r\n  VolumeX, \r\n  Clock, \r\n  AlertTriangle,\r\n  CheckCircle,\r\n  Info,\r\n  Zap\r\n} from 'lucide-react';\r\nimport { useNotificationPreferences } from '@/hooks/useEnhancedNotifications';\r\nimport { pushNotificationService } from '@/services/pushNotificationService';\r\nimport { toast } from '@/hooks/use-toast';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface NotificationPreferencesModalProps {\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n  dealerId: number;\r\n}\r\n\r\nexport function NotificationPreferencesModal({\r\n  open,\r\n  onOpenChange,\r\n  dealerId\r\n}: NotificationPreferencesModalProps) {\r\n  const { t } = useTranslation();\r\n  const { preferences, loading, updatePreferences } = useNotificationPreferences(dealerId);\r\n  const [localPrefs, setLocalPrefs] = useState(preferences);\r\n  const [pushSupported, setPushSupported] = useState(false);\r\n  const [pushPermission, setPushPermission] = useState<NotificationPermission>('default');\r\n  const [saving, setSaving] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (preferences) {\r\n      setLocalPrefs(preferences);\r\n    }\r\n  }, [preferences]);\r\n\r\n  useEffect(() => {\r\n    // Check push notification support\r\n    const supported = pushNotificationService.isSupported();\r\n    setPushSupported(supported);\r\n    \r\n    if (supported) {\r\n      setPushPermission(Notification.permission);\r\n    }\r\n  }, []);\r\n\r\n  const handleChannelToggle = (channel: string, enabled: boolean) => {\r\n    if (!localPrefs) return;\r\n\r\n    const channelPrefs = localPrefs.channel_preferences as any;\r\n    setLocalPrefs({\r\n      ...localPrefs,\r\n      channel_preferences: {\r\n        ...channelPrefs,\r\n        [channel]: {\r\n          ...channelPrefs[channel],\r\n          enabled\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleFrequencyChange = (channel: string, frequency: string) => {\r\n    if (!localPrefs) return;\r\n\r\n    const channelPrefs = localPrefs.channel_preferences as any;\r\n    setLocalPrefs({\r\n      ...localPrefs,\r\n      channel_preferences: {\r\n        ...channelPrefs,\r\n        [channel]: {\r\n          ...channelPrefs[channel],\r\n          frequency\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const handlePriorityToggle = (priority: string, enabled: boolean) => {\r\n    if (!localPrefs) return;\r\n\r\n    const priorityFilters = localPrefs.priority_filters as any;\r\n    setLocalPrefs({\r\n      ...localPrefs,\r\n      priority_filters: {\r\n        ...priorityFilters,\r\n        [priority]: enabled\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleQuietHoursToggle = (enabled: boolean) => {\r\n    if (!localPrefs) return;\r\n\r\n    const quietHours = localPrefs.quiet_hours as any;\r\n    setLocalPrefs({\r\n      ...localPrefs,\r\n      quiet_hours: {\r\n        ...quietHours,\r\n        enabled\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleQuietHoursChange = (field: 'start' | 'end', value: string) => {\r\n    if (!localPrefs) return;\r\n\r\n    const quietHours = localPrefs.quiet_hours as any;\r\n    setLocalPrefs({\r\n      ...localPrefs,\r\n      quiet_hours: {\r\n        ...quietHours,\r\n        [field]: value\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleEntitySubscriptionToggle = (entityType: string, enabled: boolean) => {\r\n    if (!localPrefs) return;\r\n\r\n    const entitySubs = localPrefs.entity_subscriptions as any;\r\n    setLocalPrefs({\r\n      ...localPrefs,\r\n      entity_subscriptions: {\r\n        ...entitySubs,\r\n        [entityType]: {\r\n          ...entitySubs[entityType],\r\n          enabled\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const requestPushPermission = async () => {\r\n    try {\r\n      const permission = await pushNotificationService.requestPermission();\r\n      setPushPermission(permission);\r\n      \r\n      if (permission === 'granted') {\r\n        await pushNotificationService.initialize();\r\n        toast({\r\n          title: t('notifications.pushEnabled'),\r\n          description: t('notifications.pushEnabledMessage')\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Push permission error:', error);\r\n      toast({\r\n        title: t('notifications.error'),\r\n        description: t('notifications.pushPermissionError'),\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  };\r\n\r\n  const testNotification = async () => {\r\n    const success = await pushNotificationService.sendTestNotification();\r\n    if (success) {\r\n      toast({\r\n        title: t('notifications.testSent'),\r\n        description: t('notifications.testSentMessage')\r\n      });\r\n    } else {\r\n      toast({\r\n        title: t('notifications.error'),\r\n        description: t('notifications.testFailedMessage'),\r\n        variant: 'destructive'\r\n      });\r\n    }\r\n  };\r\n\r\n  const savePreferences = async () => {\r\n    if (!localPrefs) return;\r\n\r\n    setSaving(true);\r\n    try {\r\n      const success = await updatePreferences(localPrefs);\r\n      if (success) {\r\n        toast({\r\n          title: t('notifications.saved'),\r\n          description: t('notifications.savedMessage')\r\n        });\r\n        onOpenChange(false);\r\n      }\r\n    } catch (error) {\r\n      toast({\r\n        title: t('notifications.error'),\r\n        description: t('notifications.saveError'),\r\n        variant: 'destructive'\r\n      });\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const channelIcons = {\r\n    sms: MessageSquare,\r\n    email: Mail,\r\n    push: Smartphone,\r\n    in_app: Bell\r\n  };\r\n\r\n  const priorityIcons = {\r\n    low: Info,\r\n    normal: CheckCircle,\r\n    high: AlertTriangle,\r\n    urgent: Zap,\r\n    critical: AlertTriangle\r\n  };\r\n\r\n  const priorityColors = {\r\n    low: 'bg-blue-100 text-blue-800',\r\n    normal: 'bg-green-100 text-green-800',\r\n    high: 'bg-yellow-100 text-yellow-800',\r\n    urgent: 'bg-orange-100 text-orange-800',\r\n    critical: 'bg-red-100 text-red-800'\r\n  };\r\n\r\n  if (!localPrefs) {\r\n    return null;\r\n  }\r\n\r\n  const channelPrefs = localPrefs.channel_preferences as any;\r\n  const priorityFilters = localPrefs.priority_filters as any;\r\n  const quietHours = localPrefs.quiet_hours as any;\r\n  const entitySubs = localPrefs.entity_subscriptions as any;\r\n  const notificationSound = localPrefs.notification_sound as any;\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <Bell className=\"h-5 w-5\" />\r\n            {t('notifications.preferences')}\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n\r\n        <Tabs defaultValue=\"channels\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-4\">\r\n            <TabsTrigger value=\"channels\">{t('notifications.channels')}</TabsTrigger>\r\n            <TabsTrigger value=\"priorities\">{t('notifications.priorities')}</TabsTrigger>\r\n            <TabsTrigger value=\"schedule\">{t('notifications.schedule')}</TabsTrigger>\r\n            <TabsTrigger value=\"entities\">{t('notifications.entities')}</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"channels\" className=\"space-y-6\">\r\n            <div className=\"grid gap-6\">\r\n              {Object.entries(channelPrefs).map(([channel, config]: [string, any]) => {\r\n                const Icon = channelIcons[channel as keyof typeof channelIcons];\r\n                const isPushChannel = channel === 'push';\r\n                const needsPermission = isPushChannel && pushPermission !== 'granted';\r\n                \r\n                return (\r\n                  <Card key={channel}>\r\n                    <CardHeader className=\"pb-3\">\r\n                      <CardTitle className=\"flex items-center justify-between\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Icon className=\"h-5 w-5\" />\r\n                          {t(`notifications.channels.${channel}`)}\r\n                          {isPushChannel && !pushSupported && (\r\n                            <Badge variant=\"secondary\">\r\n                              {t('notifications.notSupported')}\r\n                            </Badge>\r\n                          )}\r\n                          {needsPermission && (\r\n                            <Badge variant=\"destructive\">\r\n                              {t('notifications.permissionRequired')}\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                        <Switch\r\n                          checked={config.enabled && (!needsPermission || pushSupported)}\r\n                          onCheckedChange={(checked) => handleChannelToggle(channel, checked)}\r\n                          disabled={needsPermission || (isPushChannel && !pushSupported)}\r\n                        />\r\n                      </CardTitle>\r\n                      <CardDescription>\r\n                        {t(`notifications.channels.${channel}Description`)}\r\n                      </CardDescription>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      {config.enabled && (!needsPermission || pushSupported) && (\r\n                        <div className=\"space-y-4\">\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Label>{t('notifications.frequency')}:</Label>\r\n                            <Select\r\n                              value={config.frequency}\r\n                              onValueChange={(value) => handleFrequencyChange(channel, value)}\r\n                            >\r\n                              <SelectTrigger className=\"w-40\">\r\n                                <SelectValue />\r\n                              </SelectTrigger>\r\n                              <SelectContent>\r\n                                <SelectItem value=\"all\">{t('notifications.frequency.all')}</SelectItem>\r\n                                <SelectItem value=\"mentions\">{t('notifications.frequency.mentions')}</SelectItem>\r\n                                <SelectItem value=\"important\">{t('notifications.frequency.important')}</SelectItem>\r\n                                <SelectItem value=\"none\">{t('notifications.frequency.none')}</SelectItem>\r\n                              </SelectContent>\r\n                            </Select>\r\n                          </div>\r\n\r\n                          {isPushChannel && pushSupported && (\r\n                            <div className=\"flex gap-2\">\r\n                              {pushPermission !== 'granted' ? (\r\n                                <Button onClick={requestPushPermission} size=\"sm\">\r\n                                  {t('notifications.enablePush')}\r\n                                </Button>\r\n                              ) : (\r\n                                <Button onClick={testNotification} variant=\"outline\" size=\"sm\">\r\n                                  {t('notifications.testNotification')}\r\n                                </Button>\r\n                              )}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                );\r\n              })}\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"priorities\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>{t('notifications.priorityFilters')}</CardTitle>\r\n                <CardDescription>\r\n                  {t('notifications.priorityFiltersDescription')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {Object.entries(priorityFilters).map(([priority, enabled]: [string, any]) => {\r\n                    const Icon = priorityIcons[priority as keyof typeof priorityIcons];\r\n                    \r\n                    return (\r\n                      <div key={priority} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <Icon className=\"h-4 w-4\" />\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Label>{t(`notifications.priorities.${priority}`)}</Label>\r\n                            <Badge className={priorityColors[priority as keyof typeof priorityColors]}>\r\n                              {priority.toUpperCase()}\r\n                            </Badge>\r\n                          </div>\r\n                        </div>\r\n                        <Switch\r\n                          checked={enabled}\r\n                          onCheckedChange={(checked) => handlePriorityToggle(priority, checked)}\r\n                        />\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"schedule\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Clock className=\"h-5 w-5\" />\r\n                  {t('notifications.quietHours')}\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  {t('notifications.quietHoursDescription')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <Label>{t('notifications.enableQuietHours')}</Label>\r\n                    <Switch\r\n                      checked={quietHours.enabled}\r\n                      onCheckedChange={handleQuietHoursToggle}\r\n                    />\r\n                  </div>\r\n                  \r\n                  {quietHours.enabled && (\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div>\r\n                        <Label>{t('notifications.quietStart')}</Label>\r\n                        <Select\r\n                          value={quietHours.start}\r\n                          onValueChange={(value) => handleQuietHoursChange('start', value)}\r\n                        >\r\n                          <SelectTrigger>\r\n                            <SelectValue />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {Array.from({ length: 24 }, (_, i) => {\r\n                              const hour = i.toString().padStart(2, '0');\r\n                              return (\r\n                                <SelectItem key={i} value={`${hour}:00`}>\r\n                                  {`${hour}:00`}\r\n                                </SelectItem>\r\n                              );\r\n                            })}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                      <div>\r\n                        <Label>{t('notifications.quietEnd')}</Label>\r\n                        <Select\r\n                          value={quietHours.end}\r\n                          onValueChange={(value) => handleQuietHoursChange('end', value)}\r\n                        >\r\n                          <SelectTrigger>\r\n                            <SelectValue />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            {Array.from({ length: 24 }, (_, i) => {\r\n                              const hour = i.toString().padStart(2, '0');\r\n                              return (\r\n                                <SelectItem key={i} value={`${hour}:00`}>\r\n                                  {`${hour}:00`}\r\n                                </SelectItem>\r\n                              );\r\n                            })}\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  {notificationSound.enabled ? <Volume2 className=\"h-5 w-5\" /> : <VolumeX className=\"h-5 w-5\" />}\r\n                  {t('notifications.sounds')}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <Label>{t('notifications.enableSounds')}</Label>\r\n                  <Switch\r\n                    checked={notificationSound.enabled}\r\n                    onCheckedChange={(enabled) => \r\n                      setLocalPrefs({\r\n                        ...localPrefs,\r\n                        notification_sound: {\r\n                          ...notificationSound,\r\n                          enabled\r\n                        }\r\n                      })\r\n                    }\r\n                  />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"entities\" className=\"space-y-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>{t('notifications.entitySubscriptions')}</CardTitle>\r\n                <CardDescription>\r\n                  {t('notifications.entitySubscriptionsDescription')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {Object.entries(entitySubs).map(([entityType, config]: [string, any]) => (\r\n                    <div key={entityType} className=\"flex items-center justify-between p-3 border rounded-lg\">\r\n                      <div>\r\n                        <Label className=\"text-base\">{t(`notifications.entities.${entityType}`)}</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          {t(`notifications.entities.${entityType}Description`)}\r\n                        </p>\r\n                      </div>\r\n                      <Switch\r\n                        checked={config.enabled}\r\n                        onCheckedChange={(checked) => handleEntitySubscriptionToggle(entityType, checked)}\r\n                      />\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n\r\n        <Separator />\r\n\r\n        <div className=\"flex justify-end gap-2\">\r\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\r\n            {t('common.cancel')}\r\n          </Button>\r\n          <Button onClick={savePreferences} disabled={saving || loading}>\r\n            {saving ? t('common.saving') : t('common.save')}\r\n          </Button>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\notifications\\SmartNotificationCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2928,2931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2928,2931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu';\r\nimport {\r\n  Bell,\r\n  Check,\r\n  CheckCheck,\r\n  Filter,\r\n  MoreVertical,\r\n  X,\r\n  Package,\r\n  MessageSquare,\r\n  Phone,\r\n  AlertCircle,\r\n  Clock,\r\n  Archive,\r\n  Star\r\n} from 'lucide-react';\r\nimport { useSmartNotifications } from '@/hooks/useSmartNotifications';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface SmartNotificationCenterProps {\r\n  dealerId?: number;\r\n  className?: string;\r\n}\r\n\r\nexport function SmartNotificationCenter({ dealerId, className }: SmartNotificationCenterProps) {\r\n  const {\r\n    notifications,\r\n    groupedNotifications,\r\n    unreadCount,\r\n    loading,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    markEntityAsRead,\r\n    deleteNotification\r\n  } = useSmartNotifications(dealerId);\r\n\r\n  const [selectedFilter, setSelectedFilter] = useState<'all' | 'unread' | 'important'>('all');\r\n  const [selectedTab, setSelectedTab] = useState('grouped');\r\n\r\n  // Filter notifications based on selected filter\r\n  const filteredNotifications = useMemo(() => {\r\n    let filtered = notifications;\r\n\r\n    switch (selectedFilter) {\r\n      case 'unread':\r\n        filtered = notifications.filter(n => n.status !== 'read');\r\n        break;\r\n      case 'important':\r\n        filtered = notifications.filter(n => n.priority === 'high' || n.priority === 'urgent');\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return filtered;\r\n  }, [notifications, selectedFilter]);\r\n\r\n  const getNotificationIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'sms':\r\n        return <Phone className=\"h-4 w-4\" />;\r\n      case 'in_app':\r\n        return <MessageSquare className=\"h-4 w-4\" />;\r\n      case 'order':\r\n        return <Package className=\"h-4 w-4\" />;\r\n      case 'urgent':\r\n        return <AlertCircle className=\"h-4 w-4\" />;\r\n      default:\r\n        return <Bell className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'urgent':\r\n        return 'text-red-500 border-red-200';\r\n      case 'high':\r\n        return 'text-orange-500 border-orange-200';\r\n      case 'normal':\r\n        return 'text-blue-500 border-blue-200';\r\n      case 'low':\r\n        return 'text-gray-500 border-gray-200';\r\n      default:\r\n        return 'text-gray-500 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const NotificationItem = ({ notification, showEntity = false }: { \r\n    notification: any; \r\n    showEntity?: boolean;\r\n  }) => (\r\n    <div\r\n      className={cn(\r\n        'flex items-start gap-3 p-4 border-l-4 transition-all hover:bg-muted/50',\r\n        notification.status === 'read' ? 'opacity-60' : '',\r\n        getPriorityColor(notification.priority)\r\n      )}\r\n    >\r\n      <div className={cn(\r\n        'flex-shrink-0 p-2 rounded-full',\r\n        notification.status === 'read' ? 'bg-muted' : 'bg-primary/10'\r\n      )}>\r\n        {getNotificationIcon(notification.notification_type)}\r\n      </div>\r\n\r\n      <div className=\"flex-1 min-w-0\">\r\n        <div className=\"flex items-start justify-between gap-2\">\r\n          <div>\r\n            <h4 className=\"font-medium text-sm leading-tight\">\r\n              {notification.title}\r\n            </h4>\r\n            <p className=\"text-sm text-muted-foreground mt-1\">\r\n              {notification.message}\r\n            </p>\r\n            {showEntity && notification.entity_type && (\r\n              <Badge variant=\"outline\" className=\"mt-2 text-xs\">\r\n                {notification.entity_type}: {notification.entity_id?.slice(0, 8)}\r\n              </Badge>\r\n            )}\r\n          </div>\r\n\r\n          <DropdownMenu>\r\n            <DropdownMenuTrigger asChild>\r\n              <Button variant=\"ghost\" size=\"sm\">\r\n                <MoreVertical className=\"h-3 w-3\" />\r\n              </Button>\r\n            </DropdownMenuTrigger>\r\n            <DropdownMenuContent align=\"end\">\r\n              {notification.status !== 'read' && (\r\n                <DropdownMenuItem onClick={() => markAsRead(notification.id)}>\r\n                  <Check className=\"h-4 w-4 mr-2\" />\r\n                  Mark as read\r\n                </DropdownMenuItem>\r\n              )}\r\n              <DropdownMenuItem onClick={() => deleteNotification(notification.id)}>\r\n                <X className=\"h-4 w-4 mr-2\" />\r\n                Delete\r\n              </DropdownMenuItem>\r\n              <DropdownMenuSeparator />\r\n              <DropdownMenuItem>\r\n                <Star className=\"h-4 w-4 mr-2\" />\r\n                Save for later\r\n              </DropdownMenuItem>\r\n              <DropdownMenuItem>\r\n                <Archive className=\"h-4 w-4 mr-2\" />\r\n                Archive\r\n              </DropdownMenuItem>\r\n            </DropdownMenuContent>\r\n          </DropdownMenu>\r\n        </div>\r\n\r\n        <div className=\"flex items-center justify-between mt-3\">\r\n          <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\r\n            <Clock className=\"h-3 w-3\" />\r\n            {formatDistanceToNow(new Date(notification.created_at), { addSuffix: true })}\r\n          </div>\r\n          <Badge variant={notification.priority === 'urgent' ? 'destructive' : 'secondary'} className=\"text-xs\">\r\n            {notification.priority}\r\n          </Badge>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"flex items-center justify-center text-muted-foreground\">\r\n            <Bell className=\"h-6 w-6 animate-pulse mr-2\" />\r\n            Loading notifications...\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Bell className=\"h-5 w-5\" />\r\n            Notifications\r\n            {unreadCount > 0 && (\r\n              <Badge variant=\"secondary\">{unreadCount}</Badge>\r\n            )}\r\n          </CardTitle>\r\n          \r\n          <div className=\"flex items-center gap-2\">\r\n            <DropdownMenu>\r\n              <DropdownMenuTrigger asChild>\r\n                <Button variant=\"outline\" size=\"sm\">\r\n                  <Filter className=\"h-4 w-4 mr-2\" />\r\n                  {selectedFilter === 'all' ? 'All' : selectedFilter === 'unread' ? 'Unread' : 'Important'}\r\n                </Button>\r\n              </DropdownMenuTrigger>\r\n              <DropdownMenuContent align=\"end\">\r\n                <DropdownMenuItem onClick={() => setSelectedFilter('all')}>\r\n                  All notifications\r\n                </DropdownMenuItem>\r\n                <DropdownMenuItem onClick={() => setSelectedFilter('unread')}>\r\n                  Unread only\r\n                </DropdownMenuItem>\r\n                <DropdownMenuItem onClick={() => setSelectedFilter('important')}>\r\n                  Important only\r\n                </DropdownMenuItem>\r\n              </DropdownMenuContent>\r\n            </DropdownMenu>\r\n\r\n            {unreadCount > 0 && (\r\n              <Button variant=\"outline\" size=\"sm\" onClick={markAllAsRead}>\r\n                <CheckCheck className=\"h-4 w-4 mr-2\" />\r\n                Mark all read\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"p-0\">\r\n        <Tabs value={selectedTab} onValueChange={setSelectedTab}>\r\n          <TabsList className=\"grid w-full grid-cols-2\">\r\n            <TabsTrigger value=\"grouped\">By Context</TabsTrigger>\r\n            <TabsTrigger value=\"chronological\">Recent</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"grouped\" className=\"mt-0\">\r\n            <ScrollArea className=\"h-[400px]\">\r\n              {groupedNotifications.length === 0 ? (\r\n                <div className=\"p-8 text-center text-muted-foreground\">\r\n                  <Bell className=\"h-8 w-8 mx-auto mb-4 opacity-50\" />\r\n                  <p>No notifications to display</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-4\">\r\n                  {groupedNotifications.map((group) => (\r\n                    <div key={`${group.entity_type}_${group.entity_id}`} className=\"border-b last:border-b-0\">\r\n                      <div className=\"flex items-center justify-between p-4 bg-muted/30\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Badge variant=\"outline\">\r\n                            {group.entity_type}\r\n                          </Badge>\r\n                          <span className=\"text-sm font-medium\">\r\n                            {group.notifications.length} notification{group.notifications.length === 1 ? '' : 's'}\r\n                          </span>\r\n                          {group.unreadCount > 0 && (\r\n                            <Badge variant=\"secondary\" className=\"text-xs\">\r\n                              {group.unreadCount} unread\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                        {group.unreadCount > 0 && (\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => markEntityAsRead(group.entity_type, group.entity_id)}\r\n                          >\r\n                            <Check className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        )}\r\n                      </div>\r\n                      \r\n                      <div className=\"space-y-0\">\r\n                        {group.notifications.slice(0, 3).map((notification) => (\r\n                          <NotificationItem\r\n                            key={notification.id}\r\n                            notification={notification}\r\n                          />\r\n                        ))}\r\n                        {group.notifications.length > 3 && (\r\n                          <div className=\"p-4 text-center\">\r\n                            <Button variant=\"ghost\" size=\"sm\">\r\n                              Show {group.notifications.length - 3} more\r\n                            </Button>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </ScrollArea>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"chronological\" className=\"mt-0\">\r\n            <ScrollArea className=\"h-[400px]\">\r\n              {filteredNotifications.length === 0 ? (\r\n                <div className=\"p-8 text-center text-muted-foreground\">\r\n                  <Bell className=\"h-8 w-8 mx-auto mb-4 opacity-50\" />\r\n                  <p>No notifications match your filter</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-0\">\r\n                  {filteredNotifications.map((notification) => (\r\n                    <NotificationItem\r\n                      key={notification.id}\r\n                      notification={notification}\r\n                      showEntity={true}\r\n                    />\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </ScrollArea>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\AttachmentUploader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\CarWashOrderModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1953,1956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1953,1956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2023,2026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2023,2026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7793,7796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7793,7796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8896,8899],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8896,8899],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":309,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":309,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10931,10934],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10931,10934],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":348,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12998,13001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12998,13001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":473,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18732,18735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18732,18735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { safeParseDate } from '@/utils/dateUtils';\r\nimport { formatVehicleDisplay } from '@/utils/vehicleUtils';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Loader2, AlertCircle, Zap, Clock } from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useVinDecoding } from '@/hooks/useVinDecoding';\r\nimport { VinInputWithScanner } from '@/components/ui/vin-input-with-scanner';\r\n\r\ninterface OrderFormData {\r\n  // Order identification\r\n  orderNumber: string;\r\n  orderType: string;\r\n  status: string;\r\n  \r\n  // Customer information (vehicle owner)\r\n  customerName: string;\r\n  customerEmail?: string;\r\n  customerPhone?: string;\r\n  \r\n  // Vehicle information\r\n  vehicleVin: string;\r\n  vehicleYear: string;\r\n  vehicleMake: string;\r\n  vehicleModel: string;\r\n  vehicleInfo: string;\r\n  stockNumber: string;\r\n  tag: string;\r\n  \r\n  // Car wash specific\r\n  service: string;\r\n  isWaiter: boolean;\r\n  \r\n  // Assignment information (employee responsible)\r\n  assignedGroupId?: string;\r\n  assignedContactId?: string;\r\n  salesperson?: string;\r\n  \r\n  // Order details\r\n  notes: string;\r\n  internalNotes?: string;\r\n  priority?: string;\r\n  dueDate?: Date;\r\n  slaDeadline?: Date;\r\n  scheduledDate?: Date;\r\n  scheduledTime?: string;\r\n}\r\n\r\ninterface CarWashOrderModalProps {\r\n  order?: any;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onSave: (orderData: any) => void;\r\n}\r\n\r\nconst CarWashOrderModal: React.FC<CarWashOrderModalProps> = ({ order, open, onClose, onSave }) => {\r\n  const { t } = useTranslation();\r\n  const { decodeVin, loading: vinLoading, error: vinError } = useVinDecoding();\r\n\r\n  // Form state\r\n  const [formData, setFormData] = useState<OrderFormData>({\r\n    orderNumber: '',\r\n    orderType: 'car_wash',\r\n    status: 'pending',\r\n    customerName: '',\r\n    customerEmail: '',\r\n    customerPhone: '',\r\n    vehicleVin: '',\r\n    vehicleYear: '',\r\n    vehicleMake: '',\r\n    vehicleModel: '',\r\n    vehicleInfo: '',\r\n    stockNumber: '',\r\n    tag: '',\r\n    service: '',\r\n    isWaiter: false,\r\n    assignedGroupId: '',\r\n    assignedContactId: '',\r\n    salesperson: '',\r\n    notes: '',\r\n    internalNotes: '',\r\n    priority: 'normal',\r\n    dueDate: undefined,\r\n    slaDeadline: undefined,\r\n    scheduledDate: undefined,\r\n    scheduledTime: ''\r\n  });\r\n\r\n  const [selectedDealership, setSelectedDealership] = useState('');\r\n  const [dealerships, setDealerships] = useState([]);\r\n  const [services, setServices] = useState([]);\r\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [vinDecoded, setVinDecoded] = useState(false);\r\n\r\n  // Auto-generate vehicle display when VIN is decoded or fields change\r\n  useEffect(() => {\r\n    const vehicleDisplay = formatVehicleDisplay(\r\n      formData.vehicleYear,\r\n      formData.vehicleMake,\r\n      formData.vehicleModel\r\n    );\r\n    if (vehicleDisplay !== formData.vehicleInfo) {\r\n      setFormData(prev => ({ ...prev, vehicleInfo: vehicleDisplay }));\r\n    }\r\n  }, [formData.vehicleYear, formData.vehicleMake, formData.vehicleModel, formData.vehicleInfo]);\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      fetchDealerships();\r\n      \r\n      if (order) {\r\n        setFormData({\r\n          orderNumber: order.orderNumber || order.order_number || '',\r\n          orderType: order.orderType || order.order_type || 'car_wash',\r\n          status: order.status || 'pending',\r\n          customerName: order.customerName || order.customer_name || '',\r\n          customerEmail: order.customerEmail || order.customer_email || '',\r\n          customerPhone: order.customerPhone || order.customer_phone || '',\r\n          vehicleVin: order.vehicleVin || order.vehicle_vin || '',\r\n          vehicleYear: order.vehicleYear?.toString() || order.vehicle_year?.toString() || '',\r\n          vehicleMake: order.vehicleMake || order.vehicle_make || '',\r\n          vehicleModel: order.vehicleModel || order.vehicle_model || '',\r\n          vehicleInfo: order.vehicleInfo || order.vehicle_info || '',\r\n          stockNumber: order.stockNumber || order.stock_number || '',\r\n          tag: order.tag || '',\r\n          service: order.service || '',\r\n          isWaiter: order.isWaiter || false,\r\n          assignedGroupId: order.assignedGroupId || order.assigned_group_id || '',\r\n          assignedContactId: order.assignedContactId || order.assigned_contact_id || '',\r\n          salesperson: order.salesperson || '',\r\n          notes: order.notes || '',\r\n          internalNotes: order.internalNotes || order.internal_notes || '',\r\n          priority: order.priority || 'normal',\r\n          dueDate: order.dueDate ? safeParseDate(order.dueDate) || undefined : undefined,\r\n          slaDeadline: order.slaDeadline ? safeParseDate(order.slaDeadline) || undefined : undefined,\r\n          scheduledDate: order.scheduledDate ? safeParseDate(order.scheduledDate) || undefined : undefined,\r\n          scheduledTime: order.scheduledTime || ''\r\n        });\r\n        setSelectedServices(order.services || []);\r\n        setSelectedDealership(order.dealerId?.toString() || '');\r\n      } else {\r\n        // Reset form for new order\r\n        setFormData({\r\n          orderNumber: '',\r\n          orderType: 'car_wash',\r\n          status: 'pending',\r\n          customerName: '',\r\n          customerEmail: '',\r\n          customerPhone: '',\r\n          vehicleVin: '',\r\n          vehicleYear: '',\r\n          vehicleMake: '',\r\n          vehicleModel: '',\r\n          vehicleInfo: '',\r\n          stockNumber: '',\r\n          tag: '',\r\n          service: '',\r\n          isWaiter: false,\r\n          assignedGroupId: '',\r\n          assignedContactId: '',\r\n          salesperson: '',\r\n          notes: '',\r\n          internalNotes: '',\r\n          priority: 'normal',\r\n          dueDate: undefined,\r\n          slaDeadline: undefined,\r\n          scheduledDate: undefined,\r\n          scheduledTime: ''\r\n        });\r\n        setSelectedServices([]);\r\n        setSelectedDealership('');\r\n      }\r\n    }\r\n  }, [order, open, fetchDealerships]);\r\n\r\n  const fetchDealerships = useCallback(async () => {\r\n    try {\r\n      const { data: user } = await supabase.auth.getUser();\r\n      if (!user.user) return;\r\n\r\n      const { data, error } = await supabase.rpc('get_user_accessible_dealers', {\r\n        user_uuid: user.user.id\r\n      });\r\n\r\n      if (error) throw error;\r\n      setDealerships(data || []);\r\n      \r\n      // Auto-select if only one dealership\r\n      if (data && data.length === 1) {\r\n        setSelectedDealership(data[0].id.toString());\r\n        fetchDealerServices(data[0].id.toString());\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching dealerships:', error);\r\n    }\r\n  }, []);\r\n\r\n  const fetchDealerServices = async (dealershipId: string) => {\r\n    if (!dealershipId) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase\r\n        .rpc('get_dealer_services_for_user', { p_dealer_id: parseInt(dealershipId) });\r\n\r\n      if (error) throw error;\r\n      \r\n      // Filter services for car wash module (wash and general categories)\r\n      const carWashServices = (data || []).filter((service: any) => \r\n        service.category === 'wash' || service.category === 'general'\r\n      );\r\n      setServices(carWashServices);\r\n    } catch (error) {\r\n      console.error('Error fetching dealer services:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDealershipChange = (dealershipId: string) => {\r\n    setSelectedDealership(dealershipId);\r\n    setServices([]);\r\n    setSelectedServices([]);\r\n    \r\n    if (dealershipId) {\r\n      fetchDealerServices(dealershipId);\r\n    }\r\n  };\r\n\r\n  const handleVinChange = async (vin: string) => {\r\n    handleInputChange('vehicleVin', vin);\r\n    \r\n    if (vin.length === 17 && !vinDecoded) {\r\n      const vehicleData = await decodeVin(vin);\r\n      if (vehicleData) {\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          vehicleYear: vehicleData.year,\r\n          vehicleMake: vehicleData.make,\r\n          vehicleModel: vehicleData.model,\r\n        }));\r\n        setVinDecoded(true);\r\n      }\r\n    } else if (vin.length !== 17) {\r\n      setVinDecoded(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: any) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const handleServiceToggle = (serviceId: string, checked: boolean) => {\r\n    if (checked) {\r\n      setSelectedServices(prev => [...prev, serviceId]);\r\n    } else {\r\n      setSelectedServices(prev => prev.filter(id => id !== serviceId));\r\n    }\r\n  };\r\n\r\n  const transformToDbFormat = (formData: OrderFormData) => ({\r\n    // Map frontend camelCase to backend snake_case\r\n    order_number: formData.orderNumber,\r\n    customer_name: formData.customerName || 'Walk-in Customer',\r\n    customer_email: formData.customerEmail || null,\r\n    customer_phone: formData.customerPhone || null,\r\n    vehicle_vin: formData.vehicleVin || null,\r\n    vehicle_year: formData.vehicleYear ? parseInt(formData.vehicleYear) : null,\r\n    vehicle_make: formData.vehicleMake || null,\r\n    vehicle_model: formData.vehicleModel || null,\r\n    vehicle_info: formData.vehicleInfo || null,\r\n    stock_number: formData.stockNumber || null,\r\n    tag: formData.tag || null,\r\n    service: formData.service || null,\r\n    is_waiter: formData.isWaiter,\r\n    order_type: formData.orderType,\r\n    status: formData.status,\r\n    assigned_group_id: formData.assignedGroupId || null,\r\n    assigned_contact_id: formData.assignedContactId || null,\r\n    salesperson: formData.salesperson || null,\r\n    notes: formData.notes || null,\r\n    internal_notes: formData.internalNotes || null,\r\n    priority: formData.priority || 'normal',\r\n    due_date: formData.dueDate || null,\r\n    sla_deadline: formData.slaDeadline || null,\r\n    scheduled_date: formData.scheduledDate || null,\r\n    scheduled_time: formData.scheduledTime || null,\r\n    dealer_id: selectedDealership ? parseInt(selectedDealership) : null,\r\n    services: selectedServices\r\n  });\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const dbData = transformToDbFormat(formData);\r\n    onSave(dbData);\r\n  };\r\n\r\n  const totalPrice = selectedServices.reduce((total, serviceId) => {\r\n    const service = services.find((s: any) => s.id === serviceId);\r\n    return total + (service?.price || 0);\r\n  }, 0);\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-4xl max-h-[95vh] w-[95vw] p-0\" aria-describedby=\"carwash-order-modal-description\">\r\n        <DialogHeader className=\"p-6 pb-0\">\r\n          <DialogTitle className=\"text-xl font-semibold flex items-center gap-2\">\r\n            {order ? t('car_wash_orders.edit_order') : t('car_wash_orders.quick_car_wash_order')}\r\n            {formData.isWaiter && (\r\n              <Badge variant=\"destructive\" className=\"bg-destructive text-destructive-foreground\">\r\n                <Clock className=\"w-3 h-3 mr-1\" />\r\n                {t('car_wash_orders.waiter_priority')}\r\n              </Badge>\r\n            )}\r\n          </DialogTitle>\r\n          <DialogDescription className=\"sr-only\" id=\"carwash-order-modal-description\">\r\n            {order ? t('car_wash_orders.edit_order') : t('car_wash_orders.quick_car_wash_order')}\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <ScrollArea className=\"max-h-[calc(95vh-120px)] px-6\">\r\n          <form onSubmit={handleSubmit} className=\"space-y-6 pb-6\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n              \r\n              {/* Left Column - Dealership & Vehicle Info */}\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"dealership\">{t('car_wash_orders.dealership')}</Label>\r\n                  <Select \r\n                    value={selectedDealership} \r\n                    onValueChange={handleDealershipChange}\r\n                    disabled={loading}\r\n                  >\r\n                    <SelectTrigger className=\"border-input bg-background\">\r\n                      <SelectValue placeholder={loading ? t('common.loading') : t('car_wash_orders.select_dealership')} />\r\n                    </SelectTrigger>\r\n                    <SelectContent className=\"bg-popover border border-border max-h-[200px]\">\r\n                      {dealerships.map((dealer: any) => (\r\n                        <SelectItem key={dealer.id} value={dealer.id.toString()}>\r\n                          {dealer.name} - {dealer.city}, {dealer.state}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"vehicleVin\" className=\"flex items-center gap-2\">\r\n                    {t('orders.vin')}\r\n                    {vinLoading && <Loader2 className=\"w-4 h-4 animate-spin\" />}\r\n                    {vinDecoded && (\r\n                      <Badge variant=\"secondary\" className=\"bg-success text-success-foreground\">\r\n                        <Zap className=\"w-3 h-3 mr-1\" />\r\n                        {t('car_wash_orders.decoded')}\r\n                      </Badge>\r\n                    )}\r\n                  </Label>\r\n                  <VinInputWithScanner\r\n                    id=\"vehicleVin\"\r\n                    name=\"vehicleVin\"\r\n                    value={formData.vehicleVin}\r\n                    onChange={(e) => handleVinChange(e.target.value)}\r\n                    onVinScanned={handleVinChange}\r\n                    className=\"border-input bg-background font-mono\"\r\n                  />\r\n                  {vinError && (\r\n                    <div className=\"flex items-center gap-1 text-sm text-destructive mt-1\">\r\n                      <AlertCircle className=\"w-3 h-3\" />\r\n                      {vinError}\r\n                    </div>\r\n                  )}\r\n                  {formData.vehicleVin.length > 0 && formData.vehicleVin.length < 17 && (\r\n                    <div className=\"text-sm text-muted-foreground mt-1\">\r\n                      {17 - formData.vehicleVin.length} characters remaining\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"vehicleInfo\">{t('car_wash_orders.vehicle_display')}</Label>\r\n                  <Input\r\n                    id=\"vehicleInfo\"\r\n                    value={formData.vehicleInfo}\r\n                    onChange={(e) => handleInputChange('vehicleInfo', e.target.value)}\r\n                    className=\"border-input bg-background font-medium\"\r\n                    placeholder=\"2025 BMW X6 (xDrive40i)\"\r\n                  />\r\n                  {!formData.vehicleInfo && (\r\n                    <div className=\"text-sm text-muted-foreground mt-1\">\r\n                      {t('car_wash_orders.auto_populated')}\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"stockNumber\">{t('car_wash_orders.stock_number')}</Label>\r\n                    <Input\r\n                      id=\"stockNumber\"\r\n                      value={formData.stockNumber}\r\n                      onChange={(e) => handleInputChange('stockNumber', e.target.value)}\r\n                      className=\"border-input bg-background\"\r\n                      placeholder=\"ST-2025-001\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"tag\">{t('car_wash_orders.tag')}</Label>\r\n                    <Input\r\n                      id=\"tag\"\r\n                      value={formData.tag}\r\n                      onChange={(e) => handleInputChange('tag', e.target.value)}\r\n                      className=\"border-input bg-background\"\r\n                      placeholder=\"LOT-A1\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Right Column - Service & Options */}\r\n              <div className=\"space-y-4\">\r\n\r\n                <div className=\"flex items-center space-x-2 p-4 border border-border rounded-lg bg-background\">\r\n                  <Checkbox\r\n                    id=\"waiter\"\r\n                    checked={formData.isWaiter}\r\n                    onCheckedChange={(checked) => handleInputChange('isWaiter', checked)}\r\n                  />\r\n                  <Label \r\n                    htmlFor=\"waiter\" \r\n                    className=\"flex items-center gap-2 cursor-pointer\"\r\n                  >\r\n                    <Clock className=\"w-4 h-4 text-destructive\" />\r\n                    <span className=\"font-medium\">{t('car_wash_orders.waiter_priority')}</span>\r\n                  </Label>\r\n                </div>\r\n                \r\n                {formData.isWaiter && (\r\n                  <div className=\"text-sm text-destructive bg-destructive/10 p-2 rounded border border-destructive/20\">\r\n                    {t('car_wash_orders.waiter_description')}\r\n                  </div>\r\n                )}\r\n\r\n                <div>\r\n                  <Label htmlFor=\"notes\">{t('orders.notes')}</Label>\r\n                  <Textarea\r\n                    id=\"notes\"\r\n                    value={formData.notes}\r\n                    onChange={(e) => handleInputChange('notes', e.target.value)}\r\n                    className=\"border-input bg-background\"\r\n                    placeholder={t('car_wash_orders.notes_placeholder')}\r\n                    rows={3}\r\n                  />\r\n                </div>\r\n\r\n                {/* Available Services */}\r\n                {selectedDealership && services.length > 0 && (\r\n                  <div className=\"space-y-3\">\r\n                    <Label className=\"text-sm font-medium\">\r\n                      {t('orders.services')} ({services.length} {t('orders.available')})\r\n                    </Label>\r\n                    <div className=\"max-h-32 overflow-y-auto space-y-2 p-3 border border-border rounded-md bg-background\">\r\n                      {services.map((service: any) => (\r\n                        <div key={service.id} className=\"flex items-center space-x-2\">\r\n                          <Checkbox\r\n                            id={service.id}\r\n                            checked={selectedServices.includes(service.id)}\r\n                            onCheckedChange={(checked) => handleServiceToggle(service.id, !!checked)}\r\n                          />\r\n                          <Label \r\n                            htmlFor={service.id}\r\n                            className=\"text-sm cursor-pointer flex-1\"\r\n                          >\r\n                            {service.name} - ${service.price || 0}\r\n                          </Label>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                    {totalPrice > 0 && (\r\n                      <div className=\"text-sm font-medium text-right\">\r\n                        {t('orders.total')}: ${totalPrice.toFixed(2)}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Hidden fields with default values for later editing in order details */}\r\n            <div className=\"hidden\">\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"customer_name\" \r\n                value={formData.customerName || ''} \r\n                onChange={(e) => handleInputChange('customerName', e.target.value)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"customer_email\" \r\n                value={formData.customerEmail || ''} \r\n                onChange={(e) => handleInputChange('customerEmail', e.target.value)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"customer_phone\" \r\n                value={formData.customerPhone || ''} \r\n                onChange={(e) => handleInputChange('customerPhone', e.target.value)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"salesperson\" \r\n                value={formData.salesperson || ''} \r\n                onChange={(e) => handleInputChange('salesperson', e.target.value)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"internal_notes\" \r\n                value={formData.internalNotes || ''} \r\n                onChange={(e) => handleInputChange('internalNotes', e.target.value)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"sla_deadline\" \r\n                value={formData.slaDeadline ? formData.slaDeadline.toISOString() : ''} \r\n                onChange={(e) => handleInputChange('slaDeadline', e.target.value ? new Date(e.target.value) : undefined)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"scheduled_date\" \r\n                value={formData.scheduledDate ? formData.scheduledDate.toISOString() : ''} \r\n                onChange={(e) => handleInputChange('scheduledDate', e.target.value ? new Date(e.target.value) : undefined)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"scheduled_time\" \r\n                value={formData.scheduledTime || ''} \r\n                onChange={(e) => handleInputChange('scheduledTime', e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            {/* Submit Buttons */}\r\n            <div className=\"flex justify-end gap-3 pt-4 border-t\">\r\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\r\n                {t('common.cancel')}\r\n              </Button>\r\n              <Button \r\n                type=\"submit\" \r\n                disabled={loading || !selectedDealership || !formData.vehicleVin}\r\n                className=\"min-w-[120px]\"\r\n              >\r\n                {loading && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\r\n                {order ? t('common.update') : t('common.create')}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </ScrollArea>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CarWashOrderModal;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\ChatAndSMSActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\CommunicationActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[594,597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[594,597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Phone, MessageSquare, Mail, AlertTriangle } from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useOrderActions } from '@/hooks/useOrderActions';\r\nimport { toast } from 'sonner';\r\n\r\ninterface CommunicationActionsProps {\r\n  order: any;\r\n}\r\n\r\nexport function CommunicationActions({ order }: CommunicationActionsProps) {\r\n  const { t } = useTranslation();\r\n  const { sendSMS, sendEmail, loading } = useOrderActions();\r\n  const [smsDialog, setSmsDialog] = useState(false);\r\n  const [emailDialog, setEmailDialog] = useState(false);\r\n  const [smsMessage, setSmsMessage] = useState('');\r\n  const [emailSubject, setEmailSubject] = useState('');\r\n  const [emailMessage, setEmailMessage] = useState('');\r\n\r\n  const handleCall = () => {\r\n    if (order.customer_phone) {\r\n      window.location.href = `tel:${order.customer_phone}`;\r\n    } else {\r\n      toast.error(t('orders.no_phone_number'));\r\n    }\r\n  };\r\n\r\n  const handleSendSMS = async () => {\r\n    if (!order.customer_phone || !smsMessage.trim()) {\r\n      toast.error(t('orders.missing_sms_data'));\r\n      return;\r\n    }\r\n\r\n    const success = await sendSMS(\r\n      order.customer_phone, \r\n      smsMessage.trim(), \r\n      order.custom_order_number || order.order_number\r\n    );\r\n\r\n    if (success) {\r\n      setSmsDialog(false);\r\n      setSmsMessage('');\r\n    }\r\n  };\r\n\r\n  const handleSendEmail = async () => {\r\n    if (!order.customer_email || !emailSubject.trim()) {\r\n      toast.error(t('orders.missing_email_data'));\r\n      return;\r\n    }\r\n\r\n    const success = await sendEmail(\r\n      order.customer_email,\r\n      emailSubject.trim(),\r\n      order.custom_order_number || order.order_number,\r\n      order.customer_name,\r\n      order\r\n    );\r\n\r\n    if (success) {\r\n      setEmailDialog(false);\r\n      setEmailSubject('');\r\n      setEmailMessage('');\r\n    }\r\n  };\r\n\r\n  const handleSendAlert = () => {\r\n    // Open SMS dialog with pre-filled urgent message\r\n    setSmsMessage(`URGENT: Your order ${order.custom_order_number || order.order_number} requires immediate attention. Please contact us.`);\r\n    setSmsDialog(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      <div className=\"grid grid-cols-2 gap-2\">\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={handleCall}\r\n          disabled={!order.customer_phone}\r\n          className=\"flex items-center gap-2\"\r\n        >\r\n          <Phone className=\"w-4 h-4\" />\r\n          {t('orders.call_contact')}\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => setSmsDialog(true)}\r\n          disabled={!order.customer_phone}\r\n          className=\"flex items-center gap-2\"\r\n        >\r\n          <MessageSquare className=\"w-4 h-4\" />\r\n          {t('orders.send_sms')}\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          onClick={() => {\r\n            setEmailSubject(`Order Update - ${order.custom_order_number || order.order_number}`);\r\n            setEmailDialog(true);\r\n          }}\r\n          disabled={!order.customer_email}\r\n          className=\"flex items-center gap-2\"\r\n        >\r\n          <Mail className=\"w-4 h-4\" />\r\n          {t('orders.send_email')}\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"destructive\"\r\n          size=\"sm\"\r\n          onClick={handleSendAlert}\r\n          disabled={!order.customer_phone}\r\n          className=\"flex items-center gap-2\"\r\n        >\r\n          <AlertTriangle className=\"w-4 h-4\" />\r\n          {t('orders.send_alert')}\r\n        </Button>\r\n      </div>\r\n\r\n      {/* SMS Dialog */}\r\n      <Dialog open={smsDialog} onOpenChange={setSmsDialog}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>{t('orders.send_sms')}</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label>{t('orders.phone_number')}</Label>\r\n              <Input value={order.customer_phone || ''} disabled />\r\n            </div>\r\n            <div>\r\n              <Label>{t('orders.message')}</Label>\r\n              <Textarea\r\n                value={smsMessage}\r\n                onChange={(e) => setSmsMessage(e.target.value)}\r\n                placeholder={t('orders.sms_placeholder')}\r\n                className=\"min-h-[100px]\"\r\n                maxLength={160}\r\n              />\r\n              <p className=\"text-sm text-muted-foreground mt-1\">\r\n                {smsMessage.length}/160 {t('orders.characters')}\r\n              </p>\r\n            </div>\r\n            <div className=\"flex gap-2 justify-end\">\r\n              <Button variant=\"outline\" onClick={() => setSmsDialog(false)}>\r\n                {t('common.cancel')}\r\n              </Button>\r\n              <Button \r\n                onClick={handleSendSMS}\r\n                disabled={loading || !smsMessage.trim()}\r\n              >\r\n                {loading ? t('common.sending') : t('common.send')}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Email Dialog */}\r\n      <Dialog open={emailDialog} onOpenChange={setEmailDialog}>\r\n        <DialogContent className=\"max-w-2xl\">\r\n          <DialogHeader>\r\n            <DialogTitle>{t('orders.send_email')}</DialogTitle>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label>{t('orders.email_address')}</Label>\r\n              <Input value={order.customer_email || ''} disabled />\r\n            </div>\r\n            <div>\r\n              <Label>{t('orders.subject')}</Label>\r\n              <Input\r\n                value={emailSubject}\r\n                onChange={(e) => setEmailSubject(e.target.value)}\r\n                placeholder={t('orders.email_subject_placeholder')}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label>{t('orders.message')} ({t('common.optional')})</Label>\r\n              <Textarea\r\n                value={emailMessage}\r\n                onChange={(e) => setEmailMessage(e.target.value)}\r\n                placeholder={t('orders.email_message_placeholder')}\r\n                className=\"min-h-[120px]\"\r\n              />\r\n            </div>\r\n            <div className=\"flex gap-2 justify-end\">\r\n              <Button variant=\"outline\" onClick={() => setEmailDialog(false)}>\r\n                {t('common.cancel')}\r\n              </Button>\r\n              <Button \r\n                onClick={handleSendEmail}\r\n                disabled={loading || !emailSubject.trim()}\r\n              >\r\n                {loading ? t('common.sending') : t('common.send')}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\EnhancedOrderDetailLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2252,2255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2252,2255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2274,2277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2274,2277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2294,2297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2294,2297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2315,2318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2315,2318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2336,2339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2336,2339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode, useEffect, useCallback, useMemo, memo, lazy, Suspense } from 'react';\r\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { \r\n  X, \r\n  Edit2, \r\n  Trash2, \r\n  Clock, \r\n  User, \r\n  Car,\r\n  Calendar,\r\n  DollarSign,\r\n  AlertCircle,\r\n  CheckCircle,\r\n  QrCode,\r\n  MessageSquare,\r\n  Link,\r\n  FileText,\r\n  Hash\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { StatusBadgeInteractive } from '@/components/StatusBadgeInteractive';\r\nimport { QRCodeDisplay } from './QRCodeDisplay';\r\nimport { CommunicationActions } from './CommunicationActions';\r\nimport { AttachmentUploader } from './AttachmentUploader';\r\nimport { RecentActivity } from './RecentActivity';\r\nimport { OrderStatusBadges } from './OrderStatusBadges';\r\nimport { TimeRemaining } from './TimeRemaining';\r\nimport { safeFormatDate } from '@/utils/dateUtils';\r\nimport { getStatusColor } from '@/utils/statusUtils';\r\nimport { SkeletonLoader } from './SkeletonLoader';\r\nimport { ChatAndSMSActions } from './ChatAndSMSActions';\r\nimport { usePerformanceMonitor } from '@/hooks/usePerformanceMonitor';\r\nimport { ErrorBoundaryModal } from './ErrorBoundaryModal';\r\n\r\n// Enhanced TypeScript interfaces for better type safety\r\ninterface OrderData {\r\n  id: string;\r\n  order_number?: string;\r\n  custom_order_number?: string;\r\n  customer_name?: string;\r\n  customer_phone?: string;\r\n  vehicle_year?: string | number;\r\n  vehicle_make?: string;\r\n  vehicle_model?: string;\r\n  vehicle_vin?: string;\r\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled' | 'on_hold';\r\n  dealer_id: string | number;\r\n  dealership_name?: string;\r\n  advisor?: string;\r\n  salesperson?: string;\r\n  notes?: string;\r\n  internal_notes?: string;\r\n  priority?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n  estimated_completion?: string;\r\n  qr_slug?: string;\r\n  short_url?: string;\r\n  qr_code_url?: string;\r\n  short_link?: string;\r\n}\r\n\r\ninterface ModalData {\r\n  attachments: any[];\r\n  activities: any[];\r\n  comments: any[];\r\n  followers: any[];\r\n  analytics: any;\r\n  userType: 'detail' | 'regular' | null;\r\n}\r\n\r\ninterface EnhancedOrderDetailLayoutProps {\r\n  order: OrderData;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onEdit?: (order: OrderData) => void;\r\n  onDelete?: (orderId: string) => void;\r\n  onStatusChange?: (orderId: string, newStatus: string) => void;\r\n  onNotesUpdate?: (orderId: string, notes: string, type: 'general' | 'internal') => void;\r\n  modalData?: ModalData;\r\n  isLoadingData?: boolean;\r\n  dataError?: string | null;\r\n}\r\n\r\n// Lazily loaded components for better performance\r\nconst VehicleInfoBlockMemo = lazy(() => \r\n  import('./VehicleInfoBlock').then(module => ({ default: memo(module.VehicleInfoBlock) }))\r\n);\r\nconst ScheduleViewBlockMemo = lazy(() => \r\n  import('./ScheduleViewBlock').then(module => ({ default: memo(module.ScheduleViewBlock) }))\r\n);\r\nconst SimpleNotesDisplayMemo = lazy(() => \r\n  import('./SimpleNotesDisplay').then(module => ({ default: memo(module.SimpleNotesDisplay) }))\r\n);\r\nconst PublicCommentsBlockMemo = lazy(() => \r\n  import('./PublicCommentsBlock').then(module => ({ default: memo(module.PublicCommentsBlock) }))\r\n);\r\nconst InternalNotesBlockMemo = lazy(() => \r\n  import('./InternalNotesBlock').then(module => ({ default: memo(module.InternalNotesBlock) }))\r\n);\r\nconst EnhancedQRCodeBlockMemo = lazy(() => \r\n  import('./EnhancedQRCodeBlock').then(module => ({ default: memo(module.EnhancedQRCodeBlock) }))\r\n);\r\nconst FollowersBlockMemo = lazy(() => \r\n  import('./FollowersBlock').then(module => ({ default: memo(module.FollowersBlock) }))\r\n);\r\nconst RecentActivityBlockMemo = lazy(() => \r\n  import('./RecentActivityBlock').then(module => ({ default: memo(module.RecentActivityBlock) }))\r\n);\r\n\r\n// Memoized main component with performance monitoring\r\nexport const EnhancedOrderDetailLayout = memo(function EnhancedOrderDetailLayout({\r\n  order,\r\n  open,\r\n  onClose,\r\n  onEdit,\r\n  onDelete,\r\n  onStatusChange,\r\n  onNotesUpdate,\r\n  modalData,\r\n  isLoadingData = false,\r\n  dataError\r\n}: EnhancedOrderDetailLayoutProps) {\r\n  const { t } = useTranslation();\r\n  const { startMeasure, endMeasure, recordMetric } = usePerformanceMonitor();\r\n\r\n  // Track modal rendering performance\r\n  useEffect(() => {\r\n    if (open) {\r\n      startMeasure('modal-render');\r\n      recordMetric('modal-open', Date.now());\r\n      return () => {\r\n        endMeasure('modal-render');\r\n        recordMetric('modal-close', Date.now());\r\n      };\r\n    }\r\n  }, [open, startMeasure, endMeasure, recordMetric]);\r\n\r\n  // Reset scroll position when modal opens\r\n  useEffect(() => {\r\n    if (open) {\r\n      // Small delay to ensure modal is fully rendered\r\n      const timer = setTimeout(() => {\r\n        const modalTop = document.getElementById('modal-top');\r\n        if (modalTop) {\r\n          modalTop.scrollIntoView({ behavior: 'instant', block: 'start' });\r\n        }\r\n      }, 50);\r\n      \r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [open]);\r\n\r\n  // Memoize utility functions\r\n  const formatCurrency = useMemo(() => (amount: number | null | undefined) => {\r\n    if (!amount) return 'N/A';\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n    }).format(amount);\r\n  }, []);\r\n\r\n  const getPriorityColor = useMemo(() => (priority: string) => {\r\n    switch (priority?.toLowerCase()) {\r\n      case 'high': return 'destructive';\r\n      case 'medium': return 'secondary';\r\n      case 'low': return 'outline';\r\n      default: return 'outline';\r\n    }\r\n  }, []);\r\n\r\n  // Memoize status change handler\r\n  const handleStatusChange = useCallback(async (newStatus: string) => {\r\n    if (onStatusChange) {\r\n      await onStatusChange(order.id, newStatus);\r\n    }\r\n  }, [onStatusChange, order.id]);\r\n\r\n  // Memoize vehicle display name\r\n  const vehicleDisplayName = useMemo(() => {\r\n    return `${order.vehicle_year || ''} ${order.vehicle_make || ''} ${order.vehicle_model || ''}`.trim() || 'Unknown Vehicle';\r\n  }, [order.vehicle_year, order.vehicle_make, order.vehicle_model]);\r\n\r\n  if (!order) return null;\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent \r\n        className=\"max-w-none max-h-none w-screen h-screen p-0 gap-0 m-0 rounded-none border-0\"\r\n        data-testid=\"order-detail-modal\"\r\n      >\r\n        <div className=\"h-screen flex flex-col\">\r\n          <DialogTitle className=\"sr-only\">\r\n            {t('orders.order_details')} - {order.custom_order_number || order.order_number}\r\n          </DialogTitle>\r\n          <DialogDescription className=\"sr-only\">\r\n            {t('orders.order_details_description', { \r\n              customer: order.customer_name, \r\n              vehicle: `${order.vehicle_year} ${order.vehicle_make} ${order.vehicle_model}` \r\n            })}\r\n          </DialogDescription>\r\n\r\n          {/* Unified Content Container - Single Scroll */}\r\n          <div className=\"flex-1 min-h-0 overflow-y-auto scroll-smooth\">\r\n            <div className=\"p-6\" id=\"modal-top\">\r\n              {/* Professional Topbar - Like Reference Image */}\r\n              <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4 mb-6 shadow-sm\">\r\n                <div className=\"flex items-center justify-center text-center\">\r\n                  <div className=\"space-y-2\">\r\n                    {/* Order Number - Prominent */}\r\n                    <h1 className=\"text-3xl font-bold text-gray-900\">\r\n                      {order.order_number || order.custom_order_number || 'New Order'}\r\n                    </h1>\r\n                    \r\n                    {/* Business Context - Centered */}\r\n                    <div className=\"text-lg text-gray-700\">\r\n                      <span className=\"font-semibold\">Premium Auto</span>\r\n                      <span className=\"mx-2 text-gray-400\">•</span>\r\n                      <span>{order.salesperson || 'Unassigned'} (Salesperson)</span>\r\n                      <span className=\"mx-2 text-gray-400\">•</span>\r\n                      <span>{order.customer_name || 'Customer'}</span>\r\n                    </div>\r\n                    \r\n                    {/* Vehicle + Status Row - Centered */}\r\n                    <div className=\"flex items-center justify-center gap-6 pt-2\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Car className=\"h-5 w-5 text-blue-600\" />\r\n                        <span className=\"font-semibold text-gray-800\">\r\n                          {vehicleDisplayName}\r\n                        </span>\r\n                      </div>\r\n                      \r\n                      <div className=\"font-mono text-sm bg-gray-200 px-3 py-1 rounded-md\">\r\n                        VIN: {order.vehicle_vin || 'Not provided'}\r\n                      </div>\r\n                      \r\n                      <TimeRemaining order={order} size=\"lg\" />\r\n                      \r\n                      <StatusBadgeInteractive\r\n                        status={order.status as 'pending' | 'in_progress' | 'completed' | 'cancelled'}\r\n                        orderId={order.id}\r\n                        dealerId={String(order.dealer_id)}\r\n                        canUpdateStatus={true}\r\n                        onStatusChange={handleStatusChange}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"grid grid-cols-1 lg:grid-cols-[2fr,1fr] gap-6\">\r\n                {/* Main Content Area */}\r\n                <div className=\"space-y-6\">\r\n                  {/* Row 1: Vehicle Info + Schedule View (Two blocks side by side) */}\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <Suspense fallback={<SkeletonLoader variant=\"vehicle-info\" />}>\r\n                      <VehicleInfoBlockMemo order={order} />\r\n                    </Suspense>\r\n                    <Suspense fallback={<SkeletonLoader variant=\"schedule\" />}>\r\n                      <ScheduleViewBlockMemo order={order} />\r\n                    </Suspense>\r\n                  </div>\r\n\r\n                  {/* Row 2: Simple Notes Display (Full width) */}\r\n                  <Suspense fallback={<SkeletonLoader variant=\"notes\" />}>\r\n                    <SimpleNotesDisplayMemo order={order} />\r\n                  </Suspense>\r\n\r\n                  {/* Row 3: Team Communication (Full width like order notes) */}\r\n                  <div className=\"space-y-4\">\r\n                    <Suspense fallback={<SkeletonLoader variant=\"comments\" />}>\r\n                      <PublicCommentsBlockMemo orderId={order.id} />\r\n                    </Suspense>\r\n                    <Suspense fallback={<SkeletonLoader variant=\"notes\" />}>\r\n                      <InternalNotesBlockMemo orderId={order.id} />\r\n                    </Suspense>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Right Sidebar - Clean Design */}\r\n                <div className=\"space-y-4\">\r\n                  {/* Enhanced QR Code & Short Link Block */}\r\n                  {isLoadingData ? (\r\n                    <SkeletonLoader variant=\"qr-code\" />\r\n                  ) : (\r\n                    <Suspense fallback={<SkeletonLoader variant=\"qr-code\" />}>\r\n                      <EnhancedQRCodeBlockMemo\r\n                        orderId={order.id}\r\n                        orderNumber={order.order_number}\r\n                        dealerId={String(order.dealer_id)}\r\n                        qrCodeUrl={order.qr_code_url}\r\n                        shortLink={order.short_link}\r\n                      />\r\n                    </Suspense>\r\n                  )}\r\n\r\n                  {/* Chat and Communication Actions */}\r\n                  <Card>\r\n                    <CardHeader className=\"pb-3\">\r\n                      <CardTitle className=\"text-sm flex items-center gap-2\">\r\n                        <MessageSquare className=\"h-4 w-4\" />\r\n                        {t('orders.communication_actions', 'Team Communication')}\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent>\r\n                      <ChatAndSMSActions\r\n                        orderId={order.id}\r\n                        orderNumber={order.order_number}\r\n                        customerPhone={order.customer_phone || ''}\r\n                        dealerId={Number(order.dealer_id)}\r\n                        variant=\"compact\"\r\n                      />\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  {/* Enhanced Followers Block */}\r\n                  {isLoadingData ? (\r\n                    <SkeletonLoader variant=\"notes\" />\r\n                  ) : (\r\n                    <Suspense fallback={<SkeletonLoader variant=\"notes\" />}>\r\n                      <FollowersBlockMemo\r\n                        orderId={order.id}\r\n                        dealerId={String(order.dealer_id)}\r\n                      />\r\n                    </Suspense>\r\n                  )}\r\n\r\n                  {/* Enhanced Recent Activity Block */}\r\n                  {isLoadingData ? (\r\n                    <SkeletonLoader variant=\"activity\" />\r\n                  ) : (\r\n                    <Suspense fallback={<SkeletonLoader variant=\"activity\" />}>\r\n                      <RecentActivityBlockMemo\r\n                        orderId={order.id}\r\n                      />\r\n                    </Suspense>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Footer with Danger Close Button */}\r\n          <footer className=\"flex-none border-t bg-background p-4\">\r\n            <div className=\"flex justify-end\">\r\n              <Button \r\n                variant=\"destructive\" \r\n                onClick={onClose} \r\n                size=\"lg\" \r\n                className=\"min-w-[120px]\"\r\n              >\r\n                Close\r\n              </Button>\r\n            </div>\r\n          </footer>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\EnhancedOrderDetailModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":25,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[817,820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[817,820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":28,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[884,887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[884,887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from 'sonner';\r\nimport { CommunicationHub } from './communication/CommunicationHub';\r\nimport { EnhancedOrderDetailLayout } from './EnhancedOrderDetailLayout';\r\nimport { useOrderModalData } from '@/hooks/useOrderModalData';\r\nimport { SkeletonLoader } from './SkeletonLoader';\r\n\r\ninterface OrderAttachment {\r\n  id: string;\r\n  order_id: string;\r\n  file_name: string;\r\n  file_path: string;\r\n  file_size: number;\r\n  mime_type: string;\r\n  uploaded_by: string;\r\n  upload_context: string;\r\n  description: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface EnhancedOrderDetailModalProps {\r\n  order: any;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onEdit?: (order: any) => void;\r\n  onDelete?: (orderId: string) => void;\r\n  onStatusChange?: (orderId: string, newStatus: string) => void;\r\n}\r\n\r\n// Modal component for order details\r\nexport function EnhancedOrderDetailModal({\r\n  order,\r\n  open,\r\n  onClose,\r\n  onEdit,\r\n  onDelete,\r\n  onStatusChange\r\n}: EnhancedOrderDetailModalProps) {\r\n  const { t } = useTranslation();\r\n  const [editingNotes, setEditingNotes] = useState(false);\r\n  const [editingInternalNotes, setEditingInternalNotes] = useState(false);\r\n  const [notes, setNotes] = useState(order?.notes || '');\r\n  const [internalNotes, setInternalNotes] = useState(order?.internal_notes || '');\r\n\r\n  // Use parallel data fetching hook for optimal performance\r\n  const { \r\n    data: modalData, \r\n    loading: dataLoading, \r\n    error: dataError,\r\n    addAttachment: handleAttachmentUploaded,\r\n    removeAttachment: handleAttachmentDeleted,\r\n    refetch: refetchModalData\r\n  } = useOrderModalData({\r\n    orderId: order?.id || '',\r\n    qrCodeUrl: order?.qr_code_url || '',\r\n    enabled: open && !!order // Only fetch when modal is open and order exists\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (order) {\r\n      setNotes(order.notes || '');\r\n      setInternalNotes(order.internal_notes || '');\r\n    }\r\n  }, [order]);\r\n\r\n  // Memoize status change handler\r\n  const handleStatusChange = useCallback(async (newStatus: string) => {\r\n    if (onStatusChange && order?.id) {\r\n      await onStatusChange(order.id, newStatus);\r\n    }\r\n  }, [onStatusChange, order?.id]);\r\n\r\n  // Memoize notes update handler\r\n  const handleNotesUpdate = useCallback(async (field: 'notes' | 'internal_notes', value: string) => {\r\n    if (!order?.id) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('orders')\r\n        .update({ [field]: value })\r\n        .eq('id', order.id);\r\n\r\n      if (error) throw error;\r\n\r\n      toast.success(t('messages.notes_updated_successfully'));\r\n\r\n      if (field === 'notes') {\r\n        setEditingNotes(false);\r\n      } else {\r\n        setEditingInternalNotes(false);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating notes:', error);\r\n      toast.error(t('messages.error_updating_notes'));\r\n    }\r\n  }, [order?.id, t]);\r\n\r\n  // Enhanced attachment handlers with optimistic updates\r\n  const handleAttachmentUploadedOptimistic = useCallback((newAttachment: OrderAttachment) => {\r\n    handleAttachmentUploaded(newAttachment);\r\n    toast.success(t('attachments.uploadSuccess'));\r\n  }, [handleAttachmentUploaded, t]);\r\n\r\n  const handleAttachmentDeletedOptimistic = useCallback((attachmentId: string) => {\r\n    handleAttachmentDeleted(attachmentId);\r\n    toast.success(t('attachments.deleteSuccess'));\r\n  }, [handleAttachmentDeleted, t]);\r\n\r\n  // Memoize utility functions\r\n  const formatCurrency = useMemo(() => (amount: number | null | undefined) => {\r\n    if (!amount) return 'N/A';\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n    }).format(amount);\r\n  }, []);\r\n\r\n  const getPriorityColor = useMemo(() => (priority: string) => {\r\n    switch (priority?.toLowerCase()) {\r\n      case 'high': return 'destructive';\r\n      case 'medium': return 'secondary';\r\n      case 'low': return 'outline';\r\n      default: return 'outline';\r\n    }\r\n  }, []);\r\n\r\n  // Early return after all hooks - prevents Rules of Hooks violation\r\n  if (!order) return null;\r\n\r\n  // Show loading state for critical data\r\n  if (dataLoading && !modalData.attachments.length) {\r\n    return (\r\n      <EnhancedOrderDetailLayout\r\n        order={order}\r\n        open={open}\r\n        onClose={onClose}\r\n        onEdit={onEdit}\r\n        onDelete={onDelete}\r\n        onStatusChange={onStatusChange}\r\n        onNotesUpdate={handleNotesUpdate}\r\n        modalData={modalData}\r\n        isLoadingData={true}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <EnhancedOrderDetailLayout\r\n      order={order}\r\n      open={open}\r\n      onClose={onClose}\r\n      onEdit={onEdit}\r\n      onDelete={onDelete}\r\n      onStatusChange={onStatusChange}\r\n      onNotesUpdate={handleNotesUpdate}\r\n      modalData={modalData}\r\n      isLoadingData={dataLoading}\r\n      dataError={dataError}\r\n    />\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\EnhancedQRCodeBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\ErrorBoundaryModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\FollowersBlock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\InstructionsBlock.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  FileText, \r\n  Edit2, \r\n  Save, \r\n  X, \r\n  Lock, \r\n  Eye,\r\n  History,\r\n  User\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\n\r\ninterface InstructionsBlockProps {\r\n  order: any;\r\n  onNotesUpdate?: (orderId: string, notes: string, type: 'general' | 'internal') => void;\r\n}\r\n\r\nexport function InstructionsBlock({ order, onNotesUpdate }: InstructionsBlockProps) {\r\n  const { t } = useTranslation();\r\n  const { user } = useAuth();\r\n  \r\n  const [editingGeneral, setEditingGeneral] = useState(false);\r\n  const [editingInternal, setEditingInternal] = useState(false);\r\n  const [generalNotes, setGeneralNotes] = useState(order?.notes || '');\r\n  const [internalNotes, setInternalNotes] = useState(order?.internal_notes || '');\r\n\r\n  const canEditInternal = user?.role === 'detail_user' || user?.role === 'admin';\r\n\r\n  const handleSaveGeneral = async () => {\r\n    if (onNotesUpdate) {\r\n      await onNotesUpdate(order.id, generalNotes, 'general');\r\n    }\r\n    setEditingGeneral(false);\r\n  };\r\n\r\n  const handleSaveInternal = async () => {\r\n    if (onNotesUpdate) {\r\n      await onNotesUpdate(order.id, internalNotes, 'internal');\r\n    }\r\n    setEditingInternal(false);\r\n  };\r\n\r\n  const handleCancelGeneral = () => {\r\n    setGeneralNotes(order?.notes || '');\r\n    setEditingGeneral(false);\r\n  };\r\n\r\n  const handleCancelInternal = () => {\r\n    setInternalNotes(order?.internal_notes || '');\r\n    setEditingInternal(false);\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\r\n          <FileText className=\"h-5 w-5 text-primary\" />\r\n          Instructions & Notes\r\n        </CardTitle>\r\n      </CardHeader>\r\n      \r\n      <CardContent className=\"space-y-6\">\r\n        {/* General Instructions */}\r\n        <div className=\"space-y-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Eye className=\"h-4 w-4 text-muted-foreground\" />\r\n              <h4 className=\"text-sm font-medium\">{t('orders.general_notes')}</h4>\r\n              <Badge variant=\"outline\" className=\"text-xs\">Public</Badge>\r\n            </div>\r\n            {!editingGeneral && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={() => setEditingGeneral(true)}\r\n                className=\"h-8\"\r\n              >\r\n                <Edit2 className=\"h-3 w-3 mr-2\" />\r\n                Edit\r\n              </Button>\r\n            )}\r\n          </div>\r\n\r\n          {editingGeneral ? (\r\n            <div className=\"space-y-3\">\r\n              <Textarea\r\n                value={generalNotes}\r\n                onChange={(e) => setGeneralNotes(e.target.value)}\r\n                placeholder={t('orders.notesPlaceholder')}\r\n                className=\"min-h-[100px] resize-none\"\r\n              />\r\n              <div className=\"flex items-center gap-2\">\r\n                <Button\r\n                  size=\"sm\"\r\n                  onClick={handleSaveGeneral}\r\n                  className=\"h-8\"\r\n                >\r\n                  <Save className=\"h-3 w-3 mr-2\" />\r\n                  Save\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={handleCancelGeneral}\r\n                  className=\"h-8\"\r\n                >\r\n                  <X className=\"h-3 w-3 mr-2\" />\r\n                  Cancel\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"p-4 bg-muted/20 rounded-lg border border-dashed min-h-[80px]\">\r\n              {generalNotes ? (\r\n                <p className=\"text-sm whitespace-pre-wrap\">{generalNotes}</p>\r\n              ) : (\r\n                <p className=\"text-sm text-muted-foreground italic\">\r\n                  {t('orders.no_notes')}\r\n                </p>\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Internal Instructions */}\r\n        <div className=\"space-y-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Lock className=\"h-4 w-4 text-muted-foreground\" />\r\n              <h4 className=\"text-sm font-medium\">{t('orders.internal_notes')}</h4>\r\n              <Badge variant=\"secondary\" className=\"text-xs\">\r\n                <User className=\"h-3 w-3 mr-1\" />\r\n                Detail Users Only\r\n              </Badge>\r\n            </div>\r\n            {canEditInternal && !editingInternal && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={() => setEditingInternal(true)}\r\n                className=\"h-8\"\r\n              >\r\n                <Edit2 className=\"h-3 w-3 mr-2\" />\r\n                Edit\r\n              </Button>\r\n            )}\r\n          </div>\r\n\r\n          {canEditInternal ? (\r\n            editingInternal ? (\r\n              <div className=\"space-y-3\">\r\n                <Textarea\r\n                  value={internalNotes}\r\n                  onChange={(e) => setInternalNotes(e.target.value)}\r\n                  placeholder=\"Internal notes for detail team...\"\r\n                  className=\"min-h-[100px] resize-none\"\r\n                />\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Button\r\n                    size=\"sm\"\r\n                    onClick={handleSaveInternal}\r\n                    className=\"h-8\"\r\n                  >\r\n                    <Save className=\"h-3 w-3 mr-2\" />\r\n                    Save\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={handleCancelInternal}\r\n                    className=\"h-8\"\r\n                  >\r\n                    <X className=\"h-3 w-3 mr-2\" />\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <div className=\"p-4 bg-muted/30 rounded-lg border border-solid min-h-[80px]\">\r\n                {internalNotes ? (\r\n                  <p className=\"text-sm whitespace-pre-wrap\">{internalNotes}</p>\r\n                ) : (\r\n                  <p className=\"text-sm text-muted-foreground italic\">\r\n                    {t('orders.no_internal_notes')}\r\n                  </p>\r\n                )}\r\n              </div>\r\n            )\r\n          ) : (\r\n            <div className=\"p-4 bg-muted/10 rounded-lg border border-dashed min-h-[60px] flex items-center justify-center\">\r\n              <div className=\"text-center\">\r\n                <Lock className=\"h-6 w-6 text-muted-foreground mx-auto mb-2\" />\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  Restricted to detail users\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Instructions Summary */}\r\n        <div className=\"pt-3 border-t\">\r\n          <div className=\"flex items-center gap-2 mb-2\">\r\n            <History className=\"h-4 w-4 text-muted-foreground\" />\r\n            <span className=\"text-sm font-medium\">Instructions Summary</span>\r\n          </div>\r\n          \r\n          <div className=\"grid grid-cols-2 gap-4 text-center\">\r\n            <div className=\"p-3 bg-muted/20 rounded-lg\">\r\n              <p className=\"text-lg font-bold text-primary\">\r\n                {generalNotes ? generalNotes.split(' ').length : 0}\r\n              </p>\r\n              <p className=\"text-xs text-muted-foreground\">Words in general notes</p>\r\n            </div>\r\n            <div className=\"p-3 bg-muted/20 rounded-lg\">\r\n              <p className=\"text-lg font-bold text-secondary\">\r\n                {internalNotes ? internalNotes.split(' ').length : 0}\r\n              </p>\r\n              <p className=\"text-xs text-muted-foreground\">Words in internal notes</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\InternalNotesBlock.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3249,3252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3249,3252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3264,3267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3264,3267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Lock, \r\n  Send, \r\n  Paperclip, \r\n  Shield,\r\n  AtSign,\r\n  Clock,\r\n  Eye\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { toast } from 'sonner';\r\n\r\ninterface InternalNote {\r\n  id: string;\r\n  message: string;\r\n  user_name: string;\r\n  created_at: string;\r\n  user_id: string;\r\n  mentions?: string[];\r\n}\r\n\r\ninterface InternalNotesBlockProps {\r\n  orderId: string;\r\n}\r\n\r\nexport function InternalNotesBlock({ orderId }: InternalNotesBlockProps) {\r\n  const { t } = useTranslation();\r\n  const { user } = useAuth();\r\n  const [notes, setNotes] = useState<InternalNote[]>([]);\r\n  const [newNote, setNewNote] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Check if user can access internal notes\r\n  const canAccessInternal = user?.role === 'detail_user' || user?.role === 'admin' || \r\n                           user?.role === 'dealer_admin' || user?.role === 'dealer_manager';\r\n\r\n  useEffect(() => {\r\n    if (canAccessInternal) {\r\n      fetchInternalNotes();\r\n    }\r\n  }, [orderId, canAccessInternal]);\r\n\r\n  const fetchInternalNotes = async () => {\r\n    try {\r\n      // Mock internal notes data (replace with actual database query when schema is ready)\r\n      const mockNotes: InternalNote[] = [\r\n        {\r\n          id: '1',\r\n          message: 'Customer has premium detail package. Use high-end products only.',\r\n          user_name: 'Detail Supervisor',\r\n          created_at: new Date(Date.now() - 45 * 60 * 1000).toISOString(),\r\n          user_id: 'detail1'\r\n        },\r\n        {\r\n          id: '2',\r\n          message: 'Check for paint damage on rear bumper before starting work',\r\n          user_name: 'Quality Control',\r\n          created_at: new Date(Date.now() - 20 * 60 * 1000).toISOString(),\r\n          user_id: 'qc1'\r\n        }\r\n      ];\r\n      \r\n      setNotes(mockNotes);\r\n      \r\n      // TODO: Replace with actual database query once order_comments table is created\r\n      // const { data, error } = await supabase\r\n      //   .from('order_comments')\r\n      //   .select('*')\r\n      //   .eq('order_id', orderId)\r\n      //   .eq('is_internal', true)\r\n      //   .order('created_at', { ascending: true });\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching internal notes:', error);\r\n    }\r\n  };\r\n\r\n  const addInternalNote = async () => {\r\n    if (!newNote.trim() || !user || !canAccessInternal) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('order_comments')\r\n        .insert({\r\n          order_id: orderId,\r\n          user_id: user.id,\r\n          comment_text: newNote.trim(),\r\n          comment_type: 'internal'\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      const meta: any = (user as any)?.user_metadata || {};\r\n      const displayName = meta.first_name && meta.last_name\r\n        ? `${meta.first_name} ${meta.last_name}`\r\n        : (user.email?.split('@')[0] || 'User');\r\n\r\n      const addedNote: InternalNote = {\r\n        id: data.id,\r\n        message: data.comment_text,\r\n        user_name: displayName,\r\n        created_at: data.created_at,\r\n        user_id: data.user_id\r\n      };\r\n\r\n      setNotes(prev => [...prev, addedNote]);\r\n      setNewNote('');\r\n      toast.success('Internal note added');\r\n    } catch (error) {\r\n      console.error('Error adding internal note:', error);\r\n      toast.error('Failed to add internal note');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      addInternalNote();\r\n    }\r\n  };\r\n\r\n  if (!canAccessInternal) {\r\n    return (\r\n      <Card className=\"border-dashed\">\r\n        <CardContent className=\"p-6 text-center\">\r\n          <Lock className=\"h-12 w-12 text-muted-foreground mx-auto mb-3\" />\r\n          <h4 className=\"font-medium mb-1\">Internal Notes</h4>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Detail team access required\r\n          </p>\r\n          <Badge variant=\"secondary\" className=\"mt-2\">\r\n            <Shield className=\"h-3 w-3 mr-1\" />\r\n            Restricted Access\r\n          </Badge>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"border-amber-200 bg-amber-50/30\">\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Lock className=\"h-5 w-5 text-amber-600\" />\r\n          Internal Notes\r\n          <Badge variant=\"secondary\" className=\"text-xs\">\r\n            <Shield className=\"h-3 w-3 mr-1\" />\r\n            Detail Team Only\r\n          </Badge>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      \r\n      <CardContent className=\"space-y-4\">\r\n        {/* Internal Note Input */}\r\n        <div className=\"space-y-2\">\r\n          <div className=\"flex gap-2\">\r\n            <Input\r\n              placeholder=\"Add internal note... @mention detail team\"\r\n              value={newNote}\r\n              onChange={(e) => setNewNote(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              className=\"flex-1 border-amber-300\"\r\n            />\r\n            <Button\r\n              onClick={addInternalNote}\r\n              disabled={loading || !newNote.trim()}\r\n              size=\"sm\"\r\n              className=\"bg-amber-600 hover:bg-amber-700\"\r\n            >\r\n              <Send className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-2\">\r\n            <Button variant=\"outline\" size=\"sm\" className=\"text-xs border-amber-300\">\r\n              <Paperclip className=\"h-3 w-3 mr-1\" />\r\n              Internal Files\r\n            </Button>\r\n            <Button variant=\"outline\" size=\"sm\" className=\"text-xs border-amber-300\">\r\n              <AtSign className=\"h-3 w-3 mr-1\" />\r\n              Mention Team\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Internal Notes Thread */}\r\n        <div className=\"space-y-3 max-h-64 overflow-y-auto\">\r\n          {notes.length === 0 ? (\r\n            <div className=\"text-center py-6 text-muted-foreground\">\r\n              <Lock className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n              <p className=\"text-sm\">No internal notes yet</p>\r\n              <p className=\"text-xs\">Add private notes for the detail team</p>\r\n            </div>\r\n          ) : (\r\n            notes.map((note) => (\r\n              <div key={note.id} className=\"bg-amber-100/50 p-3 rounded-lg border border-amber-200\">\r\n                <div className=\"flex items-center gap-2 mb-2\">\r\n                  <Avatar className=\"w-6 h-6\">\r\n                    <AvatarFallback className=\"text-xs bg-amber-200 text-amber-800\">\r\n                      {note.user_name.charAt(0).toUpperCase()}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                  <span className=\"text-sm font-medium text-amber-800\">{note.user_name}</span>\r\n                  <Badge variant=\"outline\" className=\"text-xs border-amber-300 text-amber-700\">\r\n                    Detail Team\r\n                  </Badge>\r\n                  <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\r\n                    <Clock className=\"h-3 w-3\" />\r\n                    {new Date(note.created_at).toLocaleTimeString()}\r\n                  </div>\r\n                </div>\r\n                <p className=\"text-sm whitespace-pre-wrap text-amber-900\">{note.message}</p>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n\r\n        {/* Internal Notes Summary */}\r\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t border-amber-200\">\r\n          <div className=\"flex items-center gap-1\">\r\n            <Eye className=\"h-3 w-3\" />\r\n            <span>{notes.length} internal notes</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <Shield className=\"h-3 w-3\" />\r\n            <span>Confidential</span>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\OptimizedEnhancedOrderDetailModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\OrderCalendarView.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[857,860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[857,860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[905,908],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[905,908],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[938,941],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[938,941],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1372,1375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1372,1375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2414,2417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2414,2417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2507,2510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2507,2510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from \"react\";\r\nimport { Calendar, momentLocalizer, View } from 'react-big-calendar';\r\nimport moment from 'moment';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\r\nimport { \r\n  Calendar as CalendarIcon,\r\n  Clock,\r\n  MapPin,\r\n  User,\r\n  DollarSign,\r\n  Car,\r\n  AlertCircle,\r\n  CheckCircle2,\r\n  Loader2\r\n} from \"lucide-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { format, parseISO } from \"date-fns\";\r\nimport { toast } from \"sonner\";\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\ninterface OrderCalendarViewProps {\r\n  orders: any[];\r\n  loading?: boolean;\r\n  onEdit: (order: any) => void;\r\n  onView: (order: any) => void;\r\n  onDelete: (orderId: string) => void;\r\n  onStatusChange: (orderId: string, newStatus: string) => void;\r\n  onCreateOrder?: (selectedDate: Date) => void;\r\n}\r\n\r\nexport const OrderCalendarView = ({\r\n  orders,\r\n  loading = false,\r\n  onEdit,\r\n  onView,\r\n  onDelete,\r\n  onStatusChange,\r\n  onCreateOrder\r\n}: OrderCalendarViewProps) => {\r\n  const { t } = useTranslation();\r\n  const [selectedOrder, setSelectedOrder] = useState<any | null>(null);\r\n  const [calendarView, setCalendarView] = useState<View>('month');\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n  // Transform orders for react-big-calendar\r\n  const calendarEvents = useMemo(() => {\r\n    return orders\r\n      .filter(order => order.due_date) // Only show orders with due dates\r\n      .map(order => {\r\n        const dueDate = parseISO(order.due_date);\r\n        const endDate = new Date(dueDate.getTime() + (2 * 60 * 60 * 1000)); // 2 hours duration\r\n\r\n        return {\r\n          id: order.id,\r\n          title: `${order.id} - ${order.year} ${order.make} ${order.model}`.substring(0, 40),\r\n          start: dueDate,\r\n          end: endDate,\r\n          allDay: false,\r\n          resource: order,\r\n        };\r\n      });\r\n  }, [orders]);\r\n\r\n  const handleSelectSlot = ({ start }: { start: Date; end: Date }) => {\r\n    if (onCreateOrder) {\r\n      onCreateOrder(start);\r\n    } else {\r\n      toast.info(t('calendar.clickToCreateOrder'));\r\n    }\r\n  };\r\n\r\n  const handleSelectEvent = (event: any) => {\r\n    setSelectedOrder(event.resource);\r\n  };\r\n\r\n  const eventStyleGetter = (event: any) => {\r\n    const order = event.resource;\r\n    let backgroundColor = '#6B7280'; // default gray\r\n    let borderColor = '#6B7280';\r\n    let textColor = 'white';\r\n\r\n    // Color coding by status\r\n    switch (order.status?.toLowerCase()) {\r\n      case 'pending':\r\n        backgroundColor = '#EAB308'; // yellow\r\n        borderColor = '#CA8A04';\r\n        textColor = 'white';\r\n        break;\r\n      case 'in progress':\r\n      case 'in_progress':\r\n        backgroundColor = '#3B82F6'; // blue\r\n        borderColor = '#2563EB';\r\n        textColor = 'white';\r\n        break;\r\n      case 'completed':\r\n        backgroundColor = '#10B981'; // green\r\n        borderColor = '#059669';\r\n        textColor = 'white';\r\n        break;\r\n      case 'cancelled':\r\n        backgroundColor = '#EF4444'; // red\r\n        borderColor = '#DC2626';\r\n        textColor = 'white';\r\n        break;\r\n      default:\r\n        backgroundColor = '#6B7280';\r\n        borderColor = '#4B5563';\r\n        textColor = 'white';\r\n    }\r\n\r\n    // Add priority indicators\r\n    if (order.priority === 'high') {\r\n      borderColor = '#DC2626';\r\n    } else if (order.priority === 'urgent') {\r\n      borderColor = '#B91C1C';\r\n    }\r\n\r\n    return {\r\n      style: {\r\n        backgroundColor,\r\n        borderRadius: '4px',\r\n        opacity: 0.9,\r\n        color: textColor,\r\n        border: `2px solid ${borderColor}`,\r\n        display: 'block',\r\n        fontSize: '12px',\r\n        fontWeight: '500'\r\n      }\r\n    };\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status?.toLowerCase()) {\r\n      case 'pending':\r\n        return <Clock className=\"h-4 w-4 text-warning\" />;\r\n      case 'in progress':\r\n      case 'in_progress':\r\n        return <Loader2 className=\"h-4 w-4 text-primary animate-spin\" />;\r\n      case 'completed':\r\n        return <CheckCircle2 className=\"h-4 w-4 text-success\" />;\r\n      case 'cancelled':\r\n        return <AlertCircle className=\"h-4 w-4 text-destructive\" />;\r\n      default:\r\n        return <Clock className=\"h-4 w-4 text-muted-foreground\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadgeVariant = (status: string) => {\r\n    switch (status?.toLowerCase()) {\r\n      case 'pending':\r\n        return 'secondary';\r\n      case 'in progress':\r\n      case 'in_process':\r\n        return 'default';\r\n      case 'completed':\r\n        return 'default';\r\n      case 'cancelled':\r\n        return 'destructive';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className=\"animate-pulse\">\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"h-96 bg-muted rounded flex items-center justify-center\">\r\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground\" />\r\n            <span className=\"ml-2 text-muted-foreground\">{t('common.loading')}</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      {/* Calendar Header - Mobile Responsive */}\r\n      <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <h3 className=\"text-lg font-semibold flex items-center gap-2\">\r\n            <CalendarIcon className=\"h-5 w-5\" />\r\n            {format(selectedDate, 'MMMM yyyy')}\r\n          </h3>\r\n          <Badge variant=\"outline\" className=\"text-sm\">\r\n            {calendarEvents.length} {t('common.orders')}\r\n          </Badge>\r\n        </div>\r\n\r\n        {/* View Controls - Mobile Responsive */}\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button\r\n            size=\"sm\"\r\n            variant={calendarView === 'month' ? 'default' : 'outline'}\r\n            onClick={() => setCalendarView('month')}\r\n            className=\"text-xs sm:text-sm\"\r\n          >\r\n            {t('calendar.month')}\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            variant={calendarView === 'week' ? 'default' : 'outline'}\r\n            onClick={() => setCalendarView('week')}\r\n            className=\"text-xs sm:text-sm\"\r\n          >\r\n            {t('calendar.week')}\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            variant={calendarView === 'day' ? 'default' : 'outline'}\r\n            onClick={() => setCalendarView('day')}\r\n            className=\"text-xs sm:text-sm\"\r\n          >\r\n            {t('calendar.day')}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Legend - Mobile Responsive */}\r\n      <Card className=\"p-4\">\r\n        <div className=\"flex flex-wrap gap-4 text-sm\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"w-3 h-3 rounded bg-warning\"></div>\r\n            <span>{t('common.status.pending')}</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"w-3 h-3 rounded bg-primary\"></div>\r\n            <span>{t('common.status.in_progress')}</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"w-3 h-3 rounded bg-success\"></div>\r\n            <span>{t('common.status.completed')}</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"w-3 h-3 rounded bg-destructive\"></div>\r\n            <span>{t('common.status.cancelled')}</span>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n\r\n      {/* Calendar */}\r\n      <Card>\r\n        <CardContent className=\"p-2 sm:p-6\">\r\n          <div style={{ height: '600px' }} className=\"w-full\">\r\n            <Calendar\r\n              localizer={localizer}\r\n              events={calendarEvents}\r\n              startAccessor=\"start\"\r\n              endAccessor=\"end\"\r\n              onSelectSlot={handleSelectSlot}\r\n              onSelectEvent={handleSelectEvent}\r\n              selectable={true}\r\n              eventPropGetter={eventStyleGetter}\r\n              view={calendarView}\r\n              onView={setCalendarView}\r\n              date={selectedDate}\r\n              onNavigate={setSelectedDate}\r\n              popup={true}\r\n              popupOffset={{ x: 10, y: 10 }}\r\n              className=\"order-calendar responsive-calendar\"\r\n              messages={{\r\n                next: t('calendar.next'),\r\n                previous: t('calendar.previous'),\r\n                today: t('calendar.today'),\r\n                month: t('calendar.month'),\r\n                week: t('calendar.week'),\r\n                day: t('calendar.day'),\r\n                agenda: t('calendar.agenda'),\r\n                date: t('calendar.date'),\r\n                time: t('calendar.time'),\r\n                event: t('calendar.event'),\r\n                noEventsInRange: t('calendar.noEventsInRange'),\r\n                showMore: (total: number) => `${t('calendar.showMore')} (${total})`\r\n              }}\r\n              formats={{\r\n                timeGutterFormat: 'HH:mm',\r\n                eventTimeRangeFormat: ({ start, end }) => {\r\n                  return `${moment(start).format('HH:mm')} - ${moment(end).format('HH:mm')}`;\r\n                },\r\n                dayHeaderFormat: 'ddd DD/MM',\r\n                monthHeaderFormat: 'MMMM YYYY',\r\n                dayRangeHeaderFormat: ({ start, end }) => {\r\n                  return `${moment(start).format('DD MMM')} - ${moment(end).format('DD MMM YYYY')}`;\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Order Details Dialog */}\r\n      <Dialog open={!!selectedOrder} onOpenChange={() => setSelectedOrder(null)}>\r\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"flex items-center gap-2\">\r\n              {getStatusIcon(selectedOrder?.status)}\r\n              {selectedOrder?.id}\r\n            </DialogTitle>\r\n            <DialogDescription>\r\n              {selectedOrder && (\r\n                <span className=\"flex items-center gap-2\">\r\n                  <Car className=\"h-4 w-4\" />\r\n                  {selectedOrder.year} {selectedOrder.make} {selectedOrder.model}\r\n                </span>\r\n              )}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          {selectedOrder && (\r\n            <div className=\"space-y-6\">\r\n              {/* Status and Priority */}\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                <Badge variant={getStatusBadgeVariant(selectedOrder.status)}>\r\n                  {t(`common.status.${selectedOrder.status?.toLowerCase()}`)}\r\n                </Badge>\r\n                {selectedOrder.priority && (\r\n                  <Badge variant={selectedOrder.priority === 'high' ? 'destructive' : 'outline'}>\r\n                    {t(`common.priority.${selectedOrder.priority}`)}\r\n                  </Badge>\r\n                )}\r\n              </div>\r\n\r\n              {/* Key Information */}\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                {selectedOrder.due_date && (\r\n                  <div>\r\n                    <div className=\"flex items-center gap-2 text-sm font-medium text-muted-foreground\">\r\n                      <Clock className=\"h-4 w-4\" />\r\n                      {t('common.due_date')}\r\n                    </div>\r\n                    <p className=\"text-sm mt-1\">\r\n                      {format(parseISO(selectedOrder.due_date), 'PPp')}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n\r\n                {selectedOrder.advisor && (\r\n                  <div>\r\n                    <div className=\"flex items-center gap-2 text-sm font-medium text-muted-foreground\">\r\n                      <User className=\"h-4 w-4\" />\r\n                      {t('common.advisor')}\r\n                    </div>\r\n                    <p className=\"text-sm mt-1\">{selectedOrder.advisor}</p>\r\n                  </div>\r\n                )}\r\n\r\n                {selectedOrder.price && (\r\n                  <div>\r\n                    <div className=\"flex items-center gap-2 text-sm font-medium text-muted-foreground\">\r\n                      <DollarSign className=\"h-4 w-4\" />\r\n                      {t('common.price')}\r\n                    </div>\r\n                    <p className=\"text-sm mt-1\">\r\n                      ${parseFloat(selectedOrder.price).toFixed(2)}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n\r\n                {selectedOrder.vin && (\r\n                  <div>\r\n                    <div className=\"text-sm font-medium text-muted-foreground\">VIN</div>\r\n                    <p className=\"text-sm mt-1 font-mono\">{selectedOrder.vin}</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Description */}\r\n              {selectedOrder.description && (\r\n                <div>\r\n                  <div className=\"text-sm font-medium text-muted-foreground mb-2\">\r\n                    {t('common.description')}\r\n                  </div>\r\n                  <p className=\"text-sm bg-muted p-3 rounded\">\r\n                    {selectedOrder.description}\r\n                  </p>\r\n                </div>\r\n              )}\r\n\r\n              {/* Action Buttons */}\r\n              <div className=\"flex flex-col sm:flex-row gap-2 pt-4 border-t\">\r\n                <Button \r\n                  onClick={() => onView(selectedOrder)}\r\n                  className=\"flex-1\"\r\n                >\r\n                  {t('common.view_details')}\r\n                </Button>\r\n                <Button \r\n                  variant=\"outline\"\r\n                  onClick={() => onEdit(selectedOrder)}\r\n                  className=\"flex-1\"\r\n                >\r\n                  {t('common.edit')}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      <style>{`\r\n        .order-calendar {\r\n          font-family: inherit !important;\r\n        }\r\n        \r\n        .order-calendar .rbc-header {\r\n          padding: 8px 4px;\r\n          font-weight: 600;\r\n          font-size: 14px;\r\n          border-bottom: 1px solid hsl(var(--border));\r\n          background: hsl(var(--muted));\r\n        }\r\n        \r\n        .order-calendar .rbc-today {\r\n          background-color: hsl(var(--accent) / 0.1);\r\n        }\r\n        \r\n        .order-calendar .rbc-off-range-bg {\r\n          background-color: hsl(var(--muted) / 0.3);\r\n        }\r\n        \r\n        .order-calendar .rbc-event {\r\n          padding: 2px 5px;\r\n          border-radius: 4px;\r\n          font-size: 11px;\r\n          line-height: 1.2;\r\n        }\r\n        \r\n        .order-calendar .rbc-time-slot {\r\n          border-top: 1px solid hsl(var(--border));\r\n        }\r\n        \r\n        .order-calendar .rbc-day-bg:hover {\r\n          background-color: hsl(var(--accent) / 0.05);\r\n        }\r\n        \r\n        @media (max-width: 640px) {\r\n          .order-calendar .rbc-toolbar {\r\n            flex-direction: column;\r\n            gap: 8px;\r\n            margin-bottom: 16px;\r\n          }\r\n          \r\n          .order-calendar .rbc-toolbar-label {\r\n            text-align: center;\r\n            font-size: 16px;\r\n          }\r\n          \r\n          .order-calendar .rbc-btn-group {\r\n            display: flex;\r\n            justify-content: center;\r\n          }\r\n          \r\n          .order-calendar .rbc-btn-group button {\r\n            padding: 4px 8px;\r\n            font-size: 12px;\r\n          }\r\n          \r\n          .order-calendar .rbc-event {\r\n            font-size: 10px;\r\n            padding: 1px 3px;\r\n          }\r\n          \r\n          .order-calendar .rbc-header {\r\n            padding: 4px 2px;\r\n            font-size: 12px;\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\OrderComments.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1820,1823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1820,1823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Card } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { MessageSquare, Lock, Send } from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'sonner';\r\n\r\ninterface Comment {\r\n  id: string;\r\n  comment_text: string;\r\n  comment_type: 'public' | 'internal';\r\n  created_at: string;\r\n  user_id: string;\r\n  user_name?: string;\r\n}\r\n\r\ninterface OrderCommentsProps {\r\n  orderId: string;\r\n  isDetailUser?: boolean;\r\n}\r\n\r\nexport function OrderComments({ orderId, isDetailUser = false }: OrderCommentsProps) {\r\n  const { t } = useTranslation();\r\n  const [comments, setComments] = useState<Comment[]>([]);\r\n  const [newComment, setNewComment] = useState('');\r\n  const [commentType, setCommentType] = useState<'public' | 'internal'>('public');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    loadComments();\r\n  }, [orderId, loadComments]);\r\n\r\n  const loadComments = useCallback(async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('order_comments')\r\n        .select('*')\r\n        .eq('order_id', orderId)\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (error) throw error;\r\n\r\n      // Get user names separately\r\n      const userIds = [...new Set(data?.map(c => c.user_id) || [])];\r\n      const { data: profiles } = await supabase\r\n        .from('profiles')\r\n        .select('id, first_name, last_name')\r\n        .in('id', userIds);\r\n\r\n      const profileMap = profiles?.reduce((acc: any, profile) => {\r\n        acc[profile.id] = `${profile.first_name || ''} ${profile.last_name || ''}`.trim() || 'Unknown User';\r\n        return acc;\r\n      }, {}) || {};\r\n\r\n      const formattedComments: Comment[] = data?.map(comment => ({\r\n        ...comment,\r\n        comment_type: comment.comment_type as 'public' | 'internal',\r\n        user_name: profileMap[comment.user_id] || 'Unknown User'\r\n      })) || [];\r\n\r\n      setComments(formattedComments);\r\n    } catch (error) {\r\n      console.error('Error loading comments:', error);\r\n      toast.error(t('messages.error_loading_comments'));\r\n    }\r\n  }, [orderId, t]);\r\n\r\n  const addComment = async () => {\r\n    if (!newComment.trim()) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const { data: userData } = await supabase.auth.getUser();\r\n      if (!userData.user) throw new Error('User not authenticated');\r\n\r\n      const { error } = await supabase\r\n        .from('order_comments')\r\n        .insert({\r\n          order_id: orderId,\r\n          user_id: userData.user.id,\r\n          comment_text: newComment.trim(),\r\n          comment_type: commentType,\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      setNewComment('');\r\n      await loadComments();\r\n      toast.success(t('messages.comment_added_successfully'));\r\n    } catch (error) {\r\n      console.error('Error adding comment:', error);\r\n      toast.error(t('messages.error_adding_comment'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleString();\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-4\">\r\n      <div className=\"space-y-4\">\r\n        <div className=\"flex items-center gap-2\">\r\n          <MessageSquare className=\"w-5 h-5\" />\r\n          <h3 className=\"font-semibold\">{t('orders.comments')}</h3>\r\n        </div>\r\n\r\n        {/* Comments List */}\r\n        <div className=\"space-y-3 max-h-64 overflow-y-auto\">\r\n          {comments.map((comment) => (\r\n            <div key={comment.id} className=\"border-l-2 border-muted pl-4 py-2\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <Avatar className=\"w-6 h-6\">\r\n                  <AvatarFallback className=\"text-xs\">\r\n                    {comment.user_name?.charAt(0) || 'U'}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n                <span className=\"text-sm font-medium\">{comment.user_name}</span>\r\n                <Badge\r\n                  variant={comment.comment_type === 'internal' ? 'secondary' : 'outline'}\r\n                  className=\"text-xs\"\r\n                >\r\n                  {comment.comment_type === 'internal' && <Lock className=\"w-3 h-3 mr-1\" />}\r\n                  {t(`comments.${comment.comment_type}`)}\r\n                </Badge>\r\n                <span className=\"text-xs text-muted-foreground ml-auto\">\r\n                  {formatDate(comment.created_at)}\r\n                </span>\r\n              </div>\r\n              <p className=\"text-sm\">{comment.comment_text}</p>\r\n            </div>\r\n          ))}\r\n          {comments.length === 0 && (\r\n            <p className=\"text-muted-foreground text-sm text-center py-4\">\r\n              {t('orders.no_comments')}\r\n            </p>\r\n          )}\r\n        </div>\r\n\r\n        {/* Add Comment Form */}\r\n        <div className=\"border-t pt-4 space-y-3\">\r\n          <Textarea\r\n            placeholder={t('orders.add_comment_placeholder')}\r\n            value={newComment}\r\n            onChange={(e) => setNewComment(e.target.value)}\r\n            className=\"min-h-[80px]\"\r\n          />\r\n          \r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex gap-2\">\r\n              <Button\r\n                variant={commentType === 'public' ? 'default' : 'outline'}\r\n                size=\"sm\"\r\n                onClick={() => setCommentType('public')}\r\n              >\r\n                {t('comments.public')}\r\n              </Button>\r\n              {isDetailUser && (\r\n                <Button\r\n                  variant={commentType === 'internal' ? 'default' : 'outline'}\r\n                  size=\"sm\"\r\n                  onClick={() => setCommentType('internal')}\r\n                >\r\n                  <Lock className=\"w-3 h-3 mr-1\" />\r\n                  {t('comments.internal')}\r\n                </Button>\r\n              )}\r\n            </div>\r\n            \r\n            <Button\r\n              onClick={addComment}\r\n              disabled={loading || !newComment.trim()}\r\n              size=\"sm\"\r\n            >\r\n              <Send className=\"w-4 h-4 mr-1\" />\r\n              {loading ? t('common.adding') : t('common.add')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\OrderDataTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":116,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3079,3082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3079,3082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3126,3129],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3126,3129],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3199,3202],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3199,3202],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  DropdownMenu, \r\n  DropdownMenuContent, \r\n  DropdownMenuItem, \r\n  DropdownMenuLabel, \r\n  DropdownMenuSeparator, \r\n  DropdownMenuTrigger \r\n} from '@/components/ui/dropdown-menu';\r\nimport { \r\n  Table, \r\n  TableBody, \r\n  TableCell, \r\n  TableHead, \r\n  TableHeader, \r\n  TableRow \r\n} from '@/components/ui/table';\r\nimport { \r\n  MoreHorizontal, \r\n  Eye, \r\n  Edit, \r\n  Trash2, \r\n  QrCode, \r\n  MessageSquare, \r\n  CheckCircle, \r\n  Loader2,\r\n  User,\r\n  Car,\r\n  Calendar,\r\n  Building2,\r\n  Hash\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { orderNumberService } from '@/services/orderNumberService';\r\nimport { toast } from 'sonner';\r\nimport { safeParseDate } from '@/utils/dateUtils';\r\nimport { StatusBadgeInteractive } from '@/components/StatusBadgeInteractive';\r\nimport { useStatusPermissions } from '@/hooks/useStatusPermissions';\r\nimport { useIsMobile } from '@/hooks/use-mobile';\r\nimport { getStatusRowColor } from '@/utils/statusUtils';\r\nimport { \r\n  getDuplicateCount, \r\n  getDuplicateOrders, \r\n  getDuplicateCellBackground \r\n} from '@/utils/duplicateUtils';\r\nimport { DuplicateBadge } from '@/components/ui/duplicate-badge';\r\nimport { DuplicateTooltip } from '@/components/ui/duplicate-tooltip';\r\nimport { ChatAndSMSActions } from './ChatAndSMSActions';\r\nimport { DueDateIndicator, useDueDateAttention } from '@/components/ui/due-date-indicator';\r\nimport { \r\n  isSameDayOrder, \r\n  isTimeBasedOrder, \r\n  getAttentionRowClasses,\r\n  calculateTimeStatus\r\n} from '@/utils/dueDateUtils';\r\nimport { formatOrderNumber } from '@/utils/orderUtils';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface Order {\r\n  id: string;\r\n  createdAt: string;\r\n  orderNumber?: string;\r\n  customOrderNumber?: string;\r\n  stockNumber?: string;\r\n  vehicleYear?: number;\r\n  vehicleMake?: string;\r\n  vehicleModel?: string;\r\n  vehicleVin?: string;\r\n  vehicleInfo?: string;\r\n  customerName?: string;\r\n  status: string;\r\n  dealer_id?: number;\r\n  dueDate?: string;\r\n  totalAmount?: number;\r\n  shortLink?: string;\r\n  comments?: number;\r\n  followers?: number;\r\n}\r\n\r\ninterface StatusInfo {\r\n  text: string;\r\n  variant: \"default\" | \"destructive\" | \"outline\" | \"secondary\" | \"success\" | \"warning\";\r\n  className: string;\r\n}\r\n\r\ninterface OrderCardProps {\r\n  order: Order;\r\n  onView: (order: Order) => void;\r\n  onEdit: (order: Order) => void;\r\n  onDelete: (orderId: string) => void;\r\n}\r\n\r\ninterface StatusBadgeProps {\r\n  status: string;\r\n}\r\n\r\ninterface StatusBadgeInteractiveProps {\r\n  status: string;\r\n  orderId: string;\r\n  dealerId: string;\r\n  canUpdateStatus: boolean;\r\n  onStatusChange: (orderId: string, newStatus: string) => void;\r\n}\r\n\r\ninterface MobileActionsProps {\r\n  order: Order;\r\n  onView: (order: Order) => void;\r\n  onEdit: (order: Order) => void;\r\n  onDelete: (orderId: string) => void;\r\n}\r\n\r\ninterface OrderDataTableProps {\r\n  orders: any[];\r\n  loading: boolean;\r\n  onEdit: (order: any) => void;\r\n  onDelete: (orderId: string) => void;\r\n  onView: (order: any) => void;\r\n  onStatusChange?: (orderId: string, newStatus: string) => void;\r\n  tabType: string;\r\n}\r\n\r\nexport function OrderDataTable({ orders, loading, onEdit, onDelete, onView, onStatusChange, tabType }: OrderDataTableProps) {\r\n  const { t } = useTranslation();\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const itemsPerPage = 10;\r\n  const isMobile = useIsMobile();\r\n  const { canUpdateStatus, updateOrderStatus } = useStatusPermissions();\r\n\r\n  // Enhanced memoized duplicate detection with caching\r\n  const duplicateData = useMemo(() => {\r\n    const startTime = performance.now();\r\n    // Debug only on first calculation or significant data changes\r\n    if (import.meta.env.DEV && orders.length > 100) {\r\n      console.log('🔄 Calculating duplicates for', orders.length, 'orders...');\r\n    }\r\n    \r\n    const stockDuplicates = new Map<string, number>();\r\n    const vinDuplicates = new Map<string, number>();\r\n    const stockDuplicateOrders = new Map<string, Order[]>();\r\n    const vinDuplicateOrders = new Map<string, Order[]>();\r\n    \r\n    // More efficient duplicate detection using grouping\r\n    const stockGroups = new Map<string, Order[]>();\r\n    const vinGroups = new Map<string, Order[]>();\r\n    \r\n    // Group orders by normalized values\r\n    orders.forEach(order => {\r\n      // Group by stock number\r\n      if (order.stockNumber && order.stockNumber.trim()) {\r\n        const normalizedStock = order.stockNumber.trim().toLowerCase();\r\n        const key = `${normalizedStock}-${order.dealer_id || 'no-dealer'}`;\r\n        if (!stockGroups.has(key)) {\r\n          stockGroups.set(key, []);\r\n        }\r\n        stockGroups.get(key)!.push(order);\r\n      }\r\n      \r\n      // Group by VIN\r\n      if (order.vehicleVin && order.vehicleVin.trim()) {\r\n        const normalizedVin = order.vehicleVin.trim().toLowerCase().replace(/[-\\s]/g, '');\r\n        const key = `${normalizedVin}-${order.dealer_id || 'no-dealer'}`;\r\n        if (!vinGroups.has(key)) {\r\n          vinGroups.set(key, []);\r\n        }\r\n        vinGroups.get(key)!.push(order);\r\n      }\r\n    });\r\n    \r\n    // Process stock duplicates\r\n    stockGroups.forEach((groupOrders, key) => {\r\n      if (groupOrders.length > 1) {\r\n        groupOrders.forEach(order => {\r\n          stockDuplicates.set(order.id, groupOrders.length);\r\n          stockDuplicateOrders.set(order.id, groupOrders);\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Process VIN duplicates\r\n    vinGroups.forEach((groupOrders, key) => {\r\n      if (groupOrders.length > 1) {\r\n        groupOrders.forEach(order => {\r\n          vinDuplicates.set(order.id, groupOrders.length);\r\n          vinDuplicateOrders.set(order.id, groupOrders);\r\n        });\r\n      }\r\n    });\r\n    \r\n    const endTime = performance.now();\r\n    const duplicateStats = {\r\n      stockDuplicateGroups: stockGroups.size,\r\n      vinDuplicateGroups: vinGroups.size,\r\n      stockDuplicateOrders: stockDuplicates.size,\r\n      vinDuplicateOrders: vinDuplicates.size,\r\n      calculationTime: `${(endTime - startTime).toFixed(2)}ms`\r\n    };\r\n    \r\n    // Only log performance stats for larger datasets\r\n    if (import.meta.env.DEV && orders.length > 100) {\r\n      console.log('✅ Duplicate calculation complete:', duplicateStats);\r\n    }\r\n    \r\n    return { \r\n      stockDuplicates, \r\n      vinDuplicates, \r\n      stockDuplicateOrders, \r\n      vinDuplicateOrders,\r\n      stats: duplicateStats\r\n    };\r\n  }, [orders]);\r\n\r\n  const handleStatusChange = async (orderId: string, newStatus: string) => {\r\n    const order = orders.find(o => o.id === orderId);\r\n    if (!order) return;\r\n\r\n    try {\r\n      const success = await updateOrderStatus(orderId, newStatus, order.dealer_id?.toString() || '');\r\n      if (success) {\r\n        console.log(`Status updated for order ${orderId} to ${newStatus}`);\r\n        \r\n        // Trigger immediate refresh of order data\r\n        if (onStatusChange) {\r\n          onStatusChange(orderId, newStatus);\r\n        }\r\n        \r\n        // Dispatch custom event for real-time updates\r\n        window.dispatchEvent(new CustomEvent('orderStatusUpdated', {\r\n          detail: { orderId, newStatus, timestamp: Date.now() }\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update status:', error);\r\n    }\r\n  };\r\n\r\n  // Copy VIN to clipboard\r\n  const copyVinToClipboard = async (vin: string) => {\r\n    try {\r\n      await navigator.clipboard.writeText(vin);\r\n      toast.success('VIN copied to clipboard');\r\n    } catch (error) {\r\n      console.error('Failed to copy VIN:', error);\r\n      toast.error('Failed to copy VIN');\r\n    }\r\n  };\r\n\r\n  const formatDueDate = (date: string) => {\r\n    const orderDate = safeParseDate(date);\r\n    if (!orderDate) {\r\n      return { text: 'N/A', variant: 'secondary' as const };\r\n    }\r\n    \r\n    const today = new Date();\r\n    const diffTime = orderDate.getTime() - today.getTime();\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    if (diffDays < 0) {\r\n      return { text: `${Math.abs(diffDays)} días vencido`, variant: 'destructive' as const, className: 'bg-destructive text-destructive-foreground' };\r\n    } else if (diffDays === 0) {\r\n      return { text: t('data_table.due_today'), variant: 'secondary' as const, className: 'bg-orange-100 text-orange-800' };\r\n    } else if (diffDays === 1) {\r\n      return { text: 'Vence mañana', variant: 'secondary' as const, className: 'bg-yellow-100 text-yellow-800' };\r\n    } else {\r\n      return { text: `Vence en ${diffDays} días`, variant: 'outline' as const, className: 'border-border text-foreground' };\r\n    }\r\n  };\r\n\r\n  const paginatedOrders = orders.slice(\r\n    (currentPage - 1) * itemsPerPage,\r\n    currentPage * itemsPerPage\r\n  );\r\n\r\n  const totalPages = Math.ceil(orders.length / itemsPerPage);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className=\"border-border shadow-sm\">\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"flex items-center justify-center\">\r\n            <Loader2 className=\"w-6 h-6 animate-spin mr-2\" />\r\n            <span>{t('common.loading')}</span>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* Mobile Card Layout */}\r\n      <div className=\"block lg:hidden space-y-4\">\r\n        {paginatedOrders.map((order) => {\r\n          // Calculate attention level for row styling\r\n          const showDueDateIndicator = isTimeBasedOrder(tabType) && \r\n                                      isSameDayOrder(order.createdAt, order.dueDate) &&\r\n                                      order.status !== 'completed' && \r\n                                      order.status !== 'cancelled';\r\n          const attentionClasses = showDueDateIndicator && order.dueDate \r\n            ? getAttentionRowClasses(calculateTimeStatus(order.dueDate).attentionLevel)\r\n            : '';\r\n\r\n          return (\r\n            <Card key={order.id} className={cn(\"border-border shadow-sm\", attentionClasses)}>\r\n              <CardContent className=\"p-4\">\r\n                <div className=\"space-y-3\">\r\n                  {/* Header Row */}\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div>\r\n                      <div className=\"text-lg font-bold text-foreground\">\r\n                        {formatOrderNumber(order)}\r\n                      </div>\r\n                      <div className=\"flex items-center text-sm text-muted-foreground mt-1\">\r\n                        <Building2 className=\"w-4 h-4 mr-2 text-blue-600\" />\r\n                        <span>{order.dealershipName || 'Unknown Dealer'}</span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex flex-col items-end gap-2\">\r\n                      <StatusBadgeInteractive\r\n                        status={order.status}\r\n                        orderId={order.id}\r\n                        dealerId={order.dealer_id?.toString() || ''}\r\n                        canUpdateStatus={true}\r\n                        onStatusChange={handleStatusChange}\r\n                      />\r\n                      {/* Due Date Indicator for time-based orders */}\r\n                      {isTimeBasedOrder(tabType) && \r\n                       isSameDayOrder(order.createdAt, order.dueDate) && (\r\n                        <DueDateIndicator \r\n                          dueDate={order.dueDate}\r\n                          orderType={tabType}\r\n                          compact={false}\r\n                        />\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Vehicle and Stock Row */}\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div className={cn(\"p-2 rounded\", getDuplicateCellBackground(0))}>\r\n                      <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Vehicle</label>\r\n                      <div className=\"text-sm font-semibold text-foreground\">\r\n                        {order.vehicleYear} {order.vehicleMake} {order.vehicleModel}\r\n                      </div>\r\n                      <div className=\"relative inline-block mt-1\">\r\n                        <DuplicateTooltip\r\n                          orders={duplicateData.vinDuplicateOrders.get(order.id) || []}\r\n                          field=\"vehicleVin\"\r\n                          value={order.vehicleVin || ''}\r\n                          onOrderClick={onView}\r\n                          debug={import.meta.env.DEV}\r\n                        >\r\n                          <div \r\n                            className=\"text-xs font-mono text-muted-foreground cursor-pointer hover:text-orange-600 transition-colors\"\r\n                            onClick={() => order.vehicleVin && copyVinToClipboard(order.vehicleVin)}\r\n                            title=\"Tap to copy VIN\"\r\n                          >\r\n                            {order.vehicleVin || 'No VIN'}\r\n                          </div>\r\n                        </DuplicateTooltip>\r\n                        <DuplicateBadge count={(duplicateData.vinDuplicateOrders.get(order.id) || []).length} />\r\n                      </div>\r\n                    </div>\r\n                    <div className={cn(\"p-2 rounded\", getDuplicateCellBackground(0))}>\r\n                      <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Stock</label>\r\n                      <div className=\"relative inline-block\">\r\n                        <DuplicateTooltip\r\n                          orders={duplicateData.stockDuplicateOrders.get(order.id) || []}\r\n                          field=\"stockNumber\"\r\n                          value={order.stockNumber || ''}\r\n                          onOrderClick={onView}\r\n                          debug={import.meta.env.DEV}\r\n                        >\r\n                          <div className=\"text-sm font-semibold text-foreground cursor-pointer hover:text-blue-600 transition-colors\">\r\n                            {order.stockNumber || 'No Stock'}\r\n                          </div>\r\n                        </DuplicateTooltip>\r\n                        <DuplicateBadge count={(duplicateData.stockDuplicateOrders.get(order.id) || []).length} />\r\n                      </div>\r\n                      <div className=\"flex items-center text-xs text-muted-foreground mt-1\">\r\n                        <User className=\"w-3 h-3 mr-1 text-green-600\" />\r\n                        {order.assignedTo || 'Unassigned'}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Due Date Row */}\r\n                  <div>\r\n                    <label className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">Due</label>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div className=\"text-sm font-semibold\">\r\n                        {order.dueTime || '12:00 PM'} - {order.dueDate ? new Date(order.dueDate).toLocaleDateString() : 'No date'}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Actions Row */}\r\n                  <div className=\"flex items-center justify-end gap-2 pt-2 border-t\">\r\n                    <Button \r\n                      variant=\"ghost\" \r\n                      size=\"sm\"\r\n                      onClick={() => onView(order)}\r\n                      className=\"flex items-center gap-2 text-blue-600 hover:bg-blue-50 transition-all hover:scale-105\"\r\n                    >\r\n                      <Eye className=\"h-4 w-4\" />\r\n                      View\r\n                    </Button>\r\n                    \r\n                    <Button \r\n                      variant=\"ghost\" \r\n                      size=\"sm\"\r\n                      onClick={() => onEdit(order)}\r\n                      className=\"flex items-center gap-2 text-emerald-600 hover:bg-emerald-50 transition-all hover:scale-105\"\r\n                    >\r\n                      <Edit className=\"h-4 w-4\" />\r\n                      Edit\r\n                    </Button>\r\n                    \r\n                    <Button \r\n                      variant=\"ghost\" \r\n                      size=\"sm\"\r\n                      onClick={() => onDelete(order.id)}\r\n                      className=\"flex items-center gap-2 text-rose-600 hover:bg-rose-50 transition-all hover:scale-105\"\r\n                    >\r\n                      <Trash2 className=\"h-4 w-4\" />\r\n                      Delete\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n        \r\n        {/* Mobile Pagination */}\r\n        <div className=\"flex justify-center space-x-2 pt-4\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\r\n            disabled={currentPage === 1}\r\n          >\r\n            Previous\r\n          </Button>\r\n          <span className=\"flex items-center px-3 text-sm text-muted-foreground\">\r\n            Page {currentPage} of {Math.ceil(orders.length / itemsPerPage)}\r\n          </span>\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"sm\"\r\n            onClick={() => setCurrentPage(prev => Math.min(Math.ceil(orders.length / itemsPerPage), prev + 1))}\r\n            disabled={currentPage >= Math.ceil(orders.length / itemsPerPage)}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Desktop/Tablet Table Layout */}\r\n      <Card className=\"hidden lg:block border-border shadow-sm\">\r\n        <CardHeader className=\"pb-3\">\r\n          <CardTitle className=\"text-lg font-semibold\">\r\n            {orders.length} orders\r\n          </CardTitle>\r\n        </CardHeader>\r\n        \r\n        <CardContent className=\"p-0\">\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow className=\"border-border hover:bg-transparent\">\r\n                <TableHead className=\"w-16 font-medium text-foreground text-center\">#</TableHead>\r\n                <TableHead className=\"font-medium text-foreground text-center\">Order ID</TableHead>\r\n                <TableHead className=\"font-medium text-foreground text-center\">Stock</TableHead>\r\n                <TableHead className=\"font-medium text-foreground text-center\">Vehicle</TableHead>\r\n                <TableHead className=\"font-medium text-foreground text-center\">Due</TableHead>\r\n                <TableHead className=\"font-medium text-foreground text-center\">Status</TableHead>\r\n                <TableHead className=\"font-medium text-foreground text-center\">Actions</TableHead>\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {paginatedOrders.map((order, index) => {\r\n                // Calculate attention level for row styling\r\n                const showDueDateIndicator = isTimeBasedOrder(tabType) && \r\n                                            isSameDayOrder(order.createdAt, order.dueDate) &&\r\n                                            order.status !== 'completed' && \r\n                                            order.status !== 'cancelled';\r\n                const attentionClasses = showDueDateIndicator && order.dueDate \r\n                  ? getAttentionRowClasses(calculateTimeStatus(order.dueDate).attentionLevel)\r\n                  : '';\r\n\r\n                return (\r\n                  <TableRow \r\n                    key={order.id} \r\n                    className={cn(\r\n                      \"border-border transition-colors cursor-pointer hover:bg-muted/50\",\r\n                      getStatusRowColor(order.status),\r\n                      attentionClasses\r\n                    )}\r\n                    onDoubleClick={() => onView(order)}\r\n                  >\r\n                    {/* Row Number */}\r\n                    <TableCell className=\"py-4 text-center text-sm font-medium text-muted-foreground\">\r\n                      {(currentPage - 1) * itemsPerPage + index + 1}\r\n                    </TableCell>\r\n                    \r\n                    {/* Column 1: Order ID & Dealer */}\r\n                    <TableCell className=\"py-4 text-center\">\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"text-base font-bold text-foreground\">\r\n                          {formatOrderNumber(order)}\r\n                        </div>\r\n                        <div className=\"flex items-center justify-center text-sm text-muted-foreground\">\r\n                          <Building2 className=\"w-3 h-3 mr-1 text-blue-600\" />\r\n                          <span>{order.dealershipName || 'Unknown Dealer'}</span>\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n\r\n                    {/* Column 2: Stock & Assigned User */}\r\n                    <TableCell className={cn(\"py-4 text-center\", getDuplicateCellBackground((duplicateData.stockDuplicateOrders.get(order.id) || []).length))}>\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"relative inline-block\">\r\n                          <DuplicateTooltip\r\n                            orders={duplicateData.stockDuplicateOrders.get(order.id) || []}\r\n                            field=\"stockNumber\"\r\n                            value={order.stockNumber || ''}\r\n                            onOrderClick={onView}\r\n                            debug={import.meta.env.DEV}\r\n                          >\r\n                            <div className=\"text-base font-bold text-foreground cursor-pointer hover:text-blue-600 transition-colors\">\r\n                              {order.stockNumber || t('data_table.no_stock')}\r\n                            </div>\r\n                          </DuplicateTooltip>\r\n                          <DuplicateBadge count={(duplicateData.stockDuplicateOrders.get(order.id) || []).length} />\r\n                        </div>\r\n                        <div className=\"flex items-center justify-center text-sm text-muted-foreground\">\r\n                          <User className=\"w-3 h-3 mr-1 text-green-600\" />\r\n                          <span>{order.assignedTo || 'Unassigned'}</span>\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n\r\n                    {/* Column 3: Vehicle & VIN */}\r\n                    <TableCell className={cn(\"py-4 text-center\", getDuplicateCellBackground((duplicateData.vinDuplicateOrders.get(order.id) || []).length))}>\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"text-base font-bold text-foreground\">\r\n                          {order.vehicleYear} {order.vehicleMake} {order.vehicleModel}\r\n                          {order.vehicleTrim && ` (${order.vehicleTrim})`}\r\n                        </div>\r\n                        <div className=\"flex items-center justify-center text-sm text-muted-foreground\">\r\n                          <Hash className=\"w-3 h-3 mr-1 text-orange-600\" />\r\n                          <div className=\"relative inline-block\">\r\n                            <DuplicateTooltip\r\n                              orders={duplicateData.vinDuplicateOrders.get(order.id) || []}\r\n                              field=\"vehicleVin\"\r\n                              value={order.vehicleVin || ''}\r\n                              onOrderClick={onView}\r\n                              debug={import.meta.env.DEV}\r\n                            >\r\n                              <span \r\n                                className=\"font-mono text-xs cursor-pointer hover:bg-orange-50 hover:text-orange-700 px-2 py-1 rounded transition-colors\"\r\n                                onClick={() => order.vehicleVin && copyVinToClipboard(order.vehicleVin)}\r\n                                title=\"Click to copy VIN\"\r\n                              >\r\n                                {order.vehicleVin || t('data_table.vin_not_provided')}\r\n                              </span>\r\n                            </DuplicateTooltip>\r\n                            <DuplicateBadge count={(duplicateData.vinDuplicateOrders.get(order.id) || []).length} />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n\r\n                    {/* Column 4: Due Time & Date */}\r\n                    <TableCell className=\"py-4 text-center\">\r\n                      <div className=\"space-y-1\">\r\n                        <div className=\"text-base font-bold text-foreground\">\r\n                          {order.dueTime || '12:00 PM'}\r\n                        </div>\r\n                        <div className=\"flex items-center justify-center text-sm text-muted-foreground\">\r\n                          <Calendar className=\"w-3 h-3 mr-1 text-purple-600\" />\r\n                          <span>\r\n                            {order.dueDate ? new Date(order.dueDate).toLocaleDateString() : 'No date set'}\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n\r\n                    {/* Column 5: Interactive Status */}\r\n                    <TableCell className=\"py-4 text-center\">\r\n                      <div className=\"flex flex-col items-center gap-2\">\r\n                        <StatusBadgeInteractive\r\n                          status={order.status}\r\n                          orderId={order.id}\r\n                          dealerId={order.dealer_id?.toString() || ''}\r\n                          canUpdateStatus={true}\r\n                          onStatusChange={handleStatusChange}\r\n                        />\r\n                        {/* Due Date Indicator for time-based orders */}\r\n                        {showDueDateIndicator && (\r\n                          <DueDateIndicator \r\n                            dueDate={order.dueDate}\r\n                            orderType={tabType}\r\n                            compact={true}\r\n                          />\r\n                        )}\r\n                      </div>\r\n                    </TableCell>\r\n\r\n                    {/* Column 6: Chat & SMS Actions + Action Buttons */}\r\n                    <TableCell className=\"py-4 text-center\">\r\n                      <div className=\"flex items-center justify-center gap-1\">\r\n                        <ChatAndSMSActions\r\n                          orderId={order.id}\r\n                          orderNumber={order.orderNumber}\r\n                          customerPhone={order.customerPhone}\r\n                          dealerId={order.dealer_id || 1}\r\n                          variant=\"icon\"\r\n                        />\r\n                        \r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => onView(order)}\r\n                          className=\"h-8 w-8 p-0 transition-all hover:scale-105\"\r\n                          title=\"View Details\"\r\n                        >\r\n                          <Eye className=\"h-4 w-4 text-blue-600\" />\r\n                        </Button>\r\n                        \r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => onEdit(order)}\r\n                          className=\"h-8 w-8 p-0 transition-all hover:scale-105\"\r\n                          title=\"Edit Order\"\r\n                        >\r\n                          <Edit className=\"h-4 w-4 text-emerald-600\" />\r\n                        </Button>\r\n                        \r\n                        <Button \r\n                          variant=\"ghost\" \r\n                          size=\"sm\"\r\n                          onClick={() => onDelete(order.id)}\r\n                          className=\"h-8 w-8 p-0 transition-all hover:scale-105\"\r\n                          title=\"Delete Order\"\r\n                        >\r\n                          <Trash2 className=\"h-4 w-4 text-rose-600\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n              \r\n              {paginatedOrders.length === 0 && (\r\n                <TableRow>\r\n                  <TableCell colSpan={7} className=\"text-center py-12 text-muted-foreground\">\r\n                    <div className=\"flex flex-col items-center space-y-2\">\r\n                      <Car className=\"w-12 h-12 text-muted-foreground/50\" />\r\n                      <p className=\"text-lg font-medium\">No se encontraron órdenes</p>\r\n                      <p className=\"text-sm\">Intenta ajustar los filtros o crear una nueva orden</p>\r\n                    </div>\r\n                  </TableCell>\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </CardContent>\r\n      </Card>\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\OrderDetailModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9191,9194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9191,9194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { safeFormatDate } from '@/utils/dateUtils';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { \r\n  X, \r\n  User, \r\n  Car, \r\n  Phone, \r\n  Mail, \r\n  Calendar, \r\n  Clock, \r\n  DollarSign, \r\n  Package,\r\n  MapPin,\r\n  FileText,\r\n  Edit,\r\n  Trash2\r\n} from 'lucide-react';\r\nimport { StatusBadgeInteractive } from '@/components/StatusBadgeInteractive';\r\nimport { Order } from '@/hooks/useOrderManagement';\r\n\r\ninterface OrderDetailModalProps {\r\n  order: Order | null;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onEdit: (order: Order) => void;\r\n  onDelete?: (orderId: string) => void;\r\n  onStatusChange?: (orderId: string, newStatus: string) => void;\r\n}\r\n\r\nexport function OrderDetailModal({\r\n  order,\r\n  open,\r\n  onClose,\r\n  onEdit,\r\n  onDelete,\r\n  onStatusChange\r\n}: OrderDetailModalProps) {\r\n  const { t } = useTranslation();\r\n\r\n  if (!order) return null;\r\n\r\n  const handleStatusChange = (newStatus: string) => {\r\n    if (onStatusChange) {\r\n      onStatusChange(order.id, newStatus);\r\n    }\r\n  };\r\n\r\n  const getPriorityBadgeVariant = (priority?: string) => {\r\n    switch (priority?.toLowerCase()) {\r\n      case 'high': return 'destructive';\r\n      case 'medium': return 'default';\r\n      case 'low': return 'secondary';\r\n      default: return 'outline';\r\n    }\r\n  };\r\n\r\n  const formatDate = (dateString?: string) => {\r\n    return safeFormatDate(dateString);\r\n  };\r\n\r\n  const formatCurrency = (amount?: number) => {\r\n    if (!amount) return '$0.00';\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD'\r\n    }).format(amount);\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-6xl max-h-[95vh] w-[95vw] p-0 overflow-hidden\">\r\n        {/* Header */}\r\n        <DialogHeader className=\"flex flex-row items-center justify-between p-6 pb-4 border-b\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <DialogTitle className=\"text-2xl font-bold\">\r\n              Orden #{order.customOrderNumber}\r\n            </DialogTitle>\r\n            <Badge variant={order.status === 'completed' ? 'default' : order.status === 'pending' ? 'secondary' : 'outline'}>\r\n              {order.status}\r\n            </Badge>\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => onEdit(order)}\r\n              className=\"gap-2\"\r\n            >\r\n              <Edit className=\"w-4 h-4\" />\r\n              {t('common.edit')}\r\n            </Button>\r\n            {onDelete && (\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => onDelete(order.id)}\r\n                className=\"gap-2 text-destructive hover:text-destructive\"\r\n              >\r\n                <Trash2 className=\"w-4 h-4\" />\r\n                {t('common.delete')}\r\n              </Button>\r\n            )}\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={onClose}\r\n              className=\"p-2\"\r\n            >\r\n              <X className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n        </DialogHeader>\r\n\r\n        {/* Content */}\r\n        <div className=\"flex-1 overflow-y-auto p-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n            {/* Left Column - Customer & Vehicle Info */}\r\n            <div className=\"lg:col-span-2 space-y-6\">\r\n              {/* Customer Information */}\r\n              <Card>\r\n                <CardHeader className=\"pb-4\">\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <User className=\"w-5 h-5\" />\r\n                    {t('orders.customerInfo')}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <label className=\"text-sm font-medium text-muted-foreground\">\r\n                        {t('orders.customerName')}\r\n                      </label>\r\n                      <p className=\"text-lg font-medium\">{order.customerName}</p>\r\n                    </div>\r\n                    {order.customerEmail && (\r\n                      <div>\r\n                        <label className=\"text-sm font-medium text-muted-foreground\">\r\n                          {t('orders.customerEmail')}\r\n                        </label>\r\n                        <p className=\"flex items-center gap-2\">\r\n                          <Mail className=\"w-4 h-4\" />\r\n                          {order.customerEmail}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                    {order.customerPhone && (\r\n                      <div>\r\n                        <label className=\"text-sm font-medium text-muted-foreground\">\r\n                          {t('orders.customerPhone')}\r\n                        </label>\r\n                        <p className=\"flex items-center gap-2\">\r\n                          <Phone className=\"w-4 h-4\" />\r\n                          {order.customerPhone}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Vehicle Information */}\r\n              <Card>\r\n                <CardHeader className=\"pb-4\">\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Car className=\"w-5 h-5\" />\r\n                    {t('orders.vehicleInfo')}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\r\n                    {order.vehicleYear && (\r\n                      <div>\r\n                        <label className=\"text-sm font-medium text-muted-foreground\">\r\n                          {t('orders.year')}\r\n                        </label>\r\n                        <p className=\"font-medium\">{order.vehicleYear}</p>\r\n                      </div>\r\n                    )}\r\n                    {order.vehicleMake && (\r\n                      <div>\r\n                        <label className=\"text-sm font-medium text-muted-foreground\">\r\n                          {t('orders.make')}\r\n                        </label>\r\n                        <p className=\"font-medium\">{order.vehicleMake}</p>\r\n                      </div>\r\n                    )}\r\n                    {order.vehicleModel && (\r\n                      <div>\r\n                        <label className=\"text-sm font-medium text-muted-foreground\">\r\n                          {t('orders.model')}\r\n                        </label>\r\n                        <p className=\"font-medium\">{order.vehicleModel}</p>\r\n                      </div>\r\n                    )}\r\n                    {order.vehicleVin && (\r\n                      <div className=\"md:col-span-2\">\r\n                        <label className=\"text-sm font-medium text-muted-foreground\">\r\n                          VIN\r\n                        </label>\r\n                        <p className=\"font-mono text-sm bg-muted px-2 py-1 rounded\">\r\n                          {order.vehicleVin}\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                    {order.stockNumber && (\r\n                      <div>\r\n                        <label className=\"text-sm font-medium text-muted-foreground\">\r\n                          {t('orders.stockNumber')}\r\n                        </label>\r\n                        <p className=\"font-medium\">{order.stockNumber}</p>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {order.vehicleInfo && (\r\n                    <div>\r\n                      <label className=\"text-sm font-medium text-muted-foreground\">\r\n                        {t('orders.additionalInfo')}\r\n                      </label>\r\n                      <p className=\"text-sm text-muted-foreground mt-1\">\r\n                        {order.vehicleInfo}\r\n                      </p>\r\n                    </div>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Services */}\r\n              <Card>\r\n                <CardHeader className=\"pb-4\">\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Package className=\"w-5 h-5\" />\r\n                    {t('orders.services')}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  {order.services && order.services.length > 0 ? (\r\n                    <div className=\"space-y-2\">\r\n                      {order.services.map((service: any, index: number) => (\r\n                        <div key={index} className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\r\n                          <div>\r\n                            <p className=\"font-medium\">{service.name || `Service ${index + 1}`}</p>\r\n                            {service.description && (\r\n                              <p className=\"text-sm text-muted-foreground\">{service.description}</p>\r\n                            )}\r\n                          </div>\r\n                          {service.price && (\r\n                            <p className=\"font-medium\">{formatCurrency(service.price)}</p>\r\n                          )}\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  ) : (\r\n                    <p className=\"text-muted-foreground italic\">\r\n                      {t('orders.noServices')}\r\n                    </p>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Notes */}\r\n              {order.notes && (\r\n                <Card>\r\n                  <CardHeader className=\"pb-4\">\r\n                    <CardTitle className=\"flex items-center gap-2\">\r\n                      <FileText className=\"w-5 h-5\" />\r\n                      {t('orders.notes')}\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <p className=\"whitespace-pre-wrap text-sm\">\r\n                      {order.notes}\r\n                    </p>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </div>\r\n\r\n            {/* Right Column - Order Details & Timeline */}\r\n            <div className=\"space-y-6\">\r\n              {/* Order Summary */}\r\n              <Card>\r\n                <CardHeader className=\"pb-4\">\r\n                  <CardTitle>Resumen de la Orden</CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-muted-foreground\">Estado:</span>\r\n                    <Badge variant={order.status === 'completed' ? 'default' : 'secondary'}>\r\n                      {order.status}\r\n                    </Badge>\r\n                  </div>\r\n\r\n                  {order.priority && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-muted-foreground\">Prioridad:</span>\r\n                      <Badge variant={getPriorityBadgeVariant(order.priority)}>\r\n                        {order.priority}\r\n                      </Badge>\r\n                    </div>\r\n                  )}\r\n\r\n                  {order.totalAmount && (\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-muted-foreground\">Total:</span>\r\n                      <span className=\"text-lg font-bold flex items-center gap-1\">\r\n                        <DollarSign className=\"w-4 h-4\" />\r\n                        {formatCurrency(order.totalAmount)}\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n\r\n                  <Separator />\r\n\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                      <Calendar className=\"w-4 h-4 text-muted-foreground\" />\r\n                      <span className=\"text-muted-foreground\">Creada:</span>\r\n                      <span>{formatDate(order.createdAt)}</span>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                      <Clock className=\"w-4 h-4 text-muted-foreground\" />\r\n                      <span className=\"text-muted-foreground\">Actualizada:</span>\r\n                      <span>{formatDate(order.updatedAt)}</span>\r\n                    </div>\r\n\r\n                    {order.dueDate && (\r\n                      <div className=\"flex items-center gap-2 text-sm\">\r\n                        <Calendar className=\"w-4 h-4 text-muted-foreground\" />\r\n                        <span className=\"text-muted-foreground\">Vencimiento:</span>\r\n                        <span>{formatDate(order.dueDate)}</span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Assignment Info */}\r\n              {order.assignedTo && (\r\n                <Card>\r\n                  <CardHeader className=\"pb-4\">\r\n                    <CardTitle>Asignación</CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <User className=\"w-4 h-4 text-muted-foreground\" />\r\n                      <span className=\"text-muted-foreground\">Asignado a:</span>\r\n                      <span className=\"font-medium\">{order.assignedTo}</span>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\OrderFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[611,614],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[611,614],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[646,649],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[646,649],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[908,911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[908,911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\r\nimport { ChevronDown, X, Search } from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface FilterProps {\r\n  filters: any;\r\n  onFiltersChange: (filters: any) => void;\r\n  onClose: () => void;\r\n}\r\n\r\nexport function OrderFilters({ filters, onFiltersChange, onClose }: FilterProps) {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const { t } = useTranslation();\r\n\r\n  const handleFilterChange = (key: string, value: any) => {\r\n    // Convert \"all\" back to empty string for filter logic\r\n    const filterValue = value === \"all\" ? \"\" : value;\r\n    onFiltersChange({ ...filters, [key]: filterValue });\r\n  };\r\n\r\n  const handleClearFilters = () => {\r\n    onFiltersChange({});\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <Collapsible open={isOpen} onOpenChange={setIsOpen}>\r\n        <CollapsibleTrigger asChild>\r\n          <CardHeader className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\r\n                <Search className=\"w-5 h-5\" />\r\n                {t('filters.global_filters')}\r\n              </CardTitle>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Button \r\n                  variant=\"ghost\" \r\n                  size=\"sm\" \r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleClearFilters();\r\n                  }}\r\n                >\r\n                  {t('filters.clear')}\r\n                </Button>\r\n                <Button \r\n                  variant=\"ghost\" \r\n                  size=\"sm\" \r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    onClose();\r\n                  }}\r\n                >\r\n                  <X className=\"w-4 h-4\" />\r\n                </Button>\r\n                <ChevronDown className={`w-4 h-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} />\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n        </CollapsibleTrigger>\r\n\r\n        <CollapsibleContent>\r\n          <CardContent className=\"space-y-6\">\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              {/* Search */}\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"search\">{t('filters.general_search')}</Label>\r\n                <Input\r\n                  id=\"search\"\r\n                  placeholder={t('filters.search_placeholder')}\r\n                  value={filters.search || ''}\r\n                  onChange={(e) => handleFilterChange('search', e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              {/* Status */}\r\n              <div className=\"space-y-2\">\r\n                <Label>{t('filters.status')}</Label>\r\n                <Select \r\n                  value={filters.status || 'all'} \r\n                  onValueChange={(value) => handleFilterChange('status', value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder={t('filters.all_statuses')} />\r\n                  </SelectTrigger>\r\n                   <SelectContent className=\"z-50 bg-popover border-border\">\r\n                     <SelectItem value=\"all\">{t('filters.all_statuses')}</SelectItem>\r\n                     <SelectItem value=\"pending\">{t('filters.pending')}</SelectItem>\r\n                     <SelectItem value=\"in_progress\">{t('filters.in_progress')}</SelectItem>\r\n                     <SelectItem value=\"completed\">{t('filters.completed')}</SelectItem>\r\n                     <SelectItem value=\"cancelled\">{t('filters.cancelled')}</SelectItem>\r\n                   </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              {/* Client */}\r\n              <div className=\"space-y-2\">\r\n                <Label>{t('filters.client')}</Label>\r\n                <Select \r\n                  value={filters.client || 'all'} \r\n                  onValueChange={(value) => handleFilterChange('client', value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder={t('filters.all_clients')} />\r\n                  </SelectTrigger>\r\n                   <SelectContent className=\"z-50 bg-popover border-border\">\r\n                     <SelectItem value=\"all\">{t('filters.all_clients')}</SelectItem>\r\n                     <SelectItem value=\"client1\">Cliente 1</SelectItem>\r\n                     <SelectItem value=\"client2\">Cliente 2</SelectItem>\r\n                   </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              {/* Service */}\r\n              <div className=\"space-y-2\">\r\n                <Label>{t('filters.service')}</Label>\r\n                <Select \r\n                  value={filters.service || 'all'} \r\n                  onValueChange={(value) => handleFilterChange('service', value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder={t('filters.all_services')} />\r\n                  </SelectTrigger>\r\n                   <SelectContent className=\"z-50 bg-popover border-border\">\r\n                     <SelectItem value=\"all\">{t('filters.all_services')}</SelectItem>\r\n                     <SelectItem value=\"detail\">{t('filters.detail')}</SelectItem>\r\n                     <SelectItem value=\"wash\">{t('filters.wash')}</SelectItem>\r\n                     <SelectItem value=\"recon\">{t('filters.recon')}</SelectItem>\r\n                   </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n              {/* Date From */}\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"dateFrom\">{t('filters.date_from')}</Label>\r\n                <Input\r\n                  id=\"dateFrom\"\r\n                  type=\"date\"\r\n                  value={filters.dateFrom || ''}\r\n                  onChange={(e) => handleFilterChange('dateFrom', e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              {/* Date To */}\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"dateTo\">{t('filters.date_to')}</Label>\r\n                <Input\r\n                  id=\"dateTo\"\r\n                  type=\"date\"\r\n                  value={filters.dateTo || ''}\r\n                  onChange={(e) => handleFilterChange('dateTo', e.target.value)}\r\n                />\r\n              </div>\r\n\r\n              {/* Make */}\r\n              <div className=\"space-y-2\">\r\n                <Label>{t('filters.make')}</Label>\r\n                <Select \r\n                  value={filters.make || 'all'} \r\n                  onValueChange={(value) => handleFilterChange('make', value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder={t('filters.all_makes')} />\r\n                  </SelectTrigger>\r\n                   <SelectContent className=\"z-50 bg-popover border-border\">\r\n                     <SelectItem value=\"all\">{t('filters.all_makes')}</SelectItem>\r\n                     <SelectItem value=\"honda\">Honda</SelectItem>\r\n                     <SelectItem value=\"toyota\">Toyota</SelectItem>\r\n                     <SelectItem value=\"ford\">Ford</SelectItem>\r\n                     <SelectItem value=\"chevrolet\">Chevrolet</SelectItem>\r\n                   </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              {/* Model */}\r\n              <div className=\"space-y-2\">\r\n                <Label>{t('filters.model')}</Label>\r\n                <Select \r\n                  value={filters.model || 'all'} \r\n                  onValueChange={(value) => handleFilterChange('model', value)}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder={t('filters.all_models')} />\r\n                  </SelectTrigger>\r\n                   <SelectContent className=\"z-50 bg-popover border-border\">\r\n                     <SelectItem value=\"all\">{t('filters.all_models')}</SelectItem>\r\n                     <SelectItem value=\"accord\">Accord</SelectItem>\r\n                     <SelectItem value=\"camry\">Camry</SelectItem>\r\n                     <SelectItem value=\"f150\">F-150</SelectItem>\r\n                   </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Actions */}\r\n            <div className=\"flex justify-between items-center pt-4 border-t\">\r\n              <div className=\"text-sm text-muted-foreground\">\r\n                {t('filters.filters_apply_all_tabs')}\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <Button variant=\"outline\" onClick={handleClearFilters}>\r\n                  {t('filters.clear_filters')}\r\n                </Button>\r\n                <Button onClick={onClose}>\r\n                  {t('filters.apply_filters')}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </CollapsibleContent>\r\n      </Collapsible>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\OrderModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2043,2046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2043,2046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2113,2116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2113,2116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3784,3787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3784,3787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3800,3803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3800,3803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3999,4002],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3999,4002],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4019,4022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4019,4022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4335,4338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4335,4338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":236,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8809,8812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8809,8812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":305,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10899,10902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10899,10902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":430,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":430,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15652,15655],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15652,15655],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":472,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":472,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17897,17900],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17897,17900],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":498,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19224,19227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19224,19227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":655,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":655,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[27120,27123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[27120,27123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { safeParseDate } from '@/utils/dateUtils';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Loader2, Zap, AlertCircle } from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { usePermissionContext } from '@/contexts/PermissionContext';\r\nimport { canViewPricing } from '@/utils/permissions';\r\nimport { useVinDecoding } from '@/hooks/useVinDecoding';\r\nimport { DueDateTimePicker } from '@/components/ui/due-date-time-picker';\r\nimport { VinInputWithScanner } from '@/components/ui/vin-input-with-scanner';\r\n\r\ninterface OrderFormData {\r\n  // Order identification\r\n  orderNumber: string;\r\n  orderType: string;\r\n  status: string;\r\n  \r\n  // Customer information (vehicle owner)\r\n  customerName: string;\r\n  \r\n  // Vehicle information\r\n  vehicleVin: string;\r\n  vehicleYear: string;\r\n  vehicleMake: string;\r\n  vehicleModel: string;\r\n  vehicleInfo: string;\r\n  stockNumber: string;\r\n  \r\n  // Assignment information (employee responsible)\r\n  assignedGroupId?: string;\r\n  assignedContactId?: string;\r\n  salesperson?: string;\r\n  \r\n  // Order details\r\n  notes: string;\r\n  internalNotes?: string;\r\n  priority?: string;\r\n  dueDate?: Date;\r\n  slaDeadline?: Date;\r\n  scheduledDate?: Date;\r\n  scheduledTime?: string;\r\n}\r\n\r\ninterface OrderModalProps {\r\n  order?: any;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onSave: (orderData: any) => void;\r\n}\r\n\r\nexport const OrderModal: React.FC<OrderModalProps> = ({ order, open, onClose, onSave }) => {\r\n  const { t } = useTranslation();\r\n  const { roles } = usePermissionContext();\r\n  const { decodeVin, loading: vinLoading, error: vinError } = useVinDecoding();\r\n\r\n  // Form state\r\n  const [formData, setFormData] = useState<OrderFormData>({\r\n    orderNumber: '',\r\n    customerName: '',\r\n    vehicleVin: '',\r\n    vehicleYear: '',\r\n    vehicleMake: '',\r\n    vehicleModel: '',\r\n    vehicleInfo: '',\r\n    stockNumber: '',\r\n    orderType: 'sales',\r\n    status: 'pending',\r\n    assignedGroupId: '',\r\n    assignedContactId: '',\r\n    salesperson: '',\r\n    notes: '',\r\n    internalNotes: '',\r\n    priority: 'normal',\r\n    dueDate: undefined,\r\n    slaDeadline: undefined,\r\n    scheduledDate: undefined,\r\n    scheduledTime: ''\r\n  });\r\n\r\n  const [selectedDealership, setSelectedDealership] = useState('');\r\n  const [selectedAssignedTo, setSelectedAssignedTo] = useState('');\r\n  const [dealerships, setDealerships] = useState([]);\r\n  const [assignedUsers, setAssignedUsers] = useState([]);\r\n  const [services, setServices] = useState([]);\r\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [vinDecoded, setVinDecoded] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\r\n\r\n  const canViewPrices = canViewPricing(roles);\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      fetchDealerships();\r\n      \r\n      if (order) {\r\n        // Helper function to safely extract field values with fallbacks\r\n        const getFieldValue = (camelCase: any, snakeCase: any, defaultValue = '') => {\r\n          return camelCase ?? snakeCase ?? defaultValue;\r\n        };\r\n\r\n        // Helper function to safely parse dates\r\n        const parseDateField = (camelCaseDate: any, snakeCaseDate: any) => {\r\n          const dateValue = camelCaseDate || snakeCaseDate;\r\n          if (!dateValue) return undefined;\r\n          const parsed = safeParseDate(dateValue);\r\n          return parsed || undefined;\r\n        };\r\n\r\n        // Helper function to safely convert to string\r\n        const toStringValue = (value: any) => {\r\n          if (value === null || value === undefined) return '';\r\n          return value.toString();\r\n        };\r\n\r\n        setFormData({\r\n          // Basic order info\r\n          orderNumber: getFieldValue(order.orderNumber, order.order_number),\r\n          orderType: getFieldValue(order.orderType, order.order_type, 'sales'),\r\n          status: getFieldValue(order.status, order.status, 'pending'),\r\n          priority: getFieldValue(order.priority, order.priority, 'normal'),\r\n          \r\n          // Customer information\r\n          customerName: getFieldValue(order.customerName, order.customer_name),\r\n          \r\n          // Vehicle information - handle both individual and consolidated fields\r\n          vehicleVin: getFieldValue(order.vehicleVin, order.vehicle_vin),\r\n          vehicleYear: toStringValue(getFieldValue(order.vehicleYear, order.vehicle_year)),\r\n          vehicleMake: getFieldValue(order.vehicleMake, order.vehicle_make),\r\n          vehicleModel: getFieldValue(order.vehicleModel, order.vehicle_model),\r\n          vehicleInfo: getFieldValue(order.vehicleInfo, order.vehicle_info),\r\n          stockNumber: getFieldValue(order.stockNumber, order.stock_number),\r\n          \r\n          // Assignment information\r\n          assignedGroupId: getFieldValue(order.assignedGroupId, order.assigned_group_id),\r\n          assignedContactId: getFieldValue(order.assignedContactId, order.assigned_contact_id),\r\n          salesperson: getFieldValue(order.salesperson, order.salesperson),\r\n          \r\n          // Notes\r\n          notes: getFieldValue(order.notes, order.notes),\r\n          internalNotes: getFieldValue(order.internalNotes, order.internal_notes),\r\n          \r\n          // Date fields - handle proper parsing\r\n          dueDate: parseDateField(order.dueDate, order.due_date),\r\n          slaDeadline: parseDateField(order.slaDeadline, order.sla_deadline),\r\n          scheduledDate: parseDateField(order.scheduledDate, order.scheduled_date),\r\n          scheduledTime: getFieldValue(order.scheduledTime, order.scheduled_time)\r\n        });\r\n\r\n        // Set related data with proper fallbacks\r\n        setSelectedServices(Array.isArray(order.services) ? order.services : []);\r\n        setSelectedDealership(toStringValue(getFieldValue(order.dealerId, order.dealer_id)));\r\n        setSelectedAssignedTo(toStringValue(getFieldValue(order.assignedGroupId, order.assigned_group_id)));\r\n      } else {\r\n        // Reset form for new order\r\n        setFormData({\r\n          orderNumber: '',\r\n          customerName: '',\r\n          vehicleVin: '',\r\n          vehicleYear: '',\r\n          vehicleMake: '',\r\n          vehicleModel: '',\r\n          vehicleInfo: '',\r\n          stockNumber: '',\r\n          orderType: 'sales',\r\n          status: 'pending',\r\n          assignedGroupId: '',\r\n          assignedContactId: '',\r\n          salesperson: '',\r\n          notes: '',\r\n          internalNotes: '',\r\n          priority: 'normal',\r\n          dueDate: undefined,\r\n          slaDeadline: undefined,\r\n          scheduledDate: undefined,\r\n          scheduledTime: ''\r\n        });\r\n        setSelectedServices([]);\r\n        setSelectedDealership('');\r\n        setSelectedAssignedTo('');\r\n      }\r\n    }\r\n  }, [order, open]);\r\n\r\n  const fetchDealerships = async () => {\r\n    try {\r\n      const { data: user } = await supabase.auth.getUser();\r\n      if (!user.user) return;\r\n\r\n      const { data, error } = await supabase.rpc('get_user_accessible_dealers', {\r\n        user_uuid: user.user.id\r\n      });\r\n\r\n      if (error) throw error;\r\n      setDealerships(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching dealerships:', error);\r\n    }\r\n  };\r\n\r\n  const fetchDealerData = async (dealershipId: string) => {\r\n    if (!dealershipId) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      // Get users from dealer memberships with their profiles\r\n      const [usersResult, servicesResult] = await Promise.all([\r\n        supabase\r\n          .from('dealer_memberships')\r\n          .select(`\r\n            profiles!inner (\r\n              id,\r\n              first_name,\r\n              last_name,\r\n              email\r\n            )\r\n          `)\r\n          .eq('dealer_id', parseInt(dealershipId))\r\n          .eq('is_active', true),\r\n        supabase\r\n          .rpc('get_dealer_services_for_user', { p_dealer_id: parseInt(dealershipId) })\r\n      ]);\r\n\r\n      if (usersResult.data) {\r\n        setAssignedUsers(usersResult.data.map((membership: any) => ({\r\n          id: membership.profiles.id,\r\n          name: `${membership.profiles.first_name || ''} ${membership.profiles.last_name || ''}`.trim() || membership.profiles.email,\r\n          email: membership.profiles.email\r\n        })));\r\n      }\r\n\r\n      if (servicesResult.data) {\r\n        setServices(servicesResult.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching dealer data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDealershipChange = (dealershipId: string) => {\r\n    setSelectedDealership(dealershipId);\r\n    setSelectedAssignedTo('');\r\n    setAssignedUsers([]);\r\n    setServices([]);\r\n    setSelectedServices([]);\r\n    \r\n    if (dealershipId) {\r\n      fetchDealerData(dealershipId);\r\n    }\r\n  };\r\n\r\n  const handleAssignedToChange = (groupId: string) => {\r\n    setSelectedAssignedTo(groupId);\r\n    // Update assignment in form data - do NOT touch customerName\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      assignedGroupId: groupId\r\n    }));\r\n  };\r\n\r\n  const handleVinChange = async (vin: string) => {\r\n    handleInputChange('vehicleVin', vin);\r\n    \r\n    if (vin.length === 17 && !vinDecoded) {\r\n      const vehicleData = await decodeVin(vin);\r\n      if (vehicleData) {\r\n        // Update both individual fields (for filtering) and consolidated vehicle_info (primary field)\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          vehicleYear: vehicleData.year,\r\n          vehicleMake: vehicleData.make,\r\n          vehicleModel: vehicleData.model,\r\n          vehicleInfo: vehicleData.vehicleInfo // Consolidated field from VIN service\r\n        }));\r\n        setVinDecoded(true);\r\n      }\r\n    } else if (vin.length !== 17) {\r\n      setVinDecoded(false);\r\n      // Clear VIN-derived data when VIN becomes invalid\r\n      if (vin.length === 0) {\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          vehicleYear: '',\r\n          vehicleMake: '',\r\n          vehicleModel: '',\r\n          vehicleInfo: ''\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: any) => {\r\n    setFormData(prev => {\r\n      const newData = { ...prev, [field]: value };\r\n      \r\n      // If individual vehicle fields are manually changed, update consolidated vehicle_info\r\n      if (['vehicleYear', 'vehicleMake', 'vehicleModel'].includes(field)) {\r\n        const year = field === 'vehicleYear' ? value : prev.vehicleYear;\r\n        const make = field === 'vehicleMake' ? value : prev.vehicleMake;\r\n        const model = field === 'vehicleModel' ? value : prev.vehicleModel;\r\n        \r\n        // Build consolidated vehicle_info only if we have year, make, and model\r\n        if (year && make && model) {\r\n          newData.vehicleInfo = `${year} ${make} ${model}`;\r\n        } else if (!year && !make && !model) {\r\n          newData.vehicleInfo = '';\r\n        }\r\n      }\r\n      \r\n      return newData;\r\n    });\r\n  };\r\n\r\n  const handleServiceToggle = (serviceId: string, checked: boolean) => {\r\n    if (checked) {\r\n      setSelectedServices(prev => [...prev, serviceId]);\r\n    } else {\r\n      setSelectedServices(prev => prev.filter(id => id !== serviceId));\r\n    }\r\n  };\r\n\r\n  const transformToDbFormat = (formData: OrderFormData) => {\r\n    // Ensure vehicle_info is properly set as the primary field\r\n    let vehicleInfo = formData.vehicleInfo;\r\n    \r\n    // Fallback: if vehicle_info is empty but individual fields exist, construct it\r\n    if (!vehicleInfo && formData.vehicleYear && formData.vehicleMake && formData.vehicleModel) {\r\n      vehicleInfo = `${formData.vehicleYear} ${formData.vehicleMake} ${formData.vehicleModel}`;\r\n    }\r\n    \r\n    // Handle date formatting - ensure proper ISO string format\r\n    const formatDateForDb = (date: Date | undefined) => {\r\n      if (!date) return null;\r\n      return date instanceof Date ? date.toISOString() : null;\r\n    };\r\n    \r\n    return {\r\n      // Map frontend camelCase to backend snake_case\r\n      order_number: formData.orderNumber || null,\r\n      customer_name: formData.customerName || null,\r\n      customer_email: null, // Removed field - always null\r\n      customer_phone: null, // Removed field - always null\r\n      \r\n      // Vehicle information fields\r\n      vehicle_vin: formData.vehicleVin || null,\r\n      vehicle_year: formData.vehicleYear ? parseInt(formData.vehicleYear) : null,\r\n      vehicle_make: formData.vehicleMake || null,\r\n      vehicle_model: formData.vehicleModel || null,\r\n      vehicle_info: vehicleInfo || null, // Primary consolidated field\r\n      stock_number: formData.stockNumber || null,\r\n      \r\n      // Order management fields\r\n      order_type: formData.orderType || 'sales',\r\n      status: formData.status || 'pending',\r\n      priority: formData.priority || 'normal',\r\n      \r\n      // Assignment fields\r\n      assigned_group_id: formData.assignedGroupId || null,\r\n      assigned_contact_id: formData.assignedContactId || null,\r\n      salesperson: formData.salesperson || null,\r\n      \r\n      // Date fields - due_date is primary, sla_deadline is secondary\r\n      due_date: formatDateForDb(formData.dueDate),\r\n      sla_deadline: formatDateForDb(formData.slaDeadline),\r\n      scheduled_date: formatDateForDb(formData.scheduledDate),\r\n      scheduled_time: formData.scheduledTime || null,\r\n      \r\n      // Notes and additional info\r\n      notes: formData.notes || null,\r\n      internal_notes: formData.internalNotes || null,\r\n      \r\n      // Related data\r\n      dealer_id: selectedDealership ? parseInt(selectedDealership) : null,\r\n      services: selectedServices || []\r\n    };\r\n  };\r\n\r\n  const validateForm = (): boolean => {\r\n    const errors: Record<string, string> = {};\r\n    \r\n    // Validate required fields\r\n    if (!formData.customerName.trim()) {\r\n      errors.customerName = t('validation.customerNameRequired');\r\n    }\r\n    \r\n    // Validate VIN if provided\r\n    if (formData.vehicleVin && formData.vehicleVin.length !== 17) {\r\n      errors.vehicleVin = t('validation.vinInvalidLength');\r\n    }\r\n    \r\n    // Validate email format if provided (remove this check since customerEmail doesn't exist)\r\n    // if (formData.customerEmail && !formData.customerEmail.includes('@')) {\r\n    //   errors.customerEmail = t('validation.emailInvalid');\r\n    // }\r\n    \r\n    // Validate dealership selection\r\n    if (!selectedDealership) {\r\n      errors.dealership = t('validation.dealershipRequired');\r\n    }\r\n    \r\n    setValidationErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n    \r\n    const dbData = transformToDbFormat(formData);\r\n    onSave(dbData);\r\n  };\r\n\r\n  const totalPrice = canViewPrices ? selectedServices.reduce((total, serviceId) => {\r\n    const service = services.find((s: any) => s.id === serviceId);\r\n    return total + (service?.price || 0);\r\n  }, 0) : 0;\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-7xl max-h-[95vh] w-[95vw] p-0\" aria-describedby=\"order-modal-description\">\r\n        <DialogHeader className=\"p-6 pb-0\">\r\n          <DialogTitle className=\"text-xl font-semibold\">\r\n            {order ? t('orders.edit') : t('orders.create')}\r\n          </DialogTitle>\r\n          <div id=\"order-modal-description\" className=\"sr-only\">\r\n            {order ? t('orders.edit') : t('orders.create')}\r\n          </div>\r\n        </DialogHeader>\r\n\r\n        <ScrollArea className=\"max-h-[calc(95vh-120px)] px-6\">\r\n          <form onSubmit={handleSubmit} className=\"space-y-6 pb-6\">\r\n            {/* Single Responsive Container */}\r\n            <Card className=\"border-border\">\r\n              <CardHeader className=\"pb-4\">\r\n                <CardTitle className=\"text-lg\">{order ? t('orders.edit') : t('orders.create')}</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n              \r\n                  {/* Column 1: Dealership & Assignment Information */}\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"border-b border-border pb-3 mb-4\">\r\n                      <h3 className=\"text-base font-medium text-foreground\">{t('sales_orders.dealership')} & {t('sales_orders.assignment')}</h3>\r\n                    </div>\r\n                  <div>\r\n                    <Label htmlFor=\"dealership\">{t('sales_orders.dealership')}</Label>\r\n                    <Select \r\n                      value={selectedDealership} \r\n                      onValueChange={handleDealershipChange}\r\n                      disabled={loading}\r\n                    >\r\n                      <SelectTrigger className=\"border-input bg-background\">\r\n                        <SelectValue placeholder={loading ? t('common.loading') : t('sales_orders.select_dealership')} />\r\n                      </SelectTrigger>\r\n                       <SelectContent className=\"z-50 bg-popover border-border max-h-[200px]\">\r\n                         {dealerships.map((dealer: any) => (\r\n                           <SelectItem key={dealer.id} value={dealer.id.toString()}>\r\n                             {dealer.name} - {dealer.city}, {dealer.state}\r\n                           </SelectItem>\r\n                         ))}\r\n                       </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"assignedTo\">{t('sales_orders.assigned_to')}</Label>\r\n                    <Select \r\n                      value={selectedAssignedTo || \"\"} \r\n                      onValueChange={handleAssignedToChange} \r\n                      disabled={loading || !selectedDealership}\r\n                    >\r\n                      <SelectTrigger className=\"border-input bg-background\">\r\n                        <SelectValue placeholder={\r\n                          !selectedDealership \r\n                            ? t('sales_orders.select_dealership_first') \r\n                            : loading \r\n                              ? t('common.loading') \r\n                              : t('sales_orders.select_assignee')\r\n                        } />\r\n                      </SelectTrigger>\r\n                       <SelectContent className=\"z-50 bg-popover border-border max-h-[200px]\">\r\n                         {assignedUsers.map((user: any) => (\r\n                           <SelectItem key={user.id} value={user.id}>\r\n                             {user.name} - {user.email}\r\n                           </SelectItem>\r\n                         ))}\r\n                       </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  <Separator />\r\n\r\n                  {/* Customer Information Section */}\r\n                  <div className=\"space-y-4\">\r\n                    <Label className=\"text-sm font-medium text-foreground\">{t('orders.customer_information')}</Label>\r\n                    \r\n                    <div>\r\n                      <Label htmlFor=\"customerName\">{t('orders.customerName')}</Label>\r\n                      <Input\r\n                        id=\"customerName\"\r\n                        value={formData.customerName}\r\n                        onChange={(e) => handleInputChange('customerName', e.target.value)}\r\n                        className=\"border-input bg-background\"\r\n                        placeholder={t('common.optional')}\r\n                      />\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Label htmlFor=\"priority\">{t('orders.priority')}</Label>\r\n                      <Select \r\n                        value={formData.priority || 'normal'} \r\n                        onValueChange={(value) => handleInputChange('priority', value)}\r\n                      >\r\n                        <SelectTrigger className=\"border-input bg-background\">\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                         <SelectContent className=\"z-50 bg-popover border-border\">\r\n                           <SelectItem value=\"normal\">{t('orders.priority_normal')}</SelectItem>\r\n                           <SelectItem value=\"high\">{t('orders.priority_high')}</SelectItem>\r\n                           <SelectItem value=\"urgent\">{t('orders.priority_urgent')}</SelectItem>\r\n                         </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                  </div>\r\n\r\n                  {/* Column 2: Vehicle Information */}\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"border-b border-border pb-3 mb-4\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <h3 className=\"text-base font-medium text-foreground\">{t('orders.vehicleInfo')}</h3>\r\n                        {vinDecoded && <Badge variant=\"secondary\" className=\"bg-success text-success-foreground\">\r\n                          <Zap className=\"w-3 h-3 mr-1\" />\r\n                          {t('sales_orders.vin_decoded_successfully')}\r\n                        </Badge>}\r\n                      </div>\r\n                    </div>\r\n                  <div>\r\n                    <Label htmlFor=\"stockNumber\">{t('sales_orders.stock_number')}</Label>\r\n                    <Input\r\n                      id=\"stockNumber\"\r\n                      value={formData.stockNumber}\r\n                      onChange={(e) => handleInputChange('stockNumber', e.target.value)}\r\n                      className=\"border-input bg-background\"\r\n                      placeholder=\"ST-2025-001\"\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"vehicleVin\" className=\"flex items-center gap-2\">\r\n                      {t('orders.vin')}\r\n                      {vinLoading && <Loader2 className=\"w-4 h-4 animate-spin\" />}\r\n                    </Label>\r\n                    <VinInputWithScanner\r\n                      id=\"vehicleVin\"\r\n                      name=\"vehicleVin\"\r\n                      value={formData.vehicleVin}\r\n                      onChange={(e) => handleVinChange(e.target.value)}\r\n                      onVinScanned={handleVinChange}\r\n                      className=\"border-input bg-background font-mono\"\r\n                    />\r\n                    {vinError && (\r\n                      <div className=\"flex items-center gap-1 text-sm text-destructive mt-1\">\r\n                        <AlertCircle className=\"w-3 h-3\" />\r\n                        {vinError}\r\n                      </div>\r\n                    )}\r\n                    {formData.vehicleVin.length > 0 && formData.vehicleVin.length < 17 && (\r\n                      <div className=\"text-sm text-muted-foreground mt-1\">\r\n                        {17 - formData.vehicleVin.length} characters remaining\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Consolidated Vehicle Info */}\r\n                  <div>\r\n                    <Label htmlFor=\"vehicleInfo\">{t('sales_orders.vehicle')}</Label>\r\n                    <Input\r\n                      id=\"vehicleInfo\"\r\n                      value={formData.vehicleInfo}\r\n                      onChange={(e) => handleInputChange('vehicleInfo', e.target.value)}\r\n                      className=\"border-input bg-background\"\r\n                      placeholder=\"2025 BMW X6 (xDrive40i)\"\r\n                    />\r\n                    {!formData.vehicleInfo && (\r\n                      <div className=\"text-sm text-muted-foreground mt-1\">\r\n                        {t('sales_orders.manual_vehicle_entry')}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <Separator />\r\n\r\n                   {/* Due Date & Time Section */}\r\n                   <div className=\"space-y-4\">\r\n                     <Label className=\"text-base font-medium\">{t('due_date.title')}</Label>\r\n                     <div>\r\n                       <DueDateTimePicker\r\n                         value={formData.dueDate}\r\n                         onChange={(date) => handleInputChange('dueDate', date)}\r\n                         placeholder={t('due_date.date_placeholder')}\r\n                       />\r\n                     </div>\r\n                   </div>\r\n                  </div>\r\n\r\n                  {/* Column 3: Services & Notes */}\r\n                  <div className=\"space-y-4 xl:col-span-1 lg:col-span-2\">\r\n                    <div className=\"border-b border-border pb-3 mb-4\">\r\n                      <h3 className=\"text-base font-medium text-foreground\">{t('orders.servicesAndNotes')}</h3>\r\n                    </div>\r\n                  <div>\r\n                    <Label className=\"text-sm font-medium\">\r\n                      {t('orders.services')} \r\n                      {selectedDealership && assignedUsers.length > 0 && (\r\n                        <span className=\"text-muted-foreground ml-1\">\r\n                          ({services.length} {t('orders.available')})\r\n                        </span>\r\n                      )}\r\n                    </Label>\r\n                    \r\n                    {!selectedDealership ? (\r\n                      <div className=\"p-4 border border-dashed border-border rounded-lg text-center text-muted-foreground\">\r\n                        {t('orders.selectDealershipFirst')}\r\n                      </div>\r\n                    ) : loading ? (\r\n                      <div className=\"p-4 border border-border rounded-lg text-center\">\r\n                        <Loader2 className=\"w-4 h-4 animate-spin mx-auto mb-2\" />\r\n                        <div className=\"text-sm text-muted-foreground\">{t('common.loading')}</div>\r\n                      </div>\r\n                    ) : (\r\n                      <ScrollArea className=\"h-64 border border-border rounded-lg p-3 bg-background\">\r\n                        <div className=\"space-y-3\">\r\n                          {services.length === 0 ? (\r\n                            <div className=\"text-center text-muted-foreground py-8\">\r\n                              {t('orders.noServicesAvailable')}\r\n                            </div>\r\n                          ) : (\r\n                            services.map((service: any) => (\r\n                              <div key={service.id} className=\"flex items-start justify-between p-3 border border-border rounded-lg hover:bg-accent/10 transition-colors\">\r\n                                <div className=\"flex items-start space-x-3 flex-1\">\r\n                                  <Checkbox\r\n                                    id={service.id}\r\n                                    checked={selectedServices.includes(service.id)}\r\n                                    onCheckedChange={(checked) => handleServiceToggle(service.id, !!checked)}\r\n                                    className=\"mt-1\"\r\n                                  />\r\n                                  <div className=\"flex-1 min-w-0\">\r\n                                    <Label \r\n                                      htmlFor={service.id} \r\n                                      className=\"font-medium text-sm cursor-pointer\"\r\n                                    >\r\n                                      {service.name}\r\n                                    </Label>\r\n                                    <div className=\"flex items-center gap-2 text-xs text-muted-foreground mt-1\">\r\n                                      <Badge variant=\"outline\" className=\"text-xs px-2 py-0\">\r\n                                        {t(`services.categories.${service.category}`)}\r\n                                      </Badge>\r\n                                      {service.duration && (\r\n                                        <span>• {service.duration} {t('services.minutes')}</span>\r\n                                      )}\r\n                                    </div>\r\n                                    {service.description && (\r\n                                      <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\r\n                                        {service.description}\r\n                                      </p>\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                                {canViewPrices && service.price && (\r\n                                  <div className=\"text-right shrink-0 ml-3\">\r\n                                    <span className=\"font-semibold text-sm\">\r\n                                      ${service.price.toFixed(2)}\r\n                                    </span>\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            ))\r\n                          )}\r\n                        </div>\r\n                      </ScrollArea>\r\n                    )}\r\n                  </div>\r\n\r\n                  {canViewPrices && selectedServices.length > 0 && (\r\n                    <div className=\"mt-4 p-4 bg-muted/50 border border-border rounded-lg\">\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"font-semibold text-sm\">{t('orders.total')}</span>\r\n                        <span className=\"font-bold text-lg text-primary\">\r\n                          ${totalPrice.toFixed(2)}\r\n                        </span>\r\n                      </div>\r\n                      <div className=\"text-xs text-muted-foreground mt-1\">\r\n                        {selectedServices.length} {t('orders.servicesSelected')}\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <Separator />\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"notes\" className=\"text-sm font-medium\">{t('orders.notes')}</Label>\r\n                    <Textarea\r\n                      id=\"notes\"\r\n                      value={formData.notes}\r\n                      onChange={(e) => handleInputChange('notes', e.target.value)}\r\n                      rows={4}\r\n                      className=\"border-input bg-background resize-none\"\r\n                      placeholder={t('orders.notesPlaceholder')}\r\n                    />\r\n                  </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Separator className=\"my-6\" />\r\n\r\n            {/* Hidden fields with default values for later editing in order details */}\r\n            <div className=\"hidden\">\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"salesperson\" \r\n                value={formData.salesperson || ''} \r\n                onChange={(e) => handleInputChange('salesperson', e.target.value)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"internal_notes\" \r\n                value={formData.internalNotes || ''} \r\n                onChange={(e) => handleInputChange('internalNotes', e.target.value)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"sla_deadline\" \r\n                value={formData.slaDeadline ? formData.slaDeadline.toISOString() : ''} \r\n                onChange={(e) => handleInputChange('slaDeadline', e.target.value ? new Date(e.target.value) : undefined)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"scheduled_date\" \r\n                value={formData.scheduledDate ? formData.scheduledDate.toISOString() : ''} \r\n                onChange={(e) => handleInputChange('scheduledDate', e.target.value ? new Date(e.target.value) : undefined)}\r\n              />\r\n              <input \r\n                type=\"hidden\" \r\n                name=\"scheduled_time\" \r\n                value={formData.scheduledTime || ''} \r\n                onChange={(e) => handleInputChange('scheduledTime', e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            {/* Action Buttons */}\r\n            <div className=\"flex flex-col sm:flex-row justify-end gap-3\">\r\n              <Button \r\n                type=\"button\" \r\n                variant=\"outline\" \r\n                onClick={onClose}\r\n                className=\"border-border hover:bg-accent hover:text-accent-foreground\"\r\n              >\r\n                {t('common.cancel')}\r\n              </Button>\r\n              <Button \r\n                type=\"submit\"\r\n                disabled={!selectedDealership || !formData.customerName || selectedServices.length === 0}\r\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\r\n              >\r\n                {order ? t('common.update') : t('common.create')}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </ScrollArea>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\OrderStatusBadges.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[320,323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[320,323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[445,448],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[445,448],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Clock, AlertTriangle, CheckCircle, Calendar } from 'lucide-react';\r\n\r\ninterface OrderStatusInfo {\r\n  badge: string;\r\n  color: string;\r\n  icon: React.ReactNode;\r\n  description: string;\r\n}\r\n\r\ninterface OrderStatusBadgesProps {\r\n  order: any;\r\n}\r\n\r\nexport function OrderStatusBadges({ order }: OrderStatusBadgesProps) {\r\n  \r\n  const calculateStatusInfo = (order: any): OrderStatusInfo[] => {\r\n    const badges: OrderStatusInfo[] = [];\r\n    const now = new Date();\r\n    \r\n    // Due date analysis\r\n    if (order.due_date) {\r\n      const dueDate = new Date(order.due_date);\r\n      const hoursDiff = (dueDate.getTime() - now.getTime()) / (1000 * 60 * 60);\r\n      \r\n      if (hoursDiff > 24) {\r\n        badges.push({\r\n          badge: 'ON TIME',\r\n          color: 'bg-emerald-100 text-emerald-800 border-emerald-300',\r\n          icon: <CheckCircle className=\"h-3 w-3\" />,\r\n          description: 'Ahead of schedule'\r\n        });\r\n      } else if (hoursDiff > 0 && hoursDiff <= 24) {\r\n        badges.push({\r\n          badge: 'DUE TODAY',\r\n          color: 'bg-yellow-100 text-yellow-800 border-yellow-300',\r\n          icon: <Calendar className=\"h-3 w-3\" />,\r\n          description: 'Due within 24 hours'\r\n        });\r\n      } else if (hoursDiff > -24 && hoursDiff <= 0) {\r\n        badges.push({\r\n          badge: 'DELAYED',\r\n          color: 'bg-orange-100 text-orange-800 border-orange-300',\r\n          icon: <AlertTriangle className=\"h-3 w-3\" />,\r\n          description: 'Past due but within grace period'\r\n        });\r\n      } else {\r\n        badges.push({\r\n          badge: 'OVERDUE',\r\n          color: 'bg-red-100 text-red-800 border-red-300',\r\n          icon: <AlertTriangle className=\"h-3 w-3\" />,\r\n          description: 'Significantly overdue'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Order age analysis  \r\n    if (order.created_at) {\r\n      const createdDate = new Date(order.created_at);\r\n      const daysSinceCreated = (now.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24);\r\n      \r\n      if (daysSinceCreated < 1) {\r\n        badges.push({\r\n          badge: 'NEW',\r\n          color: 'bg-blue-100 text-blue-800 border-blue-300',\r\n          icon: <Clock className=\"h-3 w-3\" />,\r\n          description: 'Created today'\r\n        });\r\n      } else if (daysSinceCreated > 7) {\r\n        badges.push({\r\n          badge: 'AGED',\r\n          color: 'bg-gray-100 text-gray-800 border-gray-300',\r\n          icon: <Clock className=\"h-3 w-3\" />,\r\n          description: 'Order is over a week old'\r\n        });\r\n      }\r\n    }\r\n\r\n    // Priority analysis\r\n    if (order.priority === 'high' || order.priority === 'urgent') {\r\n      badges.push({\r\n        badge: 'PRIORITY',\r\n        color: 'bg-purple-100 text-purple-800 border-purple-300',\r\n        icon: <AlertTriangle className=\"h-3 w-3\" />,\r\n        description: 'High priority order'\r\n      });\r\n    }\r\n\r\n    return badges;\r\n  };\r\n\r\n  const statusBadges = calculateStatusInfo(order);\r\n\r\n  if (statusBadges.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-wrap gap-2\">\r\n      {statusBadges.map((statusInfo, index) => (\r\n        <Badge \r\n          key={index}\r\n          variant=\"outline\" \r\n          className={`${statusInfo.color} border text-xs font-medium`}\r\n          title={statusInfo.description}\r\n        >\r\n          {statusInfo.icon}\r\n          <span className=\"ml-1\">{statusInfo.badge}</span>\r\n        </Badge>\r\n      ))}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\PublicCommentsBlock.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2873,2876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2873,2876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2888,2891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2888,2891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  MessageSquare, \r\n  Send, \r\n  Paperclip, \r\n  Users,\r\n  AtSign,\r\n  Clock\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { toast } from 'sonner';\r\n\r\ninterface Comment {\r\n  id: string;\r\n  message: string;\r\n  user_name: string;\r\n  created_at: string;\r\n  user_id: string;\r\n  mentions?: string[];\r\n}\r\n\r\ninterface PublicCommentsBlockProps {\r\n  orderId: string;\r\n}\r\n\r\nexport function PublicCommentsBlock({ orderId }: PublicCommentsBlockProps) {\r\n  const { t } = useTranslation();\r\n  const { user } = useAuth();\r\n  const [comments, setComments] = useState<Comment[]>([]);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchComments();\r\n  }, [orderId]);\r\n\r\n  const fetchComments = async () => {\r\n    try {\r\n      // Use existing comments table structure (mock for now)\r\n      const mockComments: Comment[] = [\r\n        {\r\n          id: '1',\r\n          message: 'Vehicle has been prepped and is ready for service',\r\n          user_name: 'John Smith',\r\n          created_at: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\r\n          user_id: 'user1'\r\n        },\r\n        {\r\n          id: '2', \r\n          message: 'Customer requested expedited timeline for completion',\r\n          user_name: 'Sarah Johnson',\r\n          created_at: new Date(Date.now() - 15 * 60 * 1000).toISOString(),\r\n          user_id: 'user2'\r\n        }\r\n      ];\r\n      \r\n      setComments(mockComments);\r\n      \r\n      // TODO: Replace with actual database query once order_comments table is created\r\n      // const { data, error } = await supabase\r\n      //   .from('order_comments')\r\n      //   .select('*')\r\n      //   .eq('order_id', orderId)\r\n      //   .eq('is_internal', false)\r\n      //   .order('created_at', { ascending: true });\r\n      \r\n    } catch (error) {\r\n      console.error('Error fetching comments:', error);\r\n    }\r\n  };\r\n\r\n  const addComment = async () => {\r\n    if (!newMessage.trim() || !user) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('order_comments')\r\n        .insert({\r\n          order_id: orderId,\r\n          user_id: user.id,\r\n          comment_text: newMessage.trim(),\r\n          comment_type: 'public'\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      const meta: any = (user as any)?.user_metadata || {};\r\n      const displayName = meta.first_name && meta.last_name\r\n        ? `${meta.first_name} ${meta.last_name}`\r\n        : (user.email?.split('@')[0] || 'User');\r\n\r\n      const added: Comment = {\r\n        id: data.id,\r\n        message: data.comment_text,\r\n        user_name: displayName,\r\n        created_at: data.created_at,\r\n        user_id: data.user_id\r\n      };\r\n\r\n      setComments(prev => [...prev, added]);\r\n      setNewMessage('');\r\n      toast.success('Comment added');\r\n    } catch (error) {\r\n      console.error('Error adding comment:', error);\r\n      toast.error('Failed to add comment');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      addComment();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <MessageSquare className=\"h-5 w-5 text-blue-500\" />\r\n          Team Communication\r\n          <Badge variant=\"outline\" className=\"text-xs\">Public</Badge>\r\n        </CardTitle>\r\n      </CardHeader>\r\n      \r\n      <CardContent className=\"space-y-4\">\r\n        {/* Message Input */}\r\n        <div className=\"space-y-2\">\r\n          <div className=\"flex gap-2\">\r\n            <Input\r\n              placeholder=\"Add comment... @mention team members\"\r\n              value={newMessage}\r\n              onChange={(e) => setNewMessage(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n              className=\"flex-1\"\r\n            />\r\n            <Button\r\n              onClick={addComment}\r\n              disabled={loading || !newMessage.trim()}\r\n              size=\"sm\"\r\n            >\r\n              <Send className=\"h-4 w-4\" />\r\n            </Button>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-2\">\r\n            <Button variant=\"outline\" size=\"sm\" className=\"text-xs\">\r\n              <Paperclip className=\"h-3 w-3 mr-1\" />\r\n              Attach\r\n            </Button>\r\n            <Button variant=\"outline\" size=\"sm\" className=\"text-xs\">\r\n              <AtSign className=\"h-3 w-3 mr-1\" />\r\n              Mention\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Comments Thread */}\r\n        <div className=\"space-y-3 max-h-64 overflow-y-auto\">\r\n          {comments.length === 0 ? (\r\n            <div className=\"text-center py-6 text-muted-foreground\">\r\n              <MessageSquare className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n              <p className=\"text-sm\">No comments yet</p>\r\n              <p className=\"text-xs\">Start the conversation</p>\r\n            </div>\r\n          ) : (\r\n            comments.map((comment) => (\r\n              <div key={comment.id} className=\"bg-muted/30 p-3 rounded-lg\">\r\n                <div className=\"flex items-center gap-2 mb-2\">\r\n                  <Avatar className=\"w-6 h-6\">\r\n                    <AvatarFallback className=\"text-xs\">\r\n                      {comment.user_name.charAt(0).toUpperCase()}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                  <span className=\"text-sm font-medium\">{comment.user_name}</span>\r\n                  <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\r\n                    <Clock className=\"h-3 w-3\" />\r\n                    {new Date(comment.created_at).toLocaleTimeString()}\r\n                  </div>\r\n                </div>\r\n                <p className=\"text-sm whitespace-pre-wrap\">{comment.message}</p>\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n\r\n        {/* Quick Actions */}\r\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t\">\r\n          <div className=\"flex items-center gap-1\">\r\n            <Users className=\"h-3 w-3\" />\r\n            <span>{comments.length} comments</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-1\">\r\n            <MessageSquare className=\"h-3 w-3\" />\r\n            <span>Public discussion</span>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\QRCodeDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\RecentActivity.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2935,2938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2935,2938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3281,3284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3281,3284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTranslation } from 'react-i18next';\r\nimport { Clock, User, Edit, AlertCircle, CheckCircle, ArrowRight, DollarSign, Calendar, UserCheck, FileText, Package } from 'lucide-react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { useOrderActivity } from '@/hooks/useOrderActivity';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { es, enUS, ptBR } from 'date-fns/locale';\r\n\r\ninterface RecentActivityProps {\r\n  orderId: string;\r\n}\r\n\r\nexport function RecentActivity({ orderId }: RecentActivityProps) {\r\n  const { t, i18n } = useTranslation();\r\n  const { activities, loading, error } = useOrderActivity(orderId);\r\n\r\n  const getDateLocale = () => {\r\n    switch (i18n.language) {\r\n      case 'es': return es;\r\n      case 'pt-BR': return ptBR;\r\n      default: return enUS;\r\n    }\r\n  };\r\n\r\n  const getActivityIcon = (activityType: string) => {\r\n    switch (activityType) {\r\n      case 'order_created':\r\n        return <Package className=\"w-4 h-4 text-green-500\" />;\r\n      case 'status_changed':\r\n        return <CheckCircle className=\"w-4 h-4 text-blue-500\" />;\r\n      case 'priority_changed':\r\n        return <AlertCircle className=\"w-4 h-4 text-orange-500\" />;\r\n      case 'assignment_changed':\r\n        return <UserCheck className=\"w-4 h-4 text-purple-500\" />;\r\n      case 'due_date_changed':\r\n        return <Calendar className=\"w-4 h-4 text-indigo-500\" />;\r\n      case 'customer_updated':\r\n        return <User className=\"w-4 h-4 text-cyan-500\" />;\r\n      case 'services_updated':\r\n        return <Package className=\"w-4 h-4 text-pink-500\" />;\r\n      case 'amount_updated':\r\n        return <DollarSign className=\"w-4 h-4 text-emerald-500\" />;\r\n      case 'notes_updated':\r\n        return <FileText className=\"w-4 h-4 text-slate-500\" />;\r\n      default:\r\n        return <Edit className=\"w-4 h-4 text-muted-foreground\" />;\r\n    }\r\n  };\r\n\r\n  const getActivityColor = (activityType: string) => {\r\n    switch (activityType) {\r\n      case 'order_created':\r\n        return 'border-l-green-500';\r\n      case 'status_changed':\r\n        return 'border-l-blue-500';\r\n      case 'priority_changed':\r\n        return 'border-l-orange-500';\r\n      case 'assignment_changed':\r\n        return 'border-l-purple-500';\r\n      case 'due_date_changed':\r\n        return 'border-l-indigo-500';\r\n      case 'customer_updated':\r\n        return 'border-l-cyan-500';\r\n      case 'services_updated':\r\n        return 'border-l-pink-500';\r\n      case 'amount_updated':\r\n        return 'border-l-emerald-500';\r\n      case 'notes_updated':\r\n        return 'border-l-slate-500';\r\n      default:\r\n        return 'border-l-muted-foreground';\r\n    }\r\n  };\r\n\r\n  const formatUserName = (activity: any) => {\r\n    if (!activity.profiles) {\r\n      return t('activity.system');\r\n    }\r\n    \r\n    const { first_name, last_name, email } = activity.profiles;\r\n    if (first_name || last_name) {\r\n      return `${first_name || ''} ${last_name || ''}`.trim();\r\n    }\r\n    return email.split('@')[0];\r\n  };\r\n\r\n  const renderActivityDetails = (activity: any) => {\r\n    if (activity.old_value && activity.new_value && activity.field_name !== 'notes') {\r\n      return (\r\n        <div className=\"flex items-center gap-2 text-xs text-muted-foreground mt-1\">\r\n          <span className=\"bg-red-50 text-red-700 px-2 py-1 rounded border\">\r\n            {activity.old_value}\r\n          </span>\r\n          <ArrowRight className=\"w-3 h-3\" />\r\n          <span className=\"bg-green-50 text-green-700 px-2 py-1 rounded border\">\r\n            {activity.new_value}\r\n          </span>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className=\"h-full\">\r\n        <CardHeader className=\"pb-3\">\r\n          <CardTitle className=\"text-sm flex items-center gap-2\">\r\n            <Clock className=\"w-4 h-4\" />\r\n            {t('activity.recent_activity')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-3\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"flex gap-3\">\r\n                <Skeleton className=\"w-8 h-8 rounded-full\" />\r\n                <div className=\"flex-1 space-y-2\">\r\n                  <Skeleton className=\"h-3 w-3/4\" />\r\n                  <Skeleton className=\"h-2 w-1/2\" />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card className=\"h-full\">\r\n        <CardHeader className=\"pb-3\">\r\n          <CardTitle className=\"text-sm flex items-center gap-2\">\r\n            <Clock className=\"w-4 h-4\" />\r\n            {t('activity.recent_activity')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-center py-8 text-muted-foreground\">\r\n            <AlertCircle className=\"w-8 h-8 mx-auto mb-2\" />\r\n            <p className=\"text-sm\">{t('activity.error_loading')}</p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"h-full\">\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"text-sm flex items-center gap-2\">\r\n          <Clock className=\"w-4 h-4\" />\r\n          {t('activity.recent_activity')}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"p-0\">\r\n        <ScrollArea className=\"h-[400px] px-6\">\r\n          {activities.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Clock className=\"w-8 h-8 mx-auto mb-2\" />\r\n              <p className=\"text-sm\">{t('activity.no_activity')}</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-0\">\r\n              {activities.map((activity, index) => (\r\n                <div key={activity.id}>\r\n                  <div className={`flex gap-3 py-3 border-l-2 pl-4 ${getActivityColor(activity.activity_type)}`}>\r\n                    <div className=\"flex-shrink-0 mt-0.5\">\r\n                      {getActivityIcon(activity.activity_type)}\r\n                    </div>\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <div className=\"flex items-start justify-between gap-2\">\r\n                        <div className=\"flex-1 min-w-0\">\r\n                          <p className=\"text-sm font-medium\">\r\n                            {activity.description || t(`activity.${activity.activity_type}`)}\r\n                          </p>\r\n                          <div className=\"flex items-center gap-2 mt-1\">\r\n                            <span className=\"text-xs text-muted-foreground\">\r\n                              {formatUserName(activity)}\r\n                            </span>\r\n                            <span className=\"text-xs text-muted-foreground\">•</span>\r\n                            <span className=\"text-xs text-muted-foreground\">\r\n                              {formatDistanceToNow(new Date(activity.created_at), {\r\n                                addSuffix: true,\r\n                                locale: getDateLocale()\r\n                              })}\r\n                            </span>\r\n                          </div>\r\n                          {renderActivityDetails(activity)}\r\n                        </div>\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          {t(`activity.types.${activity.activity_type}`)}\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  {index < activities.length - 1 && (\r\n                    <Separator className=\"ml-10\" />\r\n                  )}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </ScrollArea>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\RecentActivityBlock.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[752,755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[752,755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":70,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2190,2193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2190,2193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { \r\n  Activity, \r\n  Clock, \r\n  Edit, \r\n  MessageSquare, \r\n  FileText,\r\n  User,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  Paperclip\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface ActivityItem {\r\n  id: string;\r\n  action: string;\r\n  description: string;\r\n  user_name: string;\r\n  created_at: string;\r\n  action_type: 'status_change' | 'comment' | 'note' | 'edit' | 'file_upload';\r\n  metadata?: any;\r\n}\r\n\r\ninterface RecentActivityBlockProps {\r\n  orderId: string;\r\n}\r\n\r\nexport function RecentActivityBlock({ orderId }: RecentActivityBlockProps) {\r\n  const { t } = useTranslation();\r\n  const [activities, setActivities] = useState<ActivityItem[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetchRecentActivity();\r\n    \r\n    // Listen for real-time activity updates\r\n    const handleActivityUpdate = () => {\r\n      fetchRecentActivity();\r\n    };\r\n    \r\n    window.addEventListener('orderStatusUpdated', handleActivityUpdate);\r\n    window.addEventListener('orderCommentAdded', handleActivityUpdate);\r\n    \r\n    return () => {\r\n      window.removeEventListener('orderStatusUpdated', handleActivityUpdate);\r\n      window.removeEventListener('orderCommentAdded', handleActivityUpdate);\r\n    };\r\n  }, [orderId, fetchRecentActivity]);\r\n\r\n  const fetchRecentActivity = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch recent activity from multiple sources\r\n      const { data: comments, error: commentsError } = await supabase\r\n        .from('order_comments')\r\n        .select('*')\r\n        .eq('order_id', orderId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(5);\r\n\r\n      if (commentsError) throw commentsError;\r\n\r\n      // Transform comments to activity items\r\n      const commentActivities: ActivityItem[] = (comments || []).map((comment: any) => ({\r\n        id: `comment-${comment.id}`,\r\n        action: comment.comment_type === 'internal' ? 'Added internal note' : 'Added comment',\r\n        description: (comment.comment_text || '').substring(0, 50) + (((comment.comment_text || '').length > 50) ? '...' : ''),\r\n        user_name: 'User',\r\n        created_at: comment.created_at,\r\n        action_type: comment.comment_type === 'internal' ? 'note' : 'comment',\r\n        metadata: comment\r\n      }));\r\n\r\n      // Add mock status changes for demo\r\n      const mockActivities: ActivityItem[] = [\r\n        {\r\n          id: 'status-1',\r\n          action: 'Changed status to In Progress',\r\n          description: 'Order moved from Pending to In Progress',\r\n          user_name: 'John Smith',\r\n          created_at: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\r\n          action_type: 'status_change'\r\n        },\r\n        {\r\n          id: 'edit-1', \r\n          action: 'Updated vehicle information',\r\n          description: 'Added VIN and updated trim information',\r\n          user_name: 'Mike Johnson',\r\n          created_at: new Date(Date.now() - 60 * 60 * 1000).toISOString(),\r\n          action_type: 'edit'\r\n        }\r\n      ];\r\n\r\n      // Combine and sort activities\r\n      const allActivities = [...commentActivities, ...mockActivities]\r\n        .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\r\n        .slice(0, 6);\r\n\r\n      setActivities(allActivities);\r\n    } catch (error) {\r\n      console.error('Error fetching recent activity:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [orderId]);\r\n\r\n  const getActivityIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'status_change':\r\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\r\n      case 'comment':\r\n        return <MessageSquare className=\"h-4 w-4 text-blue-600\" />;\r\n      case 'note':\r\n        return <FileText className=\"h-4 w-4 text-amber-600\" />;\r\n      case 'edit':\r\n        return <Edit className=\"h-4 w-4 text-purple-600\" />;\r\n      case 'file_upload':\r\n        return <Paperclip className=\"h-4 w-4 text-orange-600\" />;\r\n      default:\r\n        return <Activity className=\"h-4 w-4 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getActivityColor = (type: string) => {\r\n    switch (type) {\r\n      case 'status_change':\r\n        return 'border-l-green-500 bg-green-50/30';\r\n      case 'comment':\r\n        return 'border-l-blue-500 bg-blue-50/30';\r\n      case 'note':\r\n        return 'border-l-amber-500 bg-amber-50/30';\r\n      case 'edit':\r\n        return 'border-l-purple-500 bg-purple-50/30';\r\n      case 'file_upload':\r\n        return 'border-l-orange-500 bg-orange-50/30';\r\n      default:\r\n        return 'border-l-gray-500 bg-gray-50/30';\r\n    }\r\n  };\r\n\r\n  const getTimeAgo = (dateString: string) => {\r\n    const now = new Date();\r\n    const date = new Date(dateString);\r\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n    \r\n    if (diffInMinutes < 1) return 'Just now';\r\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\r\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\r\n  };\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Activity className=\"h-5 w-5 text-primary\" />\r\n          Recent Activity\r\n          {activities.length > 0 && (\r\n            <Badge variant=\"outline\" className=\"text-xs\">\r\n              {activities.length}\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      \r\n      <CardContent className=\"space-y-3\">\r\n        {loading ? (\r\n          <div className=\"text-center py-4\">\r\n            <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full mx-auto\"></div>\r\n            <p className=\"text-xs text-muted-foreground mt-2\">Loading activity...</p>\r\n          </div>\r\n        ) : activities.length === 0 ? (\r\n          <div className=\"text-center py-6 text-muted-foreground\">\r\n            <Activity className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n            <p className=\"text-sm\">No recent activity</p>\r\n            <p className=\"text-xs\">Activity will appear here</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-2 max-h-80 overflow-y-auto\">\r\n            {activities.map((activity) => (\r\n              <div \r\n                key={activity.id} \r\n                className={`p-3 rounded-lg border-l-2 ${getActivityColor(activity.action_type)}`}\r\n              >\r\n                <div className=\"flex items-start gap-2\">\r\n                  <div className=\"flex-shrink-0 mt-0.5\">\r\n                    {getActivityIcon(activity.action_type)}\r\n                  </div>\r\n                  \r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      <span className=\"text-sm font-medium\">{activity.action}</span>\r\n                      <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\r\n                        <Clock className=\"h-3 w-3\" />\r\n                        {getTimeAgo(activity.created_at)}\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <p className=\"text-xs text-muted-foreground mb-2\">\r\n                      {activity.description}\r\n                    </p>\r\n                    \r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Avatar className=\"w-5 h-5\">\r\n                        <AvatarFallback className=\"text-xs\">\r\n                          {activity.user_name.charAt(0).toUpperCase()}\r\n                        </AvatarFallback>\r\n                      </Avatar>\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        by {activity.user_name}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Activity Summary */}\r\n        <div className=\"pt-2 border-t text-center\">\r\n          <p className=\"text-xs text-muted-foreground\">\r\n            Last activity: {activities[0] ? getTimeAgo(activities[0].created_at) : 'None'}\r\n          </p>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\ReconOrderModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2069,2072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2069,2072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3354,3357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3354,3357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5939,5942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5939,5942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { VinInputWithScanner } from '@/components/ui/vin-input-with-scanner';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useVinDecoding } from '@/hooks/useVinDecoding';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\nimport { formatVehicleDisplay, createVehicleDisplay } from '@/utils/vehicleUtils';\r\nimport { safeParseDate } from '@/utils/dateUtils';\r\nimport { Car, Calendar, FileText, Package, Building2 } from 'lucide-react';\r\nimport type { ReconOrder } from '@/hooks/useReconOrderManagement';\r\n\r\ninterface OrderFormData {\r\n  // Order identification\r\n  orderNumber: string;\r\n  orderType: string;\r\n  status: string;\r\n  \r\n  // Customer information (vehicle owner)\r\n  customerName: string;\r\n  customerEmail?: string;\r\n  customerPhone?: string;\r\n  \r\n  // Vehicle information\r\n  vehicleVin: string;\r\n  vehicleYear: string;\r\n  vehicleMake: string;\r\n  vehicleModel: string;\r\n  vehicleInfo: string;\r\n  stockNumber: string;\r\n  \r\n  // Assignment information (employee responsible)\r\n  assignedGroupId?: string;\r\n  assignedContactId?: string;\r\n  salesperson?: string;\r\n  \r\n  // Order details\r\n  notes: string;\r\n  internalNotes?: string;\r\n  priority?: string;\r\n  dueDate?: Date;\r\n  slaDeadline?: Date;\r\n  scheduledDate?: Date;\r\n  scheduledTime?: string;\r\n  dealerId: string;\r\n}\r\n\r\ninterface ReconOrderModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onSubmit: (orderData: any) => Promise<void>;\r\n  order?: ReconOrder | null;\r\n  mode: 'create' | 'edit';\r\n}\r\n\r\nexport const ReconOrderModal: React.FC<ReconOrderModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  onSubmit,\r\n  order,\r\n  mode\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const { user } = useAuth();\r\n  const { decodeVin, loading: isDecodingVin } = useVinDecoding();\r\n  const { dealerships, loading: loadingDealerships, filterByModule } = useAccessibleDealerships();\r\n\r\n  const [formData, setFormData] = useState<OrderFormData>({\r\n    orderNumber: '',\r\n    orderType: 'recon',\r\n    status: 'pending',\r\n    customerName: '',\r\n    customerEmail: '',\r\n    customerPhone: '',\r\n    vehicleVin: '',\r\n    vehicleYear: '',\r\n    vehicleMake: '',\r\n    vehicleModel: '',\r\n    vehicleInfo: '',\r\n    stockNumber: '',\r\n    assignedGroupId: '',\r\n    assignedContactId: '',\r\n    salesperson: '',\r\n    notes: '',\r\n    internalNotes: '',\r\n    priority: 'normal',\r\n    dueDate: undefined,\r\n    slaDeadline: undefined,\r\n    scheduledDate: undefined,\r\n    scheduledTime: '',\r\n    dealerId: ''\r\n  });\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [reconDealerships, setReconDealerships] = useState<any[]>([]);\r\n\r\n  // Reset form when modal opens\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      if (mode === 'edit' && order) {\r\n        setFormData({\r\n          orderNumber: order.orderNumber || '',\r\n          orderType: 'recon',\r\n          status: order.status || 'pending',\r\n          customerName: '',\r\n          customerEmail: '',\r\n          customerPhone: '',\r\n          vehicleVin: order.vehicleVin || '',\r\n          vehicleYear: order.vehicleYear?.toString() || '',\r\n          vehicleMake: order.vehicleMake || '',\r\n          vehicleModel: order.vehicleModel || '',\r\n          vehicleInfo: order.vehicleInfo || '',\r\n          stockNumber: order.stockNumber || '',\r\n          assignedGroupId: '',\r\n          assignedContactId: order.assignedContactId || '',\r\n          salesperson: '',\r\n          notes: order.notes || '',\r\n          internalNotes: '',\r\n          priority: order.priority || 'normal',\r\n          dueDate: undefined,\r\n          slaDeadline: undefined,\r\n          scheduledDate: undefined,\r\n          scheduledTime: '',\r\n          dealerId: order.dealerId?.toString() || ''\r\n        });\r\n      } else {\r\n        setFormData({\r\n          orderNumber: '',\r\n          orderType: 'recon',\r\n          status: 'pending',\r\n          customerName: '',\r\n          customerEmail: '',\r\n          customerPhone: '',\r\n          vehicleVin: '',\r\n          vehicleYear: '',\r\n          vehicleMake: '',\r\n          vehicleModel: '',\r\n          vehicleInfo: '',\r\n          stockNumber: '',\r\n          assignedGroupId: '',\r\n          assignedContactId: '',\r\n          salesperson: '',\r\n          notes: '',\r\n          internalNotes: '',\r\n          priority: 'normal',\r\n          dueDate: undefined,\r\n          slaDeadline: undefined,\r\n          scheduledDate: undefined,\r\n          scheduledTime: '',\r\n          dealerId: ''\r\n        });\r\n      }\r\n      setErrors({});\r\n    }\r\n  }, [isOpen, mode, order]);\r\n\r\n  // Load recon-enabled dealerships\r\n  useEffect(() => {\r\n    const loadReconDealerships = async () => {\r\n      if (!loadingDealerships && dealerships.length > 0) {\r\n        const filtered = await filterByModule('recon_orders');\r\n        setReconDealerships(filtered);\r\n        \r\n        // Auto-select if only one dealership available\r\n        if (filtered.length === 1 && !formData.dealerId) {\r\n          setFormData(prev => ({ ...prev, dealerId: filtered[0].id.toString() }));\r\n        }\r\n      }\r\n    };\r\n    \r\n    loadReconDealerships();\r\n  }, [dealerships, loadingDealerships, filterByModule, formData.dealerId]);\r\n\r\n  const handleInputChange = (field: string, value: any) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n    if (errors[field]) {\r\n      setErrors(prev => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const handleVinChange = async (vin: string) => {\r\n    handleInputChange('vehicleVin', vin);\r\n    \r\n    if (vin.length === 17) {\r\n      try {\r\n        const decodedData = await decodeVin(vin);\r\n        if (decodedData) {\r\n          // Auto-populate vehicle info field with decoded data including trim\r\n          const trimInfo = decodedData.trim ? ` (${decodedData.trim})` : '';\r\n          const vehicleDesc = `${decodedData.year || ''} ${decodedData.make || ''} ${decodedData.model || ''}${trimInfo}`.trim();\r\n          \r\n          handleInputChange('vehicleYear', decodedData.year || '');\r\n          handleInputChange('vehicleMake', decodedData.make || '');\r\n          handleInputChange('vehicleModel', decodedData.model || '');\r\n          handleInputChange('vehicleInfo', vehicleDesc);\r\n\r\n          toast({\r\n            title: t('common.success'),\r\n            description: t('orders.vin_decoded_successfully'),\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error decoding VIN:', error);\r\n        toast({\r\n          title: t('common.error'),\r\n          description: t('orders.vin_decode_error'),\r\n          variant: 'destructive',\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors: Record<string, string> = {};\r\n\r\n    if (!formData.stockNumber.trim()) {\r\n      newErrors.stockNumber = t('recon.stock_number_required');\r\n    }\r\n\r\n    if (!formData.vehicleVin.trim()) {\r\n      newErrors.vehicleVin = t('orders.vin_required');\r\n    } else if (formData.vehicleVin.length !== 17) {\r\n      newErrors.vehicleVin = t('orders.vin_invalid_length');\r\n    }\r\n\r\n    if (!formData.vehicleMake.trim()) {\r\n      newErrors.vehicleMake = t('orders.make_required');\r\n    }\r\n\r\n    if (!formData.vehicleModel.trim()) {\r\n      newErrors.vehicleModel = t('orders.model_required');\r\n    }\r\n\r\n    if (!formData.dealerId) {\r\n      newErrors.dealerId = t('recon.dealer_required');\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    \r\n    if (!validateForm()) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('common.please_fix_errors'),\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    setIsSubmitting(true);\r\n\r\n    try {\r\n      const transformedData = {\r\n        // Map frontend camelCase to backend snake_case\r\n        order_number: formData.orderNumber,\r\n        customer_name: formData.customerName || 'Trade-in Vehicle',\r\n        customer_email: formData.customerEmail || null,\r\n        customer_phone: formData.customerPhone || null,\r\n        vehicle_vin: formData.vehicleVin || null,\r\n        vehicle_year: formData.vehicleYear ? parseInt(formData.vehicleYear) : null,\r\n        vehicle_make: formData.vehicleMake || null,\r\n        vehicle_model: formData.vehicleModel || null,\r\n        vehicle_info: formData.vehicleInfo || null,\r\n        stock_number: formData.stockNumber || null,\r\n        order_type: formData.orderType,\r\n        status: formData.status,\r\n        assigned_group_id: formData.assignedGroupId || null,\r\n        assigned_contact_id: formData.assignedContactId || null,\r\n        salesperson: formData.salesperson || null,\r\n        notes: formData.notes || null,\r\n        internal_notes: formData.internalNotes || null,\r\n        priority: formData.priority || 'normal',\r\n        due_date: formData.dueDate || null,\r\n        sla_deadline: formData.slaDeadline || null,\r\n        scheduled_date: formData.scheduledDate || null,\r\n        scheduled_time: formData.scheduledTime || null,\r\n        dealer_id: formData.dealerId ? parseInt(formData.dealerId) : null\r\n      };\r\n\r\n      await onSubmit(transformedData);\r\n      onClose();\r\n    } catch (error) {\r\n      console.error('Error submitting recon order:', error);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <Package className=\"h-5 w-5\" />\r\n            {mode === 'create' ? t('recon.create_recon_order') : t('recon.edit_recon_order')}\r\n          </DialogTitle>\r\n          <DialogDescription className=\"sr-only\">\r\n            {mode === 'create' ? t('recon.create_recon_order') : t('recon.edit_recon_order')}\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\r\n            {/* Column 1 - Vehicle Identification */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Car className=\"h-4 w-4\" />\r\n                  {t('orders.vehicle_information')}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"stockNumber\">{t('recon.stock_number')} *</Label>\r\n                  <Input\r\n                    id=\"stockNumber\"\r\n                    value={formData.stockNumber}\r\n                    onChange={(e) => handleInputChange('stockNumber', e.target.value)}\r\n                    placeholder={t('recon.enter_stock_number')}\r\n                    className={errors.stockNumber ? 'border-destructive' : ''}\r\n                  />\r\n                  {errors.stockNumber && (\r\n                    <p className=\"text-sm text-destructive mt-1\">{errors.stockNumber}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"vehicleVin\">{t('orders.vin')} *</Label>\r\n                  <VinInputWithScanner\r\n                    value={formData.vehicleVin}\r\n                    onChange={(e) => handleVinChange(e.target.value)}\r\n                    placeholder={t('orders.enter_vin')}\r\n                    disabled={isDecodingVin}\r\n                    className={errors.vehicleVin ? 'border-destructive' : ''}\r\n                  />\r\n                  {isDecodingVin && (\r\n                    <p className=\"text-sm text-muted-foreground mt-1\">{t('orders.decoding_vin')}</p>\r\n                  )}\r\n                  {errors.vehicleVin && (\r\n                    <p className=\"text-sm text-destructive mt-1\">{errors.vehicleVin}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"vehicleDisplay\">{t('recon.vehicle_display')}</Label>\r\n                  <Input\r\n                    id=\"vehicleDisplay\"\r\n                    value={createVehicleDisplay(formData)}\r\n                    readOnly\r\n                    placeholder={t('recon.auto_generated_vehicle_info')}\r\n                    className=\"bg-muted\"\r\n                  />\r\n                  <p className=\"text-xs text-muted-foreground mt-1\">\r\n                    {t('recon.updates_automatically')}\r\n                  </p>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Column 2 - Vehicle Details */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Car className=\"h-4 w-4\" />\r\n                  {t('orders.vehicle_details')}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"vehicleMake\">{t('orders.make')} *</Label>\r\n                  <Input\r\n                    id=\"vehicleMake\"\r\n                    value={formData.vehicleMake}\r\n                    onChange={(e) => handleInputChange('vehicleMake', e.target.value)}\r\n                    placeholder={t('orders.make')}\r\n                    className={errors.vehicleMake ? 'border-destructive' : ''}\r\n                  />\r\n                  {errors.vehicleMake && (\r\n                    <p className=\"text-sm text-destructive mt-1\">{errors.vehicleMake}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"vehicleModel\">{t('orders.model')} *</Label>\r\n                  <Input\r\n                    id=\"vehicleModel\"\r\n                    value={formData.vehicleModel}\r\n                    onChange={(e) => handleInputChange('vehicleModel', e.target.value)}\r\n                    placeholder={t('orders.model')}\r\n                    className={errors.vehicleModel ? 'border-destructive' : ''}\r\n                  />\r\n                  {errors.vehicleModel && (\r\n                    <p className=\"text-sm text-destructive mt-1\">{errors.vehicleModel}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"vehicleYear\">{t('orders.year')}</Label>\r\n                  <Input\r\n                    id=\"vehicleYear\"\r\n                    value={formData.vehicleYear}\r\n                    onChange={(e) => handleInputChange('vehicleYear', e.target.value)}\r\n                    placeholder={t('orders.year')}\r\n                    type=\"number\"\r\n                    min=\"1900\"\r\n                    max={new Date().getFullYear() + 1}\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"vehicleInfo\">{t('orders.additional_vehicle_info')}</Label>\r\n                  <Input\r\n                    id=\"vehicleInfo\"\r\n                    value={formData.vehicleInfo}\r\n                    onChange={(e) => handleInputChange('vehicleInfo', e.target.value)}\r\n                    placeholder={t('orders.engine_transmission_etc')}\r\n                  />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Column 3 - Order Management */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Building2 className=\"h-4 w-4\" />\r\n                  {t('orders.order_management')}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"dealerId\">{t('orders.dealership')} *</Label>\r\n                  <Select\r\n                    value={formData.dealerId.toString()}\r\n                    onValueChange={(value) => handleInputChange('dealerId', value)}\r\n                    disabled={loadingDealerships}\r\n                  >\r\n                    <SelectTrigger className={errors.dealerId ? 'border-destructive' : ''}>\r\n                      <SelectValue placeholder={\r\n                        loadingDealerships \r\n                          ? t('recon.loading_dealerships') \r\n                          : reconDealerships.length === 0 \r\n                            ? t('recon.no_dealerships_with_recon_access')\r\n                            : t('orders.select_dealership')\r\n                      } />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      {reconDealerships.map(dealer => (\r\n                        <SelectItem key={dealer.id} value={dealer.id.toString()}>\r\n                          {dealer.name} - {dealer.city}, {dealer.state}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                  {loadingDealerships && (\r\n                    <p className=\"text-sm text-muted-foreground mt-1\">{t('recon.loading_dealerships')}</p>\r\n                  )}\r\n                  {!loadingDealerships && reconDealerships.length === 0 && (\r\n                    <p className=\"text-sm text-muted-foreground mt-1\">{t('recon.no_dealerships_with_recon_access')}</p>\r\n                  )}\r\n                  {errors.dealerId && (\r\n                    <p className=\"text-sm text-destructive mt-1\">{errors.dealerId}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"status\">{t('orders.status')}</Label>\r\n                  <Select\r\n                    value={formData.status}\r\n                    onValueChange={(value) => handleInputChange('status', value)}\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder={t('orders.select_status')} />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"pending\">{t('orders.pending')}</SelectItem>\r\n                      <SelectItem value=\"in-progress\">{t('orders.in_progress')}</SelectItem>\r\n                      <SelectItem value=\"needs-approval\">{t('recon.needs_approval')}</SelectItem>\r\n                      <SelectItem value=\"ready-for-sale\">{t('recon.ready_for_sale')}</SelectItem>\r\n                      <SelectItem value=\"completed\">{t('orders.completed')}</SelectItem>\r\n                      <SelectItem value=\"cancelled\">{t('orders.cancelled')}</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"priority\">{t('orders.priority')}</Label>\r\n                  <Select\r\n                    value={formData.priority}\r\n                    onValueChange={(value) => handleInputChange('priority', value)}\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder={t('orders.select_priority')} />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"low\">{t('orders.low')}</SelectItem>\r\n                      <SelectItem value=\"normal\">{t('orders.normal')}</SelectItem>\r\n                      <SelectItem value=\"high\">{t('orders.high')}</SelectItem>\r\n                      <SelectItem value=\"urgent\">{t('orders.urgent')}</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Notes Section - Full Width */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <FileText className=\"h-4 w-4\" />\r\n                {t('orders.notes_and_instructions')}\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div>\r\n                <Label htmlFor=\"notes\">{t('orders.public_notes')}</Label>\r\n                <Textarea\r\n                  id=\"notes\"\r\n                  value={formData.notes}\r\n                  onChange={(e) => handleInputChange('notes', e.target.value)}\r\n                  placeholder={t('recon.recon_instructions')}\r\n                  rows={3}\r\n                />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Hidden fields with default values for later editing in order details */}\r\n          <div className=\"hidden\">\r\n            <input \r\n              type=\"hidden\" \r\n              name=\"customer_name\" \r\n              value={formData.customerName || ''} \r\n              onChange={(e) => handleInputChange('customerName', e.target.value)}\r\n            />\r\n            <input \r\n              type=\"hidden\" \r\n              name=\"customer_email\" \r\n              value={formData.customerEmail || ''} \r\n              onChange={(e) => handleInputChange('customerEmail', e.target.value)}\r\n            />\r\n            <input \r\n              type=\"hidden\" \r\n              name=\"customer_phone\" \r\n              value={formData.customerPhone || ''} \r\n              onChange={(e) => handleInputChange('customerPhone', e.target.value)}\r\n            />\r\n            <input \r\n              type=\"hidden\" \r\n              name=\"salesperson\" \r\n              value={formData.salesperson || ''} \r\n              onChange={(e) => handleInputChange('salesperson', e.target.value)}\r\n            />\r\n            <input \r\n              type=\"hidden\" \r\n              name=\"internal_notes\" \r\n              value={formData.internalNotes || ''} \r\n              onChange={(e) => handleInputChange('internalNotes', e.target.value)}\r\n            />\r\n            <input \r\n              type=\"hidden\" \r\n              name=\"sla_deadline\" \r\n              value={formData.slaDeadline ? formData.slaDeadline.toISOString() : ''} \r\n              onChange={(e) => handleInputChange('slaDeadline', e.target.value ? new Date(e.target.value) : undefined)}\r\n            />\r\n            <input \r\n              type=\"hidden\" \r\n              name=\"scheduled_date\" \r\n              value={formData.scheduledDate ? formData.scheduledDate.toISOString() : ''} \r\n              onChange={(e) => handleInputChange('scheduledDate', e.target.value ? new Date(e.target.value) : undefined)}\r\n            />\r\n            <input \r\n              type=\"hidden\" \r\n              name=\"scheduled_time\" \r\n              value={formData.scheduledTime || ''} \r\n              onChange={(e) => handleInputChange('scheduledTime', e.target.value)}\r\n            />\r\n          </div>\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"flex justify-end gap-3 pt-4 border-t\">\r\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\r\n              {t('common.cancel')}\r\n            </Button>\r\n            <Button type=\"submit\" disabled={isSubmitting}>\r\n              {isSubmitting ? t('common.processing') : (\r\n                mode === 'create' ? t('recon.create_order') : t('common.save_changes')\r\n              )}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\ScheduleViewBlock.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[527,530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[527,530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Calendar, \r\n  Clock, \r\n  TrendingUp, \r\n  CheckCircle, \r\n  AlertTriangle,\r\n  Timer,\r\n  Target\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { safeFormatDate, calculateDaysFromNow } from '@/utils/dateUtils';\r\n\r\ninterface ScheduleViewBlockProps {\r\n  order: any;\r\n}\r\n\r\n// Memoized component to prevent unnecessary re-renders\r\nexport const ScheduleViewBlock = React.memo(function ScheduleViewBlock({ order }: ScheduleViewBlockProps) {\r\n  const { t } = useTranslation();\r\n\r\n  // Memoize due date status calculation to prevent recalculation on every render\r\n  const dueDateStatus = useMemo(() => {\r\n    if (!order.due_date) return null;\r\n    \r\n    const daysLeft = calculateDaysFromNow(order.due_date);\r\n    if (daysLeft === null) return null;\r\n    \r\n    if (daysLeft < 0) {\r\n      return {\r\n        status: 'overdue',\r\n        text: t('schedule_view.days_overdue', { days: Math.abs(daysLeft) }),\r\n        color: 'text-destructive',\r\n        bgColor: 'bg-destructive/10',\r\n        icon: AlertTriangle\r\n      };\r\n    } else if (daysLeft === 0) {\r\n      return {\r\n        status: 'today',\r\n        text: t('data_table.due_today'),\r\n        color: 'text-warning',\r\n        bgColor: 'bg-warning/10', \r\n        icon: Timer\r\n      };\r\n    } else if (daysLeft === 1) {\r\n      return {\r\n        status: 'tomorrow',\r\n        text: t('schedule_view.due_tomorrow'),\r\n        color: 'text-warning',\r\n        bgColor: 'bg-warning/10',\r\n        icon: Clock\r\n      };\r\n    } else {\r\n      return {\r\n        status: 'future',\r\n        text: t('schedule_view.due_in_days', { days: daysLeft }),\r\n        color: 'text-muted-foreground',\r\n        bgColor: 'bg-muted/10',\r\n        icon: Calendar\r\n      };\r\n    }\r\n  }, [order.due_date, t]);\r\n\r\n  // Memoize order progress calculation\r\n  const progress = useMemo(() => {\r\n    const statusProgress = {\r\n      pending: 25,\r\n      in_progress: 60,\r\n      completed: 100,\r\n      cancelled: 0\r\n    };\r\n    return statusProgress[order.status as keyof typeof statusProgress] || 0;\r\n  }, [order.status]);\r\n\r\n  // Memoize order age calculation\r\n  const orderAge = useMemo(() => {\r\n    if (!order.created_at) return 'N/A';\r\n    const createdDate = new Date(order.created_at);\r\n    const now = new Date();\r\n    const diffTime = now.getTime() - createdDate.getTime();\r\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n    \r\n    if (diffDays === 0) return 'Today';\r\n    if (diffDays === 1) return 'Yesterday'; \r\n    return `${diffDays} days ago`;\r\n  }, [order.created_at]);\r\n\r\n  // Memoize schedule items array to prevent recreation on every render\r\n  const scheduleItems = useMemo(() => [\r\n    {\r\n      icon: Calendar,\r\n      label: t('orders.created'),\r\n      value: safeFormatDate(order.created_at),\r\n      subtitle: orderAge\r\n    },\r\n    {\r\n      icon: Target,\r\n      label: t('orders.due_date'),\r\n      value: order.due_date ? safeFormatDate(order.due_date) : t('schedule_view.not_set'),\r\n      subtitle: dueDateStatus?.text || t('schedule_view.no_due_date')\r\n    },\r\n    {\r\n      icon: Clock,\r\n      label: t('orders.updated'),\r\n      value: safeFormatDate(order.updated_at),\r\n      subtitle: t('schedule_view.most_recent_change')\r\n    }\r\n  ], [order.created_at, order.due_date, order.updated_at, orderAge, dueDateStatus?.text, t]);\r\n\r\n  return (\r\n    <Card className=\"h-full\">\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\r\n          <Calendar className=\"h-5 w-5 text-primary\" />\r\n          {t('schedule_view.schedule_timeline')}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      \r\n      <CardContent className=\"space-y-4\">\r\n        {/* Due Date Status Banner */}\r\n        {dueDateStatus && (\r\n          <div className={`p-3 rounded-lg ${dueDateStatus.bgColor} border border-border/50`}>\r\n            <div className=\"flex items-center gap-2\">\r\n              <dueDateStatus.icon className={`h-4 w-4 ${dueDateStatus.color}`} />\r\n              <span className={`text-sm font-medium ${dueDateStatus.color}`}>\r\n                {dueDateStatus.text}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Order Progress */}\r\n        <div className=\"space-y-2\">\r\n          <div className=\"flex items-center justify-between\">\r\n<span className=\"text-sm font-medium\">{t('schedule_view.order_progress')}</span>\r\n            <span className=\"text-sm text-muted-foreground\">{progress}%</span>\r\n          </div>\r\n          <Progress value={progress} className=\"h-2\" />\r\n          <div className=\"flex items-center gap-2\">\r\n            {progress === 100 ? (\r\n              <CheckCircle className=\"h-4 w-4 text-success\" />\r\n            ) : (\r\n              <TrendingUp className=\"h-4 w-4 text-primary\" />\r\n            )}\r\n            <span className=\"text-xs text-muted-foreground\">\r\n  {order.status === 'completed' ? t('schedule_view.order_completed') : t('schedule_view.in_progress')}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Schedule Timeline */}\r\n        <div className=\"space-y-3\">\r\n          <h4 className=\"text-sm font-medium flex items-center gap-2\">\r\n            <Clock className=\"h-4 w-4\" />\r\n{t('schedule_view.timeline')}\r\n          </h4>\r\n          \r\n          <div className=\"space-y-3\">\r\n            {scheduleItems.map((item, index) => {\r\n              const Icon = item.icon;\r\n              return (\r\n                <div key={index} className=\"flex items-start gap-3 p-2 rounded-lg bg-muted/20\">\r\n                  <Icon className=\"h-4 w-4 text-muted-foreground mt-0.5 flex-shrink-0\" />\r\n                  <div className=\"min-w-0 flex-1\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <p className=\"text-xs text-muted-foreground uppercase tracking-wide\">\r\n                        {item.label}\r\n                      </p>\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {item.subtitle}\r\n                      </Badge>\r\n                    </div>\r\n                    <p className=\"text-sm font-medium mt-1\">\r\n                      {item.value}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        {/* SLA Compliance */}\r\n        {order.sla_hours && (\r\n          <div className=\"pt-3 border-t space-y-2\">\r\n            <div className=\"flex items-center justify-between\">\r\n<span className=\"text-sm font-medium\">{t('schedule_view.sla_compliance')}</span>\r\n              <Badge variant={progress >= 80 ? 'default' : 'destructive'}>\r\n{progress >= 80 ? t('schedule_view.on_track') : t('schedule_view.at_risk')}\r\n              </Badge>\r\n            </div>\r\n            <p className=\"text-xs text-muted-foreground\">\r\n{t('schedule_view.target_completion', { hours: order.sla_hours })}\r\n            </p>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\ServiceOrderModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":62,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2185,2188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2185,2188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2255,2258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2255,2258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":271,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9312,9315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9312,9315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":320,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11277,11280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11277,11280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":357,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":357,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13278,13281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13278,13281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":383,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14591,14594],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14591,14594],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":559,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":559,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22777,22780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22777,22780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { safeParseDate } from '@/utils/dateUtils';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Loader2, Zap, AlertCircle } from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { usePermissionContext } from '@/contexts/PermissionContext';\r\nimport { canViewPricing } from '@/utils/permissions';\r\nimport { useVinDecoding } from '@/hooks/useVinDecoding';\r\nimport { DueDateTimePicker } from '@/components/ui/due-date-time-picker';\r\nimport { VinInputWithScanner } from '@/components/ui/vin-input-with-scanner';\r\n\r\ninterface OrderFormData {\r\n  // Order identification\r\n  orderNumber: string;\r\n  orderType: string;\r\n  status: string;\r\n  \r\n  // Customer information (vehicle owner)\r\n  customerName: string;\r\n  customerEmail?: string;\r\n  customerPhone?: string;\r\n  \r\n  // Vehicle information\r\n  vehicleVin: string;\r\n  vehicleYear: string;\r\n  vehicleMake: string;\r\n  vehicleModel: string;\r\n  vehicleInfo: string;\r\n  \r\n  // Service order specific fields\r\n  po: string;\r\n  ro: string;\r\n  tag: string;\r\n  \r\n  // Assignment information (employee responsible)\r\n  assignedGroupId?: string;\r\n  assignedContactId?: string;\r\n  salesperson?: string;\r\n  \r\n  // Order details\r\n  notes: string;\r\n  internalNotes?: string;\r\n  priority?: string;\r\n  dueDate?: Date;\r\n  slaDeadline?: Date;\r\n  scheduledDate?: Date;\r\n  scheduledTime?: string;\r\n}\r\n\r\ninterface ServiceOrderModalProps {\r\n  order?: any;\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onSave: (orderData: any) => void;\r\n}\r\n\r\nconst ServiceOrderModal: React.FC<ServiceOrderModalProps> = ({ order, open, onClose, onSave }) => {\r\n  const { t } = useTranslation();\r\n  const { roles } = usePermissionContext();\r\n  const { decodeVin, loading: vinLoading, error: vinError } = useVinDecoding();\r\n\r\n  // Form state\r\n  const [formData, setFormData] = useState<OrderFormData>({\r\n    orderNumber: '',\r\n    orderType: 'service',\r\n    status: 'pending',\r\n    customerName: '',\r\n    customerEmail: '',\r\n    customerPhone: '',\r\n    vehicleVin: '',\r\n    vehicleYear: '',\r\n    vehicleMake: '',\r\n    vehicleModel: '',\r\n    vehicleInfo: '',\r\n    po: '',\r\n    ro: '',\r\n    tag: '',\r\n    assignedGroupId: '',\r\n    assignedContactId: '',\r\n    salesperson: '',\r\n    notes: '',\r\n    internalNotes: '',\r\n    priority: 'normal',\r\n    dueDate: undefined,\r\n    slaDeadline: undefined,\r\n    scheduledDate: undefined,\r\n    scheduledTime: ''\r\n  });\r\n\r\n  const [selectedDealership, setSelectedDealership] = useState('');\r\n  const [selectedContact, setSelectedContact] = useState('');\r\n  const [dealerships, setDealerships] = useState([]);\r\n  const [contacts, setContacts] = useState([]);\r\n  const [services, setServices] = useState([]);\r\n  const [selectedServices, setSelectedServices] = useState<string[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [vinDecoded, setVinDecoded] = useState(false);\r\n\r\n  const canViewPrices = canViewPricing(roles);\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      fetchDealerships();\r\n      \r\n      if (order) {\r\n        setFormData({\r\n          orderNumber: order.orderNumber || order.order_number || '',\r\n          orderType: order.orderType || order.order_type || 'service',\r\n          status: order.status || 'pending',\r\n          customerName: order.customerName || order.customer_name || '',\r\n          customerEmail: order.customerEmail || order.customer_email || '',\r\n          customerPhone: order.customerPhone || order.customer_phone || '',\r\n          vehicleVin: order.vehicleVin || order.vehicle_vin || '',\r\n          vehicleYear: order.vehicleYear?.toString() || order.vehicle_year?.toString() || '',\r\n          vehicleMake: order.vehicleMake || order.vehicle_make || '',\r\n          vehicleModel: order.vehicleModel || order.vehicle_model || '',\r\n          vehicleInfo: order.vehicleInfo || order.vehicle_info || '',\r\n          po: order.po || '',\r\n          ro: order.ro || '',\r\n          tag: order.tag || '',\r\n          assignedGroupId: order.assignedGroupId || order.assigned_group_id || '',\r\n          assignedContactId: order.assignedContactId || order.assigned_contact_id || '',\r\n          salesperson: order.salesperson || '',\r\n          notes: order.notes || '',\r\n          internalNotes: order.internalNotes || order.internal_notes || '',\r\n          priority: order.priority || 'normal',\r\n          dueDate: order.dueDate || order.due_date ? safeParseDate(order.dueDate || order.due_date) || undefined : undefined,\r\n          slaDeadline: order.slaDeadline || order.sla_deadline ? safeParseDate(order.slaDeadline || order.sla_deadline) || undefined : undefined,\r\n          scheduledDate: order.scheduledDate || order.scheduled_date ? safeParseDate(order.scheduledDate || order.scheduled_date) || undefined : undefined,\r\n          scheduledTime: order.scheduledTime || order.scheduled_time || ''\r\n        });\r\n        setSelectedServices(order.services || []);\r\n        setSelectedDealership(order.dealerId?.toString() || '');\r\n      } else {\r\n        // Reset form for new order\r\n        setFormData({\r\n          orderNumber: '',\r\n          orderType: 'service',\r\n          status: 'pending',\r\n          customerName: '',\r\n          customerEmail: '',\r\n          customerPhone: '',\r\n          vehicleVin: '',\r\n          vehicleYear: '',\r\n          vehicleMake: '',\r\n          vehicleModel: '',\r\n          vehicleInfo: '',\r\n          po: '',\r\n          ro: '',\r\n          tag: '',\r\n          assignedGroupId: '',\r\n          assignedContactId: '',\r\n          salesperson: '',\r\n          notes: '',\r\n          internalNotes: '',\r\n          priority: 'normal',\r\n          dueDate: undefined,\r\n          slaDeadline: undefined,\r\n          scheduledDate: undefined,\r\n          scheduledTime: ''\r\n        });\r\n        setSelectedServices([]);\r\n        setSelectedDealership('');\r\n        setSelectedContact('');\r\n      }\r\n    }\r\n  }, [order, open]);\r\n\r\n  const fetchDealerships = async () => {\r\n    try {\r\n      const { data: user } = await supabase.auth.getUser();\r\n      if (!user.user) return;\r\n\r\n      const { data, error } = await supabase.rpc('get_user_accessible_dealers', {\r\n        user_uuid: user.user.id\r\n      });\r\n\r\n      if (error) throw error;\r\n      setDealerships(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching dealerships:', error);\r\n    }\r\n  };\r\n\r\n  const fetchDealerData = async (dealershipId: string) => {\r\n    if (!dealershipId) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const [contactsResult, servicesResult] = await Promise.all([\r\n        supabase\r\n          .from('dealership_contacts')\r\n          .select('id, first_name, last_name, email, phone')\r\n          .eq('dealership_id', parseInt(dealershipId))\r\n          .eq('status', 'active'),\r\n        supabase\r\n          .rpc('get_dealer_services_for_user', { p_dealer_id: parseInt(dealershipId) })\r\n      ]);\r\n\r\n      if (contactsResult.data) {\r\n        setContacts(contactsResult.data.map(contact => ({\r\n          id: contact.id,\r\n          name: `${contact.first_name} ${contact.last_name}`,\r\n          email: contact.email,\r\n          phone: contact.phone\r\n        })));\r\n      }\r\n\r\n      if (servicesResult.data) {\r\n        setServices(servicesResult.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching dealer data:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDealershipChange = (dealershipId: string) => {\r\n    setSelectedDealership(dealershipId);\r\n    setSelectedContact('');\r\n    setContacts([]);\r\n    setServices([]);\r\n    setSelectedServices([]);\r\n    \r\n    if (dealershipId) {\r\n      fetchDealerData(dealershipId);\r\n    }\r\n  };\r\n\r\n  const handleContactChange = (contactId: string) => {\r\n    setSelectedContact(contactId);\r\n    // Update assignment in form data - do NOT overwrite customer info automatically\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      assignedContactId: contactId\r\n    }));\r\n  };\r\n\r\n  const handleVinChange = async (vin: string) => {\r\n    handleInputChange('vehicleVin', vin);\r\n    \r\n    if (vin.length === 17 && !vinDecoded) {\r\n      const vehicleData = await decodeVin(vin);\r\n      if (vehicleData) {\r\n        setFormData(prev => ({\r\n          ...prev,\r\n          vehicleYear: vehicleData.year,\r\n          vehicleMake: vehicleData.make,\r\n          vehicleModel: vehicleData.model,\r\n          vehicleInfo: vehicleData.vehicleInfo\r\n        }));\r\n        setVinDecoded(true);\r\n      }\r\n    } else if (vin.length !== 17) {\r\n      setVinDecoded(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: any) => {\r\n    setFormData(prev => ({ ...prev, [field]: value }));\r\n  };\r\n\r\n  const handleServiceToggle = (serviceId: string, checked: boolean) => {\r\n    if (checked) {\r\n      setSelectedServices(prev => [...prev, serviceId]);\r\n    } else {\r\n      setSelectedServices(prev => prev.filter(id => id !== serviceId));\r\n    }\r\n  };\r\n\r\n  const transformToDbFormat = (formData: OrderFormData) => ({\r\n    // Map frontend camelCase to backend snake_case\r\n    order_number: formData.orderNumber,\r\n    customer_name: formData.customerName,\r\n    customer_email: formData.customerEmail || null,\r\n    customer_phone: formData.customerPhone || null,\r\n    vehicle_vin: formData.vehicleVin || null,\r\n    vehicle_year: formData.vehicleYear ? parseInt(formData.vehicleYear) : null,\r\n    vehicle_make: formData.vehicleMake || null,\r\n    vehicle_model: formData.vehicleModel || null,\r\n    vehicle_info: formData.vehicleInfo || null,\r\n    po: formData.po || null,\r\n    ro: formData.ro || null,\r\n    tag: formData.tag || null,\r\n    order_type: formData.orderType,\r\n    status: formData.status,\r\n    assigned_group_id: formData.assignedGroupId || null,\r\n    assigned_contact_id: formData.assignedContactId || null,\r\n    salesperson: formData.salesperson || null,\r\n    notes: formData.notes || null,\r\n    internal_notes: formData.internalNotes || null,\r\n    priority: formData.priority || 'normal',\r\n    due_date: formData.dueDate || null,\r\n    sla_deadline: formData.slaDeadline || null,\r\n    scheduled_date: formData.scheduledDate || null,\r\n    scheduled_time: formData.scheduledTime || null,\r\n    dealer_id: selectedDealership ? parseInt(selectedDealership) : null,\r\n    services: selectedServices\r\n  });\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const dbData = transformToDbFormat(formData);\r\n    onSave(dbData);\r\n  };\r\n\r\n  const totalPrice = canViewPrices ? selectedServices.reduce((total, serviceId) => {\r\n    const service = services.find((s: any) => s.id === serviceId);\r\n    return total + (service?.price || 0);\r\n  }, 0) : 0;\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-7xl max-h-[95vh] w-[95vw] p-0\" aria-describedby=\"service-order-modal-description\">\r\n        <DialogHeader className=\"p-6 pb-0\">\r\n          <DialogTitle className=\"text-xl font-semibold\">\r\n            {order ? t('orders.edit_service_order') : t('orders.create_service_order')}\r\n          </DialogTitle>\r\n          <DialogDescription className=\"sr-only\" id=\"service-order-modal-description\">\r\n            {order ? t('orders.edit_service_order') : t('orders.create_service_order')}\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <ScrollArea className=\"max-h-[calc(95vh-120px)] px-6\">\r\n          <form onSubmit={handleSubmit} className=\"space-y-6 pb-6\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n              \r\n              {/* Dealership & Customer Information */}\r\n              <Card className=\"border-border\">\r\n                <CardHeader className=\"pb-3\">\r\n                  <CardTitle className=\"text-base\">{t('sales_orders.dealership')} & {t('orders.clientInfo')}</CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"dealership\">{t('sales_orders.dealership')}</Label>\r\n                    <Select \r\n                      value={selectedDealership} \r\n                      onValueChange={handleDealershipChange}\r\n                      disabled={loading}\r\n                    >\r\n                      <SelectTrigger className=\"border-input bg-background\">\r\n                        <SelectValue placeholder={loading ? t('common.loading') : t('orders.selectClient')} />\r\n                      </SelectTrigger>\r\n                      <SelectContent className=\"bg-popover border border-border max-h-[200px]\">\r\n                        {dealerships.map((dealer: any) => (\r\n                          <SelectItem key={dealer.id} value={dealer.id.toString()}>\r\n                            {dealer.name} - {dealer.city}, {dealer.state}\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                   <div>\r\n                     <Label htmlFor=\"contact\">{t('sales_orders.contact')}</Label>\r\n                      <Select \r\n                        value={selectedContact || \"\"} \r\n                        onValueChange={handleContactChange} \r\n                        disabled={loading || !selectedDealership}\r\n                      >\r\n                        <SelectTrigger className=\"border-input bg-background\">\r\n                          <SelectValue placeholder={\r\n                            !selectedDealership \r\n                              ? t('orders.selectClient') \r\n                              : loading \r\n                                ? t('common.loading') \r\n                                : t('orders.selectClient')\r\n                          } />\r\n                        </SelectTrigger>\r\n                       <SelectContent className=\"bg-popover border border-border max-h-[200px]\">\r\n                         {contacts.map((contact: any) => (\r\n                           <SelectItem key={contact.id} value={contact.id}>\r\n                             {contact.name} - {contact.email}\r\n                           </SelectItem>\r\n                         ))}\r\n                       </SelectContent>\r\n                     </Select>\r\n                   </div>\r\n\r\n                  <Separator />\r\n\r\n                   <div>\r\n                     <Label htmlFor=\"customerName\">{t('orders.customerName')}</Label>\r\n                     <Input\r\n                       id=\"customerName\"\r\n                       value={formData.customerName}\r\n                       onChange={(e) => handleInputChange('customerName', e.target.value)}\r\n                       className=\"border-input bg-background\"\r\n                       required\r\n                     />\r\n                   </div>\r\n\r\n                   <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                     <div>\r\n                       <Label htmlFor=\"customerEmail\">{t('orders.customerEmail')}</Label>\r\n                       <Input\r\n                         id=\"customerEmail\"\r\n                         type=\"email\"\r\n                         value={formData.customerEmail}\r\n                         onChange={(e) => handleInputChange('customerEmail', e.target.value)}\r\n                         className=\"border-input bg-background\"\r\n                       />\r\n                     </div>\r\n\r\n                     <div>\r\n                       <Label htmlFor=\"customerPhone\">{t('orders.customerPhone')}</Label>\r\n                       <Input\r\n                         id=\"customerPhone\"\r\n                         value={formData.customerPhone}\r\n                         onChange={(e) => handleInputChange('customerPhone', e.target.value)}\r\n                         className=\"border-input bg-background\"\r\n                       />\r\n                     </div>\r\n                   </div>\r\n\r\n                   {/* Service Order Specific Fields */}\r\n                   <Separator />\r\n                   \r\n                   <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\r\n                     <div>\r\n                       <Label htmlFor=\"po\">{t('service_orders.po_number')}</Label>\r\n                       <Input\r\n                         id=\"po\"\r\n                         value={formData.po}\r\n                         onChange={(e) => handleInputChange('po', e.target.value)}\r\n                         className=\"border-input bg-background\"\r\n                         placeholder=\"PO-2025-001\"\r\n                       />\r\n                     </div>\r\n                     \r\n                     <div>\r\n                       <Label htmlFor=\"ro\">{t('service_orders.ro_number')}</Label>\r\n                       <Input\r\n                         id=\"ro\"\r\n                         value={formData.ro}\r\n                         onChange={(e) => handleInputChange('ro', e.target.value)}\r\n                         className=\"border-input bg-background\"\r\n                         placeholder=\"RO-2025-001\"\r\n                       />\r\n                     </div>\r\n                     \r\n                     <div>\r\n                       <Label htmlFor=\"tag\">{t('service_orders.tag_number')}</Label>\r\n                       <Input\r\n                         id=\"tag\"\r\n                         value={formData.tag}\r\n                         onChange={(e) => handleInputChange('tag', e.target.value)}\r\n                         className=\"border-input bg-background\"\r\n                         placeholder=\"TAG-001\"\r\n                       />\r\n                     </div>\r\n                   </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Vehicle Information with VIN Decoding */}\r\n              <Card className=\"border-border\">\r\n                <CardHeader className=\"pb-3\">\r\n                  <CardTitle className=\"text-base flex items-center gap-2\">\r\n                    {t('orders.vehicleInfo')}\r\n                    {vinDecoded && <Badge variant=\"secondary\" className=\"bg-success text-success-foreground\">\r\n                      <Zap className=\"w-3 h-3 mr-1\" />\r\n                      {t('sales_orders.vin_decoded_successfully')}\r\n                    </Badge>}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"vehicleVin\" className=\"flex items-center gap-2\">\r\n                      {t('orders.vin')}\r\n                      {vinLoading && <Loader2 className=\"w-4 h-4 animate-spin\" />}\r\n                    </Label>\r\n                    <VinInputWithScanner\r\n                      id=\"vehicleVin\"\r\n                      name=\"vehicleVin\"\r\n                      value={formData.vehicleVin}\r\n                      onChange={(e) => handleVinChange(e.target.value)}\r\n                      onVinScanned={handleVinChange}\r\n                      className=\"border-input bg-background font-mono\"\r\n                    />\r\n                    {vinError && (\r\n                      <div className=\"flex items-center gap-1 text-sm text-destructive mt-1\">\r\n                        <AlertCircle className=\"w-3 h-3\" />\r\n                        {vinError}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  {/* Consolidated Vehicle Info */}\r\n                  <div>\r\n                    <Label htmlFor=\"vehicleInfo\">{t('sales_orders.vehicle')}</Label>\r\n                    <Input\r\n                      id=\"vehicleInfo\"\r\n                      value={formData.vehicleInfo}\r\n                      onChange={(e) => handleInputChange('vehicleInfo', e.target.value)}\r\n                      className=\"border-input bg-background\"\r\n                      placeholder=\"2025 Honda Accord EX-L\"\r\n                    />\r\n                  </div>\r\n\r\n                  <Separator />\r\n\r\n                   {/* Due Date & Time Section */}\r\n                   <div className=\"space-y-4\">\r\n                     <Label className=\"text-base font-medium\">{t('due_date.title')}</Label>\r\n                     <div>\r\n                       <DueDateTimePicker\r\n                         value={formData.dueDate}\r\n                         onChange={(date) => handleInputChange('dueDate', date)}\r\n                         placeholder={t('due_date.date_placeholder')}\r\n                       />\r\n                     </div>\r\n                     <div className=\"text-xs text-muted-foreground\">\r\n                       {t('due_date.validation.business_hours_only')}\r\n                     </div>\r\n                   </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Services & Notes */}\r\n              <Card className=\"border-border\">\r\n                <CardHeader className=\"pb-3\">\r\n                  <CardTitle className=\"text-base\">{t('orders.servicesAndNotes')}</CardTitle>\r\n                </CardHeader>\r\n                <CardContent className=\"space-y-4\">\r\n                  <div>\r\n                    <Label className=\"text-sm font-medium\">\r\n                      {t('orders.services')} \r\n                      {selectedDealership && services.length > 0 && (\r\n                        <span className=\"text-muted-foreground ml-1\">\r\n                          ({services.length} {t('orders.available')})\r\n                        </span>\r\n                      )}\r\n                    </Label>\r\n                    \r\n                    {!selectedDealership ? (\r\n                      <div className=\"text-sm text-muted-foreground mt-2 p-3 bg-muted rounded-md\">\r\n                        {t('orders.selectDealershipFirst')}\r\n                      </div>\r\n                    ) : services.length === 0 ? (\r\n                      <div className=\"text-sm text-muted-foreground mt-2 p-3 bg-muted rounded-md\">\r\n                        {loading ? t('common.loading') : t('orders.noServicesAvailable')}\r\n                      </div>\r\n                    ) : (\r\n                      <ScrollArea className=\"h-[300px] mt-2 p-3 border border-border rounded-md\">\r\n                        <div className=\"space-y-2\">\r\n                          {services.map((service: any) => (\r\n                            <div key={service.id} className=\"flex items-center space-x-3 p-2 rounded-md hover:bg-accent\">\r\n                              <Checkbox\r\n                                id={service.id}\r\n                                checked={selectedServices.includes(service.id)}\r\n                                onCheckedChange={(checked) => handleServiceToggle(service.id, !!checked)}\r\n                              />\r\n                              <div className=\"flex-1 min-w-0\">\r\n                                <Label htmlFor={service.id} className=\"text-sm font-medium cursor-pointer\">\r\n                                  {service.name}\r\n                                </Label>\r\n                                {service.description && (\r\n                                  <div className=\"text-xs text-muted-foreground mt-1\">\r\n                                    {service.description}\r\n                                  </div>\r\n                                )}\r\n                                <div className=\"flex items-center gap-2 mt-1\">\r\n                                  <Badge variant=\"outline\" className=\"text-xs\">\r\n                                    {service.category_name}\r\n                                  </Badge>\r\n                                  {canViewPrices && service.price && (\r\n                                    <span className=\"text-xs font-medium text-primary\">\r\n                                      ${service.price}\r\n                                    </span>\r\n                                  )}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                          ))}\r\n                        </div>\r\n                      </ScrollArea>\r\n                    )}\r\n                  </div>\r\n\r\n                  {canViewPrices && selectedServices.length > 0 && (\r\n                    <div className=\"p-3 bg-accent rounded-md\">\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <span className=\"text-sm font-medium\">{t('orders.totalPrice')}</span>\r\n                        <span className=\"text-lg font-bold text-primary\">${totalPrice.toFixed(2)}</span>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"notes\">{t('orders.notes')}</Label>\r\n                    <Textarea\r\n                      id=\"notes\"\r\n                      value={formData.notes}\r\n                      onChange={(e) => handleInputChange('notes', e.target.value)}\r\n                      className=\"border-input bg-background\"\r\n                      rows={4}\r\n                      placeholder={t('orders.notesPlaceholder')}\r\n                    />\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n\r\n            {/* Hidden fields with default values for later editing in order details */}\r\n            <div className=\"hidden\">\r\n              <input type=\"hidden\" name=\"salesperson\" value={formData.salesperson || ''} />\r\n              <input type=\"hidden\" name=\"internal_notes\" value={formData.internalNotes || ''} />\r\n              <input type=\"hidden\" name=\"sla_deadline\" value={formData.slaDeadline ? formData.slaDeadline.toISOString() : ''} />\r\n              <input type=\"hidden\" name=\"scheduled_date\" value={formData.scheduledDate ? formData.scheduledDate.toISOString() : ''} />\r\n              <input type=\"hidden\" name=\"scheduled_time\" value={formData.scheduledTime || ''} />\r\n            </div>\r\n\r\n            {/* Footer Actions */}\r\n            <div className=\"flex justify-end gap-3 pt-4 border-t border-border\">\r\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\r\n                {t('common.cancel')}\r\n              </Button>\r\n              <Button type=\"submit\" disabled={loading || !formData.customerName}>\r\n                {loading ? (\r\n                  <>\r\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\r\n                    {t('common.saving')}\r\n                  </>\r\n                ) : (\r\n                  order ? t('common.save') : t('common.create')\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </form>\r\n        </ScrollArea>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ServiceOrderModal;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\SimpleNotesDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[262,265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[262,265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { FileText, AlertCircle } from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface SimpleNotesDisplayProps {\r\n  order: any;\r\n}\r\n\r\nexport function SimpleNotesDisplay({ order }: SimpleNotesDisplayProps) {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\r\n          <FileText className=\"h-5 w-5 text-primary\" />\r\n          {t('order_detail.simple_notes')}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      \r\n      <CardContent>\r\n        <div className=\"p-4 bg-muted/20 rounded-lg border border-dashed min-h-[120px]\">\r\n          {order.notes ? (\r\n            <p className=\"text-sm whitespace-pre-wrap leading-relaxed\">\r\n              {order.notes}\r\n            </p>\r\n          ) : (\r\n            <div className=\"flex items-center justify-center h-[80px]\">\r\n              <div className=\"text-center\">\r\n                <AlertCircle className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\r\n                <p className=\"text-sm text-muted-foreground italic\">\r\n                  {t('order_detail.no_notes_provided')}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        {/* Notes metadata */}\r\n        {order.notes && (\r\n          <div className=\"mt-3 pt-3 border-t\">\r\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\r\n              <span>\r\n                {order.notes.split(' ').length} {t('qr_block.words_in_general').split(' ')[0]} • {order.notes.length} characters\r\n              </span>\r\n              <span>\r\n                Added {order.created_at ? new Date(order.created_at).toLocaleDateString() : t('common.recently')}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\SkeletonLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\TimeRemaining.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":6,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[221,224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[221,224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Clock, AlertTriangle, Calendar, CheckCircle } from 'lucide-react';\r\n\r\ninterface TimeRemainingProps {\r\n  order: any;\r\n  showIcon?: boolean;\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\ninterface TimeInfo {\r\n  text: string;\r\n  color: string;\r\n  icon: React.ReactNode;\r\n  badge: string;\r\n  badgeColor: string;\r\n}\r\n\r\nexport function TimeRemaining({ order, showIcon = true, size = 'md' }: TimeRemainingProps) {\r\n  const [timeInfo, setTimeInfo] = useState<TimeInfo | null>(null);\r\n\r\n  useEffect(() => {\r\n    const calculateTimeInfo = () => {\r\n      if (!order?.due_date) {\r\n        setTimeInfo({\r\n          text: 'No due date set',\r\n          color: 'text-gray-500',\r\n          icon: <Calendar className=\"h-4 w-4\" />,\r\n          badge: 'NO DUE DATE',\r\n          badgeColor: 'bg-gray-100 text-gray-700 border-gray-300'\r\n        });\r\n        return;\r\n      }\r\n\r\n      const now = new Date();\r\n      const dueDate = new Date(order.due_date);\r\n      const diffMs = dueDate.getTime() - now.getTime();\r\n      const diffHours = diffMs / (1000 * 60 * 60);\r\n      const diffMinutes = Math.abs(diffMs / (1000 * 60));\r\n\r\n      if (diffMs > 0) {\r\n        // Time remaining\r\n        const hours = Math.floor(diffMinutes / 60);\r\n        const minutes = Math.floor(diffMinutes % 60);\r\n        \r\n        if (diffHours > 24) {\r\n          const days = Math.floor(diffHours / 24);\r\n          const remainingHours = Math.floor(diffHours % 24);\r\n          setTimeInfo({\r\n            text: `Due in ${days}d ${remainingHours}h`,\r\n            color: 'text-emerald-700',\r\n            icon: <CheckCircle className=\"h-4 w-4\" />,\r\n            badge: 'ON TIME',\r\n            badgeColor: 'bg-emerald-500 text-white border-emerald-600'\r\n          });\r\n        } else if (diffHours > 6) {\r\n          setTimeInfo({\r\n            text: `Due in ${hours}h ${minutes}m`,\r\n            color: 'text-green-700',\r\n            icon: <Clock className=\"h-4 w-4\" />,\r\n            badge: 'ON TIME',\r\n            badgeColor: 'bg-green-500 text-white border-green-600'\r\n          });\r\n        } else if (diffHours > 2) {\r\n          setTimeInfo({\r\n            text: `Due in ${hours}h ${minutes}m`,\r\n            color: 'text-yellow-700',\r\n            icon: <Clock className=\"h-4 w-4\" />,\r\n            badge: 'DUE SOON',\r\n            badgeColor: 'bg-yellow-500 text-white border-yellow-600'\r\n          });\r\n        } else {\r\n          setTimeInfo({\r\n            text: `Due in ${hours}h ${minutes}m`,\r\n            color: 'text-orange-700',\r\n            icon: <AlertTriangle className=\"h-4 w-4\" />,\r\n            badge: 'DUE TODAY',\r\n            badgeColor: 'bg-orange-500 text-white border-orange-600'\r\n          });\r\n        }\r\n      } else {\r\n        // Overdue\r\n        const hours = Math.floor(diffMinutes / 60);\r\n        const minutes = Math.floor(diffMinutes % 60);\r\n        \r\n        if (Math.abs(diffHours) < 24) {\r\n          setTimeInfo({\r\n            text: `Overdue by ${hours}h ${minutes}m`,\r\n            color: 'text-red-700',\r\n            icon: <AlertTriangle className=\"h-4 w-4\" />,\r\n            badge: 'DELAYED',\r\n            badgeColor: 'bg-red-500 text-white border-red-600'\r\n          });\r\n        } else {\r\n          const days = Math.floor(Math.abs(diffHours) / 24);\r\n          const remainingHours = Math.floor(Math.abs(diffHours) % 24);\r\n          setTimeInfo({\r\n            text: `Overdue by ${days}d ${remainingHours}h`,\r\n            color: 'text-red-800',\r\n            icon: <AlertTriangle className=\"h-4 w-4\" />,\r\n            badge: 'OVERDUE',\r\n            badgeColor: 'bg-red-600 text-white border-red-700'\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    calculateTimeInfo();\r\n    // Update every minute for live countdown\r\n    const interval = setInterval(calculateTimeInfo, 60000);\r\n    return () => clearInterval(interval);\r\n  }, [order?.due_date]);\r\n\r\n  if (!timeInfo) return null;\r\n\r\n  const textSize = size === 'lg' ? 'text-lg' : size === 'md' ? 'text-base' : 'text-sm';\r\n  const iconSize = size === 'lg' ? 'h-5 w-5' : 'h-4 w-4';\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      {/* Timing Badge */}\r\n      <div className=\"flex items-center gap-2\">\r\n        <Badge className={`${timeInfo.badgeColor} font-medium`}>\r\n          {showIcon && timeInfo.icon}\r\n          <span className={showIcon ? 'ml-1' : ''}>{timeInfo.badge}</span>\r\n        </Badge>\r\n      </div>\r\n      \r\n      {/* Precise Time Information */}\r\n      <div className={`flex items-center gap-2 ${timeInfo.color} ${textSize} font-medium`}>\r\n        {showIcon && <Clock className={iconSize} />}\r\n        <span>{timeInfo.text}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\VehicleAutoPopulationField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\VehicleInfoBlock.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[391,394],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[391,394],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Car, Hash, Palette, Calendar, Shield, Eye } from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface VehicleInfoBlockProps {\r\n  order: any;\r\n}\r\n\r\n// Memoized component to prevent unnecessary re-renders\r\nexport const VehicleInfoBlock = React.memo(function VehicleInfoBlock({ order }: VehicleInfoBlockProps) {\r\n  const { t } = useTranslation();\r\n\r\n  // Memoize vehicle info array to prevent recreation on every render\r\n  const vehicleInfo = useMemo(() => [\r\n    {\r\n      icon: Calendar,\r\n      label: t('common.year'),\r\n      value: order.vehicle_year || 'N/A'\r\n    },\r\n    {\r\n      icon: Car,\r\n      label: t('common.make'),\r\n      value: order.vehicle_make || 'N/A'\r\n    },\r\n    {\r\n      icon: Car,\r\n      label: t('common.model'), \r\n      value: order.vehicle_model || 'N/A'\r\n    },\r\n    {\r\n      icon: Hash,\r\n      label: 'VIN',\r\n      value: order.vehicle_vin || t('data_table.vin_not_provided'),\r\n      mono: true\r\n    },\r\n    {\r\n      icon: Hash,\r\n      label: 'Stock#',\r\n      value: order.stock_number || t('data_table.no_stock')\r\n    },\r\n    {\r\n      icon: Palette,\r\n      label: t('common.color'),\r\n      value: order.vehicle_color || 'N/A'\r\n    }\r\n  ], [order.vehicle_year, order.vehicle_make, order.vehicle_model, order.vehicle_vin, order.stock_number, order.vehicle_color, t]);\r\n\r\n  // Memoize decode status calculation\r\n  const decodeStatus = useMemo(() => {\r\n    if (order.vin_decoded) {\r\n      return {\r\n        status: 'success',\r\n        text: t('car_wash_orders.decoded'),\r\n        desc: t('car_wash_orders.auto_populated')\r\n      };\r\n    }\r\n    return {\r\n      status: 'manual',\r\n      text: t('vehicle_info.manual_entry'),\r\n      desc: t('vehicle_info.manually_entered')\r\n    };\r\n  }, [order.vin_decoded, t]);\r\n\r\n  // Memoize vehicle summary for display preview\r\n  const vehicleSummary = useMemo(() => ({\r\n    displayName: `${order.vehicle_year || ''} ${order.vehicle_make || ''} ${order.vehicle_model || ''}`.trim() || 'Unknown Vehicle',\r\n    vinDisplay: order.vehicle_vin ? `${order.vehicle_vin.slice(0, 8)}...${order.vehicle_vin.slice(-4)}` : 'N/A'\r\n  }), [order.vehicle_year, order.vehicle_make, order.vehicle_model, order.vehicle_vin]);\r\n\r\n  return (\r\n    <Card className=\"h-full\">\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"flex items-center gap-2 text-lg\">\r\n          <Car className=\"h-5 w-5 text-primary\" />\r\n          {t('orders.vehicle_information')}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      \r\n      <CardContent className=\"space-y-4\">\r\n        {/* Vehicle Details Grid */}\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\r\n          {vehicleInfo.map((info, index) => {\r\n            const Icon = info.icon;\r\n            return (\r\n              <div key={index} className=\"flex items-center gap-3 p-2 rounded-lg bg-muted/30\">\r\n                <Icon className=\"h-4 w-4 text-muted-foreground flex-shrink-0\" />\r\n                <div className=\"min-w-0 flex-1\">\r\n                  <p className=\"text-xs text-muted-foreground uppercase tracking-wide\">\r\n                    {info.label}\r\n                  </p>\r\n                  <p className={`text-sm font-medium truncate ${info.mono ? 'font-mono' : ''}`}>\r\n                    {info.value}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* VIN Decode Status */}\r\n        <div className=\"pt-3 border-t\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\r\n              <span className=\"text-sm font-medium\">{t('vehicle_info.vin_status')}</span>\r\n            </div>\r\n            <Badge \r\n              variant={decodeStatus.status === 'success' ? 'default' : 'outline'}\r\n              className=\"text-xs\"\r\n            >\r\n              {decodeStatus.text}\r\n            </Badge>\r\n          </div>\r\n          <p className=\"text-xs text-muted-foreground mt-1\">\r\n            {decodeStatus.desc}\r\n          </p>\r\n        </div>\r\n\r\n        {/* Vehicle Summary Display */}\r\n        <div className=\"pt-3 border-t\">\r\n          <div className=\"flex items-center gap-2 mb-2\">\r\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\r\n            <span className=\"text-sm font-medium\">{t('vehicle_info.display_preview')}</span>\r\n          </div>\r\n          <div className=\"p-3 bg-muted/50 rounded-lg border border-dashed\">\r\n            <p className=\"text-sm font-semibold text-center\">\r\n              {vehicleSummary.displayName}\r\n            </p>\r\n            <p className=\"text-xs text-muted-foreground text-center mt-1\">\r\n              VIN: {vehicleSummary.vinDisplay}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\communication\\CommunicationHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\communication\\MentionPicker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\communication\\MessageComposer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\communication\\MessageReactions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\communication\\MessageThread.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[971,974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[971,974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6009,6012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6009,6012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card } from '@/components/ui/card';\r\nimport { \r\n  Reply, \r\n  MoreHorizontal, \r\n  ThumbsUp, \r\n  Heart, \r\n  Smile, \r\n  Play, \r\n  Pause,\r\n  Volume2,\r\n  Download,\r\n  Lock,\r\n  Edit,\r\n  Trash2,\r\n  MessageSquare\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { MessageReactions } from './MessageReactions';\r\nimport { VoicePlayer } from './VoicePlayer';\r\n\r\ninterface Message {\r\n  id: string;\r\n  order_id: string;\r\n  parent_message_id?: string;\r\n  user_id: string;\r\n  message_type: 'text' | 'voice' | 'file' | 'system_update';\r\n  content?: string;\r\n  voice_file_path?: string;\r\n  voice_duration_ms?: number;\r\n  voice_transcription?: string;\r\n  attachments: any[];\r\n  mentions: string[];\r\n  reactions: Record<string, string[]>;\r\n  is_edited: boolean;\r\n  edited_at?: string;\r\n  reply_count: number;\r\n  is_internal: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  user_name?: string;\r\n  user_avatar?: string;\r\n  replies?: Message[];\r\n}\r\n\r\ninterface MessageThreadProps {\r\n  messages: Message[];\r\n  onReply: (messageId: string, content: string) => void;\r\n  onReaction: (messageId: string, emoji: string) => void;\r\n  loading: boolean;\r\n  onLoadMore?: () => void;\r\n  hasMore?: boolean;\r\n  isDetailUser?: boolean;\r\n}\r\n\r\nexport function MessageThread({\r\n  messages,\r\n  onReply,\r\n  onReaction,\r\n  loading,\r\n  onLoadMore,\r\n  hasMore,\r\n  isDetailUser = false\r\n}: MessageThreadProps) {\r\n  const { t } = useTranslation();\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const [replyingTo, setReplyingTo] = useState<string | null>(null);\r\n  const [replyContent, setReplyContent] = useState('');\r\n  const [expandedThreads, setExpandedThreads] = useState<Set<string>>(new Set());\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleReply = (messageId: string) => {\r\n    if (replyContent.trim()) {\r\n      onReply(messageId, replyContent);\r\n      setReplyContent('');\r\n      setReplyingTo(null);\r\n    }\r\n  };\r\n\r\n  const toggleThread = (messageId: string) => {\r\n    const newExpanded = new Set(expandedThreads);\r\n    if (newExpanded.has(messageId)) {\r\n      newExpanded.delete(messageId);\r\n    } else {\r\n      newExpanded.add(messageId);\r\n    }\r\n    setExpandedThreads(newExpanded);\r\n  };\r\n\r\n  const renderMessage = (message: Message, isReply = false, depth = 0) => {\r\n    const isSystemMessage = message.message_type === 'system_update';\r\n    const isVoiceMessage = message.message_type === 'voice';\r\n    const isFileMessage = message.message_type === 'file';\r\n    const hasReplies = message.reply_count > 0;\r\n    const isExpanded = expandedThreads.has(message.id);\r\n\r\n    return (\r\n      <div\r\n        key={message.id}\r\n        className={`group relative ${isReply ? `ml-${Math.min(depth * 6, 12)} border-l-2 border-muted pl-4` : ''}`}\r\n      >\r\n        <Card className={`p-4 ${isSystemMessage ? 'bg-muted/50' : ''} ${message.is_internal && !isDetailUser ? 'hidden' : ''}`}>\r\n          <div className=\"flex gap-3\">\r\n            {/* Avatar */}\r\n            {!isSystemMessage && (\r\n              <Avatar className=\"w-8 h-8 shrink-0\">\r\n                <AvatarImage src={message.user_avatar} />\r\n                <AvatarFallback className=\"text-xs\">\r\n                  {message.user_name?.charAt(0) || 'U'}\r\n                </AvatarFallback>\r\n              </Avatar>\r\n            )}\r\n\r\n            <div className=\"flex-1 min-w-0\">\r\n              {/* Header */}\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                {!isSystemMessage && (\r\n                  <>\r\n                    <span className=\"font-medium text-sm\">{message.user_name}</span>\r\n                    <span className=\"text-xs text-muted-foreground\">\r\n                      {formatDistanceToNow(new Date(message.created_at), { addSuffix: true })}\r\n                    </span>\r\n                    {message.is_edited && (\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {t('communication.edited')}\r\n                      </Badge>\r\n                    )}\r\n                    {message.is_internal && (\r\n                      <Badge variant=\"secondary\" className=\"text-xs flex items-center gap-1\">\r\n                        <Lock className=\"w-3 h-3\" />\r\n                        {t('communication.internal')}\r\n                      </Badge>\r\n                    )}\r\n                  </>\r\n                )}\r\n              </div>\r\n\r\n              {/* Content */}\r\n              <div className=\"space-y-2\">\r\n                {/* Text Content */}\r\n                {message.content && (\r\n                  <div className=\"text-sm leading-relaxed\">\r\n                    {message.content}\r\n                  </div>\r\n                )}\r\n\r\n                {/* Voice Message */}\r\n                {isVoiceMessage && (\r\n                  <div className=\"space-y-2\">\r\n                    <VoicePlayer\r\n                      audioUrl={message.voice_file_path}\r\n                      duration={message.voice_duration_ms}\r\n                    />\r\n                    {message.voice_transcription && (\r\n                      <div className=\"text-xs text-muted-foreground bg-muted/50 p-2 rounded border-l-2 border-primary\">\r\n                        <div className=\"font-medium mb-1\">{t('communication.transcription')}:</div>\r\n                        {message.voice_transcription}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                {/* File Attachments */}\r\n                {message.attachments && message.attachments.length > 0 && (\r\n                  <div className=\"space-y-2\">\r\n                    {message.attachments.map((attachment: any, index: number) => (\r\n                      <Card key={index} className=\"p-3 border border-dashed\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <div className=\"w-8 h-8 bg-primary/10 rounded flex items-center justify-center\">\r\n                            {attachment.type?.startsWith('image/') ? '🖼️' : '📎'}\r\n                          </div>\r\n                          <div className=\"flex-1 min-w-0\">\r\n                            <div className=\"text-sm font-medium truncate\">{attachment.name}</div>\r\n                            <div className=\"text-xs text-muted-foreground\">\r\n                              {attachment.size && `${(attachment.size / 1024).toFixed(1)} KB`}\r\n                            </div>\r\n                          </div>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Download className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </Card>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n\r\n                {/* Reactions */}\r\n                {Object.keys(message.reactions).length > 0 && (\r\n                  <MessageReactions\r\n                    reactions={message.reactions}\r\n                    onReaction={(emoji) => onReaction(message.id, emoji)}\r\n                  />\r\n                )}\r\n              </div>\r\n\r\n              {/* Actions */}\r\n              <div className=\"flex items-center gap-1 mt-2 opacity-0 group-hover:opacity-100 transition-opacity\">\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => setReplyingTo(message.id)}\r\n                  className=\"h-8 px-2\"\r\n                >\r\n                  <Reply className=\"w-3 h-3 mr-1\" />\r\n                  {t('communication.reply')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => onReaction(message.id, '👍')}\r\n                  className=\"h-8 px-2\"\r\n                >\r\n                  <ThumbsUp className=\"w-3 h-3\" />\r\n                </Button>\r\n                <Button variant=\"ghost\" size=\"sm\" className=\"h-8 px-2\">\r\n                  <MoreHorizontal className=\"w-3 h-3\" />\r\n                </Button>\r\n              </div>\r\n\r\n              {/* Reply Interface */}\r\n              {replyingTo === message.id && (\r\n                <div className=\"mt-3 p-3 bg-muted/50 rounded border\">\r\n                  <div className=\"flex gap-2\">\r\n                    <input\r\n                      type=\"text\"\r\n                      placeholder={t('communication.reply_placeholder')}\r\n                      value={replyContent}\r\n                      onChange={(e) => setReplyContent(e.target.value)}\r\n                      className=\"flex-1 px-3 py-2 text-sm border border-input rounded-md bg-background\"\r\n                      onKeyPress={(e) => {\r\n                        if (e.key === 'Enter' && !e.shiftKey) {\r\n                          e.preventDefault();\r\n                          handleReply(message.id);\r\n                        }\r\n                      }}\r\n                    />\r\n                    <Button size=\"sm\" onClick={() => handleReply(message.id)}>\r\n                      {t('communication.send')}\r\n                    </Button>\r\n                    <Button \r\n                      variant=\"outline\" \r\n                      size=\"sm\" \r\n                      onClick={() => setReplyingTo(null)}\r\n                    >\r\n                      {t('common.cancel')}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Thread Toggle */}\r\n              {hasReplies && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => toggleThread(message.id)}\r\n                  className=\"mt-2 text-xs text-primary\"\r\n                >\r\n                  <MessageSquare className=\"w-3 h-3 mr-1\" />\r\n                  {isExpanded ? t('communication.hide_replies') : \r\n                    t('communication.show_replies', { count: message.reply_count })}\r\n                </Button>\r\n              )}\r\n\r\n              {/* Nested Replies */}\r\n              {isExpanded && message.replies && (\r\n                <div className=\"mt-3 space-y-3\">\r\n                  {message.replies.map(reply => renderMessage(reply, true, depth + 1))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </Card>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  if (loading && messages.length === 0) {\r\n    return (\r\n      <div className=\"flex-1 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\r\n          <p className=\"text-sm text-muted-foreground mt-2\">{t('communication.loading')}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex-1 flex flex-col\">\r\n      {/* Load More Button */}\r\n      {hasMore && (\r\n        <div className=\"p-4 text-center\">\r\n          <Button variant=\"outline\" onClick={onLoadMore} disabled={loading}>\r\n            {loading ? t('communication.loading') : t('communication.load_more')}\r\n          </Button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Messages */}\r\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\r\n        {messages.length === 0 ? (\r\n          <div className=\"text-center py-8\">\r\n            <MessageSquare className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\r\n            <p className=\"text-muted-foreground\">{t('communication.no_messages')}</p>\r\n          </div>\r\n        ) : (\r\n          messages.map(message => renderMessage(message))\r\n        )}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\communication\\VoicePlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\orders\\communication\\VoiceRecorder.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\performance\\PerformanceMonitor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":446,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":446,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18375,18378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18375,18378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { \r\n  Activity, \r\n  Cpu, \r\n  Database, \r\n  Globe, \r\n  Clock, \r\n  AlertTriangle,\r\n  CheckCircle,\r\n  RefreshCw,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Zap,\r\n  Users,\r\n  BarChart3\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, AreaChart, Area } from 'recharts';\r\n\r\ninterface PerformanceMetrics {\r\n  cpu: number;\r\n  memory: number;\r\n  database: number;\r\n  network: number;\r\n  response_time: number;\r\n  error_rate: number;\r\n  active_users: number;\r\n  requests_per_minute: number;\r\n  cache_hit_rate: number;\r\n  uptime: number;\r\n}\r\n\r\ninterface PerformanceAlert {\r\n  id: string;\r\n  type: 'critical' | 'warning' | 'info';\r\n  title: string;\r\n  description: string;\r\n  timestamp: string;\r\n  resolved: boolean;\r\n}\r\n\r\ninterface PerformanceMonitorProps {\r\n  dealerId?: number;\r\n  className?: string;\r\n}\r\n\r\nexport const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({\r\n  dealerId,\r\n  className = ''\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\r\n    cpu: 45,\r\n    memory: 62,\r\n    database: 38,\r\n    network: 78,\r\n    response_time: 142,\r\n    error_rate: 0.2,\r\n    active_users: 234,\r\n    requests_per_minute: 1247,\r\n    cache_hit_rate: 94.5,\r\n    uptime: 99.8\r\n  });\r\n\r\n  const [alerts, setAlerts] = useState<PerformanceAlert[]>([\r\n    {\r\n      id: '1',\r\n      type: 'warning',\r\n      title: 'High Memory Usage',\r\n      description: 'Memory usage is above 60%. Consider optimizing or scaling.',\r\n      timestamp: new Date().toISOString(),\r\n      resolved: false\r\n    },\r\n    {\r\n      id: '2',\r\n      type: 'info',\r\n      title: 'Cache Performance',\r\n      description: 'Cache hit rate is excellent at 94.5%.',\r\n      timestamp: new Date().toISOString(),\r\n      resolved: true\r\n    }\r\n  ]);\r\n\r\n  const [historicalData, setHistoricalData] = useState([\r\n    { time: '00:00', cpu: 35, memory: 45, response: 120, users: 180 },\r\n    { time: '04:00', cpu: 28, memory: 42, response: 110, users: 95 },\r\n    { time: '08:00', cpu: 52, memory: 58, response: 150, users: 320 },\r\n    { time: '12:00', cpu: 48, memory: 65, response: 145, users: 410 },\r\n    { time: '16:00', cpu: 45, memory: 62, response: 142, users: 380 },\r\n    { time: '20:00', cpu: 38, memory: 55, response: 135, users: 290 }\r\n  ]);\r\n\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Simulate real-time updates\r\n    const interval = setInterval(() => {\r\n      setMetrics(prev => ({\r\n        ...prev,\r\n        cpu: Math.max(20, Math.min(90, prev.cpu + (Math.random() - 0.5) * 10)),\r\n        memory: Math.max(30, Math.min(95, prev.memory + (Math.random() - 0.5) * 8)),\r\n        database: Math.max(10, Math.min(80, prev.database + (Math.random() - 0.5) * 12)),\r\n        network: Math.max(40, Math.min(100, prev.network + (Math.random() - 0.5) * 15)),\r\n        response_time: Math.max(80, Math.min(300, prev.response_time + (Math.random() - 0.5) * 20)),\r\n        error_rate: Math.max(0, Math.min(5, prev.error_rate + (Math.random() - 0.5) * 0.5)),\r\n        active_users: Math.max(50, Math.min(500, prev.active_users + Math.floor((Math.random() - 0.5) * 20))),\r\n        requests_per_minute: Math.max(500, Math.min(2000, prev.requests_per_minute + Math.floor((Math.random() - 0.5) * 100)))\r\n      }));\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const handleRefresh = async () => {\r\n    setIsRefreshing(true);\r\n    // Simulate refresh\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    setIsRefreshing(false);\r\n  };\r\n\r\n  const getStatusColor = (value: number, thresholds: { warning: number; critical: number }, reverse = false) => {\r\n    if (reverse) {\r\n      if (value < thresholds.critical) return 'text-red-600';\r\n      if (value < thresholds.warning) return 'text-yellow-600';\r\n      return 'text-green-600';\r\n    } else {\r\n      if (value > thresholds.critical) return 'text-red-600';\r\n      if (value > thresholds.warning) return 'text-yellow-600';\r\n      return 'text-green-600';\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (value: number, thresholds: { warning: number; critical: number }, reverse = false) => {\r\n    if (reverse) {\r\n      if (value < thresholds.critical) return <Badge variant=\"destructive\">Critical</Badge>;\r\n      if (value < thresholds.warning) return <Badge variant=\"secondary\">Warning</Badge>;\r\n      return <Badge variant=\"default\">Good</Badge>;\r\n    } else {\r\n      if (value > thresholds.critical) return <Badge variant=\"destructive\">Critical</Badge>;\r\n      if (value > thresholds.warning) return <Badge variant=\"secondary\">Warning</Badge>;\r\n      return <Badge variant=\"default\">Good</Badge>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`space-y-6 ${className}`}>\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h2 className=\"text-2xl font-bold\">{t('performance.monitor', 'Performance Monitor')}</h2>\r\n          <p className=\"text-muted-foreground\">\r\n            {t('performance.real_time_metrics', 'Real-time system performance and health metrics')}\r\n          </p>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Badge variant=\"outline\" className=\"flex items-center gap-1\">\r\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\r\n            {t('performance.live', 'Live')}\r\n          </Badge>\r\n          <Button onClick={handleRefresh} disabled={isRefreshing} variant=\"outline\">\r\n            <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />\r\n            {t('common.refresh', 'Refresh')}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Key Metrics Grid */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <MetricCard\r\n          title={t('performance.cpu_usage', 'CPU Usage')}\r\n          value={`${metrics.cpu.toFixed(1)}%`}\r\n          icon={Cpu}\r\n          progress={metrics.cpu}\r\n          status={getStatusBadge(metrics.cpu, { warning: 70, critical: 85 })}\r\n          trend={2.3}\r\n        />\r\n        <MetricCard\r\n          title={t('performance.memory_usage', 'Memory Usage')}\r\n          value={`${metrics.memory.toFixed(1)}%`}\r\n          icon={Activity}\r\n          progress={metrics.memory}\r\n          status={getStatusBadge(metrics.memory, { warning: 75, critical: 90 })}\r\n          trend={-1.2}\r\n        />\r\n        <MetricCard\r\n          title={t('performance.database_load', 'Database Load')}\r\n          value={`${metrics.database.toFixed(1)}%`}\r\n          icon={Database}\r\n          progress={metrics.database}\r\n          status={getStatusBadge(metrics.database, { warning: 60, critical: 80 })}\r\n          trend={0.8}\r\n        />\r\n        <MetricCard\r\n          title={t('performance.network_usage', 'Network Usage')}\r\n          value={`${metrics.network.toFixed(1)}%`}\r\n          icon={Globe}\r\n          progress={metrics.network}\r\n          status={getStatusBadge(metrics.network, { warning: 80, critical: 95 })}\r\n          trend={-3.1}\r\n        />\r\n      </div>\r\n\r\n      {/* Secondary Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Clock className=\"h-4 w-4 text-blue-500\" />\r\n                <span className=\"text-sm font-medium\">\r\n                  {t('performance.response_time', 'Response Time')}\r\n                </span>\r\n              </div>\r\n              {getStatusBadge(metrics.response_time, { warning: 200, critical: 300 })}\r\n            </div>\r\n            <div className=\"text-2xl font-bold mt-2\">\r\n              {metrics.response_time}ms\r\n            </div>\r\n            <div className=\"text-xs text-green-600 flex items-center gap-1 mt-1\">\r\n              <TrendingDown className=\"h-3 w-3\" />\r\n              12% faster\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\r\n                <span className=\"text-sm font-medium\">\r\n                  {t('performance.error_rate', 'Error Rate')}\r\n                </span>\r\n              </div>\r\n              {getStatusBadge(metrics.error_rate, { warning: 1, critical: 2 })}\r\n            </div>\r\n            <div className=\"text-2xl font-bold mt-2\">\r\n              {metrics.error_rate.toFixed(2)}%\r\n            </div>\r\n            <div className=\"text-xs text-gray-500 mt-1\">\r\n              Last 24 hours\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Users className=\"h-4 w-4 text-purple-500\" />\r\n                <span className=\"text-sm font-medium\">\r\n                  {t('performance.active_users', 'Active Users')}\r\n                </span>\r\n              </div>\r\n              <Badge variant=\"outline\">Live</Badge>\r\n            </div>\r\n            <div className=\"text-2xl font-bold mt-2\">\r\n              {metrics.active_users.toLocaleString()}\r\n            </div>\r\n            <div className=\"text-xs text-blue-600 flex items-center gap-1 mt-1\">\r\n              <TrendingUp className=\"h-3 w-3\" />\r\n              +15% today\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Zap className=\"h-4 w-4 text-green-500\" />\r\n                <span className=\"text-sm font-medium\">\r\n                  {t('performance.cache_hit_rate', 'Cache Hit')}\r\n                </span>\r\n              </div>\r\n              {getStatusBadge(metrics.cache_hit_rate, { warning: 80, critical: 70 }, true)}\r\n            </div>\r\n            <div className=\"text-2xl font-bold mt-2\">\r\n              {metrics.cache_hit_rate.toFixed(1)}%\r\n            </div>\r\n            <div className=\"text-xs text-green-600 flex items-center gap-1 mt-1\">\r\n              <CheckCircle className=\"h-3 w-3\" />\r\n              Excellent\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"charts\" className=\"space-y-4\">\r\n        <TabsList>\r\n          <TabsTrigger value=\"charts\">{t('performance.charts', 'Charts')}</TabsTrigger>\r\n          <TabsTrigger value=\"alerts\">{t('performance.alerts', 'Alerts')}</TabsTrigger>\r\n          <TabsTrigger value=\"logs\">{t('performance.logs', 'Logs')}</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"charts\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n            {/* System Resources */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <BarChart3 className=\"h-4 w-4\" />\r\n                  {t('performance.system_resources', 'System Resources')}\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  {t('performance.cpu_memory_over_time', 'CPU and Memory usage over time')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <AreaChart data={historicalData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"time\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Area type=\"monotone\" dataKey=\"cpu\" stackId=\"1\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.3} />\r\n                    <Area type=\"monotone\" dataKey=\"memory\" stackId=\"1\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.3} />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Response Time & Users */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Activity className=\"h-4 w-4\" />\r\n                  {t('performance.response_and_load', 'Response Time & Load')}\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  {t('performance.response_time_vs_users', 'Response time correlation with active users')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <LineChart data={historicalData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"time\" />\r\n                    <YAxis yAxisId=\"left\" />\r\n                    <YAxis yAxisId=\"right\" orientation=\"right\" />\r\n                    <Tooltip />\r\n                    <Line yAxisId=\"left\" type=\"monotone\" dataKey=\"response\" stroke=\"#ff7300\" strokeWidth={2} />\r\n                    <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"users\" stroke=\"#8884d8\" strokeWidth={2} />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"alerts\" className=\"space-y-4\">\r\n          <div className=\"space-y-3\">\r\n            {alerts.map((alert) => (\r\n              <Card key={alert.id} className={`border-l-4 ${\r\n                alert.type === 'critical' ? 'border-l-red-500' :\r\n                alert.type === 'warning' ? 'border-l-yellow-500' :\r\n                'border-l-blue-500'\r\n              }`}>\r\n                <CardContent className=\"p-4\">\r\n                  <div className=\"flex items-start justify-between\">\r\n                    <div className=\"flex items-start gap-3\">\r\n                      {alert.type === 'critical' ? (\r\n                        <AlertTriangle className=\"h-5 w-5 text-red-500 mt-0.5\" />\r\n                      ) : alert.type === 'warning' ? (\r\n                        <AlertTriangle className=\"h-5 w-5 text-yellow-500 mt-0.5\" />\r\n                      ) : (\r\n                        <CheckCircle className=\"h-5 w-5 text-blue-500 mt-0.5\" />\r\n                      )}\r\n                      <div>\r\n                        <h4 className=\"font-medium\">{alert.title}</h4>\r\n                        <p className=\"text-sm text-muted-foreground mt-1\">\r\n                          {alert.description}\r\n                        </p>\r\n                        <p className=\"text-xs text-muted-foreground mt-2\">\r\n                          {new Date(alert.timestamp).toLocaleString()}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <Badge variant={alert.resolved ? \"default\" : \"destructive\"}>\r\n                      {alert.resolved ? t('performance.resolved', 'Resolved') : t('performance.active', 'Active')}\r\n                    </Badge>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"logs\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>{t('performance.system_logs', 'System Logs')}</CardTitle>\r\n              <CardDescription>\r\n                {t('performance.recent_system_events', 'Recent system events and performance logs')}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-2 font-mono text-sm\">\r\n                <div className=\"flex gap-4 text-xs text-muted-foreground border-b pb-2\">\r\n                  <span className=\"w-20\">Time</span>\r\n                  <span className=\"w-16\">Level</span>\r\n                  <span className=\"flex-1\">Message</span>\r\n                </div>\r\n                <div className=\"flex gap-4 text-xs\">\r\n                  <span className=\"w-20\">14:32:15</span>\r\n                  <Badge variant=\"outline\" className=\"w-16 text-xs\">INFO</Badge>\r\n                  <span className=\"flex-1\">Cache warming completed successfully</span>\r\n                </div>\r\n                <div className=\"flex gap-4 text-xs\">\r\n                  <span className=\"w-20\">14:31:42</span>\r\n                  <Badge variant=\"secondary\" className=\"w-16 text-xs\">WARN</Badge>\r\n                  <span className=\"flex-1\">Memory usage approaching threshold (62%)</span>\r\n                </div>\r\n                <div className=\"flex gap-4 text-xs\">\r\n                  <span className=\"w-20\">14:30:08</span>\r\n                  <Badge variant=\"outline\" className=\"w-16 text-xs\">INFO</Badge>\r\n                  <span className=\"flex-1\">Database connection pool optimized</span>\r\n                </div>\r\n                <div className=\"flex gap-4 text-xs\">\r\n                  <span className=\"w-20\">14:28:55</span>\r\n                  <Badge variant=\"destructive\" className=\"w-16 text-xs\">ERROR</Badge>\r\n                  <span className=\"flex-1\">Failed to connect to external API (retry in 30s)</span>\r\n                </div>\r\n                <div className=\"flex gap-4 text-xs\">\r\n                  <span className=\"w-20\">14:27:12</span>\r\n                  <Badge variant=\"outline\" className=\"w-16 text-xs\">INFO</Badge>\r\n                  <span className=\"flex-1\">Auto-scaling triggered: +2 instances</span>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface MetricCardProps {\r\n  title: string;\r\n  value: string;\r\n  icon: React.ComponentType<any>;\r\n  progress: number;\r\n  status: React.ReactNode;\r\n  trend: number;\r\n}\r\n\r\nconst MetricCard: React.FC<MetricCardProps> = ({ title, value, icon: Icon, progress, status, trend }) => {\r\n  return (\r\n    <Card>\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex items-center justify-between mb-2\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Icon className=\"h-4 w-4 text-muted-foreground\" />\r\n            <span className=\"text-sm font-medium\">{title}</span>\r\n          </div>\r\n          {status}\r\n        </div>\r\n        <div className=\"text-2xl font-bold mb-2\">{value}</div>\r\n        <Progress value={progress} className=\"h-2 mb-2\" />\r\n        <div className=\"flex items-center justify-between text-xs\">\r\n          <span className={`flex items-center gap-1 ${trend > 0 ? 'text-red-600' : 'text-green-600'}`}>\r\n            {trend > 0 ? <TrendingUp className=\"h-3 w-3\" /> : <TrendingDown className=\"h-3 w-3\" />}\r\n            {Math.abs(trend)}%\r\n          </span>\r\n          <span className=\"text-muted-foreground\">vs last hour</span>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\permissions\\AdvancedPermissionManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1525,1528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1525,1528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":173,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":173,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5482,5485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5482,5485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7406,7409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7406,7409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7797,7800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7797,7800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { \r\n  Shield, \r\n  ChevronDown, \r\n  ChevronRight, \r\n  User, \r\n  Users,\r\n  Lock,\r\n  Unlock,\r\n  Eye,\r\n  Edit,\r\n  Trash2,\r\n  Settings,\r\n  AlertTriangle,\r\n  History,\r\n  CheckCircle\r\n} from 'lucide-react';\r\n\r\ninterface Permission {\r\n  module: string;\r\n  permission_level: 'none' | 'read' | 'write' | 'delete' | 'admin';\r\n  description?: string;\r\n}\r\n\r\ninterface Role {\r\n  id: string;\r\n  name: string;\r\n  display_name: string;\r\n  description?: string;\r\n  user_type: 'dealer' | 'detail' | 'system_admin';\r\n  is_system_role: boolean;\r\n  permissions: Permission[];\r\n}\r\n\r\ninterface PermissionModule {\r\n  name: string;\r\n  display_name: string;\r\n  description: string;\r\n  permissions: Array<{\r\n    level: Permission['permission_level'];\r\n    description: string;\r\n    icon: React.ComponentType<any>;\r\n  }>;\r\n}\r\n\r\nconst PERMISSION_MODULES: PermissionModule[] = [\r\n  {\r\n    name: 'dashboard',\r\n    display_name: 'Dashboard',\r\n    description: 'Access to main dashboard and overview',\r\n    permissions: [\r\n      { level: 'read', description: 'View dashboard', icon: Eye },\r\n      { level: 'admin', description: 'Manage dashboard settings', icon: Settings }\r\n    ]\r\n  },\r\n  {\r\n    name: 'sales_orders',\r\n    display_name: 'Sales Orders',\r\n    description: 'Manage sales orders and customer requests',\r\n    permissions: [\r\n      { level: 'read', description: 'View sales orders', icon: Eye },\r\n      { level: 'write', description: 'Create and edit orders', icon: Edit },\r\n      { level: 'delete', description: 'Delete orders', icon: Trash2 },\r\n      { level: 'admin', description: 'Manage order settings', icon: Settings }\r\n    ]\r\n  },\r\n  {\r\n    name: 'service_orders',\r\n    display_name: 'Service Orders',\r\n    description: 'Manage service orders and maintenance requests',\r\n    permissions: [\r\n      { level: 'read', description: 'View service orders', icon: Eye },\r\n      { level: 'write', description: 'Create and edit orders', icon: Edit },\r\n      { level: 'delete', description: 'Delete orders', icon: Trash2 },\r\n      { level: 'admin', description: 'Manage service settings', icon: Settings }\r\n    ]\r\n  },\r\n  {\r\n    name: 'users',\r\n    display_name: 'User Management',\r\n    description: 'Manage users, roles, and permissions',\r\n    permissions: [\r\n      { level: 'read', description: 'View users', icon: Eye },\r\n      { level: 'write', description: 'Create and edit users', icon: Edit },\r\n      { level: 'delete', description: 'Delete users', icon: Trash2 },\r\n      { level: 'admin', description: 'Manage permissions', icon: Shield }\r\n    ]\r\n  },\r\n  {\r\n    name: 'reports',\r\n    display_name: 'Reports & Analytics',\r\n    description: 'Access to reports and analytical data',\r\n    permissions: [\r\n      { level: 'read', description: 'View reports', icon: Eye },\r\n      { level: 'admin', description: 'Manage report settings', icon: Settings }\r\n    ]\r\n  }\r\n];\r\n\r\ninterface AdvancedPermissionManagerProps {\r\n  roleId?: string;\r\n  userId?: string;\r\n  onPermissionsChange?: (permissions: Permission[]) => void;\r\n}\r\n\r\nexport const AdvancedPermissionManager: React.FC<AdvancedPermissionManagerProps> = ({\r\n  roleId,\r\n  userId,\r\n  onPermissionsChange\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  \r\n  // State management\r\n  const [roles, setRoles] = useState<Role[]>([]);\r\n  const [selectedRole, setSelectedRole] = useState<Role | null>(null);\r\n  const [permissions, setPermissions] = useState<Permission[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [expandedModules, setExpandedModules] = useState<string[]>(['dashboard']);\r\n\r\n  // Fetch roles and permissions\r\n  const fetchRolesAndPermissions = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Fetch roles\r\n      const { data: rolesData, error: rolesError } = await supabase\r\n        .from('roles')\r\n        .select(`\r\n          *,\r\n          role_permissions (\r\n            module,\r\n            permission_level\r\n          )\r\n        `)\r\n        .eq('is_active', true);\r\n\r\n      if (rolesError) throw rolesError;\r\n\r\n      const processedRoles: Role[] = (rolesData || []).map(role => ({\r\n        id: role.id,\r\n        name: role.name,\r\n        display_name: role.display_name,\r\n        description: role.description,\r\n        user_type: role.user_type,\r\n        is_system_role: role.is_system_role,\r\n        permissions: role.role_permissions || []\r\n      }));\r\n\r\n      setRoles(processedRoles);\r\n\r\n      // If roleId is provided, select that role\r\n      if (roleId) {\r\n        const role = processedRoles.find(r => r.id === roleId);\r\n        if (role) {\r\n          setSelectedRole(role);\r\n          setPermissions(role.permissions);\r\n        }\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching roles and permissions:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error loading permissions',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [roleId, t, toast]);\r\n\r\n  // Update permission level for a module\r\n  const updatePermissionLevel = (module: string, level: Permission['permission_level']) => {\r\n    const updatedPermissions = permissions.filter(p => p.module !== module);\r\n    \r\n    if (level !== 'none') {\r\n      updatedPermissions.push({\r\n        module,\r\n        permission_level: level\r\n      });\r\n    }\r\n\r\n    setPermissions(updatedPermissions);\r\n    onPermissionsChange?.(updatedPermissions);\r\n  };\r\n\r\n  // Get current permission level for a module\r\n  const getPermissionLevel = (module: string): Permission['permission_level'] => {\r\n    const permission = permissions.find(p => p.module === module);\r\n    return permission?.permission_level || 'none';\r\n  };\r\n\r\n  // Get permission hierarchy weight\r\n  const getPermissionWeight = (level: Permission['permission_level']): number => {\r\n    const weights = { none: 0, read: 1, write: 2, delete: 3, admin: 4 };\r\n    return weights[level];\r\n  };\r\n\r\n  // Save permissions\r\n  const savePermissions = async () => {\r\n    if (!selectedRole) return;\r\n\r\n    try {\r\n      setSaving(true);\r\n\r\n      // Delete existing permissions\r\n      const { error: deleteError } = await supabase\r\n        .from('role_permissions')\r\n        .delete()\r\n        .eq('role_id', selectedRole.id);\r\n\r\n      if (deleteError) throw deleteError;\r\n\r\n      // Insert new permissions\r\n      if (permissions.length > 0) {\r\n        const { error: insertError } = await supabase\r\n          .from('role_permissions')\r\n          .insert(\r\n            permissions.map(p => ({\r\n              role_id: selectedRole.id,\r\n              module: p.module as any, // Type assertion for enum compatibility\r\n              permission_level: p.permission_level\r\n            }))\r\n          );\r\n\r\n        if (insertError) throw insertError;\r\n      }\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: 'Permissions updated successfully',\r\n      });\r\n\r\n      // Refresh data\r\n      fetchRolesAndPermissions();\r\n\r\n    } catch (error: any) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error saving permissions',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  // Toggle module expansion\r\n  const toggleModule = (moduleName: string) => {\r\n    setExpandedModules(prev => \r\n      prev.includes(moduleName)\r\n        ? prev.filter(m => m !== moduleName)\r\n        : [...prev, moduleName]\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRolesAndPermissions();\r\n  }, [roleId, userId, fetchRolesAndPermissions]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className=\"animate-pulse\">\r\n        <CardContent className=\"p-6\">\r\n          <div className=\"space-y-4\">\r\n            <div className=\"h-4 bg-muted rounded w-1/3\"></div>\r\n            <div className=\"h-4 bg-muted rounded w-1/2\"></div>\r\n            <div className=\"h-4 bg-muted rounded w-1/4\"></div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h3 className=\"text-lg font-semibold\">Advanced Permission Manager</h3>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Configure detailed permissions for roles and users\r\n          </p>\r\n        </div>\r\n        {selectedRole && (\r\n          <Button \r\n            onClick={savePermissions} \r\n            disabled={saving}\r\n            className=\"flex items-center gap-2\"\r\n          >\r\n            <CheckCircle className=\"h-4 w-4\" />\r\n            {saving ? 'Saving...' : 'Save Changes'}\r\n          </Button>\r\n        )}\r\n      </div>\r\n\r\n      <Tabs defaultValue=\"roles\" className=\"space-y-4\">\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"roles\">Role Permissions</TabsTrigger>\r\n          <TabsTrigger value=\"hierarchy\">Permission Hierarchy</TabsTrigger>\r\n          <TabsTrigger value=\"audit\">Audit Log</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"roles\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n            {/* Role Selection */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Users className=\"h-5 w-5\" />\r\n                  Roles\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-2\">\r\n                {roles.map((role) => (\r\n                  <Button\r\n                    key={role.id}\r\n                    variant={selectedRole?.id === role.id ? \"default\" : \"ghost\"}\r\n                    className=\"w-full justify-start\"\r\n                    onClick={() => {\r\n                      setSelectedRole(role);\r\n                      setPermissions(role.permissions);\r\n                    }}\r\n                  >\r\n                    <div className=\"flex items-center gap-2 w-full\">\r\n                      <Shield className=\"h-4 w-4\" />\r\n                      <div className=\"text-left flex-1\">\r\n                        <p className=\"font-medium\">{role.display_name}</p>\r\n                        <p className=\"text-xs text-muted-foreground\">\r\n                          {role.permissions.length} permissions\r\n                        </p>\r\n                      </div>\r\n                      {role.is_system_role && (\r\n                        <Lock className=\"h-4 w-4 text-muted-foreground\" />\r\n                      )}\r\n                    </div>\r\n                  </Button>\r\n                ))}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Permission Configuration */}\r\n            <div className=\"lg:col-span-2\">\r\n              {selectedRole ? (\r\n                <Card>\r\n                  <CardHeader>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <Shield className=\"h-5 w-5\" />\r\n                        {selectedRole.display_name} Permissions\r\n                      </CardTitle>\r\n                      <div className=\"flex items-center gap-4\">\r\n                        {selectedRole.is_system_role && (\r\n                          <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\r\n                            <Lock className=\"h-3 w-3\" />\r\n                            System Role\r\n                          </Badge>\r\n                        )}\r\n                        <Badge variant=\"outline\">\r\n                          {permissions.length} modules\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n                    {selectedRole.description && (\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        {selectedRole.description}\r\n                      </p>\r\n                    )}\r\n                  </CardHeader>\r\n                  <CardContent className=\"space-y-4\">\r\n                    {PERMISSION_MODULES.map((module) => {\r\n                      const isExpanded = expandedModules.includes(module.name);\r\n                      const currentLevel = getPermissionLevel(module.name);\r\n                      \r\n                      return (\r\n                        <Collapsible\r\n                          key={module.name}\r\n                          open={isExpanded}\r\n                          onOpenChange={() => toggleModule(module.name)}\r\n                        >\r\n                          <Card className=\"border-2 border-dashed\">\r\n                            <CollapsibleTrigger asChild>\r\n                              <CardHeader className=\"cursor-pointer hover:bg-muted/50 transition-colors\">\r\n                                <div className=\"flex items-center justify-between\">\r\n                                  <div className=\"flex items-center gap-3\">\r\n                                    {isExpanded ? (\r\n                                      <ChevronDown className=\"h-4 w-4\" />\r\n                                    ) : (\r\n                                      <ChevronRight className=\"h-4 w-4\" />\r\n                                    )}\r\n                                    <div>\r\n                                      <h4 className=\"font-medium\">{module.display_name}</h4>\r\n                                      <p className=\"text-sm text-muted-foreground\">\r\n                                        {module.description}\r\n                                      </p>\r\n                                    </div>\r\n                                  </div>\r\n                                  <div className=\"flex items-center gap-2\">\r\n                                    {currentLevel !== 'none' && (\r\n                                      <Badge variant=\"outline\">\r\n                                        {currentLevel}\r\n                                      </Badge>\r\n                                    )}\r\n                                    {currentLevel !== 'none' ? (\r\n                                      <Unlock className=\"h-4 w-4 text-green-500\" />\r\n                                    ) : (\r\n                                      <Lock className=\"h-4 w-4 text-muted-foreground\" />\r\n                                    )}\r\n                                  </div>\r\n                                </div>\r\n                              </CardHeader>\r\n                            </CollapsibleTrigger>\r\n                            \r\n                            <CollapsibleContent>\r\n                              <CardContent>\r\n                                <div className=\"space-y-3\">\r\n                                  <div className=\"flex items-center justify-between\">\r\n                                    <Label>Permission Level</Label>\r\n                                    <Badge variant={currentLevel === 'none' ? 'secondary' : 'default'}>\r\n                                      {currentLevel === 'none' ? 'No Access' : currentLevel}\r\n                                    </Badge>\r\n                                  </div>\r\n                                  \r\n                                  <div className=\"grid gap-2\">\r\n                                    {['none', ...module.permissions.map(p => p.level)].map((level) => {\r\n                                      const permissionInfo = module.permissions.find(p => p.level === level);\r\n                                      const isActive = currentLevel === level;\r\n                                      const IconComponent = permissionInfo?.icon || Lock;\r\n                                      \r\n                                      return (\r\n                                        <div\r\n                                          key={level}\r\n                                          className={`flex items-center justify-between p-3 rounded-lg border-2 cursor-pointer transition-colors ${\r\n                                            isActive \r\n                                              ? 'border-primary bg-primary/5' \r\n                                              : 'border-muted hover:border-muted-foreground/50'\r\n                                          }`}\r\n                                          onClick={() => updatePermissionLevel(module.name, level as Permission['permission_level'])}\r\n                                        >\r\n                                          <div className=\"flex items-center gap-3\">\r\n                                            <IconComponent className={`h-4 w-4 ${isActive ? 'text-primary' : 'text-muted-foreground'}`} />\r\n                                            <div>\r\n                                              <p className={`font-medium ${isActive ? 'text-primary' : ''}`}>\r\n                                                {level === 'none' ? 'No Access' : level.charAt(0).toUpperCase() + level.slice(1)}\r\n                                              </p>\r\n                                              <p className=\"text-xs text-muted-foreground\">\r\n                                                {level === 'none' \r\n                                                  ? 'No access to this module' \r\n                                                  : permissionInfo?.description || `${level} access`\r\n                                                }\r\n                                              </p>\r\n                                            </div>\r\n                                          </div>\r\n                                          {isActive && (\r\n                                            <CheckCircle className=\"h-4 w-4 text-primary\" />\r\n                                          )}\r\n                                        </div>\r\n                                      );\r\n                                    })}\r\n                                  </div>\r\n                                </div>\r\n                              </CardContent>\r\n                            </CollapsibleContent>\r\n                          </Card>\r\n                        </Collapsible>\r\n                      );\r\n                    })}\r\n                  </CardContent>\r\n                </Card>\r\n              ) : (\r\n                <Card>\r\n                  <CardContent className=\"flex items-center justify-center h-64\">\r\n                    <div className=\"text-center\">\r\n                      <Shield className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                      <p className=\"text-muted-foreground\">Select a role to configure permissions</p>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"hierarchy\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Permission Hierarchy</CardTitle>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Understanding permission levels and their relationships\r\n              </p>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-6\">\r\n                {['admin', 'delete', 'write', 'read', 'none'].map((level, index) => (\r\n                  <div key={level} className=\"flex items-start gap-4\">\r\n                    <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-primary/10 text-primary font-semibold text-sm\">\r\n                      {5 - index}\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <h4 className=\"font-medium capitalize\">{level}</h4>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        {level === 'admin' && 'Full administrative access - can manage all settings and permissions'}\r\n                        {level === 'delete' && 'Can delete records in addition to write permissions'}\r\n                        {level === 'write' && 'Can create and modify records in addition to read permissions'}\r\n                        {level === 'read' && 'Can view and access data but cannot modify'}\r\n                        {level === 'none' && 'No access to the module'}\r\n                      </p>\r\n                      {level !== 'none' && (\r\n                        <Badge variant=\"outline\" className=\"mt-1\">\r\n                          Includes all lower permissions\r\n                        </Badge>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"audit\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <History className=\"h-5 w-5\" />\r\n                Permission Audit Log\r\n              </CardTitle>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Track changes to roles and permissions\r\n              </p>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"text-center py-8\">\r\n                <History className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n                <p className=\"text-muted-foreground\">Audit logging feature coming soon</p>\r\n                <p className=\"text-sm text-muted-foreground mt-2\">\r\n                  This will track all permission changes for compliance and security\r\n                </p>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\permissions\\PermissionGuard.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":50,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":50,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { usePermissions, AppModule, PermissionLevel } from '@/hooks/usePermissions';\r\n\r\ninterface PermissionGuardProps {\r\n  module: AppModule;\r\n  permission: PermissionLevel;\r\n  children: React.ReactNode;\r\n  fallback?: React.ReactNode;\r\n}\r\n\r\nexport const PermissionGuard: React.FC<PermissionGuardProps> = ({\r\n  module,\r\n  permission,\r\n  children,\r\n  fallback = null\r\n}) => {\r\n  const { hasPermission, loading } = usePermissions();\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"animate-pulse\">\r\n        <div className=\"h-4 bg-muted rounded w-20\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Ensure hasPermission returns a boolean and handle any errors\r\n  let hasAccess = false;\r\n  try {\r\n    const result = hasPermission(module, permission);\r\n    hasAccess = Boolean(result);\r\n  } catch (error) {\r\n    console.error('Error checking permission:', error);\r\n    hasAccess = false;\r\n  }\r\n\r\n  if (!hasAccess) {\r\n    return fallback ? <>{fallback}</> : null;\r\n  }\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\ninterface WithPermissionProps {\r\n  module: AppModule;\r\n  permission: PermissionLevel;\r\n  fallback?: React.ReactNode;\r\n}\r\n\r\nexport const withPermission = <P extends object>(\r\n  Component: React.ComponentType<P>,\r\n  { module, permission, fallback }: WithPermissionProps\r\n) => {\r\n  const WrappedComponent = (props: P) => (\r\n    <PermissionGuard module={module} permission={permission} fallback={fallback}>\r\n      <Component {...props} />\r\n    </PermissionGuard>\r\n  );\r\n\r\n  WrappedComponent.displayName = `withPermission(${Component.displayName || Component.name})`;\r\n  return WrappedComponent;\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\permissions\\RoleAssignmentModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\permissions\\SimplifiedPermissionManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3403,3406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3403,3406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":166,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":166,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4778,4781],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4778,4781],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { usePermissions } from '@/hooks/usePermissions';\r\nimport { PermissionGuard } from './PermissionGuard';\r\nimport { UserRoleManager } from './UserRoleManager';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport {\r\n  Tabs,\r\n  TabsContent,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from '@/components/ui/tabs';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport { \r\n  Users, \r\n  UserPlus, \r\n  Shield, \r\n  Settings,\r\n  CheckCircle,\r\n  XCircle\r\n} from 'lucide-react';\r\n\r\ninterface DealerMembership {\r\n  id: string;\r\n  user_id: string;\r\n  dealer_id: number;\r\n  is_active: boolean;\r\n  joined_at: string;\r\n  user_email?: string;\r\n  user_name?: string;\r\n  roles?: string[];\r\n}\r\n\r\ninterface SimplifiedPermissionManagerProps {\r\n  dealerId: number;\r\n  className?: string;\r\n}\r\n\r\nexport const SimplifiedPermissionManager: React.FC<SimplifiedPermissionManagerProps> = ({\r\n  dealerId,\r\n  className,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const { user } = useAuth();\r\n  const { toast } = useToast();\r\n  const { refreshPermissions } = usePermissions();\r\n\r\n  const [memberships, setMemberships] = useState<DealerMembership[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (user && dealerId) {\r\n      fetchMemberships();\r\n    }\r\n  }, [user, dealerId, fetchMemberships]);\r\n\r\n  const fetchMemberships = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const { data, error } = await supabase\r\n        .from('dealer_memberships')\r\n        .select(`\r\n          id,\r\n          user_id,\r\n          dealer_id,\r\n          is_active,\r\n          joined_at\r\n        `)\r\n        .eq('dealer_id', dealerId)\r\n        .order('joined_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      // Fetch user details\r\n      const userIds = data.map(m => m.user_id);\r\n      if (userIds.length > 0) {\r\n        const { data: profiles } = await supabase\r\n          .from('profiles')\r\n          .select('id, email, first_name, last_name')\r\n          .in('id', userIds);\r\n\r\n        const profileMap = profiles?.reduce((acc, profile) => {\r\n          acc[profile.id] = {\r\n            email: profile.email,\r\n            name: `${profile.first_name || ''} ${profile.last_name || ''}`.trim() || profile.email,\r\n          };\r\n          return acc;\r\n        }, {} as Record<string, { email: string; name: string }>) || {};\r\n\r\n        // Fetch roles for each user\r\n        const enrichedMemberships = await Promise.all(\r\n          data.map(async (membership) => {\r\n            try {\r\n              const { data: userRoles } = await supabase\r\n                .rpc('get_user_roles', { user_uuid: membership.user_id });\r\n\r\n              return {\r\n                ...membership,\r\n                user_email: profileMap[membership.user_id]?.email,\r\n                user_name: profileMap[membership.user_id]?.name,\r\n                roles: userRoles?.map((role: any) => role.display_name) || [],\r\n              };\r\n            } catch (error) {\r\n              console.error('Error fetching roles for user:', membership.user_id, error);\r\n              return {\r\n                ...membership,\r\n                user_email: profileMap[membership.user_id]?.email,\r\n                user_name: profileMap[membership.user_id]?.name,\r\n                roles: [],\r\n              };\r\n            }\r\n          })\r\n        );\r\n\r\n        setMemberships(enrichedMemberships);\r\n      } else {\r\n        setMemberships([]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching memberships:', error);\r\n      toast({\r\n        title: 'Error',\r\n        description: 'Error al cargar las membresías',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dealerId, toast]);\r\n\r\n  const handleToggleMembership = async (membershipId: string, isActive: boolean) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('dealer_memberships')\r\n        .update({ is_active: !isActive })\r\n        .eq('id', membershipId);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: 'Membresía actualizada',\r\n        description: `La membresía ha sido ${!isActive ? 'activada' : 'desactivada'}`,\r\n      });\r\n\r\n      fetchMemberships();\r\n      refreshPermissions();\r\n    } catch (error: any) {\r\n      toast({\r\n        title: 'Error',\r\n        description: error.message || 'Error al actualizar la membresía',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardContent className=\"flex items-center justify-center py-8\">\r\n          <div className=\"animate-pulse\">Cargando gestión de permisos...</div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PermissionGuard module=\"users\" permission=\"write\" fallback={\r\n      <Card className={className}>\r\n        <CardContent className=\"flex items-center justify-center py-8\">\r\n          <div className=\"text-muted-foreground\">\r\n            No tienes permisos para gestionar usuarios\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    }>\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Users className=\"h-5 w-5\" />\r\n            Gestión de Permisos del Concesionario\r\n          </CardTitle>\r\n          <CardDescription>\r\n            Administra miembros y roles del concesionario\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Tabs defaultValue=\"memberships\" className=\"w-full\">\r\n            <TabsList className=\"grid w-full grid-cols-2\">\r\n              <TabsTrigger value=\"memberships\">\r\n                <Users className=\"h-4 w-4 mr-2\" />\r\n                Miembros ({memberships.length})\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"roles\">\r\n                <Shield className=\"h-4 w-4 mr-2\" />\r\n                Roles\r\n              </TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"memberships\" className=\"space-y-4\">\r\n              {memberships.length === 0 ? (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  <Users className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\r\n                  <p>No hay miembros en este concesionario</p>\r\n                </div>\r\n              ) : (\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow>\r\n                      <TableHead>Usuario</TableHead>\r\n                      <TableHead>Roles Asignados</TableHead>\r\n                      <TableHead>Estado</TableHead>\r\n                      <TableHead>Fecha de Unión</TableHead>\r\n                      <TableHead>Acciones</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {memberships.map((membership) => (\r\n                      <TableRow key={membership.id}>\r\n                        <TableCell>\r\n                          <div>\r\n                            <div className=\"font-medium\">{membership.user_name}</div>\r\n                            <div className=\"text-sm text-muted-foreground\">\r\n                              {membership.user_email}\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <div className=\"flex flex-wrap gap-1\">\r\n                            {membership.roles && membership.roles.length > 0 ? (\r\n                              membership.roles.map((role, index) => (\r\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">\r\n                                  {role}\r\n                                </Badge>\r\n                              ))\r\n                            ) : (\r\n                              <Badge variant=\"secondary\" className=\"text-xs\">\r\n                                Sin roles asignados\r\n                              </Badge>\r\n                            )}\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {membership.is_active ? (\r\n                            <Badge variant=\"default\">\r\n                              <CheckCircle className=\"h-3 w-3 mr-1\" />\r\n                              Activo\r\n                            </Badge>\r\n                          ) : (\r\n                            <Badge variant=\"secondary\">\r\n                              <XCircle className=\"h-3 w-3 mr-1\" />\r\n                              Inactivo\r\n                            </Badge>\r\n                          )}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-sm\">\r\n                          {new Date(membership.joined_at).toLocaleDateString()}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          <PermissionGuard module=\"users\" permission=\"admin\">\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleToggleMembership(membership.id, membership.is_active)}\r\n                            >\r\n                              {membership.is_active ? 'Desactivar' : 'Activar'}\r\n                            </Button>\r\n                          </PermissionGuard>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </TableBody>\r\n                </Table>\r\n              )}\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"roles\">\r\n              <UserRoleManager />\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n    </PermissionGuard>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\permissions\\UserRoleManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\presence\\UserPresenceIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\productivity\\ProductivityCalendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3799,3802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3799,3802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":121,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3892,3895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3892,3895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":227,"column":146,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":227,"endColumn":149,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8033,8036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8033,8036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":313,"column":131,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":134,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12147,12150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12147,12150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\r\nimport { Calendar, momentLocalizer, View } from 'react-big-calendar';\r\nimport moment from 'moment';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { \r\n  Plus, \r\n  Calendar as CalendarIcon,\r\n  Clock,\r\n  MapPin,\r\n  Users,\r\n  Settings,\r\n  ExternalLink\r\n} from \"lucide-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useProductivityCalendars, ProductivityEvent } from \"@/hooks/useProductivityCalendars\";\r\nimport { format } from \"date-fns\";\r\nimport { toast } from \"sonner\";\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nexport const ProductivityCalendar = () => {\r\n  const { t } = useTranslation();\r\n  const { calendars, events, loading, createEvent, updateEvent, deleteEvent, createCalendar } = useProductivityCalendars();\r\n  const [isCreateEventOpen, setIsCreateEventOpen] = useState(false);\r\n  const [isCreateCalendarOpen, setIsCreateCalendarOpen] = useState(false);\r\n  const [selectedEvent, setSelectedEvent] = useState<ProductivityEvent | null>(null);\r\n  const [calendarView, setCalendarView] = useState<View>('month');\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n\r\n  const [newEvent, setNewEvent] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    start_time: \"\",\r\n    end_time: \"\",\r\n    all_day: false,\r\n    location: \"\",\r\n    event_type: \"meeting\" as const,\r\n    calendar_id: \"\",\r\n  });\r\n\r\n  const [newCalendar, setNewCalendar] = useState({\r\n    name: \"\",\r\n    description: \"\",\r\n    color: \"#3B82F6\",\r\n    calendar_type: \"internal\" as const,\r\n  });\r\n\r\n  // Transform events for react-big-calendar\r\n  const calendarEvents = events.map(event => ({\r\n    id: event.id,\r\n    title: event.title,\r\n    start: new Date(event.start_time),\r\n    end: new Date(event.end_time),\r\n    allDay: event.all_day,\r\n    resource: event,\r\n  }));\r\n\r\n  const handleCreateEvent = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!newEvent.calendar_id) {\r\n      toast.error('Please select a calendar');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      await createEvent(newEvent);\r\n      setNewEvent({\r\n        title: \"\",\r\n        description: \"\",\r\n        start_time: \"\",\r\n        end_time: \"\",\r\n        all_day: false,\r\n        location: \"\",\r\n        event_type: \"meeting\",\r\n        calendar_id: \"\",\r\n      });\r\n      setIsCreateEventOpen(false);\r\n    } catch (error) {\r\n      console.error('Failed to create event:', error);\r\n    }\r\n  };\r\n\r\n  const handleCreateCalendar = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      await createCalendar(newCalendar);\r\n      setNewCalendar({\r\n        name: \"\",\r\n        description: \"\",\r\n        color: \"#3B82F6\",\r\n        calendar_type: \"internal\",\r\n      });\r\n      setIsCreateCalendarOpen(false);\r\n    } catch (error) {\r\n      console.error('Failed to create calendar:', error);\r\n    }\r\n  };\r\n\r\n  const handleSelectSlot = ({ start, end }: { start: Date; end: Date }) => {\r\n    setNewEvent({\r\n      ...newEvent,\r\n      start_time: start.toISOString().slice(0, 16),\r\n      end_time: end.toISOString().slice(0, 16),\r\n    });\r\n    setIsCreateEventOpen(true);\r\n  };\r\n\r\n  const handleSelectEvent = (event: any) => {\r\n    setSelectedEvent(event.resource);\r\n  };\r\n\r\n  const eventStyleGetter = (event: any) => {\r\n    const calendar = calendars.find(cal => cal.id === event.resource.calendar_id);\r\n    return {\r\n      style: {\r\n        backgroundColor: calendar?.color || '#3B82F6',\r\n        borderRadius: '4px',\r\n        opacity: 0.8,\r\n        color: 'white',\r\n        border: '0px',\r\n        display: 'block'\r\n      }\r\n    };\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        <Card className=\"animate-pulse\">\r\n          <CardHeader>\r\n            <div className=\"h-6 bg-muted rounded w-1/4\"></div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-96 bg-muted rounded\"></div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with Actions */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <h2 className=\"text-2xl font-bold\">{format(selectedDate, 'MMMM yyyy')}</h2>\r\n          <div className=\"flex items-center gap-2\">\r\n            {calendars.map((calendar) => (\r\n              <Badge \r\n                key={calendar.id} \r\n                variant=\"outline\" \r\n                className=\"flex items-center gap-2\"\r\n                style={{ borderColor: calendar.color }}\r\n              >\r\n                <div \r\n                  className=\"w-2 h-2 rounded-full\" \r\n                  style={{ backgroundColor: calendar.color }}\r\n                />\r\n                {calendar.name}\r\n                {calendar.calendar_type !== 'internal' && (\r\n                  <ExternalLink className=\"h-3 w-3\" />\r\n                )}\r\n              </Badge>\r\n            ))}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          <Dialog open={isCreateCalendarOpen} onOpenChange={setIsCreateCalendarOpen}>\r\n            <DialogTrigger asChild>\r\n              <Button variant=\"outline\">\r\n                <Settings className=\"h-4 w-4 mr-2\" />\r\n                {t('productivity.manageCalendars')}\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent>\r\n              <DialogHeader>\r\n                <DialogTitle>{t('productivity.createCalendar')}</DialogTitle>\r\n                <DialogDescription>\r\n                  {t('productivity.createCalendarDescription')}\r\n                </DialogDescription>\r\n              </DialogHeader>\r\n              <form onSubmit={handleCreateCalendar} className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"cal-name\">{t('productivity.calendarName')}</Label>\r\n                  <Input\r\n                    id=\"cal-name\"\r\n                    value={newCalendar.name}\r\n                    onChange={(e) => setNewCalendar({ ...newCalendar, name: e.target.value })}\r\n                    placeholder={t('productivity.enterCalendarName')}\r\n                    required\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <Label htmlFor=\"cal-description\">{t('productivity.description')}</Label>\r\n                  <Textarea\r\n                    id=\"cal-description\"\r\n                    value={newCalendar.description}\r\n                    onChange={(e) => setNewCalendar({ ...newCalendar, description: e.target.value })}\r\n                    placeholder={t('productivity.enterDescription')}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"cal-color\">{t('productivity.color')}</Label>\r\n                    <Input\r\n                      id=\"cal-color\"\r\n                      type=\"color\"\r\n                      value={newCalendar.color}\r\n                      onChange={(e) => setNewCalendar({ ...newCalendar, color: e.target.value })}\r\n                    />\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"cal-type\">{t('productivity.calendarType')}</Label>\r\n                    <Select value={newCalendar.calendar_type} onValueChange={(value) => setNewCalendar({ ...newCalendar, calendar_type: value as any })}>\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"internal\">{t('productivity.calendarTypes.internal')}</SelectItem>\r\n                        <SelectItem value=\"google\">{t('productivity.calendarTypes.google')}</SelectItem>\r\n                        <SelectItem value=\"outlook\">{t('productivity.calendarTypes.outlook')}</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex justify-end space-x-2\">\r\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateCalendarOpen(false)}>\r\n                    {t('common.cancel')}\r\n                  </Button>\r\n                  <Button type=\"submit\">\r\n                    {t('common.create')}\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </DialogContent>\r\n          </Dialog>\r\n\r\n          <Dialog open={isCreateEventOpen} onOpenChange={setIsCreateEventOpen}>\r\n            <DialogTrigger asChild>\r\n              <Button>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                {t('productivity.createEvent')}\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent className=\"max-w-2xl\">\r\n              <DialogHeader>\r\n                <DialogTitle>{t('productivity.createEvent')}</DialogTitle>\r\n                <DialogDescription>\r\n                  {t('productivity.createEventDescription')}\r\n                </DialogDescription>\r\n              </DialogHeader>\r\n              <form onSubmit={handleCreateEvent} className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"event-title\">{t('productivity.title')}</Label>\r\n                  <Input\r\n                    id=\"event-title\"\r\n                    value={newEvent.title}\r\n                    onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}\r\n                    placeholder={t('productivity.enterEventTitle')}\r\n                    required\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <Label htmlFor=\"event-description\">{t('productivity.description')}</Label>\r\n                  <Textarea\r\n                    id=\"event-description\"\r\n                    value={newEvent.description}\r\n                    onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}\r\n                    placeholder={t('productivity.enterDescription')}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"event-calendar\">{t('productivity.calendar')}</Label>\r\n                    <Select value={newEvent.calendar_id} onValueChange={(value) => setNewEvent({ ...newEvent, calendar_id: value })}>\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder={t('productivity.selectCalendar')} />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {calendars.map((calendar) => (\r\n                          <SelectItem key={calendar.id} value={calendar.id}>\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <div \r\n                                className=\"w-2 h-2 rounded-full\" \r\n                                style={{ backgroundColor: calendar.color }}\r\n                              />\r\n                              {calendar.name}\r\n                            </div>\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label htmlFor=\"event-type\">{t('productivity.eventType')}</Label>\r\n                    <Select value={newEvent.event_type} onValueChange={(value) => setNewEvent({ ...newEvent, event_type: value as any })}>\r\n                      <SelectTrigger>\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"meeting\">{t('productivity.eventTypes.meeting')}</SelectItem>\r\n                        <SelectItem value=\"reminder\">{t('productivity.eventTypes.reminder')}</SelectItem>\r\n                        <SelectItem value=\"task\">{t('productivity.eventTypes.task')}</SelectItem>\r\n                        <SelectItem value=\"appointment\">{t('productivity.eventTypes.appointment')}</SelectItem>\r\n                        <SelectItem value=\"other\">{t('productivity.eventTypes.other')}</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id=\"all-day\"\r\n                    checked={newEvent.all_day}\r\n                    onCheckedChange={(checked) => setNewEvent({ ...newEvent, all_day: !!checked })}\r\n                  />\r\n                  <Label htmlFor=\"all-day\" className=\"text-sm font-medium\">\r\n                    {t('productivity.allDay')}\r\n                  </Label>\r\n                </div>\r\n\r\n                {!newEvent.all_day && (\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <Label htmlFor=\"start-time\">{t('productivity.startTime')}</Label>\r\n                      <Input\r\n                        id=\"start-time\"\r\n                        type=\"datetime-local\"\r\n                        value={newEvent.start_time}\r\n                        onChange={(e) => setNewEvent({ ...newEvent, start_time: e.target.value })}\r\n                        required\r\n                      />\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Label htmlFor=\"end-time\">{t('productivity.endTime')}</Label>\r\n                      <Input\r\n                        id=\"end-time\"\r\n                        type=\"datetime-local\"\r\n                        value={newEvent.end_time}\r\n                        onChange={(e) => setNewEvent({ ...newEvent, end_time: e.target.value })}\r\n                        required\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <div>\r\n                  <Label htmlFor=\"location\">{t('productivity.location')}</Label>\r\n                  <Input\r\n                    id=\"location\"\r\n                    value={newEvent.location}\r\n                    onChange={(e) => setNewEvent({ ...newEvent, location: e.target.value })}\r\n                    placeholder={t('productivity.enterLocation')}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"flex justify-end space-x-2\">\r\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateEventOpen(false)}>\r\n                    {t('common.cancel')}\r\n                  </Button>\r\n                  <Button type=\"submit\">\r\n                    {t('common.create')}\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Calendar */}\r\n      <Card>\r\n        <CardContent className=\"p-6\">\r\n          <div style={{ height: '600px' }}>\r\n            <Calendar\r\n              localizer={localizer}\r\n              events={calendarEvents}\r\n              startAccessor=\"start\"\r\n              endAccessor=\"end\"\r\n              onSelectSlot={handleSelectSlot}\r\n              onSelectEvent={handleSelectEvent}\r\n              selectable={true}\r\n              eventPropGetter={eventStyleGetter}\r\n              view={calendarView}\r\n              onView={setCalendarView}\r\n              date={selectedDate}\r\n              onNavigate={setSelectedDate}\r\n              popup={true}\r\n              className=\"productivity-calendar\"\r\n            />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Event Details Dialog */}\r\n      <Dialog open={!!selectedEvent} onOpenChange={() => setSelectedEvent(null)}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>{selectedEvent?.title}</DialogTitle>\r\n            <DialogDescription>\r\n              {selectedEvent?.event_type && t(`productivity.eventTypes.${selectedEvent.event_type}`)}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          {selectedEvent && (\r\n            <div className=\"space-y-4\">\r\n              {selectedEvent.description && (\r\n                <div>\r\n                  <Label>{t('productivity.description')}</Label>\r\n                  <p className=\"text-sm text-muted-foreground mt-1\">\r\n                    {selectedEvent.description}\r\n                  </p>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label className=\"flex items-center gap-2\">\r\n                    <Clock className=\"h-4 w-4\" />\r\n                    {t('productivity.startTime')}\r\n                  </Label>\r\n                  <p className=\"text-sm mt-1\">\r\n                    {format(new Date(selectedEvent.start_time), 'MMM dd, yyyy HH:mm')}\r\n                  </p>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label className=\"flex items-center gap-2\">\r\n                    <Clock className=\"h-4 w-4\" />\r\n                    {t('productivity.endTime')}\r\n                  </Label>\r\n                  <p className=\"text-sm mt-1\">\r\n                    {format(new Date(selectedEvent.end_time), 'MMM dd, yyyy HH:mm')}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n\r\n              {selectedEvent.location && (\r\n                <div>\r\n                  <Label className=\"flex items-center gap-2\">\r\n                    <MapPin className=\"h-4 w-4\" />\r\n                    {t('productivity.location')}\r\n                  </Label>\r\n                  <p className=\"text-sm mt-1\">{selectedEvent.location}</p>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"flex justify-end space-x-2\">\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={() => deleteEvent(selectedEvent.id)}\r\n                  className=\"text-destructive hover:text-destructive\"\r\n                >\r\n                  {t('common.delete')}\r\n                </Button>\r\n                <Button onClick={() => setSelectedEvent(null)}>\r\n                  {t('common.close')}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\productivity\\ProductivityDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\productivity\\ProductivityTodos.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":122,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":125,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8085,8088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8085,8088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":366,"column":134,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":366,"endColumn":137,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15375,15378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15375,15378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":381,"column":130,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":381,"endColumn":133,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16256,16259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16256,16259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\";\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Checkbox } from \"@/components/ui/checkbox\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { \r\n  Plus, \r\n  Calendar,\r\n  AlertCircle,\r\n  CheckCircle2,\r\n  Clock,\r\n  Search,\r\n  Filter,\r\n  MoreVertical,\r\n  Edit,\r\n  Trash2\r\n} from \"lucide-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useProductivityTodos, ProductivityTodo } from \"@/hooks/useProductivityTodos\";\r\nimport { format } from \"date-fns\";\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\r\n\r\nexport const ProductivityTodos = () => {\r\n  const { t } = useTranslation();\r\n  const { todos, loading, createTodo, updateTodo, deleteTodo, toggleTodoStatus } = useProductivityTodos();\r\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\r\n  const [editingTodo, setEditingTodo] = useState<ProductivityTodo | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\r\n  const [priorityFilter, setPriorityFilter] = useState<string>(\"all\");\r\n\r\n  const [newTodo, setNewTodo] = useState({\r\n    title: \"\",\r\n    description: \"\",\r\n    priority: \"medium\" as const,\r\n    due_date: \"\",\r\n    category: \"general\",\r\n  });\r\n\r\n  const filteredTodos = todos.filter(todo => {\r\n    const matchesSearch = todo.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n                         todo.description?.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === \"all\" || todo.status === statusFilter;\r\n    const matchesPriority = priorityFilter === \"all\" || todo.priority === priorityFilter;\r\n    \r\n    return matchesSearch && matchesStatus && matchesPriority;\r\n  });\r\n\r\n  const handleCreateTodo = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    try {\r\n      await createTodo(newTodo);\r\n      setNewTodo({\r\n        title: \"\",\r\n        description: \"\",\r\n        priority: \"medium\",\r\n        due_date: \"\",\r\n        category: \"general\",\r\n      });\r\n      setIsCreateOpen(false);\r\n    } catch (error) {\r\n      console.error('Failed to create todo:', error);\r\n    }\r\n  };\r\n\r\n  const handleUpdateTodo = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!editingTodo) return;\r\n    \r\n    try {\r\n      await updateTodo(editingTodo.id, editingTodo);\r\n      setEditingTodo(null);\r\n    } catch (error) {\r\n      console.error('Failed to update todo:', error);\r\n    }\r\n  };\r\n\r\n  const getPriorityColor = (priority: string) => {\r\n    switch (priority) {\r\n      case 'urgent': return 'destructive';\r\n      case 'high': return 'default';\r\n      case 'medium': return 'secondary';\r\n      case 'low': return 'outline';\r\n      default: return 'outline';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return <CheckCircle2 className=\"h-4 w-4 text-green-500\" />;\r\n      case 'in_progress': return <Clock className=\"h-4 w-4 text-blue-500\" />;\r\n      case 'cancelled': return <AlertCircle className=\"h-4 w-4 text-red-500\" />;\r\n      default: return <Clock className=\"h-4 w-4 text-muted-foreground\" />;\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        {[...Array(3)].map((_, i) => (\r\n          <Card key={i} className=\"animate-pulse\">\r\n            <CardHeader>\r\n              <div className=\"h-4 bg-muted rounded w-1/2\"></div>\r\n              <div className=\"h-3 bg-muted rounded w-1/4\"></div>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"h-16 bg-muted rounded\"></div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with Actions */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div className=\"flex items-center gap-4 flex-1\">\r\n          <div className=\"relative flex-1 max-w-sm\">\r\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\r\n            <Input\r\n              placeholder={t('productivity.searchTodos')}\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"pl-8\"\r\n            />\r\n          </div>\r\n          \r\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n            <SelectTrigger className=\"w-40\">\r\n              <SelectValue placeholder=\"Status\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">{t('productivity.filters.all')}</SelectItem>\r\n              <SelectItem value=\"pending\">{t('productivity.status.pending')}</SelectItem>\r\n              <SelectItem value=\"in_progress\">{t('productivity.status.inProgress')}</SelectItem>\r\n              <SelectItem value=\"completed\">{t('productivity.status.completed')}</SelectItem>\r\n              <SelectItem value=\"cancelled\">{t('productivity.status.cancelled')}</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <Select value={priorityFilter} onValueChange={setPriorityFilter}>\r\n            <SelectTrigger className=\"w-40\">\r\n              <SelectValue placeholder=\"Priority\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">{t('productivity.filters.all')}</SelectItem>\r\n              <SelectItem value=\"urgent\">{t('productivity.priority.urgent')}</SelectItem>\r\n              <SelectItem value=\"high\">{t('productivity.priority.high')}</SelectItem>\r\n              <SelectItem value=\"medium\">{t('productivity.priority.medium')}</SelectItem>\r\n              <SelectItem value=\"low\">{t('productivity.priority.low')}</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n\r\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\r\n          <DialogTrigger asChild>\r\n            <Button>\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              {t('productivity.createTodo')}\r\n            </Button>\r\n          </DialogTrigger>\r\n          <DialogContent>\r\n            <DialogHeader>\r\n              <DialogTitle>{t('productivity.createTodo')}</DialogTitle>\r\n              <DialogDescription>\r\n                {t('productivity.createTodoDescription')}\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n            <form onSubmit={handleCreateTodo} className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"title\">{t('productivity.title')}</Label>\r\n                <Input\r\n                  id=\"title\"\r\n                  value={newTodo.title}\r\n                  onChange={(e) => setNewTodo({ ...newTodo, title: e.target.value })}\r\n                  placeholder={t('productivity.enterTitle')}\r\n                  required\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"description\">{t('productivity.description')}</Label>\r\n                <Textarea\r\n                  id=\"description\"\r\n                  value={newTodo.description}\r\n                  onChange={(e) => setNewTodo({ ...newTodo, description: e.target.value })}\r\n                  placeholder={t('productivity.enterDescription')}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label htmlFor=\"priority\">{t('productivity.priority.label')}</Label>\r\n                  <Select value={newTodo.priority} onValueChange={(value) => setNewTodo({ ...newTodo, priority: value as any })}>\r\n                    <SelectTrigger>\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"low\">{t('productivity.priority.low')}</SelectItem>\r\n                      <SelectItem value=\"medium\">{t('productivity.priority.medium')}</SelectItem>\r\n                      <SelectItem value=\"high\">{t('productivity.priority.high')}</SelectItem>\r\n                      <SelectItem value=\"urgent\">{t('productivity.priority.urgent')}</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"due_date\">{t('productivity.dueDate')}</Label>\r\n                  <Input\r\n                    id=\"due_date\"\r\n                    type=\"datetime-local\"\r\n                    value={newTodo.due_date}\r\n                    onChange={(e) => setNewTodo({ ...newTodo, due_date: e.target.value })}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex justify-end space-x-2\">\r\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateOpen(false)}>\r\n                  {t('common.cancel')}\r\n                </Button>\r\n                <Button type=\"submit\">\r\n                  {t('common.create')}\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n\r\n      {/* Todos List */}\r\n      <div className=\"space-y-4\">\r\n        {filteredTodos.map((todo) => (\r\n          <Card key={todo.id} className={`transition-all hover:shadow-md ${\r\n            todo.status === 'completed' ? 'opacity-75' : ''\r\n          }`}>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"flex items-start gap-3 flex-1\">\r\n                  <Checkbox\r\n                    checked={todo.status === 'completed'}\r\n                    onCheckedChange={() => toggleTodoStatus(todo.id)}\r\n                    className=\"mt-1\"\r\n                  />\r\n                  \r\n                  <div className=\"flex-1 space-y-2\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <h3 className={`font-medium ${\r\n                        todo.status === 'completed' ? 'line-through text-muted-foreground' : ''\r\n                      }`}>\r\n                        {todo.title}\r\n                      </h3>\r\n                      <Badge variant={getPriorityColor(todo.priority)}>\r\n                        {t(`productivity.priority.${todo.priority}`)}\r\n                      </Badge>\r\n                      <div className=\"flex items-center gap-1\">\r\n                        {getStatusIcon(todo.status)}\r\n                        <span className=\"text-sm text-muted-foreground\">\r\n                          {t(`productivity.status.${todo.status}`)}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    {todo.description && (\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        {todo.description}\r\n                      </p>\r\n                    )}\r\n                    \r\n                    <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\r\n                      {todo.due_date && (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <Calendar className=\"h-3 w-3\" />\r\n                          {format(new Date(todo.due_date), 'MMM dd, yyyy HH:mm')}\r\n                        </div>\r\n                      )}\r\n                      <span>#{todo.category}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <DropdownMenu>\r\n                  <DropdownMenuTrigger asChild>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <MoreVertical className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </DropdownMenuTrigger>\r\n                  <DropdownMenuContent align=\"end\">\r\n                    <DropdownMenuItem onClick={() => setEditingTodo(todo)}>\r\n                      <Edit className=\"h-4 w-4 mr-2\" />\r\n                      {t('common.edit')}\r\n                    </DropdownMenuItem>\r\n                    <DropdownMenuItem \r\n                      onClick={() => deleteTodo(todo.id)}\r\n                      className=\"text-destructive\"\r\n                    >\r\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                      {t('common.delete')}\r\n                    </DropdownMenuItem>\r\n                  </DropdownMenuContent>\r\n                </DropdownMenu>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n\r\n        {filteredTodos.length === 0 && (\r\n          <Card>\r\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\r\n              <CheckCircle2 className=\"h-12 w-12 text-muted-foreground mb-4\" />\r\n              <h3 className=\"text-lg font-medium mb-2\">{t('productivity.noTodosFound')}</h3>\r\n              <p className=\"text-muted-foreground text-center mb-4\">\r\n                {searchTerm || statusFilter !== 'all' || priorityFilter !== 'all'\r\n                  ? t('productivity.noTodosWithFilters')\r\n                  : t('productivity.createFirstTodo')\r\n                }\r\n              </p>\r\n              {!searchTerm && statusFilter === 'all' && priorityFilter === 'all' && (\r\n                <Button onClick={() => setIsCreateOpen(true)}>\r\n                  <Plus className=\"h-4 w-4 mr-2\" />\r\n                  {t('productivity.createTodo')}\r\n                </Button>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n\r\n      {/* Edit Todo Dialog */}\r\n      <Dialog open={!!editingTodo} onOpenChange={() => setEditingTodo(null)}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle>{t('productivity.editTodo')}</DialogTitle>\r\n          </DialogHeader>\r\n          {editingTodo && (\r\n            <form onSubmit={handleUpdateTodo} className=\"space-y-4\">\r\n              <div>\r\n                <Label htmlFor=\"edit-title\">{t('productivity.title')}</Label>\r\n                <Input\r\n                  id=\"edit-title\"\r\n                  value={editingTodo.title}\r\n                  onChange={(e) => setEditingTodo({ ...editingTodo, title: e.target.value })}\r\n                  required\r\n                />\r\n              </div>\r\n              \r\n              <div>\r\n                <Label htmlFor=\"edit-description\">{t('productivity.description')}</Label>\r\n                <Textarea\r\n                  id=\"edit-description\"\r\n                  value={editingTodo.description || \"\"}\r\n                  onChange={(e) => setEditingTodo({ ...editingTodo, description: e.target.value })}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div>\r\n                  <Label htmlFor=\"edit-priority\">{t('productivity.priority.label')}</Label>\r\n                  <Select value={editingTodo.priority} onValueChange={(value) => setEditingTodo({ ...editingTodo, priority: value as any })}>\r\n                    <SelectTrigger>\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"low\">{t('productivity.priority.low')}</SelectItem>\r\n                      <SelectItem value=\"medium\">{t('productivity.priority.medium')}</SelectItem>\r\n                      <SelectItem value=\"high\">{t('productivity.priority.high')}</SelectItem>\r\n                      <SelectItem value=\"urgent\">{t('productivity.priority.urgent')}</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"edit-status\">{t('productivity.status.label')}</Label>\r\n                  <Select value={editingTodo.status} onValueChange={(value) => setEditingTodo({ ...editingTodo, status: value as any })}>\r\n                    <SelectTrigger>\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"pending\">{t('productivity.status.pending')}</SelectItem>\r\n                      <SelectItem value=\"in_progress\">{t('productivity.status.inProgress')}</SelectItem>\r\n                      <SelectItem value=\"completed\">{t('productivity.status.completed')}</SelectItem>\r\n                      <SelectItem value=\"cancelled\">{t('productivity.status.cancelled')}</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"edit-due-date\">{t('productivity.dueDate')}</Label>\r\n                <Input\r\n                  id=\"edit-due-date\"\r\n                  type=\"datetime-local\"\r\n                  value={editingTodo.due_date ? new Date(editingTodo.due_date).toISOString().slice(0, 16) : \"\"}\r\n                  onChange={(e) => setEditingTodo({ ...editingTodo, due_date: e.target.value })}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex justify-end space-x-2\">\r\n                <Button type=\"button\" variant=\"outline\" onClick={() => setEditingTodo(null)}>\r\n                  {t('common.cancel')}\r\n                </Button>\r\n                <Button type=\"submit\">\r\n                  {t('common.save')}\r\n                </Button>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\profile\\AccountSecurityTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\profile\\ActivityAuditTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[888,891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[888,891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1873,1876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1873,1876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3248,3251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3248,3251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { \r\n  Activity, \r\n  Download, \r\n  Filter, \r\n  Search,\r\n  Calendar,\r\n  User,\r\n  Shield,\r\n  Settings,\r\n  Key,\r\n  Bell,\r\n  Database\r\n} from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { formatDistanceToNow, format } from 'date-fns';\r\n\r\ninterface ActivityRecord {\r\n  id: string;\r\n  action_type: string;\r\n  action_description?: string;\r\n  details?: any;\r\n  ip_address?: unknown;\r\n  created_at: string;\r\n}\r\n\r\nexport function ActivityAuditTab() {\r\n  const { t } = useTranslation();\r\n  const [activities, setActivities] = useState<ActivityRecord[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState<string>('all');\r\n\r\n  const fetchActivities = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n\r\n      if (!user) return;\r\n\r\n      let query = supabase\r\n        .from('user_activity_log')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .order('created_at', { ascending: false })\r\n        .limit(50);\r\n\r\n      if (filterType !== 'all') {\r\n        query = query.eq('action_type', filterType);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      setActivities(data || []);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching activities:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [filterType]);\r\n\r\n  const exportActivities = async () => {\r\n    try {\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) return;\r\n\r\n      const { data, error } = await supabase\r\n        .from('user_activity_log')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      // Convert to CSV\r\n      const csvContent = [\r\n        ['Date', 'Action Type', 'Description', 'IP Address', 'Details'].join(','),\r\n        ...(data || []).map((activity: ActivityRecord) => [\r\n          format(new Date(activity.created_at), 'yyyy-MM-dd HH:mm:ss'),\r\n          activity.action_type,\r\n          activity.action_description || '',\r\n          String(activity.ip_address) || '',\r\n          JSON.stringify(activity.details || {})\r\n        ].join(','))\r\n      ].join('\\n');\r\n\r\n      // Download CSV\r\n      const blob = new Blob([csvContent], { type: 'text/csv' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `activity-log-${format(new Date(), 'yyyy-MM-dd')}.csv`;\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error exporting activities:', error);\r\n    }\r\n  };\r\n\r\n  const getActivityIcon = (actionType: string) => {\r\n    switch (actionType) {\r\n      case 'profile_updated':\r\n        return <User className=\"h-4 w-4\" />;\r\n      case 'password_changed':\r\n        return <Key className=\"h-4 w-4\" />;\r\n      case 'preferences_updated':\r\n        return <Settings className=\"h-4 w-4\" />;\r\n      case 'session_terminated':\r\n        return <Shield className=\"h-4 w-4\" />;\r\n      case 'notification_settings_updated':\r\n        return <Bell className=\"h-4 w-4\" />;\r\n      default:\r\n        return <Activity className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  const getActivityColor = (actionType: string) => {\r\n    switch (actionType) {\r\n      case 'profile_updated':\r\n      case 'preferences_updated':\r\n        return 'bg-blue-500';\r\n      case 'password_changed':\r\n      case 'session_terminated':\r\n        return 'bg-green-500';\r\n      case 'login_failed':\r\n        return 'bg-red-500';\r\n      default:\r\n        return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  const filteredActivities = activities.filter(activity =>\r\n    activity.action_description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    activity.action_type.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchActivities();\r\n  }, [filterType, fetchActivities]);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Filters and Search */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Filter className=\"h-5 w-5\" />\r\n            {t('profile.activity_filters')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">{t('profile.search_activities')}</label>\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder={t('profile.search_placeholder')}\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  className=\"pl-9\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">{t('profile.activity_type')}</label>\r\n              <Select value={filterType} onValueChange={setFilterType}>\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">{t('profile.all_activities')}</SelectItem>\r\n                  <SelectItem value=\"profile_updated\">{t('profile.profile_updates')}</SelectItem>\r\n                  <SelectItem value=\"password_changed\">{t('profile.password_changes')}</SelectItem>\r\n                  <SelectItem value=\"preferences_updated\">{t('profile.preference_changes')}</SelectItem>\r\n                  <SelectItem value=\"session_terminated\">{t('profile.session_changes')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <label className=\"text-sm font-medium\">{t('profile.export_data')}</label>\r\n              <Button variant=\"outline\" onClick={exportActivities} className=\"w-full\">\r\n                <Download className=\"h-4 w-4 mr-2\" />\r\n                {t('profile.export_csv')}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Activity Log */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Activity className=\"h-5 w-5\" />\r\n            {t('profile.recent_activity')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {filteredActivities.map((activity, index) => (\r\n              <div key={activity.id}>\r\n                <div className=\"flex items-start gap-4\">\r\n                  <div className={`rounded-full p-2 ${getActivityColor(activity.action_type)}`}>\r\n                    {getActivityIcon(activity.action_type)}\r\n                  </div>\r\n                  \r\n                  <div className=\"flex-1 space-y-1\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <p className=\"font-medium\">\r\n                        {activity.action_description || activity.action_type}\r\n                      </p>\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {formatDistanceToNow(new Date(activity.created_at), { addSuffix: true })}\r\n                      </Badge>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\r\n                      <span className=\"flex items-center gap-1\">\r\n                        <Calendar className=\"h-3 w-3\" />\r\n                        {format(new Date(activity.created_at), 'MMM dd, yyyy HH:mm')}\r\n                      </span>\r\n                      {activity.ip_address && (\r\n                        <span className=\"flex items-center gap-1\">\r\n                          <Database className=\"h-3 w-3\" />\r\n                          {String(activity.ip_address)}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                    \r\n                    {activity.details && Object.keys(activity.details).length > 0 && (\r\n                      <details className=\"text-sm\">\r\n                        <summary className=\"cursor-pointer text-muted-foreground hover:text-foreground\">\r\n                          {t('profile.view_details')}\r\n                        </summary>\r\n                        <pre className=\"mt-2 p-2 bg-muted rounded text-xs overflow-x-auto\">\r\n                          {JSON.stringify(activity.details, null, 2)}\r\n                        </pre>\r\n                      </details>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                {index < filteredActivities.length - 1 && <Separator className=\"mt-4\" />}\r\n              </div>\r\n            ))}\r\n            \r\n            {filteredActivities.length === 0 && (\r\n              <div className=\"text-center py-8\">\r\n                <Activity className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\r\n                <p className=\"text-muted-foreground\">\r\n                  {searchTerm || filterType !== 'all' \r\n                    ? t('profile.no_activities_found')\r\n                    : t('profile.no_activities_yet')\r\n                  }\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\profile\\DataPrivacyTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3018,3021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3018,3021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4092,4095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4092,4095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { AlertTriangle, Download, Shield, Trash2, Database, FileText } from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from '@/components/ui/alert-dialog';\r\n\r\nexport function DataPrivacyTab() {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n  const [dataSharing, setDataSharing] = useState({\r\n    analytics: true,\r\n    marketing: false,\r\n    thirdParty: false,\r\n  });\r\n\r\n  const exportPersonalData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) throw new Error('No authenticated user');\r\n\r\n      // Collect all user data\r\n      const [profileData, preferencesData, activityData, sessionsData] = await Promise.all([\r\n        supabase.from('profiles').select('*').eq('id', user.id).single(),\r\n        supabase.from('user_preferences').select('*').eq('user_id', user.id).single(),\r\n        supabase.from('user_activity_log').select('*').eq('user_id', user.id),\r\n        supabase.from('user_sessions').select('*').eq('user_id', user.id)\r\n      ]);\r\n\r\n      const exportData = {\r\n        user_info: {\r\n          id: user.id,\r\n          email: user.email,\r\n          created_at: user.created_at,\r\n          last_sign_in_at: user.last_sign_in_at,\r\n        },\r\n        profile: profileData.data,\r\n        preferences: preferencesData.data,\r\n        activity_log: activityData.data,\r\n        sessions: sessionsData.data,\r\n        export_date: new Date().toISOString(),\r\n      };\r\n\r\n      // Create and download JSON file\r\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], { \r\n        type: 'application/json' \r\n      });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `personal-data-export-${new Date().toISOString().split('T')[0]}.json`;\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n\r\n      // Log the export activity\r\n      await supabase\r\n        .from('user_activity_log')\r\n        .insert({\r\n          user_id: user.id,\r\n          action_type: 'data_exported',\r\n          action_description: 'Personal data exported',\r\n        });\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('profile.data_exported'),\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error exporting data:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error exporting data',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteAccount = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) throw new Error('No authenticated user');\r\n\r\n      // Log the deletion request\r\n      await supabase\r\n        .from('user_activity_log')\r\n        .insert({\r\n          user_id: user.id,\r\n          action_type: 'account_deletion_requested',\r\n          action_description: 'Account deletion requested by user',\r\n        });\r\n\r\n      // In a real app, you would typically mark the account for deletion\r\n      // rather than immediately deleting it, to allow for recovery period\r\n      toast({\r\n        title: t('profile.deletion_requested'),\r\n        description: t('profile.deletion_requested_desc'),\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error requesting account deletion:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error requesting account deletion',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Data Sharing Preferences */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Shield className=\"h-5 w-5\" />\r\n            {t('profile.data_sharing')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"space-y-0.5\">\r\n              <Label className=\"font-medium\">{t('profile.analytics_data')}</Label>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                {t('profile.analytics_data_desc')}\r\n              </p>\r\n            </div>\r\n            <Switch\r\n              checked={dataSharing.analytics}\r\n              onCheckedChange={(checked) => \r\n                setDataSharing(prev => ({ ...prev, analytics: checked }))\r\n              }\r\n            />\r\n          </div>\r\n\r\n          <Separator />\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"space-y-0.5\">\r\n              <Label className=\"font-medium\">{t('profile.marketing_data')}</Label>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                {t('profile.marketing_data_desc')}\r\n              </p>\r\n            </div>\r\n            <Switch\r\n              checked={dataSharing.marketing}\r\n              onCheckedChange={(checked) => \r\n                setDataSharing(prev => ({ ...prev, marketing: checked }))\r\n              }\r\n            />\r\n          </div>\r\n\r\n          <Separator />\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"space-y-0.5\">\r\n              <Label className=\"font-medium\">{t('profile.third_party_data')}</Label>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                {t('profile.third_party_data_desc')}\r\n              </p>\r\n            </div>\r\n            <Switch\r\n              checked={dataSharing.thirdParty}\r\n              onCheckedChange={(checked) => \r\n                setDataSharing(prev => ({ ...prev, thirdParty: checked }))\r\n              }\r\n            />\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Data Export */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Download className=\"h-5 w-5\" />\r\n            {t('profile.data_export')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {t('profile.data_export_desc')}\r\n          </p>\r\n          \r\n          <div className=\"p-4 border rounded-lg bg-muted/50\">\r\n            <div className=\"flex items-start gap-3\">\r\n              <FileText className=\"h-5 w-5 mt-0.5 text-blue-600\" />\r\n              <div className=\"space-y-2\">\r\n                <h4 className=\"font-medium\">{t('profile.export_includes')}</h4>\r\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\r\n                  <li>• {t('profile.export_profile_data')}</li>\r\n                  <li>• {t('profile.export_preferences')}</li>\r\n                  <li>• {t('profile.export_activity_log')}</li>\r\n                  <li>• {t('profile.export_session_data')}</li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <Button onClick={exportPersonalData} disabled={loading}>\r\n            <Download className=\"h-4 w-4 mr-2\" />\r\n            {loading ? t('profile.exporting') : t('profile.export_my_data')}\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Data Retention */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Database className=\"h-5 w-5\" />\r\n            {t('profile.data_retention')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {t('profile.data_retention_desc')}\r\n          </p>\r\n          \r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm\">{t('profile.activity_logs')}</span>\r\n              <span className=\"text-sm text-muted-foreground\">{t('profile.retained_90_days')}</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm\">{t('profile.session_data')}</span>\r\n              <span className=\"text-sm text-muted-foreground\">{t('profile.retained_30_days')}</span>\r\n            </div>\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm\">{t('profile.profile_data')}</span>\r\n              <span className=\"text-sm text-muted-foreground\">{t('profile.retained_until_deletion')}</span>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Danger Zone */}\r\n      <Card className=\"border-destructive\">\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2 text-destructive\">\r\n            <AlertTriangle className=\"h-5 w-5\" />\r\n            {t('profile.danger_zone')}\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"p-4 border border-destructive rounded-lg bg-destructive/5\">\r\n            <h4 className=\"font-medium text-destructive mb-2\">\r\n              {t('profile.delete_account')}\r\n            </h4>\r\n            <p className=\"text-sm text-muted-foreground mb-4\">\r\n              {t('profile.delete_account_desc')}\r\n            </p>\r\n            \r\n            <AlertDialog>\r\n              <AlertDialogTrigger asChild>\r\n                <Button variant=\"destructive\" size=\"sm\">\r\n                  <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                  {t('profile.delete_my_account')}\r\n                </Button>\r\n              </AlertDialogTrigger>\r\n              <AlertDialogContent>\r\n                <AlertDialogHeader>\r\n                  <AlertDialogTitle>{t('profile.confirm_deletion')}</AlertDialogTitle>\r\n                  <AlertDialogDescription>\r\n                    {t('profile.deletion_warning')}\r\n                  </AlertDialogDescription>\r\n                </AlertDialogHeader>\r\n                <AlertDialogFooter>\r\n                  <AlertDialogCancel>{t('common.cancel')}</AlertDialogCancel>\r\n                  <AlertDialogAction \r\n                    onClick={deleteAccount}\r\n                    className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\r\n                  >\r\n                    {loading ? t('profile.deleting') : t('profile.delete_account')}\r\n                  </AlertDialogAction>\r\n                </AlertDialogFooter>\r\n              </AlertDialogContent>\r\n            </AlertDialog>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\profile\\NotificationsPreferencesTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\profile\\PersonalInformationTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\qr\\QRCodeCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\ReconHubDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\analytics\\BottleneckAnalysis.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\analytics\\PerformanceComparison.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":222,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8322,8325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8322,8325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8952,8955],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8952,8955],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9677,9680],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9677,9680],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { BarChart3, Calendar, TrendingUp, Award, Users, Clock } from 'lucide-react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { ComposedChart, Line, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar, BarChart } from 'recharts';\r\nimport type { ReconOrderWithWorkflow } from '@/types/recon-hub';\r\n\r\ninterface PerformanceComparisonProps {\r\n  dealerId: number;\r\n  orders: ReconOrderWithWorkflow[];\r\n  loading?: boolean;\r\n}\r\n\r\ninterface PerformanceMetrics {\r\n  period: string;\r\n  avgT2L: number;\r\n  completedVehicles: number;\r\n  onTimeRate: number;\r\n  avgHoldingCost: number;\r\n  efficiency: number;\r\n}\r\n\r\ninterface DepartmentMetrics {\r\n  department: string;\r\n  avgT2L: number;\r\n  throughput: number;\r\n  quality: number;\r\n  cost: number;\r\n  efficiency: number;\r\n}\r\n\r\nconst INDUSTRY_BENCHMARKS = {\r\n  avgT2L: 5.2, // days\r\n  onTimeRate: 75, // percentage\r\n  efficiency: 85 // percentage\r\n};\r\n\r\nexport function PerformanceComparison({ dealerId, orders, loading = false }: PerformanceComparisonProps) {\r\n  const { t } = useTranslation();\r\n  const [selectedPeriod, setSelectedPeriod] = useState<'week' | 'month' | 'quarter'>('month');\r\n  const [comparisonType, setComparisonType] = useState<'historical' | 'benchmark' | 'department'>('historical');\r\n\r\n  // Historical performance data\r\n  const historicalData = useMemo((): PerformanceMetrics[] => {\r\n    if (!orders.length) return [];\r\n\r\n    const now = new Date();\r\n    const periods = [];\r\n\r\n    // Generate periods based on selection\r\n    for (let i = 5; i >= 0; i--) {\r\n      let periodStart: Date;\r\n      let periodEnd: Date;\r\n      let periodLabel: string;\r\n\r\n      if (selectedPeriod === 'week') {\r\n        periodStart = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (i + 1) * 7);\r\n        periodEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate() - i * 7);\r\n        periodLabel = `Week ${6 - i}`;\r\n      } else if (selectedPeriod === 'month') {\r\n        periodStart = new Date(now.getFullYear(), now.getMonth() - (i + 1), 1);\r\n        periodEnd = new Date(now.getFullYear(), now.getMonth() - i, 0);\r\n        periodLabel = periodStart.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\r\n      } else {\r\n        periodStart = new Date(now.getFullYear(), now.getMonth() - (i + 1) * 3, 1);\r\n        periodEnd = new Date(now.getFullYear(), now.getMonth() - i * 3, 0);\r\n        periodLabel = `Q${Math.ceil((periodStart.getMonth() + 1) / 3)} ${periodStart.getFullYear()}`;\r\n      }\r\n\r\n      // Filter orders for this period\r\n      const periodOrders = orders.filter(order => {\r\n        const orderDate = new Date(order.t2lMetrics?.acquisition_date || new Date());\r\n        return orderDate >= periodStart && orderDate <= periodEnd;\r\n      });\r\n\r\n      const completedOrders = periodOrders.filter(order => \r\n        order.t2lMetrics?.frontline_ready_date\r\n      );\r\n\r\n      const avgT2L = completedOrders.length > 0 \r\n        ? completedOrders.reduce((sum, order) => {\r\n            if (!order.t2lMetrics?.frontline_ready_date) return sum;\r\n            const days = (new Date(order.t2lMetrics.frontline_ready_date).getTime() - \r\n                         new Date(order.t2lMetrics.acquisition_date).getTime()) / (1000 * 60 * 60 * 24);\r\n            return sum + days;\r\n          }, 0) / completedOrders.length\r\n        : 0;\r\n\r\n      const onTimeOrders = completedOrders.filter(order => {\r\n        if (!order.t2lMetrics?.frontline_ready_date) return false;\r\n        const days = (new Date(order.t2lMetrics.frontline_ready_date).getTime() - \r\n                     new Date(order.t2lMetrics.acquisition_date).getTime()) / (1000 * 60 * 60 * 24);\r\n        return days <= 4; // Target is 4 days or less\r\n      });\r\n\r\n      const avgHoldingCost = completedOrders.length > 0\r\n        ? completedOrders.reduce((sum, order) => {\r\n            return sum + (order.t2lMetrics?.holding_cost_daily || 45) * avgT2L;\r\n          }, 0) / completedOrders.length\r\n        : 0;\r\n\r\n      periods.push({\r\n        period: periodLabel,\r\n        avgT2L,\r\n        completedVehicles: completedOrders.length,\r\n        onTimeRate: completedOrders.length > 0 ? (onTimeOrders.length / completedOrders.length) * 100 : 0,\r\n        avgHoldingCost,\r\n        efficiency: completedOrders.length > 0 ? Math.min(100, (4 / Math.max(avgT2L, 0.1)) * 100) : 0\r\n      });\r\n    }\r\n\r\n    return periods;\r\n  }, [orders, selectedPeriod]);\r\n\r\n  // Department comparison data (simulated)\r\n  const departmentData = useMemo((): DepartmentMetrics[] => {\r\n    return [\r\n      {\r\n        department: t('reconHub.departments.inspection', 'Inspection'),\r\n        avgT2L: 0.8,\r\n        throughput: 95,\r\n        quality: 88,\r\n        cost: 120,\r\n        efficiency: 92\r\n      },\r\n      {\r\n        department: t('reconHub.departments.bodyshop', 'Body Shop'),\r\n        avgT2L: 2.1,\r\n        throughput: 78,\r\n        quality: 94,\r\n        cost: 850,\r\n        efficiency: 85\r\n      },\r\n      {\r\n        department: t('reconHub.departments.mechanical', 'Mechanical'),\r\n        avgT2L: 1.5,\r\n        throughput: 88,\r\n        quality: 91,\r\n        cost: 650,\r\n        efficiency: 89\r\n      },\r\n      {\r\n        department: t('reconHub.departments.detailing', 'Detailing'),\r\n        avgT2L: 0.6,\r\n        throughput: 98,\r\n        quality: 96,\r\n        cost: 180,\r\n        efficiency: 94\r\n      }\r\n    ];\r\n  }, [t]);\r\n\r\n  // Current vs benchmark comparison\r\n  const benchmarkComparison = useMemo(() => {\r\n    const currentPeriod = historicalData[historicalData.length - 1];\r\n    if (!currentPeriod) return null;\r\n\r\n    return {\r\n      t2l: {\r\n        current: currentPeriod.avgT2L,\r\n        benchmark: INDUSTRY_BENCHMARKS.avgT2L,\r\n        performance: currentPeriod.avgT2L <= INDUSTRY_BENCHMARKS.avgT2L ? 'above' : 'below'\r\n      },\r\n      onTime: {\r\n        current: currentPeriod.onTimeRate,\r\n        benchmark: INDUSTRY_BENCHMARKS.onTimeRate,\r\n        performance: currentPeriod.onTimeRate >= INDUSTRY_BENCHMARKS.onTimeRate ? 'above' : 'below'\r\n      },\r\n      efficiency: {\r\n        current: currentPeriod.efficiency,\r\n        benchmark: INDUSTRY_BENCHMARKS.efficiency,\r\n        performance: currentPeriod.efficiency >= INDUSTRY_BENCHMARKS.efficiency ? 'above' : 'below'\r\n      }\r\n    };\r\n  }, [historicalData]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <div className=\"h-6 w-48 bg-muted rounded mb-2\"></div>\r\n                <div className=\"h-4 w-64 bg-muted rounded\"></div>\r\n              </div>\r\n              <div className=\"flex gap-2\">\r\n                <div className=\"h-10 w-32 bg-muted rounded\"></div>\r\n                <div className=\"h-10 w-32 bg-muted rounded\"></div>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"h-80 bg-muted rounded\"></div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header with Controls */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <BarChart3 className=\"h-5 w-5\" />\r\n                {t('reconHub.comparison.title', 'Performance Comparison')}\r\n              </CardTitle>\r\n              <CardDescription>\r\n                {t('reconHub.comparison.description', 'Compare performance across time periods, benchmarks, and departments')}\r\n              </CardDescription>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Select value={selectedPeriod} onValueChange={(value: any) => setSelectedPeriod(value)}>\r\n                <SelectTrigger className=\"w-32\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"week\">{t('reconHub.comparison.weekly', 'Weekly')}</SelectItem>\r\n                  <SelectItem value=\"month\">{t('reconHub.comparison.monthly', 'Monthly')}</SelectItem>\r\n                  <SelectItem value=\"quarter\">{t('reconHub.comparison.quarterly', 'Quarterly')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <Select value={comparisonType} onValueChange={(value: any) => setComparisonType(value)}>\r\n                <SelectTrigger className=\"w-40\">\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"historical\">{t('reconHub.comparison.historical', 'Historical')}</SelectItem>\r\n                  <SelectItem value=\"benchmark\">{t('reconHub.comparison.benchmark', 'Benchmark')}</SelectItem>\r\n                  <SelectItem value=\"department\">{t('reconHub.comparison.department', 'Department')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      <Tabs value={comparisonType} onValueChange={(value: any) => setComparisonType(value)}>\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"historical\" className=\"flex items-center gap-2\">\r\n            <Calendar className=\"h-4 w-4\" />\r\n            {t('reconHub.comparison.historical', 'Historical')}\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"benchmark\" className=\"flex items-center gap-2\">\r\n            <Award className=\"h-4 w-4\" />\r\n            {t('reconHub.comparison.benchmark', 'Benchmark')}\r\n          </TabsTrigger>\r\n          <TabsTrigger value=\"department\" className=\"flex items-center gap-2\">\r\n            <Users className=\"h-4 w-4\" />\r\n            {t('reconHub.comparison.department', 'Department')}\r\n          </TabsTrigger>\r\n        </TabsList>\r\n\r\n        {/* Historical Comparison */}\r\n        <TabsContent value=\"historical\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>{t('reconHub.comparison.historicalTrends', 'Historical Performance Trends')}</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <ResponsiveContainer width=\"100%\" height={400}>\r\n                <ComposedChart data={historicalData}>\r\n                  <CartesianGrid strokeDasharray=\"3 3\" />\r\n                  <XAxis dataKey=\"period\" />\r\n                  <YAxis yAxisId=\"left\" />\r\n                  <YAxis yAxisId=\"right\" orientation=\"right\" />\r\n                  <Tooltip />\r\n                  <Legend />\r\n                  <Bar yAxisId=\"left\" dataKey=\"completedVehicles\" fill=\"hsl(var(--primary))\" name=\"Completed Vehicles\" />\r\n                  <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"avgT2L\" stroke=\"hsl(var(--destructive))\" strokeWidth={2} name=\"Avg T2L (days)\" />\r\n                  <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"onTimeRate\" stroke=\"hsl(var(--success))\" strokeWidth={2} name=\"On-Time Rate (%)\" />\r\n                </ComposedChart>\r\n              </ResponsiveContainer>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Performance Summary */}\r\n          {historicalData.length >= 2 && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>{t('reconHub.comparison.performanceSummary', 'Performance Summary')}</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                  {[\r\n                    {\r\n                      metric: 'avgT2L',\r\n                      label: t('reconHub.comparison.avgT2L', 'Avg T2L'),\r\n                      current: historicalData[historicalData.length - 1].avgT2L,\r\n                      previous: historicalData[historicalData.length - 2].avgT2L,\r\n                      format: (v: number) => `${v.toFixed(1)} days`,\r\n                      inverse: true // Lower is better\r\n                    },\r\n                    {\r\n                      metric: 'onTimeRate',\r\n                      label: t('reconHub.comparison.onTimeRate', 'On-Time Rate'),\r\n                      current: historicalData[historicalData.length - 1].onTimeRate,\r\n                      previous: historicalData[historicalData.length - 2].onTimeRate,\r\n                      format: (v: number) => `${v.toFixed(1)}%`,\r\n                      inverse: false // Higher is better\r\n                    },\r\n                    {\r\n                      metric: 'completedVehicles',\r\n                      label: t('reconHub.comparison.throughput', 'Throughput'),\r\n                      current: historicalData[historicalData.length - 1].completedVehicles,\r\n                      previous: historicalData[historicalData.length - 2].completedVehicles,\r\n                      format: (v: number) => `${v} vehicles`,\r\n                      inverse: false // Higher is better\r\n                    }\r\n                  ].map((item) => {\r\n                    const change = ((item.current - item.previous) / Math.max(item.previous, 0.1)) * 100;\r\n                    const isImprovement = item.inverse ? change < 0 : change > 0;\r\n                    \r\n                    return (\r\n                      <div key={item.metric} className=\"space-y-2\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                          <span className=\"text-sm font-medium\">{item.label}</span>\r\n                          <Badge variant={isImprovement ? 'default' : 'secondary'}>\r\n                            {isImprovement ? (\r\n                              <TrendingUp className=\"h-3 w-3 mr-1\" />\r\n                            ) : (\r\n                              <TrendingUp className=\"h-3 w-3 mr-1 rotate-180\" />\r\n                            )}\r\n                            {Math.abs(change).toFixed(1)}%\r\n                          </Badge>\r\n                        </div>\r\n                        <div className=\"text-2xl font-bold\">{item.format(item.current)}</div>\r\n                        <div className=\"text-xs text-muted-foreground\">\r\n                          {t('reconHub.comparison.previous', 'Previous: {{value}}', { \r\n                            value: item.format(item.previous) \r\n                          })}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </TabsContent>\r\n\r\n        {/* Benchmark Comparison */}\r\n        <TabsContent value=\"benchmark\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>{t('reconHub.comparison.industryBenchmark', 'Industry Benchmark Comparison')}</CardTitle>\r\n              <CardDescription>\r\n                {t('reconHub.comparison.benchmarkDescription', 'Compare your performance against industry standards')}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {benchmarkComparison && (\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                  {[\r\n                    {\r\n                      title: t('reconHub.comparison.avgT2L', 'Average T2L'),\r\n                      current: benchmarkComparison.t2l.current,\r\n                      benchmark: benchmarkComparison.t2l.benchmark,\r\n                      performance: benchmarkComparison.t2l.performance,\r\n                      format: (v: number) => `${v.toFixed(1)} days`,\r\n                      icon: Clock\r\n                    },\r\n                    {\r\n                      title: t('reconHub.comparison.onTimeRate', 'On-Time Rate'),\r\n                      current: benchmarkComparison.onTime.current,\r\n                      benchmark: benchmarkComparison.onTime.benchmark,\r\n                      performance: benchmarkComparison.onTime.performance,\r\n                      format: (v: number) => `${v.toFixed(1)}%`,\r\n                      icon: TrendingUp\r\n                    },\r\n                    {\r\n                      title: t('reconHub.comparison.efficiency', 'Efficiency'),\r\n                      current: benchmarkComparison.efficiency.current,\r\n                      benchmark: benchmarkComparison.efficiency.benchmark,\r\n                      performance: benchmarkComparison.efficiency.performance,\r\n                      format: (v: number) => `${v.toFixed(1)}%`,\r\n                      icon: Award\r\n                    }\r\n                  ].map((metric) => {\r\n                    const IconComponent = metric.icon;\r\n                    const progressValue = (metric.current / metric.benchmark) * 100;\r\n                    \r\n                    return (\r\n                      <Card key={metric.title}>\r\n                        <CardHeader className=\"pb-3\">\r\n                          <CardTitle className=\"text-sm flex items-center gap-2\">\r\n                            <IconComponent className=\"h-4 w-4\" />\r\n                            {metric.title}\r\n                          </CardTitle>\r\n                        </CardHeader>\r\n                        <CardContent>\r\n                          <div className=\"space-y-3\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <span className=\"text-2xl font-bold\">\r\n                                {metric.format(metric.current)}\r\n                              </span>\r\n                              <Badge variant={metric.performance === 'above' ? 'default' : 'destructive'}>\r\n                                {metric.performance === 'above' \r\n                                  ? t('reconHub.comparison.aboveBenchmark', 'Above')\r\n                                  : t('reconHub.comparison.belowBenchmark', 'Below')\r\n                                }\r\n                              </Badge>\r\n                            </div>\r\n                            <div>\r\n                              <div className=\"flex justify-between text-xs text-muted-foreground mb-1\">\r\n                                <span>{t('reconHub.comparison.yourPerformance', 'Your Performance')}</span>\r\n                                <span>{t('reconHub.comparison.industryBenchmark', 'Industry Benchmark')}</span>\r\n                              </div>\r\n                              <Progress value={Math.min(progressValue, 100)} className=\"h-2\" />\r\n                              <div className=\"text-center text-xs text-muted-foreground mt-1\">\r\n                                {t('reconHub.comparison.benchmarkValue', 'Benchmark: {{value}}', { \r\n                                  value: metric.format(metric.benchmark) \r\n                                })}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </CardContent>\r\n                      </Card>\r\n                    );\r\n                  })}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        {/* Department Comparison */}\r\n        <TabsContent value=\"department\" className=\"space-y-6\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>{t('reconHub.comparison.departmentPerformance', 'Department Performance Comparison')}</CardTitle>\r\n              <CardDescription>\r\n                {t('reconHub.comparison.departmentDescription', 'Compare performance across different departments and workflow stages')}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                {/* Radar Chart */}\r\n                <div>\r\n                  <h4 className=\"text-sm font-medium mb-4\">\r\n                    {t('reconHub.comparison.performanceRadar', 'Performance Radar')}\r\n                  </h4>\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <RadarChart data={departmentData}>\r\n                      <PolarGrid />\r\n                      <PolarAngleAxis dataKey=\"department\" />\r\n                      <PolarRadiusAxis angle={90} domain={[0, 100]} />\r\n                      <Radar\r\n                        name=\"Efficiency\"\r\n                        dataKey=\"efficiency\"\r\n                        stroke=\"hsl(var(--primary))\"\r\n                        fill=\"hsl(var(--primary))\"\r\n                        fillOpacity={0.3}\r\n                      />\r\n                      <Radar\r\n                        name=\"Quality\"\r\n                        dataKey=\"quality\"\r\n                        stroke=\"hsl(var(--success))\"\r\n                        fill=\"hsl(var(--success))\"\r\n                        fillOpacity={0.3}\r\n                      />\r\n                      <Legend />\r\n                    </RadarChart>\r\n                  </ResponsiveContainer>\r\n                </div>\r\n\r\n                {/* Bar Chart */}\r\n                <div>\r\n                  <h4 className=\"text-sm font-medium mb-4\">\r\n                    {t('reconHub.comparison.throughputComparison', 'Throughput Comparison')}\r\n                  </h4>\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart data={departmentData}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"department\" />\r\n                      <YAxis />\r\n                      <Tooltip />\r\n                      <Bar dataKey=\"throughput\" fill=\"hsl(var(--primary))\" />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Department Details */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>{t('reconHub.comparison.departmentDetails', 'Department Details')}</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"space-y-4\">\r\n                {departmentData.map((dept) => (\r\n                  <div key={dept.department} className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                    <div>\r\n                      <h4 className=\"font-semibold\">{dept.department}</h4>\r\n                      <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\r\n                        <span>{dept.avgT2L} days avg</span>\r\n                        <span>•</span>\r\n                        <span>{dept.throughput}% throughput</span>\r\n                        <span>•</span>\r\n                        <span>${dept.cost} avg cost</span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-4\">\r\n                      <div className=\"text-right\">\r\n                        <div className=\"text-sm text-muted-foreground\">Quality</div>\r\n                        <div className=\"font-semibold\">{dept.quality}%</div>\r\n                      </div>\r\n                      <div className=\"text-right\">\r\n                        <div className=\"text-sm text-muted-foreground\">Efficiency</div>\r\n                        <div className=\"font-semibold\">{dept.efficiency}%</div>\r\n                      </div>\r\n                      <Badge variant={\r\n                        dept.efficiency >= 90 ? 'default' :\r\n                        dept.efficiency >= 80 ? 'secondary' :\r\n                        'destructive'\r\n                      }>\r\n                        {dept.efficiency >= 90 ? 'Excellent' :\r\n                         dept.efficiency >= 80 ? 'Good' :\r\n                         'Needs Work'}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\analytics\\ReportExportCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":312,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":312,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11889,11892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11889,11892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Download, FileText, Calendar, Filter, Settings, Share2 } from 'lucide-react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport type { ReconOrderWithWorkflow } from '@/types/recon-hub';\r\n\r\ninterface ReportExportCenterProps {\r\n  dealerId: number;\r\n  orders: ReconOrderWithWorkflow[];\r\n}\r\n\r\ninterface ReportConfig {\r\n  type: 'summary' | 'detailed' | 'analytics' | 'custom';\r\n  format: 'pdf' | 'excel' | 'csv';\r\n  dateRange: {\r\n    from: Date;\r\n    to: Date;\r\n  };\r\n  includeMetrics: {\r\n    t2lStats: boolean;\r\n    bottlenecks: boolean;\r\n    trends: boolean;\r\n    costs: boolean;\r\n    performance: boolean;\r\n  };\r\n  includeCharts: boolean;\r\n  includeRawData: boolean;\r\n}\r\n\r\nconst REPORT_TEMPLATES = [\r\n  {\r\n    id: 'executive',\r\n    name: 'Executive Summary',\r\n    description: 'High-level KPIs and trends for leadership',\r\n    type: 'summary' as const,\r\n    icon: FileText,\r\n    includes: ['Key metrics', 'Performance trends', 'Executive insights'],\r\n    defaultConfig: {\r\n      includeMetrics: { t2lStats: true, bottlenecks: true, trends: true, costs: true, performance: true },\r\n      includeCharts: true,\r\n      includeRawData: false\r\n    }\r\n  },\r\n  {\r\n    id: 'operational',\r\n    name: 'Operational Report',\r\n    description: 'Detailed operational metrics and bottleneck analysis',\r\n    type: 'detailed' as const,\r\n    icon: Settings,\r\n    includes: ['Detailed workflow analysis', 'Bottleneck identification', 'Resource recommendations'],\r\n    defaultConfig: {\r\n      includeMetrics: { t2lStats: true, bottlenecks: true, trends: true, costs: true, performance: true },\r\n      includeCharts: true,\r\n      includeRawData: true\r\n    }\r\n  },\r\n  {\r\n    id: 'financial',\r\n    name: 'Financial Analysis',\r\n    description: 'Cost analysis and ROI metrics',\r\n    type: 'analytics' as const,\r\n    icon: Download,\r\n    includes: ['Holding cost analysis', 'ROI calculations', 'Cost optimization opportunities'],\r\n    defaultConfig: {\r\n      includeMetrics: { t2lStats: true, bottlenecks: false, trends: true, costs: true, performance: false },\r\n      includeCharts: true,\r\n      includeRawData: false\r\n    }\r\n  },\r\n  {\r\n    id: 'performance',\r\n    name: 'Performance Analytics',\r\n    description: 'Comprehensive performance analysis with benchmarks',\r\n    type: 'analytics' as const,\r\n    icon: FileText,\r\n    includes: ['Performance benchmarks', 'Historical comparisons', 'Predictive analytics'],\r\n    defaultConfig: {\r\n      includeMetrics: { t2lStats: true, bottlenecks: true, trends: true, costs: false, performance: true },\r\n      includeCharts: true,\r\n      includeRawData: false\r\n    }\r\n  }\r\n];\r\n\r\nexport function ReportExportCenter({ dealerId, orders }: ReportExportCenterProps) {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  \r\n  const [selectedTemplate, setSelectedTemplate] = useState<string>('executive');\r\n  const [isGenerating, setIsGenerating] = useState(false);\r\n  \r\n  const [config, setConfig] = useState<ReportConfig>({\r\n    type: 'summary',\r\n    format: 'pdf',\r\n    dateRange: {\r\n      from: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\r\n      to: new Date()\r\n    },\r\n    includeMetrics: {\r\n      t2lStats: true,\r\n      bottlenecks: true,\r\n      trends: true,\r\n      costs: true,\r\n      performance: true\r\n    },\r\n    includeCharts: true,\r\n    includeRawData: false\r\n  });\r\n\r\n  const handleTemplateSelect = (templateId: string) => {\r\n    const template = REPORT_TEMPLATES.find(t => t.id === templateId);\r\n    if (template) {\r\n      setSelectedTemplate(templateId);\r\n      setConfig(prev => ({\r\n        ...prev,\r\n        type: template.type,\r\n        includeMetrics: template.defaultConfig.includeMetrics,\r\n        includeCharts: template.defaultConfig.includeCharts,\r\n        includeRawData: template.defaultConfig.includeRawData\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleGenerateReport = async () => {\r\n    setIsGenerating(true);\r\n    \r\n    try {\r\n      // Simulate report generation\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // In a real implementation, this would call an API endpoint\r\n      // that generates the report based on the configuration\r\n      const reportData = {\r\n        dealerId,\r\n        config,\r\n        orders: orders.filter(order => {\r\n          const orderDate = new Date(order.t2lMetrics?.acquisition_date || new Date());\r\n          return orderDate >= config.dateRange.from && orderDate <= config.dateRange.to;\r\n        })\r\n      };\r\n\r\n      // For now, just show success message\r\n      toast({\r\n        title: t('reconHub.reports.generating', 'Report Generated Successfully'),\r\n        description: t('reconHub.reports.downloadReady', 'Your report is ready for download'),\r\n      });\r\n\r\n      // In a real implementation, this would trigger a file download\r\n      console.log('Generated report with config:', reportData);\r\n      \r\n    } catch (error) {\r\n      toast({\r\n        title: t('reconHub.reports.error', 'Export Error'),\r\n        description: t('reconHub.reports.errorDesc', 'Failed to generate report. Please try again.'),\r\n        variant: 'destructive'\r\n      });\r\n    } finally {\r\n      setIsGenerating(false);\r\n    }\r\n  };\r\n\r\n  const handleScheduleReport = () => {\r\n    toast({\r\n      title: t('reconHub.reports.scheduled', 'Report Scheduled'),\r\n      description: t('reconHub.reports.scheduledDesc', 'Your report will be generated and emailed automatically'),\r\n    });\r\n  };\r\n\r\n  const selectedTemplateData = REPORT_TEMPLATES.find(t => t.id === selectedTemplate);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Download className=\"h-5 w-5\" />\r\n            {t('reconHub.reports.title', 'Report Export Center')}\r\n          </CardTitle>\r\n          <CardDescription>\r\n            {t('reconHub.reports.description', 'Generate comprehensive reports and analytics for your reconditioning operations')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n        {/* Report Templates */}\r\n        <div className=\"lg:col-span-1\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-lg\">\r\n                {t('reconHub.reports.templates', 'Report Templates')}\r\n              </CardTitle>\r\n              <CardDescription>\r\n                {t('reconHub.reports.templatesDesc', 'Choose from pre-configured report templates')}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-3\">\r\n              {REPORT_TEMPLATES.map((template) => {\r\n                const IconComponent = template.icon;\r\n                return (\r\n                  <div\r\n                    key={template.id}\r\n                    className={`p-3 border rounded-lg cursor-pointer transition-colors ${\r\n                      selectedTemplate === template.id \r\n                        ? 'border-primary bg-primary/5' \r\n                        : 'hover:bg-muted/50'\r\n                    }`}\r\n                    onClick={() => handleTemplateSelect(template.id)}\r\n                  >\r\n                    <div className=\"flex items-start gap-3\">\r\n                      <IconComponent className=\"h-5 w-5 mt-0.5 text-primary\" />\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <h4 className=\"font-medium text-sm\">{template.name}</h4>\r\n                        <p className=\"text-xs text-muted-foreground mb-2\">\r\n                          {template.description}\r\n                        </p>\r\n                        <div className=\"flex flex-wrap gap-1\">\r\n                          {template.includes.slice(0, 2).map((item, idx) => (\r\n                            <Badge key={idx} variant=\"outline\" className=\"text-xs\">\r\n                              {item}\r\n                            </Badge>\r\n                          ))}\r\n                          {template.includes.length > 2 && (\r\n                            <Badge variant=\"outline\" className=\"text-xs\">\r\n                              +{template.includes.length - 2}\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Configuration */}\r\n        <div className=\"lg:col-span-2\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Filter className=\"h-5 w-5\" />\r\n                {t('reconHub.reports.configuration', 'Report Configuration')}\r\n              </CardTitle>\r\n              {selectedTemplateData && (\r\n                <Alert>\r\n                  <FileText className=\"h-4 w-4\" />\r\n                  <AlertDescription>\r\n                    {t('reconHub.reports.templateSelected', 'Selected: {{name}} - {{description}}', {\r\n                      name: selectedTemplateData.name,\r\n                      description: selectedTemplateData.description\r\n                    })}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              {/* Date Range */}\r\n              <div className=\"space-y-3\">\r\n                <Label className=\"flex items-center gap-2\">\r\n                  <Calendar className=\"h-4 w-4\" />\r\n                  {t('reconHub.reports.dateRange', 'Date Range')}\r\n                </Label>\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <Label className=\"text-xs text-muted-foreground\">\r\n                      {t('reconHub.reports.fromDate', 'From Date')}\r\n                    </Label>\r\n                    <Input\r\n                      type=\"date\"\r\n                      value={config.dateRange.from.toISOString().split('T')[0]}\r\n                      onChange={(e) => setConfig(prev => ({\r\n                        ...prev,\r\n                        dateRange: { ...prev.dateRange, from: new Date(e.target.value) }\r\n                      }))}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <Label className=\"text-xs text-muted-foreground\">\r\n                      {t('reconHub.reports.toDate', 'To Date')}\r\n                    </Label>\r\n                    <Input\r\n                      type=\"date\"\r\n                      value={config.dateRange.to.toISOString().split('T')[0]}\r\n                      onChange={(e) => setConfig(prev => ({\r\n                        ...prev,\r\n                        dateRange: { ...prev.dateRange, to: new Date(e.target.value) }\r\n                      }))}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <Separator />\r\n\r\n              {/* Format Selection */}\r\n              <div className=\"space-y-3\">\r\n                <Label>{t('reconHub.reports.format', 'Export Format')}</Label>\r\n                <Select \r\n                  value={config.format} \r\n                  onValueChange={(value: any) => setConfig(prev => ({ ...prev, format: value }))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"pdf\">PDF Document</SelectItem>\r\n                    <SelectItem value=\"excel\">Excel Spreadsheet</SelectItem>\r\n                    <SelectItem value=\"csv\">CSV Data</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <Separator />\r\n\r\n              {/* Metrics Selection */}\r\n              <div className=\"space-y-3\">\r\n                <Label>{t('reconHub.reports.includeMetrics', 'Include Metrics')}</Label>\r\n                <div className=\"grid grid-cols-2 gap-3\">\r\n                  {[\r\n                    { key: 't2lStats', label: 'T2L Statistics' },\r\n                    { key: 'bottlenecks', label: 'Bottleneck Analysis' },\r\n                    { key: 'trends', label: 'Performance Trends' },\r\n                    { key: 'costs', label: 'Cost Analysis' },\r\n                    { key: 'performance', label: 'Performance Metrics' }\r\n                  ].map((metric) => (\r\n                    <div key={metric.key} className=\"flex items-center space-x-2\">\r\n                      <Checkbox\r\n                        id={metric.key}\r\n                        checked={config.includeMetrics[metric.key as keyof typeof config.includeMetrics]}\r\n                        onCheckedChange={(checked) => \r\n                          setConfig(prev => ({\r\n                            ...prev,\r\n                            includeMetrics: {\r\n                              ...prev.includeMetrics,\r\n                              [metric.key]: checked\r\n                            }\r\n                          }))\r\n                        }\r\n                      />\r\n                      <Label htmlFor={metric.key} className=\"text-sm\">\r\n                        {metric.label}\r\n                      </Label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              <Separator />\r\n\r\n              {/* Additional Options */}\r\n              <div className=\"space-y-3\">\r\n                <Label>{t('reconHub.reports.additionalOptions', 'Additional Options')}</Label>\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      id=\"includeCharts\"\r\n                      checked={config.includeCharts}\r\n                      onCheckedChange={(checked) => \r\n                        setConfig(prev => ({ ...prev, includeCharts: !!checked }))\r\n                      }\r\n                    />\r\n                    <Label htmlFor=\"includeCharts\" className=\"text-sm\">\r\n                      {t('reconHub.reports.includeCharts', 'Include Charts and Visualizations')}\r\n                    </Label>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      id=\"includeRawData\"\r\n                      checked={config.includeRawData}\r\n                      onCheckedChange={(checked) => \r\n                        setConfig(prev => ({ ...prev, includeRawData: !!checked }))\r\n                      }\r\n                    />\r\n                    <Label htmlFor=\"includeRawData\" className=\"text-sm\">\r\n                      {t('reconHub.reports.includeRawData', 'Include Raw Data Appendix')}\r\n                    </Label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <Separator />\r\n\r\n              {/* Actions */}\r\n              <div className=\"flex flex-col sm:flex-row gap-3\">\r\n                <Button \r\n                  onClick={handleGenerateReport}\r\n                  disabled={isGenerating}\r\n                  className=\"flex-1\"\r\n                >\r\n                  <Download className=\"h-4 w-4 mr-2\" />\r\n                  {isGenerating \r\n                    ? t('reconHub.reports.generating', 'Generating...') \r\n                    : t('reconHub.reports.generate', 'Generate Report')\r\n                  }\r\n                </Button>\r\n                <Button \r\n                  variant=\"outline\" \r\n                  onClick={handleScheduleReport}\r\n                  className=\"flex-1\"\r\n                >\r\n                  <Calendar className=\"h-4 w-4 mr-2\" />\r\n                  {t('reconHub.reports.schedule', 'Schedule Report')}\r\n                </Button>\r\n                <Button variant=\"outline\" size=\"icon\">\r\n                  <Share2 className=\"h-4 w-4\" />\r\n                </Button>\r\n              </div>\r\n\r\n              {/* Report Preview Info */}\r\n              {orders.length > 0 && (\r\n                <Alert>\r\n                  <FileText className=\"h-4 w-4\" />\r\n                  <AlertDescription>\r\n                    {t('reconHub.reports.preview', 'Report will include {{count}} orders from {{from}} to {{to}}', {\r\n                      count: orders.filter(order => {\r\n                        const orderDate = new Date(order.t2lMetrics?.acquisition_date || new Date());\r\n                        return orderDate >= config.dateRange.from && orderDate <= config.dateRange.to;\r\n                      }).length,\r\n                      from: config.dateRange.from.toLocaleDateString(),\r\n                      to: config.dateRange.to.toLocaleDateString()\r\n                    })}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\analytics\\T2LTrendAnalysis.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\dashboard\\ColorTriggerReport.tsx","messages":[{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":54,"column":11,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":54,"endColumn":77,"suggestions":[{"messageId":"addBrackets","fix":{"range":[2040,2179],"text":"{ const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\r\n          return severityOrder[a.severity] - severityOrder[b.severity]; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":185,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6836,6839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6836,6839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { AlertTriangle, Clock, Filter, Search, ExternalLink } from 'lucide-react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport type { ColorTriggerAlert } from '@/types/recon-hub';\r\n\r\ninterface ColorTriggerReportProps {\r\n  alerts: ColorTriggerAlert[];\r\n  summary: {\r\n    total: number;\r\n    critical: number;\r\n    high: number;\r\n    medium: number;\r\n    low: number;\r\n  };\r\n  loading?: boolean;\r\n}\r\n\r\nexport function ColorTriggerReport({ alerts, summary, loading = false }: ColorTriggerReportProps) {\r\n  const { t } = useTranslation();\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [severityFilter, setSeverityFilter] = useState<string>('all');\r\n  const [sortBy, setSortBy] = useState<'daysOverdue' | 'severity' | 'vehicleInfo'>('daysOverdue');\r\n\r\n  // Filter and sort alerts\r\n  const filteredAlerts = useMemo(() => {\r\n    let filtered = alerts;\r\n\r\n    // Apply search filter\r\n    if (searchTerm) {\r\n      filtered = filtered.filter(alert => \r\n        alert.vehicleInfo.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        alert.stepName.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n\r\n    // Apply severity filter\r\n    if (severityFilter !== 'all') {\r\n      filtered = filtered.filter(alert => alert.severity === severityFilter);\r\n    }\r\n\r\n    // Sort alerts\r\n    filtered.sort((a, b) => {\r\n      switch (sortBy) {\r\n        case 'daysOverdue':\r\n          return b.daysOverdue - a.daysOverdue;\r\n        case 'severity':\r\n          const severityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\r\n          return severityOrder[a.severity] - severityOrder[b.severity];\r\n        case 'vehicleInfo':\r\n          return a.vehicleInfo.localeCompare(b.vehicleInfo);\r\n        default:\r\n          return 0;\r\n      }\r\n    });\r\n\r\n    return filtered;\r\n  }, [alerts, searchTerm, severityFilter, sortBy]);\r\n\r\n  const getColorClass = (color: ColorTriggerAlert['color']) => {\r\n    switch (color) {\r\n      case 'red':\r\n        return 'text-destructive bg-destructive/10 border-destructive/20';\r\n      case 'orange':\r\n        return 'text-orange-600 bg-orange-50 border-orange-200';\r\n      case 'yellow':\r\n        return 'text-yellow-700 bg-yellow-50 border-yellow-200';\r\n      default:\r\n        return 'text-muted-foreground bg-muted/50 border-muted';\r\n    }\r\n  };\r\n\r\n  const getSeverityBadgeVariant = (severity: ColorTriggerAlert['severity']) => {\r\n    switch (severity) {\r\n      case 'critical':\r\n        return 'destructive';\r\n      case 'high':\r\n        return 'destructive';\r\n      case 'medium':\r\n        return 'secondary';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <Skeleton className=\"h-6 w-48 mb-2\" />\r\n              <Skeleton className=\"h-4 w-64\" />\r\n            </div>\r\n            <Skeleton className=\"h-6 w-16\" />\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"flex items-center gap-4 p-3 border rounded\">\r\n                <Skeleton className=\"h-6 w-6 rounded-full\" />\r\n                <div className=\"flex-1\">\r\n                  <Skeleton className=\"h-4 w-32 mb-1\" />\r\n                  <Skeleton className=\"h-3 w-48\" />\r\n                </div>\r\n                <Skeleton className=\"h-6 w-16\" />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              🚦 {t('reconHub.alerts.colorTriggerReport', 'Color Trigger Report')}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {t('reconHub.alerts.description', 'Real-time alerts for vehicles requiring attention')}\r\n            </CardDescription>\r\n          </div>\r\n          \r\n          {/* Summary Badges */}\r\n          <div className=\"flex items-center gap-2\">\r\n            {summary.critical > 0 && (\r\n              <Badge variant=\"destructive\" className=\"text-xs\">\r\n                {summary.critical} Critical\r\n              </Badge>\r\n            )}\r\n            {summary.high > 0 && (\r\n              <Badge variant=\"destructive\" className=\"text-xs bg-orange-100 text-orange-800 hover:bg-orange-100\">\r\n                {summary.high} High\r\n              </Badge>\r\n            )}\r\n            {summary.medium > 0 && (\r\n              <Badge variant=\"secondary\" className=\"text-xs\">\r\n                {summary.medium} Medium\r\n              </Badge>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n\r\n      <CardContent>\r\n        {/* Filters */}\r\n        <div className=\"flex items-center gap-4 mb-6\">\r\n          <div className=\"flex-1\">\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n              <Input\r\n                placeholder={t('reconHub.alerts.searchPlaceholder', 'Search vehicles or steps...')}\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <Select value={severityFilter} onValueChange={setSeverityFilter}>\r\n            <SelectTrigger className=\"w-32\">\r\n              <Filter className=\"h-4 w-4 mr-2\" />\r\n              <SelectValue />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">{t('reconHub.alerts.allSeverities', 'All')}</SelectItem>\r\n              <SelectItem value=\"critical\">{t('reconHub.alerts.critical', 'Critical')}</SelectItem>\r\n              <SelectItem value=\"high\">{t('reconHub.alerts.high', 'High')}</SelectItem>\r\n              <SelectItem value=\"medium\">{t('reconHub.alerts.medium', 'Medium')}</SelectItem>\r\n              <SelectItem value=\"low\">{t('reconHub.alerts.low', 'Low')}</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <Select value={sortBy} onValueChange={(value: any) => setSortBy(value)}>\r\n            <SelectTrigger className=\"w-40\">\r\n              <SelectValue />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"daysOverdue\">{t('reconHub.alerts.sortByDays', 'Days Overdue')}</SelectItem>\r\n              <SelectItem value=\"severity\">{t('reconHub.alerts.sortBySeverity', 'Severity')}</SelectItem>\r\n              <SelectItem value=\"vehicleInfo\">{t('reconHub.alerts.sortByVehicle', 'Vehicle')}</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n\r\n        {/* Alerts Table */}\r\n        {filteredAlerts.length === 0 ? (\r\n          <div className=\"text-center py-8\">\r\n            <AlertTriangle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-medium mb-2\">\r\n              {searchTerm || severityFilter !== 'all' ? \r\n                t('reconHub.alerts.noFilteredResults', 'No alerts match your filters') :\r\n                t('reconHub.alerts.noAlerts', 'No alerts at this time')\r\n              }\r\n            </h3>\r\n            <p className=\"text-muted-foreground\">\r\n              {searchTerm || severityFilter !== 'all' ? \r\n                t('reconHub.alerts.tryDifferentFilters', 'Try adjusting your filters to see more results') :\r\n                t('reconHub.alerts.allVehiclesOnTrack', 'All vehicles are currently on track')\r\n              }\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"rounded-md border\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead className=\"w-16\"></TableHead>\r\n                  <TableHead>{t('reconHub.alerts.vehicle', 'Vehicle')}</TableHead>\r\n                  <TableHead>{t('reconHub.alerts.step', 'Current Step')}</TableHead>\r\n                  <TableHead>{t('reconHub.alerts.severity', 'Severity')}</TableHead>\r\n                  <TableHead>{t('reconHub.alerts.daysOverdue', 'Days Overdue')}</TableHead>\r\n                  <TableHead className=\"w-16\"></TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredAlerts.map((alert) => (\r\n                  <TableRow key={alert.id} className=\"hover:bg-muted/50\">\r\n                    <TableCell>\r\n                      <div \r\n                        className={`w-4 h-4 rounded-full border-2 ${getColorClass(alert.color)}`}\r\n                        title={`${alert.color.toUpperCase()} alert`}\r\n                      />\r\n                    </TableCell>\r\n                    \r\n                    <TableCell>\r\n                      <div>\r\n                        <div className=\"font-medium\">{alert.vehicleInfo}</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          Order: {alert.orderId.substring(0, 8)}...\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n                    \r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <Clock className=\"h-4 w-4 text-muted-foreground\" />\r\n                        {alert.stepName}\r\n                      </div>\r\n                    </TableCell>\r\n                    \r\n                    <TableCell>\r\n                      <Badge variant={getSeverityBadgeVariant(alert.severity)}>\r\n                        {alert.severity}\r\n                      </Badge>\r\n                    </TableCell>\r\n                    \r\n                    <TableCell>\r\n                      <div className={`font-medium ${alert.daysOverdue > 5 ? 'text-destructive' : ''}`}>\r\n                        {alert.daysOverdue} {alert.daysOverdue === 1 ? 'day' : 'days'}\r\n                      </div>\r\n                    </TableCell>\r\n                    \r\n                    <TableCell>\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => {\r\n                          // Navigate to order detail\r\n                          window.open(`/recon/order/${alert.orderId}`, '_blank');\r\n                        }}\r\n                      >\r\n                        <ExternalLink className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </div>\r\n        )}\r\n\r\n        {/* Summary Footer */}\r\n        {filteredAlerts.length > 0 && (\r\n          <div className=\"mt-4 p-4 bg-muted/30 rounded-lg\">\r\n            <div className=\"flex items-center justify-between text-sm\">\r\n              <div>\r\n                {t('reconHub.alerts.showing', 'Showing {{count}} of {{total}} alerts', {\r\n                  count: filteredAlerts.length,\r\n                  total: alerts.length\r\n                })}\r\n              </div>\r\n              \r\n              <div className=\"flex items-center gap-4\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\r\n                  <span>Critical (10+ days)</span>\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"w-3 h-3 rounded-full bg-orange-500\"></div>\r\n                  <span>High (7+ days)</span>\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\r\n                  <span>Medium (4+ days)</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\dashboard\\LiveActivityFeed.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1084,1087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1084,1087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport { \r\n  Activity, \r\n  CheckCircle, \r\n  Clock, \r\n  AlertTriangle, \r\n  MapPin, \r\n  User,\r\n  Calendar,\r\n  RefreshCw\r\n} from 'lucide-react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Skeleton } from '@/components/ui/skeleton';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface LiveActivityFeedProps {\r\n  dealerId: number;\r\n  limit?: number;\r\n}\r\n\r\ninterface ActivityItem {\r\n  id: string;\r\n  type: 'step_completed' | 'location_updated' | 'alert_triggered' | 'vehicle_created' | 'status_changed';\r\n  orderId: string;\r\n  vehicleInfo: string;\r\n  description: string;\r\n  timestamp: string;\r\n  userId?: string;\r\n  userEmail?: string;\r\n  metadata?: any;\r\n}\r\n\r\nexport function LiveActivityFeed({ dealerId, limit = 20 }: LiveActivityFeedProps) {\r\n  const { t } = useTranslation();\r\n  const [isConnected, setIsConnected] = useState(true);\r\n\r\n  const { \r\n    data: activities = [],\r\n    isLoading,\r\n    refetch,\r\n    dataUpdatedAt\r\n  } = useQuery({\r\n    queryKey: ['recon-activity-feed', dealerId],\r\n    queryFn: async (): Promise<ActivityItem[]> => {\r\n      // Get recent order activity with proper join\r\n      const { data: orderActivity, error: orderError } = await supabase\r\n        .from('order_activity_log')\r\n        .select(`\r\n          id,\r\n          order_id,\r\n          activity_type,\r\n          description,\r\n          created_at,\r\n          user_id\r\n        `)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit);\r\n\r\n      if (orderError) throw orderError;\r\n\r\n      // Get order details separately to avoid join issues\r\n      const orderIds = orderActivity?.map(a => a.order_id) || [];\r\n      const { data: orders, error: ordersError } = await supabase\r\n        .from('orders')\r\n        .select(`\r\n          id,\r\n          order_number,\r\n          customer_name,\r\n          vehicle_year,\r\n          vehicle_make,\r\n          vehicle_model,\r\n          dealer_id\r\n        `)\r\n        .in('id', orderIds)\r\n        .eq('dealer_id', dealerId)\r\n        .eq('order_type', 'recon');\r\n\r\n      if (ordersError) throw ordersError;\r\n\r\n      // Get recent location updates\r\n      const { data: locationActivity, error: locationError } = await supabase\r\n        .from('recon_vehicle_locations')\r\n        .select(`\r\n          id,\r\n          order_id,\r\n          location_name,\r\n          scanned_at,\r\n          scanned_by\r\n        `)\r\n        .order('scanned_at', { ascending: false })\r\n        .limit(Math.floor(limit / 2));\r\n\r\n      if (locationError) throw locationError;\r\n\r\n      // Get order details for location updates\r\n      const locationOrderIds = locationActivity?.map(l => l.order_id) || [];\r\n      const { data: locationOrders, error: locationOrdersError } = await supabase\r\n        .from('orders')\r\n        .select(`\r\n          id,\r\n          order_number,\r\n          customer_name,\r\n          vehicle_year,\r\n          vehicle_make,\r\n          vehicle_model\r\n        `)\r\n        .in('id', locationOrderIds)\r\n        .eq('dealer_id', dealerId)\r\n        .eq('order_type', 'recon');\r\n\r\n      if (locationOrdersError) throw locationOrdersError;\r\n\r\n      // Transform and combine activities\r\n      const activities: ActivityItem[] = [];\r\n\r\n      // Add order activities\r\n      orderActivity?.forEach(activity => {\r\n        const order = orders?.find(o => o.id === activity.order_id);\r\n        if (!order) return;\r\n\r\n        const vehicleInfo = `${order.vehicle_year || ''} ${order.vehicle_make || ''} ${order.vehicle_model || ''}`.trim() || order.order_number;\r\n        \r\n        activities.push({\r\n          id: activity.id,\r\n          type: getActivityType(activity.activity_type),\r\n          orderId: activity.order_id,\r\n          vehicleInfo,\r\n          description: activity.description || 'Activity logged',\r\n          timestamp: activity.created_at,\r\n          userId: activity.user_id\r\n        });\r\n      });\r\n\r\n      // Add location activities\r\n      locationActivity?.forEach(location => {\r\n        const order = locationOrders?.find(o => o.id === location.order_id);\r\n        if (!order) return;\r\n\r\n        const vehicleInfo = `${order.vehicle_year || ''} ${order.vehicle_make || ''} ${order.vehicle_model || ''}`.trim() || order.order_number;\r\n        \r\n        activities.push({\r\n          id: `location-${location.id}`,\r\n          type: 'location_updated',\r\n          orderId: location.order_id,\r\n          vehicleInfo,\r\n          description: `Vehicle moved to ${location.location_name}`,\r\n          timestamp: location.scanned_at,\r\n          userId: location.scanned_by\r\n        });\r\n      });\r\n\r\n      // Sort by timestamp and limit\r\n      return activities\r\n        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\r\n        .slice(0, limit);\r\n    },\r\n    enabled: !!dealerId,\r\n    // Real-time updates are handled via Supabase subscriptions\r\n    refetchInterval: false\r\n  });\r\n\r\n  // Real-time subscription for activity updates\r\n  useEffect(() => {\r\n    const channel = supabase\r\n      .channel('recon_activity_realtime')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'order_activity_log'\r\n        },\r\n        () => {\r\n          console.log('Activity changed, refreshing...');\r\n          refetch();\r\n        }\r\n      )\r\n      .subscribe((status) => {\r\n        setIsConnected(status === 'SUBSCRIBED');\r\n      });\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [refetch]);\r\n\r\n  const getActivityType = (activityType: string): ActivityItem['type'] => {\r\n    switch (activityType) {\r\n      case 'order_created':\r\n        return 'vehicle_created';\r\n      case 'status_changed':\r\n        return 'status_changed';\r\n      case 'step_completed':\r\n        return 'step_completed';\r\n      default:\r\n        return 'status_changed';\r\n    }\r\n  };\r\n\r\n  const getActivityIcon = (type: ActivityItem['type']) => {\r\n    switch (type) {\r\n      case 'step_completed':\r\n        return <CheckCircle className=\"h-4 w-4 text-success\" />;\r\n      case 'location_updated':\r\n        return <MapPin className=\"h-4 w-4 text-blue-600\" />;\r\n      case 'alert_triggered':\r\n        return <AlertTriangle className=\"h-4 w-4 text-destructive\" />;\r\n      case 'vehicle_created':\r\n        return <Calendar className=\"h-4 w-4 text-primary\" />;\r\n      case 'status_changed':\r\n        return <Clock className=\"h-4 w-4 text-orange-600\" />;\r\n      default:\r\n        return <Activity className=\"h-4 w-4 text-muted-foreground\" />;\r\n    }\r\n  };\r\n\r\n  const getActivityColor = (type: ActivityItem['type']) => {\r\n    switch (type) {\r\n      case 'step_completed':\r\n        return 'border-l-green-500 bg-green-50';\r\n      case 'location_updated':\r\n        return 'border-l-blue-500 bg-blue-50';\r\n      case 'alert_triggered':\r\n        return 'border-l-red-500 bg-red-50';\r\n      case 'vehicle_created':\r\n        return 'border-l-purple-500 bg-purple-50';\r\n      case 'status_changed':\r\n        return 'border-l-orange-500 bg-orange-50';\r\n      default:\r\n        return 'border-l-gray-500 bg-gray-50';\r\n    }\r\n  };\r\n\r\n  const getActivityTypeLabel = (type: ActivityItem['type']) => {\r\n    const labels: Record<ActivityItem['type'], string> = {\r\n      'step_completed': t('reconHub.activity.stepCompleted', 'Step Completed'),\r\n      'location_updated': t('reconHub.activity.locationUpdated', 'Location Updated'),\r\n      'alert_triggered': t('reconHub.activity.alertTriggered', 'Alert Triggered'),\r\n      'vehicle_created': t('reconHub.activity.vehicleCreated', 'Vehicle Created'),\r\n      'status_changed': t('reconHub.activity.statusChanged', 'Status Changed')\r\n    };\r\n    return labels[type];\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <Skeleton className=\"h-6 w-48\" />\r\n          <Skeleton className=\"h-4 w-64\" />\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"flex items-start gap-3 p-3 border-l-4 border-l-gray-200\">\r\n                <Skeleton className=\"h-4 w-4 rounded-full mt-1\" />\r\n                <div className=\"flex-1 space-y-2\">\r\n                  <Skeleton className=\"h-4 w-32\" />\r\n                  <Skeleton className=\"h-3 w-48\" />\r\n                  <Skeleton className=\"h-3 w-24\" />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Activity className=\"h-5 w-5\" />\r\n              {t('reconHub.activity.title', 'Live Activity Feed')}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {t('reconHub.activity.description', 'Real-time updates from your reconditioning workflow')}\r\n            </CardDescription>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-2\">\r\n            <Badge \r\n              variant=\"outline\" \r\n              className={`text-xs ${isConnected ? 'bg-green-50 text-green-700' : ''}`}\r\n            >\r\n              <div className={`w-2 h-2 rounded-full mr-1 ${isConnected ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}></div>\r\n              {isConnected ? 'Live' : 'Disconnected'}\r\n            </Badge>\r\n            \r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => refetch()}\r\n              disabled={isLoading}\r\n            >\r\n              <RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n\r\n      <CardContent>\r\n        {activities.length === 0 ? (\r\n          <div className=\"text-center py-8\">\r\n            <Activity className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-medium mb-2\">\r\n              {t('reconHub.activity.noActivity', 'No Recent Activity')}\r\n            </h3>\r\n            <p className=\"text-muted-foreground\">\r\n              {t('reconHub.activity.noActivityDescription', 'Activity will appear here as your team works on vehicles')}\r\n            </p>\r\n          </div>\r\n        ) : (\r\n          <ScrollArea className=\"h-96\">\r\n            <div className=\"space-y-3\">\r\n              {activities.map((activity, index) => (\r\n                <div\r\n                  key={activity.id}\r\n                  className={`flex items-start gap-3 p-3 rounded-lg border-l-4 transition-colors hover:bg-muted/30 ${getActivityColor(activity.type)}`}\r\n                >\r\n                  <div className=\"mt-1\">\r\n                    {getActivityIcon(activity.type)}\r\n                  </div>\r\n                  \r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {getActivityTypeLabel(activity.type)}\r\n                      </Badge>\r\n                      <span className=\"text-xs text-muted-foreground\">\r\n                        {formatDistanceToNow(new Date(activity.timestamp), { addSuffix: true })}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <h4 className=\"font-medium text-sm mb-1\">\r\n                      {activity.vehicleInfo}\r\n                    </h4>\r\n                    \r\n                    <p className=\"text-sm text-muted-foreground mb-2\">\r\n                      {activity.description}\r\n                    </p>\r\n                    \r\n                    <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\r\n                      <span>Order: {activity.orderId.substring(0, 8)}...</span>\r\n                      {activity.userEmail && (\r\n                        <div className=\"flex items-center gap-1\">\r\n                          <User className=\"h-3 w-3\" />\r\n                          <span>{activity.userEmail}</span>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </ScrollArea>\r\n        )}\r\n\r\n        {/* Footer with last update info */}\r\n        {activities.length > 0 && (\r\n          <div className=\"mt-4 pt-4 border-t text-xs text-muted-foreground text-center\">\r\n            {t('reconHub.activity.lastUpdated', 'Last updated {{time}}', {\r\n              time: formatDistanceToNow(new Date(dataUpdatedAt), { addSuffix: true })\r\n            })}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\dashboard\\T2LMetricsGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\dashboard\\WorkflowStatusGrid.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[753,756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[753,756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { \r\n  Plus, \r\n  Truck, \r\n  Search, \r\n  Wrench, \r\n  Paintbrush, \r\n  Sparkles, \r\n  Camera, \r\n  CheckCircle, \r\n  Star,\r\n  MoreHorizontal \r\n} from 'lucide-react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Button } from '@/components/ui/button';\r\nimport type { ReconOrderWithWorkflow, WorkflowStepType } from '@/types/recon-hub';\r\n\r\ninterface WorkflowStatusGridProps {\r\n  dealerId: number;\r\n  orders: ReconOrderWithWorkflow[];\r\n  expanded?: boolean;\r\n}\r\n\r\nconst STEP_ICONS: Record<WorkflowStepType, any> = {\r\n  'created': Plus,\r\n  'bring_to_recon': Truck,\r\n  'inspection': Search,\r\n  'mechanical': Wrench,\r\n  'body_work': Paintbrush,\r\n  'detailing': Sparkles,\r\n  'photos': Camera,\r\n  'needs_approval': CheckCircle,\r\n  'wholesale': MoreHorizontal,\r\n  'front_line': Star,\r\n  'not_for_sale': MoreHorizontal,\r\n  'cant_find_keys': MoreHorizontal\r\n};\r\n\r\nconst STEP_COLORS: Record<WorkflowStepType, string> = {\r\n  'created': 'bg-blue-100 text-blue-800',\r\n  'bring_to_recon': 'bg-purple-100 text-purple-800',\r\n  'inspection': 'bg-yellow-100 text-yellow-800',\r\n  'mechanical': 'bg-orange-100 text-orange-800',\r\n  'body_work': 'bg-red-100 text-red-800',\r\n  'detailing': 'bg-cyan-100 text-cyan-800',\r\n  'photos': 'bg-green-100 text-green-800',\r\n  'needs_approval': 'bg-amber-100 text-amber-800',\r\n  'wholesale': 'bg-gray-100 text-gray-800',\r\n  'front_line': 'bg-emerald-100 text-emerald-800',\r\n  'not_for_sale': 'bg-slate-100 text-slate-800',\r\n  'cant_find_keys': 'bg-red-100 text-red-800'\r\n};\r\n\r\nexport function WorkflowStatusGrid({ dealerId, orders, expanded = false }: WorkflowStatusGridProps) {\r\n  const { t } = useTranslation();\r\n\r\n  // Group orders by current step/status\r\n  const workflowStats = useMemo(() => {\r\n    const stats = new Map<string, {\r\n      stepType: WorkflowStepType;\r\n      count: number;\r\n      orders: ReconOrderWithWorkflow[];\r\n      avgDaysInStep: number;\r\n    }>();\r\n\r\n    orders.forEach(order => {\r\n      // Determine current step based on status\r\n      let currentStepType: WorkflowStepType = 'created';\r\n      \r\n      switch (order.status) {\r\n        case 'pending':\r\n          currentStepType = 'created';\r\n          break;\r\n        case 'in_progress':\r\n          currentStepType = 'inspection'; // Default assumption\r\n          break;\r\n        case 'needs_approval':\r\n          currentStepType = 'needs_approval';\r\n          break;\r\n        case 'completed':\r\n          currentStepType = 'front_line';\r\n          break;\r\n        default:\r\n          currentStepType = 'created';\r\n      }\r\n\r\n      const stepKey = currentStepType;\r\n      \r\n      if (!stats.has(stepKey)) {\r\n        stats.set(stepKey, {\r\n          stepType: currentStepType,\r\n          count: 0,\r\n          orders: [],\r\n          avgDaysInStep: 0\r\n        });\r\n      }\r\n\r\n      const stepStats = stats.get(stepKey)!;\r\n      stepStats.count++;\r\n      stepStats.orders.push(order);\r\n\r\n      // Calculate days in current step (simplified)\r\n      const daysInProcess = order.t2lMetrics ? \r\n        Math.ceil((Date.now() - new Date(order.t2lMetrics.acquisition_date).getTime()) / (1000 * 60 * 60 * 24)) : 0;\r\n      \r\n      stepStats.avgDaysInStep = (stepStats.avgDaysInStep * (stepStats.count - 1) + daysInProcess) / stepStats.count;\r\n    });\r\n\r\n    return Array.from(stats.values()).sort((a, b) => b.count - a.count);\r\n  }, [orders]);\r\n\r\n  const getStepDisplayName = (stepType: WorkflowStepType): string => {\r\n    const translations: Record<WorkflowStepType, string> = {\r\n      'created': t('reconHub.workflow.steps.created', 'Vehicle Created'),\r\n      'bring_to_recon': t('reconHub.workflow.steps.bringToRecon', 'Bring to Recon'),\r\n      'inspection': t('reconHub.workflow.steps.inspection', 'Inspection'),\r\n      'mechanical': t('reconHub.workflow.steps.mechanical', 'Mechanical Work'),\r\n      'body_work': t('reconHub.workflow.steps.bodyWork', 'Body Work'),\r\n      'detailing': t('reconHub.workflow.steps.detailing', 'Detailing'),\r\n      'photos': t('reconHub.workflow.steps.photos', 'Photography'),\r\n      'needs_approval': t('reconHub.workflow.steps.needsApproval', 'Needs Approval'),\r\n      'wholesale': t('reconHub.workflow.steps.wholesale', 'Wholesale'),\r\n      'front_line': t('reconHub.workflow.steps.frontLine', 'Front Line Ready'),\r\n      'not_for_sale': t('reconHub.workflow.steps.notForSale', 'Not For Sale'),\r\n      'cant_find_keys': t('reconHub.workflow.steps.cantFindKeys', 'Can\\'t Find Keys')\r\n    };\r\n    \r\n    return translations[stepType] || stepType;\r\n  };\r\n\r\n  const totalActiveVehicles = orders.filter(o => o.status !== 'completed' && o.status !== 'cancelled').length;\r\n\r\n  if (workflowStats.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{t('reconHub.workflow.title', 'Workflow Status Overview')}</CardTitle>\r\n          <CardDescription>\r\n            {t('reconHub.workflow.description', 'Current distribution of vehicles across workflow steps')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-center py-8\">\r\n            <Star className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-medium mb-2\">\r\n              {t('reconHub.workflow.noVehicles', 'No Active Vehicles')}\r\n            </h3>\r\n            <p className=\"text-muted-foreground\">\r\n              {t('reconHub.workflow.noVehiclesDescription', 'There are currently no vehicles in the reconditioning workflow')}\r\n            </p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  const basicView = (\r\n    <Card>\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <CardTitle>{t('reconHub.workflow.title', 'Workflow Status Overview')}</CardTitle>\r\n            <CardDescription>\r\n              {t('reconHub.workflow.totalActive', '{{count}} vehicles currently active', { \r\n                count: totalActiveVehicles \r\n              })}\r\n            </CardDescription>\r\n          </div>\r\n          <Badge variant=\"outline\" className=\"text-sm\">\r\n            {workflowStats.length} {t('reconHub.workflow.activeSteps', 'Active Steps')}\r\n          </Badge>\r\n        </div>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\r\n          {workflowStats.slice(0, 8).map((step) => {\r\n            const IconComponent = STEP_ICONS[step.stepType];\r\n            const colorClass = STEP_COLORS[step.stepType];\r\n            const percentage = totalActiveVehicles > 0 ? (step.count / totalActiveVehicles) * 100 : 0;\r\n\r\n            return (\r\n              <Card key={step.stepType} className=\"hover:shadow-md transition-shadow\">\r\n                <CardContent className=\"p-4\">\r\n                  <div className=\"flex items-center justify-between mb-3\">\r\n                    <div className={`p-2 rounded-lg ${colorClass}`}>\r\n                      <IconComponent className=\"h-4 w-4\" />\r\n                    </div>\r\n                    <Badge variant=\"secondary\">{step.count}</Badge>\r\n                  </div>\r\n                  \r\n                  <div className=\"space-y-2\">\r\n                    <h4 className=\"font-medium text-sm leading-tight\">\r\n                      {getStepDisplayName(step.stepType)}\r\n                    </h4>\r\n                    \r\n                    <Progress value={percentage} className=\"h-1\" />\r\n                    \r\n                    <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\r\n                      <span>{percentage.toFixed(1)}% of total</span>\r\n                      <span>{step.avgDaysInStep.toFixed(1)}d avg</span>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            );\r\n          })}\r\n        </div>\r\n        \r\n        {workflowStats.length > 8 && (\r\n          <div className=\"mt-4 text-center\">\r\n            <Button variant=\"outline\" size=\"sm\">\r\n              {t('reconHub.workflow.viewAll', 'View All {{count}} Steps', { \r\n                count: workflowStats.length \r\n              })}\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  if (!expanded) {\r\n    return basicView;\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {basicView}\r\n      \r\n      {/* Detailed Workflow Analysis */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{t('reconHub.workflow.detailedAnalysis', 'Detailed Workflow Analysis')}</CardTitle>\r\n          <CardDescription>\r\n            {t('reconHub.workflow.stepPerformance', 'Step-by-step performance and bottleneck analysis')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"space-y-4\">\r\n            {workflowStats.map((step, index) => {\r\n              const IconComponent = STEP_ICONS[step.stepType];\r\n              const colorClass = STEP_COLORS[step.stepType];\r\n              const percentage = totalActiveVehicles > 0 ? (step.count / totalActiveVehicles) * 100 : 0;\r\n              const isBottleneck = step.avgDaysInStep > 2; // More than 2 days average\r\n\r\n              return (\r\n                <div key={step.stepType} className=\"flex items-center p-4 border rounded-lg hover:bg-muted/30 transition-colors\">\r\n                  <div className=\"flex items-center gap-4 flex-1\">\r\n                    <div className={`p-3 rounded-lg ${colorClass}`}>\r\n                      <IconComponent className=\"h-5 w-5\" />\r\n                    </div>\r\n                    \r\n                    <div className=\"flex-1\">\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <h4 className=\"font-medium\">{getStepDisplayName(step.stepType)}</h4>\r\n                        {isBottleneck && (\r\n                          <Badge variant=\"secondary\" className=\"text-xs bg-yellow-100 text-yellow-800\">\r\n                            {t('reconHub.workflow.bottleneck', 'Bottleneck')}\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                      \r\n                      <div className=\"flex items-center gap-6 text-sm text-muted-foreground\">\r\n                        <span>{step.count} vehicles ({percentage.toFixed(1)}%)</span>\r\n                        <span>Avg: {step.avgDaysInStep.toFixed(1)} days</span>\r\n                        <span>Rank: #{index + 1}</span>\r\n                      </div>\r\n                      \r\n                      <Progress value={percentage} className=\"h-2 mt-2\" />\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <Button variant=\"ghost\" size=\"sm\">\r\n                    {t('reconHub.workflow.viewDetails', 'View Details')}\r\n                  </Button>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\notifications\\ReconNotificationCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":257,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9650,9653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9650,9653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":269,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10282,10285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10282,10285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Bell, X, CheckCircle, AlertTriangle, Clock, Car, Filter } from 'lucide-react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport type { ColorTriggerAlert } from '@/types/recon-hub';\r\n\r\ninterface ReconNotificationCenterProps {\r\n  dealerId: number;\r\n  alerts: ColorTriggerAlert[];\r\n}\r\n\r\ninterface Notification {\r\n  id: string;\r\n  type: 'alert' | 'workflow' | 'milestone' | 'system';\r\n  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';\r\n  title: string;\r\n  message: string;\r\n  timestamp: Date;\r\n  isRead: boolean;\r\n  actionable: boolean;\r\n  entityId?: string;\r\n  entityType?: 'order' | 'workflow' | 'system';\r\n}\r\n\r\nconst MOCK_NOTIFICATIONS: Notification[] = [\r\n  {\r\n    id: '1',\r\n    type: 'alert',\r\n    severity: 'critical',\r\n    title: 'Critical T2L Alert',\r\n    message: '2018 Honda Civic has been in recon for 12 days - immediate action required',\r\n    timestamp: new Date(Date.now() - 5 * 60 * 1000), // 5 minutes ago\r\n    isRead: false,\r\n    actionable: true,\r\n    entityId: 'order-123',\r\n    entityType: 'order'\r\n  },\r\n  {\r\n    id: '2',\r\n    type: 'workflow',\r\n    severity: 'high',\r\n    title: 'Workflow Step Completed',\r\n    message: 'Body shop work completed for 2020 Toyota Camry - ready for detailing',\r\n    timestamp: new Date(Date.now() - 15 * 60 * 1000), // 15 minutes ago\r\n    isRead: false,\r\n    actionable: true,\r\n    entityId: 'order-124',\r\n    entityType: 'order'\r\n  },\r\n  {\r\n    id: '3',\r\n    type: 'milestone',\r\n    severity: 'info',\r\n    title: 'Monthly Target Achieved',\r\n    message: 'Average T2L for March: 3.8 days - 5% below target!',\r\n    timestamp: new Date(Date.now() - 60 * 60 * 1000), // 1 hour ago\r\n    isRead: true,\r\n    actionable: false,\r\n    entityType: 'system'\r\n  },\r\n  {\r\n    id: '4',\r\n    type: 'alert',\r\n    severity: 'medium',\r\n    title: 'Holding Cost Alert',\r\n    message: '2019 Ford F-150 holding cost exceeded $400 - consider priority processing',\r\n    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 hours ago\r\n    isRead: true,\r\n    actionable: true,\r\n    entityId: 'order-125',\r\n    entityType: 'order'\r\n  },\r\n  {\r\n    id: '5',\r\n    type: 'system',\r\n    severity: 'info',\r\n    title: 'System Update',\r\n    message: 'ReconHub analytics updated with new predictive features',\r\n    timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 hours ago\r\n    isRead: true,\r\n    actionable: false,\r\n    entityType: 'system'\r\n  }\r\n];\r\n\r\nexport function ReconNotificationCenter({ dealerId, alerts }: ReconNotificationCenterProps) {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  \r\n  const [notifications, setNotifications] = useState<Notification[]>(MOCK_NOTIFICATIONS);\r\n  const [filter, setFilter] = useState<'all' | 'unread' | 'actionable'>('all');\r\n  const [typeFilter, setTypeFilter] = useState<'all' | 'alert' | 'workflow' | 'milestone' | 'system'>('all');\r\n  const [enableRealTime, setEnableRealTime] = useState(true);\r\n\r\n  // Convert alerts to notifications\r\n  useEffect(() => {\r\n    const alertNotifications: Notification[] = alerts.slice(0, 5).map((alert, index) => ({\r\n      id: `alert-${alert.id}-${index}`,\r\n      type: 'alert' as const,\r\n      severity: alert.severity,\r\n      title: t('reconHub.notifications.alertTitle', 'T2L Alert'),\r\n      message: t('reconHub.notifications.alertMessage', '{{vehicle}} has been overdue for {{days}} days', {\r\n        vehicle: alert.vehicleInfo,\r\n        days: alert.daysOverdue\r\n      }),\r\n      timestamp: new Date(Date.now() - index * 10 * 60 * 1000), // Stagger timestamps\r\n      isRead: false,\r\n      actionable: true,\r\n      entityId: alert.orderId,\r\n      entityType: 'order' as const\r\n    }));\r\n\r\n    // Merge with existing notifications, avoiding duplicates\r\n    setNotifications(prev => {\r\n      const existing = prev.filter(n => !n.id.startsWith('alert-'));\r\n      return [...alertNotifications, ...existing].sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\r\n    });\r\n  }, [alerts, t]);\r\n\r\n  const filteredNotifications = notifications.filter(notification => {\r\n    if (filter === 'unread' && notification.isRead) return false;\r\n    if (filter === 'actionable' && !notification.actionable) return false;\r\n    if (typeFilter !== 'all' && notification.type !== typeFilter) return false;\r\n    return true;\r\n  });\r\n\r\n  const unreadCount = notifications.filter(n => !n.isRead).length;\r\n\r\n  const handleMarkAsRead = (id: string) => {\r\n    setNotifications(prev => \r\n      prev.map(n => n.id === id ? { ...n, isRead: true } : n)\r\n    );\r\n  };\r\n\r\n  const handleMarkAllAsRead = () => {\r\n    setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));\r\n    toast({\r\n      title: t('reconHub.notifications.allRead', 'All notifications marked as read'),\r\n      description: t('reconHub.notifications.allReadDesc', 'Your notification list has been cleared')\r\n    });\r\n  };\r\n\r\n  const handleDismiss = (id: string) => {\r\n    setNotifications(prev => prev.filter(n => n.id !== id));\r\n    toast({\r\n      title: t('reconHub.notifications.dismissed', 'Notification dismissed'),\r\n      description: t('reconHub.notifications.dismissedDesc', 'The notification has been removed from your list')\r\n    });\r\n  };\r\n\r\n  const handleTakeAction = (notification: Notification) => {\r\n    if (notification.entityType === 'order' && notification.entityId) {\r\n      // In a real implementation, this would navigate to the order details\r\n      toast({\r\n        title: t('reconHub.notifications.actionTaken', 'Opening Order Details'),\r\n        description: t('reconHub.notifications.actionDesc', 'Redirecting to order {{id}}', { \r\n          id: notification.entityId \r\n        })\r\n      });\r\n    }\r\n    handleMarkAsRead(notification.id);\r\n  };\r\n\r\n  const getNotificationIcon = (type: Notification['type'], severity: Notification['severity']) => {\r\n    if (type === 'alert') {\r\n      return severity === 'critical' ? \r\n        <AlertTriangle className=\"h-4 w-4 text-destructive\" /> :\r\n        <AlertTriangle className=\"h-4 w-4 text-warning\" />;\r\n    }\r\n    if (type === 'workflow') {\r\n      return <CheckCircle className=\"h-4 w-4 text-success\" />;\r\n    }\r\n    if (type === 'milestone') {\r\n      return <Car className=\"h-4 w-4 text-primary\" />;\r\n    }\r\n    return <Bell className=\"h-4 w-4 text-muted-foreground\" />;\r\n  };\r\n\r\n  const getSeverityColor = (severity: Notification['severity']) => {\r\n    switch (severity) {\r\n      case 'critical':\r\n        return 'destructive';\r\n      case 'high':\r\n        return 'destructive';\r\n      case 'medium':\r\n        return 'secondary';\r\n      case 'low':\r\n        return 'outline';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  const formatTimestamp = (timestamp: Date) => {\r\n    const now = new Date();\r\n    const diff = now.getTime() - timestamp.getTime();\r\n    const minutes = Math.floor(diff / (1000 * 60));\r\n    const hours = Math.floor(diff / (1000 * 60 * 60));\r\n    const days = Math.floor(diff / (1000 * 60 * 60 * 24));\r\n\r\n    if (minutes < 1) return t('reconHub.notifications.justNow', 'Just now');\r\n    if (minutes < 60) return t('reconHub.notifications.minutesAgo', '{{count}}m ago', { count: minutes });\r\n    if (hours < 24) return t('reconHub.notifications.hoursAgo', '{{count}}h ago', { count: hours });\r\n    return t('reconHub.notifications.daysAgo', '{{count}}d ago', { count: days });\r\n  };\r\n\r\n  return (\r\n    <Card className=\"w-full\">\r\n      <CardHeader>\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Bell className=\"h-5 w-5\" />\r\n            <CardTitle>\r\n              {t('reconHub.notifications.title', 'Notification Center')}\r\n            </CardTitle>\r\n            {unreadCount > 0 && (\r\n              <Badge variant=\"destructive\" className=\"h-5 px-1.5 text-xs\">\r\n                {unreadCount}\r\n              </Badge>\r\n            )}\r\n          </div>\r\n          <div className=\"flex items-center gap-2\">\r\n            <div className=\"flex items-center gap-2 text-sm\">\r\n              <span className=\"text-muted-foreground\">\r\n                {t('reconHub.notifications.realTime', 'Real-time')}\r\n              </span>\r\n              <Switch\r\n                checked={enableRealTime}\r\n                onCheckedChange={setEnableRealTime}\r\n              />\r\n            </div>\r\n            {unreadCount > 0 && (\r\n              <Button variant=\"outline\" size=\"sm\" onClick={handleMarkAllAsRead}>\r\n                {t('reconHub.notifications.markAllRead', 'Mark All Read')}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <CardDescription>\r\n          {t('reconHub.notifications.description', 'Stay updated with real-time alerts and workflow notifications')}\r\n        </CardDescription>\r\n      </CardHeader>\r\n      \r\n      <CardContent>\r\n        {/* Filters */}\r\n        <div className=\"flex items-center gap-4 mb-4\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <Filter className=\"h-4 w-4 text-muted-foreground\" />\r\n            <Select value={filter} onValueChange={(value: any) => setFilter(value)}>\r\n              <SelectTrigger className=\"w-32\">\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">{t('reconHub.notifications.all', 'All')}</SelectItem>\r\n                <SelectItem value=\"unread\">{t('reconHub.notifications.unread', 'Unread')}</SelectItem>\r\n                <SelectItem value=\"actionable\">{t('reconHub.notifications.actionable', 'Actionable')}</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n          \r\n          <Select value={typeFilter} onValueChange={(value: any) => setTypeFilter(value)}>\r\n            <SelectTrigger className=\"w-32\">\r\n              <SelectValue />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">{t('reconHub.notifications.allTypes', 'All Types')}</SelectItem>\r\n              <SelectItem value=\"alert\">{t('reconHub.notifications.alerts', 'Alerts')}</SelectItem>\r\n              <SelectItem value=\"workflow\">{t('reconHub.notifications.workflow', 'Workflow')}</SelectItem>\r\n              <SelectItem value=\"milestone\">{t('reconHub.notifications.milestones', 'Milestones')}</SelectItem>\r\n              <SelectItem value=\"system\">{t('reconHub.notifications.system', 'System')}</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n\r\n        {/* Notifications List */}\r\n        <ScrollArea className=\"h-[400px]\">\r\n          {filteredNotifications.length === 0 ? (\r\n            <div className=\"text-center py-8\">\r\n              <Bell className=\"h-12 w-12 text-muted-foreground mx-auto mb-4 opacity-50\" />\r\n              <h3 className=\"text-lg font-semibold mb-2\">\r\n                {t('reconHub.notifications.noNotifications', 'No Notifications')}\r\n              </h3>\r\n              <p className=\"text-muted-foreground\">\r\n                {t('reconHub.notifications.noNotificationsDesc', 'All caught up! No new notifications at this time.')}\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-3\">\r\n              {filteredNotifications.map((notification, index) => (\r\n                <div key={notification.id}>\r\n                  <div className={`p-4 rounded-lg border transition-colors ${\r\n                    notification.isRead \r\n                      ? 'bg-muted/20 border-muted' \r\n                      : 'bg-background border-primary/20 shadow-sm'\r\n                  }`}>\r\n                    <div className=\"flex items-start gap-3\">\r\n                      <div className=\"flex-shrink-0 mt-0.5\">\r\n                        {getNotificationIcon(notification.type, notification.severity)}\r\n                      </div>\r\n                      \r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <div className=\"flex items-start justify-between gap-2\">\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"flex items-center gap-2 mb-1\">\r\n                              <h4 className={`font-medium text-sm ${\r\n                                notification.isRead ? 'text-muted-foreground' : 'text-foreground'\r\n                              }`}>\r\n                                {notification.title}\r\n                              </h4>\r\n                              <Badge variant={getSeverityColor(notification.severity)} className=\"h-4 px-1.5 text-xs\">\r\n                                {t(`reconHub.notifications.severity.${notification.severity}`, notification.severity)}\r\n                              </Badge>\r\n                            </div>\r\n                            <p className={`text-sm ${\r\n                              notification.isRead ? 'text-muted-foreground' : 'text-muted-foreground'\r\n                            }`}>\r\n                              {notification.message}\r\n                            </p>\r\n                            <div className=\"flex items-center gap-4 mt-2\">\r\n                              <span className=\"text-xs text-muted-foreground\">\r\n                                {formatTimestamp(notification.timestamp)}\r\n                              </span>\r\n                              {!notification.isRead && (\r\n                                <div className=\"w-2 h-2 bg-primary rounded-full\" />\r\n                              )}\r\n                            </div>\r\n                          </div>\r\n                          \r\n                          <div className=\"flex items-center gap-1\">\r\n                            {notification.actionable && (\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => handleTakeAction(notification)}\r\n                                className=\"h-8 px-2 text-xs\"\r\n                              >\r\n                                {t('reconHub.notifications.viewDetails', 'View')}\r\n                              </Button>\r\n                            )}\r\n                            {!notification.isRead && (\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => handleMarkAsRead(notification.id)}\r\n                                className=\"h-8 px-2 text-xs\"\r\n                              >\r\n                                <CheckCircle className=\"h-3 w-3\" />\r\n                              </Button>\r\n                            )}\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleDismiss(notification.id)}\r\n                              className=\"h-8 px-2 text-xs\"\r\n                            >\r\n                              <X className=\"h-3 w-3\" />\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {index < filteredNotifications.length - 1 && <Separator className=\"my-2\" />}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </ScrollArea>\r\n\r\n        {/* Real-time Status */}\r\n        {enableRealTime && (\r\n          <Alert className=\"mt-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\r\n              <AlertDescription className=\"text-sm\">\r\n                {t('reconHub.notifications.realTimeActive', 'Real-time notifications are active. You\\'ll receive alerts as they happen.')}\r\n              </AlertDescription>\r\n            </div>\r\n          </Alert>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon-hub\\settings\\ReconHubSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3146,3149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3146,3149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Settings, Bell, Clock, AlertTriangle, Palette, Save } from 'lucide-react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Slider } from '@/components/ui/slider';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface ReconHubSettingsProps {\r\n  dealerId: number;\r\n}\r\n\r\ninterface SettingsConfig {\r\n  notifications: {\r\n    enableAlerts: boolean;\r\n    criticalThreshold: number;\r\n    highThreshold: number;\r\n    mediumThreshold: number;\r\n    alertMethods: string[];\r\n  };\r\n  dashboard: {\r\n    autoRefresh: boolean;\r\n    refreshInterval: number;\r\n    defaultView: string;\r\n    showPredictiveAnalytics: boolean;\r\n  };\r\n  thresholds: {\r\n    targetT2L: number;\r\n    criticalT2L: number;\r\n    maxHoldingCost: number;\r\n    onTimeTarget: number;\r\n  };\r\n  workflow: {\r\n    enableAutomaticStatusUpdates: boolean;\r\n    requireApprovals: boolean;\r\n    defaultPriority: string;\r\n  };\r\n}\r\n\r\nexport function ReconHubSettings({ dealerId }: ReconHubSettingsProps) {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  \r\n  const [settings, setSettings] = useState<SettingsConfig>({\r\n    notifications: {\r\n      enableAlerts: true,\r\n      criticalThreshold: 10,\r\n      highThreshold: 7,\r\n      mediumThreshold: 4,\r\n      alertMethods: ['email', 'dashboard']\r\n    },\r\n    dashboard: {\r\n      autoRefresh: true,\r\n      refreshInterval: 30,\r\n      defaultView: 'overview',\r\n      showPredictiveAnalytics: true\r\n    },\r\n    thresholds: {\r\n      targetT2L: 4,\r\n      criticalT2L: 10,\r\n      maxHoldingCost: 500,\r\n      onTimeTarget: 80\r\n    },\r\n    workflow: {\r\n      enableAutomaticStatusUpdates: false,\r\n      requireApprovals: true,\r\n      defaultPriority: 'normal'\r\n    }\r\n  });\r\n\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  const handleSaveSettings = async () => {\r\n    setIsSaving(true);\r\n    \r\n    try {\r\n      // Simulate API call to save settings\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      toast({\r\n        title: t('reconHub.settings.saved', 'Settings Saved'),\r\n        description: t('reconHub.settings.savedDesc', 'Your ReconHub settings have been updated successfully'),\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: t('reconHub.settings.error', 'Save Error'),\r\n        description: t('reconHub.settings.errorDesc', 'Failed to save settings. Please try again.'),\r\n        variant: 'destructive'\r\n      });\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  const updateSettings = <K extends keyof SettingsConfig>(\r\n    category: K,\r\n    key: keyof SettingsConfig[K],\r\n    value: any\r\n  ) => {\r\n    setSettings(prev => ({\r\n      ...prev,\r\n      [category]: {\r\n        ...prev[category],\r\n        [key]: value\r\n      }\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Settings className=\"h-5 w-5\" />\r\n            {t('reconHub.settings.title', 'ReconHub Settings')}\r\n          </CardTitle>\r\n          <CardDescription>\r\n            {t('reconHub.settings.description', 'Configure your ReconHub dashboard preferences and alert thresholds')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n        {/* Notification Settings */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <Bell className=\"h-5 w-5\" />\r\n              {t('reconHub.settings.notifications', 'Notifications')}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {t('reconHub.settings.notificationsDesc', 'Configure alert thresholds and notification methods')}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <Label htmlFor=\"enableAlerts\">\r\n                {t('reconHub.settings.enableAlerts', 'Enable Alerts')}\r\n              </Label>\r\n              <Switch\r\n                id=\"enableAlerts\"\r\n                checked={settings.notifications.enableAlerts}\r\n                onCheckedChange={(checked) => updateSettings('notifications', 'enableAlerts', checked)}\r\n              />\r\n            </div>\r\n\r\n            {settings.notifications.enableAlerts && (\r\n              <>\r\n                <Separator />\r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <Label className=\"text-sm font-medium mb-2 block\">\r\n                      {t('reconHub.settings.criticalThreshold', 'Critical Alert (days)')}\r\n                    </Label>\r\n                    <div className=\"px-2\">\r\n                      <Slider\r\n                        value={[settings.notifications.criticalThreshold]}\r\n                        onValueChange={([value]) => updateSettings('notifications', 'criticalThreshold', value)}\r\n                        max={30}\r\n                        min={5}\r\n                        step={1}\r\n                        className=\"w-full\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\r\n                      <span>5 days</span>\r\n                      <span className=\"font-medium\">{settings.notifications.criticalThreshold} days</span>\r\n                      <span>30 days</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label className=\"text-sm font-medium mb-2 block\">\r\n                      {t('reconHub.settings.highThreshold', 'High Alert (days)')}\r\n                    </Label>\r\n                    <div className=\"px-2\">\r\n                      <Slider\r\n                        value={[settings.notifications.highThreshold]}\r\n                        onValueChange={([value]) => updateSettings('notifications', 'highThreshold', value)}\r\n                        max={settings.notifications.criticalThreshold - 1}\r\n                        min={3}\r\n                        step={1}\r\n                        className=\"w-full\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\r\n                      <span>3 days</span>\r\n                      <span className=\"font-medium\">{settings.notifications.highThreshold} days</span>\r\n                      <span>{settings.notifications.criticalThreshold - 1} days</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <Label className=\"text-sm font-medium mb-2 block\">\r\n                      {t('reconHub.settings.mediumThreshold', 'Medium Alert (days)')}\r\n                    </Label>\r\n                    <div className=\"px-2\">\r\n                      <Slider\r\n                        value={[settings.notifications.mediumThreshold]}\r\n                        onValueChange={([value]) => updateSettings('notifications', 'mediumThreshold', value)}\r\n                        max={settings.notifications.highThreshold - 1}\r\n                        min={1}\r\n                        step={1}\r\n                        className=\"w-full\"\r\n                      />\r\n                    </div>\r\n                    <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\r\n                      <span>1 day</span>\r\n                      <span className=\"font-medium\">{settings.notifications.mediumThreshold} days</span>\r\n                      <span>{settings.notifications.highThreshold - 1} days</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Dashboard Settings */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <Palette className=\"h-5 w-5\" />\r\n              {t('reconHub.settings.dashboard', 'Dashboard')}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {t('reconHub.settings.dashboardDesc', 'Customize your dashboard experience and display preferences')}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <Label htmlFor=\"autoRefresh\">\r\n                {t('reconHub.settings.autoRefresh', 'Auto Refresh')}\r\n              </Label>\r\n              <Switch\r\n                id=\"autoRefresh\"\r\n                checked={settings.dashboard.autoRefresh}\r\n                onCheckedChange={(checked) => updateSettings('dashboard', 'autoRefresh', checked)}\r\n              />\r\n            </div>\r\n\r\n            {settings.dashboard.autoRefresh && (\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"refreshInterval\">\r\n                  {t('reconHub.settings.refreshInterval', 'Refresh Interval')}\r\n                </Label>\r\n                <Select\r\n                  value={settings.dashboard.refreshInterval.toString()}\r\n                  onValueChange={(value) => updateSettings('dashboard', 'refreshInterval', parseInt(value))}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"10\">10 seconds</SelectItem>\r\n                    <SelectItem value=\"30\">30 seconds</SelectItem>\r\n                    <SelectItem value=\"60\">1 minute</SelectItem>\r\n                    <SelectItem value=\"300\">5 minutes</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"defaultView\">\r\n                {t('reconHub.settings.defaultView', 'Default View')}\r\n              </Label>\r\n              <Select\r\n                value={settings.dashboard.defaultView}\r\n                onValueChange={(value) => updateSettings('dashboard', 'defaultView', value)}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"overview\">{t('reconHub.tabs.overview', 'Overview')}</SelectItem>\r\n                  <SelectItem value=\"t2l\">{t('reconHub.tabs.t2lMetrics', 'T2L Metrics')}</SelectItem>\r\n                  <SelectItem value=\"alerts\">{t('reconHub.tabs.alerts', 'Alerts')}</SelectItem>\r\n                  <SelectItem value=\"workflow\">{t('reconHub.tabs.workflow', 'Workflow')}</SelectItem>\r\n                  <SelectItem value=\"analytics\">{t('reconHub.tabs.analytics', 'Analytics')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-between\">\r\n              <Label htmlFor=\"showPredictive\">\r\n                {t('reconHub.settings.showPredictive', 'Show Predictive Analytics')}\r\n              </Label>\r\n              <Switch\r\n                id=\"showPredictive\"\r\n                checked={settings.dashboard.showPredictiveAnalytics}\r\n                onCheckedChange={(checked) => updateSettings('dashboard', 'showPredictiveAnalytics', checked)}\r\n              />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Performance Thresholds */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <AlertTriangle className=\"h-5 w-5\" />\r\n              {t('reconHub.settings.thresholds', 'Performance Thresholds')}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {t('reconHub.settings.thresholdsDesc', 'Set target metrics and performance benchmarks')}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"targetT2L\">\r\n                  {t('reconHub.settings.targetT2L', 'Target T2L (days)')}\r\n                </Label>\r\n                <Input\r\n                  id=\"targetT2L\"\r\n                  type=\"number\"\r\n                  value={settings.thresholds.targetT2L}\r\n                  onChange={(e) => updateSettings('thresholds', 'targetT2L', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"criticalT2L\">\r\n                  {t('reconHub.settings.criticalT2L', 'Critical T2L (days)')}\r\n                </Label>\r\n                <Input\r\n                  id=\"criticalT2L\"\r\n                  type=\"number\"\r\n                  value={settings.thresholds.criticalT2L}\r\n                  onChange={(e) => updateSettings('thresholds', 'criticalT2L', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"maxHoldingCost\">\r\n                  {t('reconHub.settings.maxHoldingCost', 'Max Holding Cost ($)')}\r\n                </Label>\r\n                <Input\r\n                  id=\"maxHoldingCost\"\r\n                  type=\"number\"\r\n                  value={settings.thresholds.maxHoldingCost}\r\n                  onChange={(e) => updateSettings('thresholds', 'maxHoldingCost', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"onTimeTarget\">\r\n                  {t('reconHub.settings.onTimeTarget', 'On-Time Target (%)')}\r\n                </Label>\r\n                <Input\r\n                  id=\"onTimeTarget\"\r\n                  type=\"number\"\r\n                  value={settings.thresholds.onTimeTarget}\r\n                  onChange={(e) => updateSettings('thresholds', 'onTimeTarget', parseInt(e.target.value))}\r\n                />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Workflow Settings */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <Clock className=\"h-5 w-5\" />\r\n              {t('reconHub.settings.workflow', 'Workflow Settings')}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {t('reconHub.settings.workflowDesc', 'Configure workflow automation and approval requirements')}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <Label htmlFor=\"autoStatusUpdates\">\r\n                {t('reconHub.settings.autoStatusUpdates', 'Automatic Status Updates')}\r\n              </Label>\r\n              <Switch\r\n                id=\"autoStatusUpdates\"\r\n                checked={settings.workflow.enableAutomaticStatusUpdates}\r\n                onCheckedChange={(checked) => updateSettings('workflow', 'enableAutomaticStatusUpdates', checked)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"flex items-center justify-between\">\r\n              <Label htmlFor=\"requireApprovals\">\r\n                {t('reconHub.settings.requireApprovals', 'Require Approvals')}\r\n              </Label>\r\n              <Switch\r\n                id=\"requireApprovals\"\r\n                checked={settings.workflow.requireApprovals}\r\n                onCheckedChange={(checked) => updateSettings('workflow', 'requireApprovals', checked)}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"defaultPriority\">\r\n                {t('reconHub.settings.defaultPriority', 'Default Priority')}\r\n              </Label>\r\n              <Select\r\n                value={settings.workflow.defaultPriority}\r\n                onValueChange={(value) => updateSettings('workflow', 'defaultPriority', value)}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"low\">{t('reconHub.priority.low', 'Low')}</SelectItem>\r\n                  <SelectItem value=\"normal\">{t('reconHub.priority.normal', 'Normal')}</SelectItem>\r\n                  <SelectItem value=\"high\">{t('reconHub.priority.high', 'High')}</SelectItem>\r\n                  <SelectItem value=\"urgent\">{t('reconHub.priority.urgent', 'Urgent')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Save Button */}\r\n      <Card>\r\n        <CardContent className=\"pt-6\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <Alert className=\"flex-1 mr-4\">\r\n              <AlertTriangle className=\"h-4 w-4\" />\r\n              <AlertDescription>\r\n                {t('reconHub.settings.saveWarning', 'Changes will affect all users accessing this ReconHub dashboard')}\r\n              </AlertDescription>\r\n            </Alert>\r\n            <Button onClick={handleSaveSettings} disabled={isSaving} className=\"min-w-32\">\r\n              <Save className=\"h-4 w-4 mr-2\" />\r\n              {isSaving \r\n                ? t('reconHub.settings.saving', 'Saving...') \r\n                : t('reconHub.settings.save', 'Save Settings')\r\n              }\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon\\ReconApprovalWorkflow.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":383,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12858,12861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12858,12861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { \r\n  CheckCircle, \r\n  XCircle, \r\n  Clock, \r\n  User, \r\n  MessageSquare, \r\n  AlertTriangle, \r\n  ArrowRight, \r\n  Calendar, \r\n  DollarSign,\r\n  FileText,\r\n  Send,\r\n  Bell,\r\n  Eye\r\n} from 'lucide-react';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { es, ptBR } from 'date-fns/locale';\r\nimport { cn } from '@/lib/utils';\r\nimport { toast } from 'sonner';\r\n\r\ninterface ApprovalStep {\r\n  id: string;\r\n  level: number;\r\n  title: string;\r\n  description: string;\r\n  required_role: string;\r\n  approver_id?: string;\r\n  approver_name?: string;\r\n  approver_email?: string;\r\n  status: 'pending' | 'approved' | 'rejected' | 'skipped';\r\n  decision_date?: string;\r\n  comments?: string;\r\n  escalation_hours: number;\r\n  is_escalated: boolean;\r\n}\r\n\r\ninterface ApprovalRequest {\r\n  id: string;\r\n  order_id: string;\r\n  request_type: 'budget_increase' | 'scope_change' | 'completion_approval' | 'quality_review';\r\n  current_step: number;\r\n  total_amount?: number;\r\n  requested_amount?: number;\r\n  reason: string;\r\n  status: 'pending' | 'approved' | 'rejected' | 'cancelled';\r\n  created_by: string;\r\n  created_at: string;\r\n  steps: ApprovalStep[];\r\n}\r\n\r\ninterface ReconApprovalWorkflowProps {\r\n  orderId: string;\r\n  orderInfo: {\r\n    order_number: string;\r\n    vehicle_info: string;\r\n    current_amount: number;\r\n  };\r\n  className?: string;\r\n}\r\n\r\nexport function ReconApprovalWorkflow({ orderId, orderInfo, className }: ReconApprovalWorkflowProps) {\r\n  const { t, i18n } = useTranslation();\r\n  const [approvals, setApprovals] = useState<ApprovalRequest[]>([]);\r\n  const [selectedApproval, setSelectedApproval] = useState<ApprovalRequest | null>(null);\r\n  const [newRequestType, setNewRequestType] = useState<'budget_increase' | 'scope_change' | 'completion_approval' | 'quality_review'>('budget_increase');\r\n  const [requestReason, setRequestReason] = useState('');\r\n  const [requestAmount, setRequestAmount] = useState(0);\r\n  const [isCreatingRequest, setIsCreatingRequest] = useState(false);\r\n\r\n  // Get locale for date-fns\r\n  const getLocale = () => {\r\n    switch (i18n.language) {\r\n      case 'es': return es;\r\n      case 'pt-BR': return ptBR;\r\n      default: return undefined;\r\n    }\r\n  };\r\n\r\n  // Mock data initialization\r\n  useEffect(() => {\r\n    const mockApprovals: ApprovalRequest[] = [\r\n      {\r\n        id: '1',\r\n        order_id: orderId,\r\n        request_type: 'budget_increase',\r\n        current_step: 2,\r\n        total_amount: 2500,\r\n        requested_amount: 3200,\r\n        reason: 'Additional paint work needed due to discovered rust damage under the panels.',\r\n        status: 'pending',\r\n        created_by: 'John Martinez',\r\n        created_at: '2024-01-16T10:30:00Z',\r\n        steps: [\r\n          {\r\n            id: '1-1',\r\n            level: 1,\r\n            title: 'Detail Manager Review',\r\n            description: 'Initial budget review and feasibility assessment',\r\n            required_role: 'detail_manager',\r\n            approver_id: 'mgr-001',\r\n            approver_name: 'Sarah Connor',\r\n            approver_email: 'sarah.connor@dealership.com',\r\n            status: 'approved',\r\n            decision_date: '2024-01-16T11:15:00Z',\r\n            comments: 'Approved. The additional work is justified given the extent of rust damage.',\r\n            escalation_hours: 24,\r\n            is_escalated: false\r\n          },\r\n          {\r\n            id: '1-2',\r\n            level: 2,\r\n            title: 'Service Director Approval',\r\n            description: 'Budget increase authorization for amounts over $500',\r\n            required_role: 'service_director',\r\n            status: 'pending',\r\n            escalation_hours: 48,\r\n            is_escalated: false\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        id: '2',\r\n        order_id: orderId,\r\n        request_type: 'completion_approval',\r\n        current_step: 1,\r\n        reason: 'Vehicle ready for delivery - final quality inspection completed.',\r\n        status: 'approved',\r\n        created_by: 'Mike Rodriguez',\r\n        created_at: '2024-01-15T16:45:00Z',\r\n        steps: [\r\n          {\r\n            id: '2-1',\r\n            level: 1,\r\n            title: 'Quality Control Review',\r\n            description: 'Final quality inspection and delivery approval',\r\n            required_role: 'quality_manager',\r\n            approver_id: 'qm-001',\r\n            approver_name: 'Lisa Wang',\r\n            approver_email: 'lisa.wang@dealership.com',\r\n            status: 'approved',\r\n            decision_date: '2024-01-15T17:20:00Z',\r\n            comments: 'Excellent work. Vehicle meets all quality standards and is ready for customer delivery.',\r\n            escalation_hours: 12,\r\n            is_escalated: false\r\n          }\r\n        ]\r\n      }\r\n    ];\r\n    \r\n    setApprovals(mockApprovals);\r\n  }, [orderId]);\r\n\r\n  const handleCreateRequest = () => {\r\n    const newApproval: ApprovalRequest = {\r\n      id: Date.now().toString(),\r\n      order_id: orderId,\r\n      request_type: newRequestType,\r\n      current_step: 1,\r\n      total_amount: orderInfo.current_amount,\r\n      requested_amount: newRequestType === 'budget_increase' ? requestAmount : undefined,\r\n      reason: requestReason,\r\n      status: 'pending',\r\n      created_by: 'Current User',\r\n      created_at: new Date().toISOString(),\r\n      steps: getStepsForRequestType(newRequestType)\r\n    };\r\n\r\n    setApprovals([newApproval, ...approvals]);\r\n    setIsCreatingRequest(false);\r\n    setRequestReason('');\r\n    setRequestAmount(0);\r\n    \r\n    toast.success(t('recon_approval.request_created'));\r\n  };\r\n\r\n  const getStepsForRequestType = (type: string): ApprovalStep[] => {\r\n    const baseSteps = {\r\n      budget_increase: [\r\n        {\r\n          id: `${Date.now()}-1`,\r\n          level: 1,\r\n          title: 'Detail Manager Review',\r\n          description: 'Initial budget review and feasibility assessment',\r\n          required_role: 'detail_manager',\r\n          status: 'pending' as const,\r\n          escalation_hours: 24,\r\n          is_escalated: false\r\n        },\r\n        {\r\n          id: `${Date.now()}-2`,\r\n          level: 2,\r\n          title: 'Service Director Approval',\r\n          description: 'Budget increase authorization',\r\n          required_role: 'service_director',\r\n          status: 'pending' as const,\r\n          escalation_hours: 48,\r\n          is_escalated: false\r\n        }\r\n      ],\r\n      scope_change: [\r\n        {\r\n          id: `${Date.now()}-1`,\r\n          level: 1,\r\n          title: 'Technical Review',\r\n          description: 'Scope change technical feasibility',\r\n          required_role: 'technical_lead',\r\n          status: 'pending' as const,\r\n          escalation_hours: 12,\r\n          is_escalated: false\r\n        }\r\n      ],\r\n      completion_approval: [\r\n        {\r\n          id: `${Date.now()}-1`,\r\n          level: 1,\r\n          title: 'Quality Control Review',\r\n          description: 'Final quality inspection',\r\n          required_role: 'quality_manager',\r\n          status: 'pending' as const,\r\n          escalation_hours: 6,\r\n          is_escalated: false\r\n        }\r\n      ],\r\n      quality_review: [\r\n        {\r\n          id: `${Date.now()}-1`,\r\n          level: 1,\r\n          title: 'Quality Manager Review',\r\n          description: 'Quality standards assessment',\r\n          required_role: 'quality_manager',\r\n          status: 'pending' as const,\r\n          escalation_hours: 8,\r\n          is_escalated: false\r\n        }\r\n      ]\r\n    };\r\n\r\n    return baseSteps[type as keyof typeof baseSteps] || [];\r\n  };\r\n\r\n  const handleApproveStep = (approvalId: string, stepId: string, comments: string) => {\r\n    setApprovals(prev => \r\n      prev.map(approval => {\r\n        if (approval.id !== approvalId) return approval;\r\n        \r\n        const updatedSteps = approval.steps.map(step => \r\n          step.id === stepId \r\n            ? {\r\n                ...step,\r\n                status: 'approved' as const,\r\n                decision_date: new Date().toISOString(),\r\n                comments,\r\n                approver_name: 'Current User'\r\n              }\r\n            : step\r\n        );\r\n\r\n        const currentStepIndex = updatedSteps.findIndex(step => step.id === stepId);\r\n        const nextStep = currentStepIndex + 1;\r\n        const allStepsCompleted = updatedSteps.every(step => step.status !== 'pending');\r\n\r\n        return {\r\n          ...approval,\r\n          steps: updatedSteps,\r\n          current_step: nextStep < updatedSteps.length ? nextStep + 1 : approval.current_step,\r\n          status: allStepsCompleted ? 'approved' as const : approval.status\r\n        };\r\n      })\r\n    );\r\n    \r\n    toast.success(t('recon_approval.step_approved'));\r\n  };\r\n\r\n  const handleRejectStep = (approvalId: string, stepId: string, comments: string) => {\r\n    setApprovals(prev => \r\n      prev.map(approval => \r\n        approval.id === approvalId \r\n          ? {\r\n              ...approval,\r\n              steps: approval.steps.map(step => \r\n                step.id === stepId \r\n                  ? {\r\n                      ...step,\r\n                      status: 'rejected' as const,\r\n                      decision_date: new Date().toISOString(),\r\n                      comments,\r\n                      approver_name: 'Current User'\r\n                    }\r\n                  : step\r\n              ),\r\n              status: 'rejected' as const\r\n            }\r\n          : approval\r\n      )\r\n    );\r\n    \r\n    toast.error(t('recon_approval.step_rejected'));\r\n  };\r\n\r\n  const getRequestTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'budget_increase': return DollarSign;\r\n      case 'scope_change': return FileText;\r\n      case 'completion_approval': return CheckCircle;\r\n      case 'quality_review': return Eye;\r\n      default: return FileText;\r\n    }\r\n  };\r\n\r\n  const getRequestTypeColor = (type: string) => {\r\n    switch (type) {\r\n      case 'budget_increase': return 'bg-warning/10 text-warning';\r\n      case 'scope_change': return 'bg-secondary/10 text-secondary';\r\n      case 'completion_approval': return 'bg-success/10 text-success';\r\n      case 'quality_review': return 'bg-primary/10 text-primary';\r\n      default: return 'bg-muted/10 text-muted-foreground';\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'approved': return CheckCircle;\r\n      case 'rejected': return XCircle;\r\n      case 'pending': return Clock;\r\n      default: return Clock;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'approved': return 'text-success';\r\n      case 'rejected': return 'text-destructive';\r\n      case 'pending': return 'text-warning';\r\n      default: return 'text-muted-foreground';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"space-y-6\", className)}>\r\n      {/* Header */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <CheckCircle className=\"w-5 h-5 text-primary\" />\r\n                {t('recon_approval.title')}\r\n              </CardTitle>\r\n              <p className=\"text-sm text-muted-foreground mt-1\">\r\n                {t('recon_approval.subtitle')} - {orderInfo.order_number}\r\n              </p>\r\n            </div>\r\n            \r\n            <Dialog open={isCreatingRequest} onOpenChange={setIsCreatingRequest}>\r\n              <DialogTrigger asChild>\r\n                <Button className=\"button-enhanced\">\r\n                  <Send className=\"w-4 h-4 mr-2\" />\r\n                  {t('recon_approval.new_request')}\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent className=\"sm:max-w-md\">\r\n                <DialogHeader>\r\n                  <DialogTitle>{t('recon_approval.create_request')}</DialogTitle>\r\n                </DialogHeader>\r\n                \r\n                <div className=\"space-y-4\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium\">\r\n                      {t('recon_approval.request_type')}\r\n                    </label>\r\n                    <select \r\n                      className=\"w-full mt-1 p-2 border rounded-md\"\r\n                      value={newRequestType}\r\n                      onChange={(e) => setNewRequestType(e.target.value as any)}\r\n                    >\r\n                      <option value=\"budget_increase\">\r\n                        {t('recon_approval.types.budget_increase')}\r\n                      </option>\r\n                      <option value=\"scope_change\">\r\n                        {t('recon_approval.types.scope_change')}\r\n                      </option>\r\n                      <option value=\"completion_approval\">\r\n                        {t('recon_approval.types.completion_approval')}\r\n                      </option>\r\n                      <option value=\"quality_review\">\r\n                        {t('recon_approval.types.quality_review')}\r\n                      </option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  {newRequestType === 'budget_increase' && (\r\n                    <div>\r\n                      <label className=\"text-sm font-medium\">\r\n                        {t('recon_approval.requested_amount')}\r\n                      </label>\r\n                      <div className=\"relative mt-1\">\r\n                        <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\r\n                        <input\r\n                          type=\"number\"\r\n                          className=\"w-full pl-10 p-2 border rounded-md\"\r\n                          value={requestAmount}\r\n                          onChange={(e) => setRequestAmount(parseFloat(e.target.value) || 0)}\r\n                          placeholder=\"0.00\"\r\n                        />\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n\r\n                  <div>\r\n                    <label className=\"text-sm font-medium\">\r\n                      {t('recon_approval.reason')}\r\n                    </label>\r\n                    <Textarea\r\n                      className=\"mt-1\"\r\n                      value={requestReason}\r\n                      onChange={(e) => setRequestReason(e.target.value)}\r\n                      placeholder={t('recon_approval.reason_placeholder')}\r\n                      rows={3}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"flex gap-2 pt-2\">\r\n                    <Button \r\n                      onClick={handleCreateRequest}\r\n                      disabled={!requestReason.trim()}\r\n                      className=\"flex-1\"\r\n                    >\r\n                      {t('recon_approval.submit_request')}\r\n                    </Button>\r\n                    <Button \r\n                      variant=\"outline\" \r\n                      onClick={() => setIsCreatingRequest(false)}\r\n                    >\r\n                      {t('common.cancel')}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n        </CardHeader>\r\n      </Card>\r\n\r\n      {/* Approvals List */}\r\n      <div className=\"space-y-4\">\r\n        {approvals.map((approval) => {\r\n          const RequestTypeIcon = getRequestTypeIcon(approval.request_type);\r\n          const StatusIcon = getStatusIcon(approval.status);\r\n          const currentStep = approval.steps[approval.current_step - 1];\r\n\r\n          return (\r\n            <Card key={approval.id} className=\"hover:shadow-md transition-shadow\">\r\n              <CardHeader className=\"pb-3\">\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex items-start gap-3\">\r\n                    <div className={cn(\r\n                      \"w-10 h-10 rounded-full flex items-center justify-center\",\r\n                      getRequestTypeColor(approval.request_type)\r\n                    )}>\r\n                      <RequestTypeIcon className=\"w-5 h-5\" />\r\n                    </div>\r\n                    \r\n                    <div>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <CardTitle className=\"text-base\">\r\n                          {t(`recon_approval.types.${approval.request_type}`)}\r\n                        </CardTitle>\r\n                        <Badge className={cn(\r\n                          \"flex items-center gap-1\",\r\n                          approval.status === 'approved' && 'bg-success/20 text-success-foreground',\r\n                          approval.status === 'rejected' && 'bg-destructive/20 text-destructive-foreground',\r\n                          approval.status === 'pending' && 'bg-warning/20 text-warning-foreground'\r\n                        )}>\r\n                          <StatusIcon className=\"w-3 h-3\" />\r\n                          {t(`recon_approval.statuses.${approval.status}`)}\r\n                        </Badge>\r\n                      </div>\r\n                      \r\n                      <p className=\"text-sm text-muted-foreground mt-1\">\r\n                        {t('recon_approval.requested_by')} {approval.created_by} • {' '}\r\n                        {formatDistanceToNow(new Date(approval.created_at), { \r\n                          addSuffix: true, \r\n                          locale: getLocale() \r\n                        })}\r\n                      </p>\r\n                      \r\n                      {approval.requested_amount && (\r\n                        <p className=\"text-sm font-medium text-primary mt-1\">\r\n                          {t('recon_approval.amount')}: ${approval.total_amount?.toFixed(2)} → ${approval.requested_amount.toFixed(2)}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={() => setSelectedApproval(selectedApproval?.id === approval.id ? null : approval)}\r\n                  >\r\n                    {selectedApproval?.id === approval.id ? t('common.hide') : t('common.details')}\r\n                  </Button>\r\n                </div>\r\n              </CardHeader>\r\n              \r\n              <CardContent className=\"space-y-4\">\r\n                <p className=\"text-sm\">{approval.reason}</p>\r\n                \r\n                {/* Progress Steps */}\r\n                <div className=\"space-y-3\">\r\n                  {approval.steps.map((step, index) => {\r\n                    const StepStatusIcon = getStatusIcon(step.status);\r\n                    const isCurrentStep = approval.current_step === index + 1 && approval.status === 'pending';\r\n                    \r\n                    return (\r\n                      <div key={step.id} className={cn(\r\n                        \"flex items-start gap-3 p-3 rounded-lg border\",\r\n                        isCurrentStep && \"bg-primary/5 border-primary/20\"\r\n                      )}>\r\n                        <div className={cn(\r\n                          \"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\",\r\n                          step.status === 'approved' && \"bg-success/20 text-success\",\r\n                          step.status === 'rejected' && \"bg-destructive/20 text-destructive\", \r\n                          step.status === 'pending' && isCurrentStep && \"bg-warning/20 text-warning\",\r\n                          step.status === 'pending' && !isCurrentStep && \"bg-muted/20 text-muted-foreground\"\r\n                        )}>\r\n                          <StepStatusIcon className=\"w-4 h-4\" />\r\n                        </div>\r\n                        \r\n                        <div className=\"flex-1\">\r\n                          <div className=\"flex items-center justify-between\">\r\n                            <div>\r\n                              <h4 className=\"font-medium text-sm\">{step.title}</h4>\r\n                              <p className=\"text-xs text-muted-foreground\">{step.description}</p>\r\n                            </div>\r\n                            \r\n                            {step.status === 'pending' && isCurrentStep && (\r\n                              <div className=\"flex gap-2\">\r\n                                <Button \r\n                                  size=\"sm\" \r\n                                  variant=\"outline\"\r\n                                  className=\"text-destructive hover:text-destructive\"\r\n                                  onClick={() => handleRejectStep(approval.id, step.id, 'Rejected')}\r\n                                >\r\n                                  <XCircle className=\"w-4 h-4 mr-1\" />\r\n                                  {t('recon_approval.reject')}\r\n                                </Button>\r\n                                <Button \r\n                                  size=\"sm\"\r\n                                  onClick={() => handleApproveStep(approval.id, step.id, 'Approved')}\r\n                                >\r\n                                  <CheckCircle className=\"w-4 h-4 mr-1\" />\r\n                                  {t('recon_approval.approve')}\r\n                                </Button>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n                          \r\n                          {step.approver_name && (\r\n                            <div className=\"flex items-center gap-2 mt-2\">\r\n                              <Avatar className=\"w-5 h-5\">\r\n                                <AvatarFallback className=\"text-xs\">\r\n                                  {step.approver_name.split(' ').map(n => n[0]).join('')}\r\n                                </AvatarFallback>\r\n                              </Avatar>\r\n                              <span className=\"text-xs text-muted-foreground\">\r\n                                {step.approver_name}\r\n                              </span>\r\n                              {step.decision_date && (\r\n                                <span className=\"text-xs text-muted-foreground\">\r\n                                  • {formatDistanceToNow(new Date(step.decision_date), { \r\n                                    addSuffix: true, \r\n                                    locale: getLocale() \r\n                                  })}\r\n                                </span>\r\n                              )}\r\n                            </div>\r\n                          )}\r\n                          \r\n                          {step.comments && (\r\n                            <div className=\"mt-2 p-2 bg-muted/50 rounded text-xs italic\">\r\n                              \"{step.comments}\"\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n      </div>\r\n\r\n      {approvals.length === 0 && (\r\n        <Card>\r\n          <CardContent className=\"text-center py-8\">\r\n            <CheckCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\r\n            <h3 className=\"text-lg font-semibold mb-2\">\r\n              {t('recon_approval.no_requests')}\r\n            </h3>\r\n            <p className=\"text-muted-foreground mb-4\">\r\n              {t('recon_approval.no_requests_desc')}\r\n            </p>\r\n            <Button onClick={() => setIsCreatingRequest(true)}>\r\n              <Send className=\"w-4 h-4 mr-2\" />\r\n              {t('recon_approval.create_first_request')}\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon\\ReconCostingSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":210,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6309,6312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6309,6312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":212,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6360,6363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6360,6363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":221,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":221,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6736,6739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6736,6739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  DollarSign, \r\n  Plus, \r\n  Minus, \r\n  Calculator, \r\n  TrendingUp, \r\n  TrendingDown, \r\n  AlertCircle, \r\n  CheckCircle, \r\n  Clock, \r\n  Wrench, \r\n  Package, \r\n  User,\r\n  Edit,\r\n  Trash2,\r\n  Save\r\n} from 'lucide-react';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { cn } from '@/lib/utils';\r\nimport { toast } from 'sonner';\r\n\r\ninterface CostItem {\r\n  id: string;\r\n  category: 'labor' | 'parts' | 'materials' | 'external';\r\n  description: string;\r\n  estimated_cost: number;\r\n  actual_cost?: number;\r\n  quantity: number;\r\n  unit_price: number;\r\n  supplier?: string;\r\n  notes?: string;\r\n  status: 'pending' | 'approved' | 'completed';\r\n  created_at: string;\r\n}\r\n\r\ninterface ReconCostingSystemProps {\r\n  orderId: string;\r\n  vehicleInfo: {\r\n    vin: string;\r\n    make: string;\r\n    model: string;\r\n    year: number;\r\n  };\r\n  className?: string;\r\n}\r\n\r\nexport function ReconCostingSystem({ orderId, vehicleInfo, className }: ReconCostingSystemProps) {\r\n  const { t } = useTranslation();\r\n  const [costItems, setCostItems] = useState<CostItem[]>([]);\r\n  const [isAddingItem, setIsAddingItem] = useState(false);\r\n  const [editingItem, setEditingItem] = useState<CostItem | null>(null);\r\n  const [newItem, setNewItem] = useState({\r\n    category: 'labor' as const,\r\n    description: '',\r\n    quantity: 1,\r\n    unit_price: 0,\r\n    supplier: '',\r\n    notes: ''\r\n  });\r\n\r\n  // Mock data initialization\r\n  useEffect(() => {\r\n    const mockCostItems: CostItem[] = [\r\n      {\r\n        id: '1',\r\n        category: 'labor',\r\n        description: 'Paint correction and ceramic coating',\r\n        estimated_cost: 850,\r\n        actual_cost: 920,\r\n        quantity: 8,\r\n        unit_price: 115,\r\n        status: 'completed',\r\n        created_at: '2024-01-15T10:00:00Z'\r\n      },\r\n      {\r\n        id: '2',\r\n        category: 'parts',\r\n        description: 'Front bumper replacement',\r\n        estimated_cost: 450,\r\n        actual_cost: 425,\r\n        quantity: 1,\r\n        unit_price: 425,\r\n        supplier: 'Auto Parts Plus',\r\n        status: 'completed',\r\n        created_at: '2024-01-15T10:00:00Z'\r\n      },\r\n      {\r\n        id: '3',\r\n        category: 'materials',\r\n        description: 'Premium detailing supplies',\r\n        estimated_cost: 120,\r\n        quantity: 1,\r\n        unit_price: 120,\r\n        supplier: 'Chemical Guys',\r\n        status: 'pending',\r\n        created_at: '2024-01-16T09:00:00Z'\r\n      },\r\n      {\r\n        id: '4',\r\n        category: 'external',\r\n        description: 'Upholstery repair service',\r\n        estimated_cost: 300,\r\n        quantity: 1,\r\n        unit_price: 300,\r\n        supplier: 'Premium Interior Works',\r\n        status: 'approved',\r\n        created_at: '2024-01-16T14:00:00Z'\r\n      }\r\n    ];\r\n    setCostItems(mockCostItems);\r\n  }, []);\r\n\r\n  const totalEstimated = costItems.reduce((sum, item) => sum + item.estimated_cost, 0);\r\n  const totalActual = costItems.reduce((sum, item) => sum + (item.actual_cost || item.estimated_cost), 0);\r\n  const variance = totalActual - totalEstimated;\r\n  const variancePercentage = totalEstimated > 0 ? (variance / totalEstimated) * 100 : 0;\r\n  const completedItems = costItems.filter(item => item.status === 'completed').length;\r\n  const completionRate = (completedItems / costItems.length) * 100;\r\n\r\n  const handleAddItem = () => {\r\n    const item: CostItem = {\r\n      id: Date.now().toString(),\r\n      ...newItem,\r\n      estimated_cost: newItem.quantity * newItem.unit_price,\r\n      status: 'pending',\r\n      created_at: new Date().toISOString()\r\n    };\r\n    \r\n    setCostItems([...costItems, item]);\r\n    setNewItem({\r\n      category: 'labor',\r\n      description: '',\r\n      quantity: 1,\r\n      unit_price: 0,\r\n      supplier: '',\r\n      notes: ''\r\n    });\r\n    setIsAddingItem(false);\r\n    \r\n    toast.success(t('recon_costing.item_added'));\r\n  };\r\n\r\n  const handleUpdateItem = (itemId: string, updates: Partial<CostItem>) => {\r\n    setCostItems(items => \r\n      items.map(item => \r\n        item.id === itemId \r\n          ? { \r\n              ...item, \r\n              ...updates,\r\n              estimated_cost: updates.quantity && updates.unit_price \r\n                ? updates.quantity * updates.unit_price \r\n                : item.estimated_cost\r\n            }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleDeleteItem = (itemId: string) => {\r\n    setCostItems(items => items.filter(item => item.id !== itemId));\r\n    toast.success(t('recon_costing.item_deleted'));\r\n  };\r\n\r\n  const getCategoryIcon = (category: string) => {\r\n    switch (category) {\r\n      case 'labor': return User;\r\n      case 'parts': return Wrench;\r\n      case 'materials': return Package;\r\n      case 'external': return DollarSign;\r\n      default: return Calculator;\r\n    }\r\n  };\r\n\r\n  const getCategoryColor = (category: string) => {\r\n    switch (category) {\r\n      case 'labor': return 'bg-primary/10 text-primary';\r\n      case 'parts': return 'bg-secondary/10 text-secondary';\r\n      case 'materials': return 'bg-accent/10 text-accent';\r\n      case 'external': return 'bg-warning/10 text-warning';\r\n      default: return 'bg-muted/10 text-muted-foreground';\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'completed': return 'bg-success/20 text-success-foreground';\r\n      case 'approved': return 'bg-warning/20 text-warning-foreground';\r\n      case 'pending': return 'bg-muted/20 text-muted-foreground';\r\n      default: return 'bg-muted/20 text-muted-foreground';\r\n    }\r\n  };\r\n\r\n  const ItemForm = ({ \r\n    item, \r\n    isEditing = false, \r\n    onSave, \r\n    onCancel \r\n  }: {\r\n    item: any;\r\n    isEditing?: boolean;\r\n    onSave: (data: any) => void;\r\n    onCancel: () => void;\r\n  }) => (\r\n    <div className=\"space-y-4 p-4 border rounded-lg\">\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n        <div>\r\n          <Label>{t('recon_costing.category')}</Label>\r\n          <Select \r\n            value={item.category} \r\n            onValueChange={(value) => setNewItem({...item, category: value as any})}\r\n          >\r\n            <SelectTrigger>\r\n              <SelectValue />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"labor\">{t('recon_costing.categories.labor')}</SelectItem>\r\n              <SelectItem value=\"parts\">{t('recon_costing.categories.parts')}</SelectItem>\r\n              <SelectItem value=\"materials\">{t('recon_costing.categories.materials')}</SelectItem>\r\n              <SelectItem value=\"external\">{t('recon_costing.categories.external')}</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        \r\n        <div>\r\n          <Label>{t('recon_costing.supplier')}</Label>\r\n          <Input\r\n            value={item.supplier}\r\n            onChange={(e) => setNewItem({...item, supplier: e.target.value})}\r\n            placeholder={t('recon_costing.supplier_placeholder')}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <Label>{t('recon_costing.description')}</Label>\r\n        <Textarea\r\n          value={item.description}\r\n          onChange={(e) => setNewItem({...item, description: e.target.value})}\r\n          placeholder={t('recon_costing.description_placeholder')}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n        <div>\r\n          <Label>{t('recon_costing.quantity')}</Label>\r\n          <Input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            value={item.quantity}\r\n            onChange={(e) => setNewItem({...item, quantity: parseFloat(e.target.value) || 0})}\r\n          />\r\n        </div>\r\n        \r\n        <div>\r\n          <Label>{t('recon_costing.unit_price')}</Label>\r\n          <div className=\"relative\">\r\n            <DollarSign className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\r\n            <Input\r\n              type=\"number\"\r\n              min=\"0\"\r\n              step=\"0.01\"\r\n              value={item.unit_price}\r\n              onChange={(e) => setNewItem({...item, unit_price: parseFloat(e.target.value) || 0})}\r\n              className=\"pl-10\"\r\n            />\r\n          </div>\r\n        </div>\r\n        \r\n        <div>\r\n          <Label>{t('recon_costing.total')}</Label>\r\n          <div className=\"h-10 bg-muted/50 rounded-md flex items-center px-3 font-semibold text-primary\">\r\n            ${(item.quantity * item.unit_price).toFixed(2)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div>\r\n        <Label>{t('recon_costing.notes')}</Label>\r\n        <Textarea\r\n          value={item.notes}\r\n          onChange={(e) => setNewItem({...item, notes: e.target.value})}\r\n          placeholder={t('recon_costing.notes_placeholder')}\r\n          rows={2}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"flex gap-2 pt-2\">\r\n        <Button onClick={() => onSave(item)} className=\"button-enhanced\">\r\n          <Save className=\"w-4 h-4 mr-2\" />\r\n          {isEditing ? t('common.update') : t('common.add')}\r\n        </Button>\r\n        <Button variant=\"outline\" onClick={onCancel}>\r\n          {t('common.cancel')}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={cn(\"space-y-6\", className)}>\r\n      {/* Summary Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">\r\n                  {t('recon_costing.estimated_total')}\r\n                </p>\r\n                <p className=\"text-2xl font-bold\">${totalEstimated.toFixed(2)}</p>\r\n              </div>\r\n              <Calculator className=\"w-8 h-8 text-primary\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">\r\n                  {t('recon_costing.actual_total')}\r\n                </p>\r\n                <p className=\"text-2xl font-bold\">${totalActual.toFixed(2)}</p>\r\n              </div>\r\n              <DollarSign className=\"w-8 h-8 text-secondary\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">\r\n                  {t('recon_costing.variance')}\r\n                </p>\r\n                <div className=\"flex items-center gap-1\">\r\n                  <p className={cn(\r\n                    \"text-2xl font-bold\",\r\n                    variance >= 0 ? \"text-destructive\" : \"text-success\"\r\n                  )}>\r\n                    ${Math.abs(variance).toFixed(2)}\r\n                  </p>\r\n                  {variance >= 0 ? (\r\n                    <TrendingUp className=\"w-4 h-4 text-destructive\" />\r\n                  ) : (\r\n                    <TrendingDown className=\"w-4 h-4 text-success\" />\r\n                  )}\r\n                </div>\r\n                <p className={cn(\r\n                  \"text-xs\",\r\n                  variance >= 0 ? \"text-destructive\" : \"text-success\"\r\n                )}>\r\n                  {variance >= 0 ? '+' : ''}{variancePercentage.toFixed(1)}%\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm font-medium text-muted-foreground\">\r\n                  {t('recon_costing.completion')}\r\n                </p>\r\n                <p className=\"text-2xl font-bold\">{completionRate.toFixed(0)}%</p>\r\n                <Progress value={completionRate} className=\"h-2 mt-2\" />\r\n              </div>\r\n              <CheckCircle className=\"w-8 h-8 text-success\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Cost Items */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Calculator className=\"w-5 h-5\" />\r\n              {t('recon_costing.cost_breakdown')}\r\n            </CardTitle>\r\n            <Button \r\n              onClick={() => setIsAddingItem(true)} \r\n              className=\"button-enhanced\"\r\n            >\r\n              <Plus className=\"w-4 h-4 mr-2\" />\r\n              {t('recon_costing.add_cost_item')}\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        \r\n        <CardContent className=\"space-y-4\">\r\n          {/* Add New Item Form */}\r\n          {isAddingItem && (\r\n            <ItemForm\r\n              item={newItem}\r\n              onSave={handleAddItem}\r\n              onCancel={() => setIsAddingItem(false)}\r\n            />\r\n          )}\r\n\r\n          {/* Cost Items List */}\r\n          <div className=\"space-y-3\">\r\n            {costItems.map((item) => {\r\n              const CategoryIcon = getCategoryIcon(item.category);\r\n              const isEditing = editingItem?.id === item.id;\r\n              \r\n              return (\r\n                <div key={item.id}>\r\n                  {isEditing ? (\r\n                    <ItemForm\r\n                      item={editingItem}\r\n                      isEditing={true}\r\n                      onSave={(data) => {\r\n                        handleUpdateItem(item.id, data);\r\n                        setEditingItem(null);\r\n                      }}\r\n                      onCancel={() => setEditingItem(null)}\r\n                    />\r\n                  ) : (\r\n                    <Card className=\"p-4\">\r\n                      <div className=\"flex items-start justify-between\">\r\n                        <div className=\"flex items-start gap-4 flex-1\">\r\n                          <div className={cn(\r\n                            \"w-10 h-10 rounded-full flex items-center justify-center\",\r\n                            getCategoryColor(item.category)\r\n                          )}>\r\n                            <CategoryIcon className=\"w-5 h-5\" />\r\n                          </div>\r\n                          \r\n                          <div className=\"flex-1 space-y-2\">\r\n                            <div className=\"flex items-start justify-between\">\r\n                              <div>\r\n                                <h4 className=\"font-semibold\">{item.description}</h4>\r\n                                <div className=\"flex items-center gap-2 mt-1\">\r\n                                  <Badge variant=\"outline\">\r\n                                    {t(`recon_costing.categories.${item.category}`)}\r\n                                  </Badge>\r\n                                  <Badge className={getStatusColor(item.status)}>\r\n                                    {t(`recon_costing.statuses.${item.status}`)}\r\n                                  </Badge>\r\n                                </div>\r\n                              </div>\r\n                              \r\n                              <div className=\"text-right\">\r\n                                <p className=\"text-lg font-bold\">\r\n                                  ${(item.actual_cost || item.estimated_cost).toFixed(2)}\r\n                                </p>\r\n                                {item.actual_cost && item.actual_cost !== item.estimated_cost && (\r\n                                  <p className={cn(\r\n                                    \"text-sm\",\r\n                                    item.actual_cost > item.estimated_cost \r\n                                      ? \"text-destructive\" \r\n                                      : \"text-success\"\r\n                                  )}>\r\n                                    Est: ${item.estimated_cost.toFixed(2)}\r\n                                  </p>\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-muted-foreground\">\r\n                              <div>\r\n                                <span className=\"font-medium\">\r\n                                  {t('recon_costing.quantity')}: \r\n                                </span> {item.quantity}\r\n                              </div>\r\n                              <div>\r\n                                <span className=\"font-medium\">\r\n                                  {t('recon_costing.unit_price')}: \r\n                                </span> ${item.unit_price.toFixed(2)}\r\n                              </div>\r\n                              {item.supplier && (\r\n                                <div>\r\n                                  <span className=\"font-medium\">\r\n                                    {t('recon_costing.supplier')}: \r\n                                  </span> {item.supplier}\r\n                                </div>\r\n                              )}\r\n                              <div>\r\n                                <span className=\"font-medium\">\r\n                                  {t('recon_costing.added')}: \r\n                                </span> {new Date(item.created_at).toLocaleDateString()}\r\n                              </div>\r\n                            </div>\r\n                            \r\n                            {item.notes && (\r\n                              <>\r\n                                <Separator />\r\n                                <p className=\"text-sm italic text-muted-foreground\">\r\n                                  \"{item.notes}\"\r\n                                </p>\r\n                              </>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                        \r\n                        <div className=\"flex items-center gap-1 ml-4\">\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => setEditingItem(item)}\r\n                          >\r\n                            <Edit className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => handleDeleteItem(item.id)}\r\n                            className=\"text-destructive hover:text-destructive\"\r\n                          >\r\n                            <Trash2 className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    </Card>\r\n                  )}\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          {costItems.length === 0 && (\r\n            <div className=\"text-center py-8\">\r\n              <Calculator className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\r\n              <h3 className=\"text-lg font-semibold mb-2\">\r\n                {t('recon_costing.no_cost_items')}\r\n              </h3>\r\n              <p className=\"text-muted-foreground mb-4\">\r\n                {t('recon_costing.no_cost_items_desc')}\r\n              </p>\r\n              <Button onClick={() => setIsAddingItem(true)}>\r\n                <Plus className=\"w-4 h-4 mr-2\" />\r\n                {t('recon_costing.add_first_item')}\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\recon\\ReconDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\reports\\ReportFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\reports\\ReportsLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\reports\\charts\\OrderVolumeChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[791,794],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[791,794],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1076,1079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1076,1079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  BarChart,\r\n  Bar\r\n} from 'recharts';\r\nimport { format } from 'date-fns';\r\nimport { useTranslation } from 'react-i18next';\r\nimport type { OrderAnalytics } from '@/hooks/useReportsData';\r\n\r\ninterface OrderVolumeChartProps {\r\n  data: OrderAnalytics;\r\n  type?: 'line' | 'bar';\r\n}\r\n\r\nexport const OrderVolumeChart: React.FC<OrderVolumeChartProps> = ({ \r\n  data, \r\n  type = 'line' \r\n}) => {\r\n  const { t } = useTranslation();\r\n\r\n  const chartData = data.daily_data.map((item) => ({\r\n    date: format(new Date(item.date), 'MMM dd'),\r\n    orders: item.orders,\r\n    revenue: item.revenue\r\n  }));\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"bg-background border border-border rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium text-foreground\">{`${t('common.date')}: ${label}`}</p>\r\n          {payload.map((entry: any, index: number) => (\r\n            <p key={index} style={{ color: entry.color }} className=\"text-sm\">\r\n              {`${entry.name}: ${entry.name === 'orders' ? entry.value : `$${entry.value.toLocaleString()}`}`}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (type === 'bar') {\r\n    return (\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <BarChart data={chartData}>\r\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\r\n          <XAxis \r\n            dataKey=\"date\" \r\n            className=\"text-xs text-muted-foreground\"\r\n            tick={{ fontSize: 12 }}\r\n          />\r\n          <YAxis \r\n            yAxisId=\"orders\"\r\n            orientation=\"left\"\r\n            className=\"text-xs text-muted-foreground\"\r\n            tick={{ fontSize: 12 }}\r\n          />\r\n          <YAxis \r\n            yAxisId=\"revenue\"\r\n            orientation=\"right\"\r\n            className=\"text-xs text-muted-foreground\"\r\n            tick={{ fontSize: 12 }}\r\n          />\r\n          <Tooltip content={<CustomTooltip />} />\r\n          <Legend />\r\n          <Bar\r\n            yAxisId=\"orders\"\r\n            dataKey=\"orders\"\r\n            fill=\"hsl(var(--primary))\"\r\n            name={t('reports.charts.orders')}\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n          <Bar\r\n            yAxisId=\"revenue\"\r\n            dataKey=\"revenue\"\r\n            fill=\"hsl(var(--secondary))\"\r\n            name={t('reports.charts.revenue')}\r\n            radius={[2, 2, 0, 0]}\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={300}>\r\n      <LineChart data={chartData}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\r\n        <XAxis \r\n          dataKey=\"date\" \r\n          className=\"text-xs text-muted-foreground\"\r\n          tick={{ fontSize: 12 }}\r\n        />\r\n        <YAxis \r\n          yAxisId=\"orders\"\r\n          orientation=\"left\"\r\n          className=\"text-xs text-muted-foreground\"\r\n          tick={{ fontSize: 12 }}\r\n        />\r\n        <YAxis \r\n          yAxisId=\"revenue\"\r\n          orientation=\"right\"\r\n          className=\"text-xs text-muted-foreground\"\r\n          tick={{ fontSize: 12 }}\r\n        />\r\n        <Tooltip content={<CustomTooltip />} />\r\n        <Legend />\r\n        <Line\r\n          yAxisId=\"orders\"\r\n          type=\"monotone\"\r\n          dataKey=\"orders\"\r\n          stroke=\"hsl(var(--primary))\"\r\n          strokeWidth={3}\r\n          dot={{ fill: \"hsl(var(--primary))\", r: 4 }}\r\n          name={t('reports.charts.orders')}\r\n        />\r\n        <Line\r\n          yAxisId=\"revenue\"\r\n          type=\"monotone\"\r\n          dataKey=\"revenue\"\r\n          stroke=\"hsl(var(--secondary))\"\r\n          strokeWidth={3}\r\n          dot={{ fill: \"hsl(var(--secondary))\", r: 4 }}\r\n          name={t('reports.charts.revenue')}\r\n        />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\reports\\charts\\StatusDistributionChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[910,913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[910,913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1610,1613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1610,1613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport {\r\n  ResponsiveContainer,\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  Tooltip,\r\n  Legend\r\n} from 'recharts';\r\nimport { useTranslation } from 'react-i18next';\r\nimport type { OrderAnalytics } from '@/hooks/useReportsData';\r\n\r\ninterface StatusDistributionChartProps {\r\n  data: OrderAnalytics;\r\n}\r\n\r\nconst STATUS_COLORS = {\r\n  pending: 'hsl(var(--chart-1))',\r\n  in_progress: 'hsl(var(--chart-2))',\r\n  completed: 'hsl(var(--chart-3))',\r\n  cancelled: 'hsl(var(--chart-4))',\r\n};\r\n\r\nexport const StatusDistributionChart: React.FC<StatusDistributionChartProps> = ({ data }) => {\r\n  const { t } = useTranslation();\r\n\r\n  const chartData = data.status_distribution.map((item) => ({\r\n    name: t(`reports.status.${item.name}`),\r\n    value: item.value,\r\n    color: STATUS_COLORS[item.name as keyof typeof STATUS_COLORS] || 'hsl(var(--muted))'\r\n  }));\r\n\r\n  const CustomTooltip = ({ active, payload }: any) => {\r\n    if (active && payload && payload.length) {\r\n      const data = payload[0];\r\n      return (\r\n        <div className=\"bg-background border border-border rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium text-foreground\">{data.name}</p>\r\n          <p className=\"text-sm text-muted-foreground\">{`${t('reports.charts.orders')}: ${data.value}`}</p>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {`${t('reports.charts.percentage')}: ${((data.value / data.payload.total) * 100).toFixed(1)}%`}\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const renderCustomLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent }: any) => {\r\n    if (percent < 0.05) return null; // Don't show labels for slices < 5%\r\n    \r\n    const RADIAN = Math.PI / 180;\r\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\r\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\r\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\r\n\r\n    return (\r\n      <text \r\n        x={x} \r\n        y={y} \r\n        fill=\"white\" \r\n        textAnchor={x > cx ? 'start' : 'end'} \r\n        dominantBaseline=\"central\"\r\n        className=\"text-xs font-medium\"\r\n      >\r\n        {`${(percent * 100).toFixed(0)}%`}\r\n      </text>\r\n    );\r\n  };\r\n\r\n  const total = chartData.reduce((sum, item) => sum + item.value, 0);\r\n  const enhancedData = chartData.map(item => ({ ...item, total }));\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <ResponsiveContainer width=\"100%\" height={300}>\r\n        <PieChart>\r\n          <Pie\r\n            data={enhancedData}\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            labelLine={false}\r\n            label={renderCustomLabel}\r\n            outerRadius={100}\r\n            fill=\"#8884d8\"\r\n            dataKey=\"value\"\r\n          >\r\n            {enhancedData.map((entry, index) => (\r\n              <Cell key={`cell-${index}`} fill={entry.color} />\r\n            ))}\r\n          </Pie>\r\n          <Tooltip content={<CustomTooltip />} />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n      \r\n      {/* Custom Legend */}\r\n      <div className=\"flex flex-wrap justify-center gap-4\">\r\n        {enhancedData.map((item, index) => (\r\n          <div key={index} className=\"flex items-center gap-2\">\r\n            <div \r\n              className=\"w-3 h-3 rounded-full\" \r\n              style={{ backgroundColor: item.color }}\r\n            />\r\n            <span className=\"text-sm text-muted-foreground\">\r\n              {item.name} ({item.value})\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\reports\\sections\\ExportCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3696,3699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3696,3699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Label } from '@/components/ui/label';\r\nimport { \r\n  Download, \r\n  FileText, \r\n  FileSpreadsheet, \r\n  Mail,\r\n  Calendar,\r\n  Loader2\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'sonner';\r\nimport type { ReportsFilters } from '@/hooks/useReportsData';\r\n\r\ninterface ExportCenterProps {\r\n  filters: ReportsFilters;\r\n}\r\n\r\nexport const ExportCenter: React.FC<ExportCenterProps> = ({ filters }) => {\r\n  const { t } = useTranslation();\r\n  const [exportFormat, setExportFormat] = useState<'pdf' | 'excel' | 'csv'>('pdf');\r\n  const [exportSections, setExportSections] = useState({\r\n    summary: true,\r\n    charts: true,\r\n    tables: true,\r\n    trends: false\r\n  });\r\n  const [isExporting, setIsExporting] = useState(false);\r\n\r\n  const exportReports = [\r\n    {\r\n      id: 'operational',\r\n      title: t('reports.export.operational_report'),\r\n      description: t('reports.export.operational_description'),\r\n      icon: <FileText className=\"h-5 w-5\" />,\r\n      formats: ['pdf', 'excel']\r\n    },\r\n    {\r\n      id: 'financial',\r\n      title: t('reports.export.financial_report'),\r\n      description: t('reports.export.financial_description'),\r\n      icon: <FileSpreadsheet className=\"h-5 w-5\" />,\r\n      formats: ['pdf', 'excel', 'csv']\r\n    },\r\n    {\r\n      id: 'performance',\r\n      title: t('reports.export.performance_report'),\r\n      description: t('reports.export.performance_description'),\r\n      icon: <FileText className=\"h-5 w-5\" />,\r\n      formats: ['pdf', 'excel']\r\n    },\r\n    {\r\n      id: 'custom',\r\n      title: t('reports.export.custom_report'),\r\n      description: t('reports.export.custom_description'),\r\n      icon: <FileSpreadsheet className=\"h-5 w-5\" />,\r\n      formats: ['pdf', 'excel', 'csv']\r\n    }\r\n  ];\r\n\r\n  const handleExport = async (reportType: string) => {\r\n    setIsExporting(true);\r\n    try {\r\n      // Simulate export process\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // In a real implementation, this would call an edge function to generate the report\r\n      toast.success(t('reports.export.success_message', { \r\n        format: exportFormat.toUpperCase(),\r\n        type: reportType \r\n      }));\r\n    } catch (error) {\r\n      toast.error(t('reports.export.error_message'));\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  };\r\n\r\n  const handleScheduleEmail = async () => {\r\n    setIsExporting(true);\r\n    try {\r\n      // Simulate scheduling process\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      toast.success(t('reports.export.schedule_success'));\r\n    } catch (error) {\r\n      toast.error(t('reports.export.schedule_error'));\r\n    } finally {\r\n      setIsExporting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Export Configuration */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{t('reports.export.configuration')}</CardTitle>\r\n          <CardDescription>\r\n            {t('reports.export.configuration_description')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>{t('reports.export.format')}</Label>\r\n              <Select value={exportFormat} onValueChange={(value: any) => setExportFormat(value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"pdf\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <FileText className=\"h-4 w-4\" />\r\n                      PDF\r\n                    </div>\r\n                  </SelectItem>\r\n                  <SelectItem value=\"excel\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <FileSpreadsheet className=\"h-4 w-4\" />\r\n                      Excel\r\n                    </div>\r\n                  </SelectItem>\r\n                  <SelectItem value=\"csv\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <FileText className=\"h-4 w-4\" />\r\n                      CSV\r\n                    </div>\r\n                  </SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label>{t('reports.export.include_sections')}</Label>\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id=\"summary\"\r\n                    checked={exportSections.summary}\r\n                    onCheckedChange={(checked) =>\r\n                      setExportSections(prev => ({ ...prev, summary: checked as boolean }))\r\n                    }\r\n                  />\r\n                  <Label htmlFor=\"summary\" className=\"text-sm\">\r\n                    {t('reports.export.summary_section')}\r\n                  </Label>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id=\"charts\"\r\n                    checked={exportSections.charts}\r\n                    onCheckedChange={(checked) =>\r\n                      setExportSections(prev => ({ ...prev, charts: checked as boolean }))\r\n                    }\r\n                  />\r\n                  <Label htmlFor=\"charts\" className=\"text-sm\">\r\n                    {t('reports.export.charts_section')}\r\n                  </Label>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id=\"tables\"\r\n                    checked={exportSections.tables}\r\n                    onCheckedChange={(checked) =>\r\n                      setExportSections(prev => ({ ...prev, tables: checked as boolean }))\r\n                    }\r\n                  />\r\n                  <Label htmlFor=\"tables\" className=\"text-sm\">\r\n                    {t('reports.export.tables_section')}\r\n                  </Label>\r\n                </div>\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Checkbox\r\n                    id=\"trends\"\r\n                    checked={exportSections.trends}\r\n                    onCheckedChange={(checked) =>\r\n                      setExportSections(prev => ({ ...prev, trends: checked as boolean }))\r\n                    }\r\n                  />\r\n                  <Label htmlFor=\"trends\" className=\"text-sm\">\r\n                    {t('reports.export.trends_section')}\r\n                  </Label>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Available Reports */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{t('reports.export.available_reports')}</CardTitle>\r\n          <CardDescription>\r\n            {t('reports.export.available_reports_description')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            {exportReports.map((report) => (\r\n              <Card key={report.id} className=\"border-2 hover:border-primary/50 transition-colors\">\r\n                <CardContent className=\"p-4\">\r\n                  <div className=\"flex items-start justify-between mb-3\">\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <div className=\"p-2 bg-primary/10 rounded-lg text-primary\">\r\n                        {report.icon}\r\n                      </div>\r\n                      <div>\r\n                        <h4 className=\"font-medium\">{report.title}</h4>\r\n                        <p className=\"text-sm text-muted-foreground\">{report.description}</p>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      onClick={() => handleExport(report.id)}\r\n                      disabled={isExporting || !report.formats.includes(exportFormat)}\r\n                      className=\"flex-1\"\r\n                      size=\"sm\"\r\n                    >\r\n                      {isExporting ? (\r\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                      ) : (\r\n                        <Download className=\"h-4 w-4 mr-2\" />\r\n                      )}\r\n                      {isExporting ? t('common.exporting') : t('reports.export.download')}\r\n                    </Button>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Scheduled Reports */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>{t('reports.export.scheduled_reports')}</CardTitle>\r\n          <CardDescription>\r\n            {t('reports.export.scheduled_reports_description')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"flex items-center justify-between p-4 bg-muted/30 rounded-lg\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <Mail className=\"h-5 w-5 text-muted-foreground\" />\r\n              <div>\r\n                <h4 className=\"font-medium\">{t('reports.export.email_reports')}</h4>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  {t('reports.export.email_reports_description')}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <Button\r\n              onClick={handleScheduleEmail}\r\n              disabled={isExporting}\r\n              variant=\"outline\"\r\n            >\r\n              {isExporting ? (\r\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n              ) : (\r\n                <Calendar className=\"h-4 w-4 mr-2\" />\r\n              )}\r\n              {t('reports.export.schedule')}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\reports\\sections\\FinancialReports.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1342,1345],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1342,1345],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1630,1633],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1630,1633],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  DollarSign, \r\n  TrendingUp, \r\n  TrendingDown,\r\n  Target,\r\n  BarChart3\r\n} from 'lucide-react';\r\nimport { \r\n  ResponsiveContainer,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  BarChart,\r\n  Bar,\r\n  Area,\r\n  AreaChart\r\n} from 'recharts';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { MetricCard } from '../ReportsLayout';\r\nimport { useRevenueAnalytics, type ReportsFilters } from '@/hooks/useReportsData';\r\n\r\ninterface FinancialReportsProps {\r\n  filters: ReportsFilters;\r\n}\r\n\r\nexport const FinancialReports: React.FC<FinancialReportsProps> = ({ filters }) => {\r\n  const { t } = useTranslation();\r\n  const { data: revenueData, isLoading } = useRevenueAnalytics(filters, 'monthly');\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: 'USD',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(amount);\r\n  };\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      return (\r\n        <div className=\"bg-background border border-border rounded-lg shadow-lg p-3\">\r\n          <p className=\"font-medium text-foreground\">{`${t('reports.period')}: ${label}`}</p>\r\n          {payload.map((entry: any, index: number) => (\r\n            <p key={index} style={{ color: entry.color }} className=\"text-sm\">\r\n              {`${entry.name}: ${entry.name.includes('Revenue') ? formatCurrency(entry.value) : entry.value}`}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n  const revenueChartData = revenueData?.period_data.map((item) => ({\r\n    period: item.period,\r\n    revenue: item.revenue,\r\n    orders: item.orders,\r\n    avgOrderValue: item.orders > 0 ? item.revenue / item.orders : 0\r\n  })) || [];\r\n\r\n  const topServicesData = revenueData?.top_services || [];\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Key Financial Metrics */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <MetricCard\r\n          title={t('reports.metrics.total_revenue')}\r\n          value={formatCurrency(revenueData?.total_revenue || 0)}\r\n          change={revenueData?.growth_rate}\r\n          changeLabel={t('reports.metrics.growth_rate')}\r\n          icon={<DollarSign className=\"h-4 w-4\" />}\r\n          loading={isLoading}\r\n        />\r\n        <MetricCard\r\n          title={t('reports.metrics.avg_revenue_per_period')}\r\n          value={formatCurrency(revenueData?.avg_revenue_per_period || 0)}\r\n          icon={<TrendingUp className=\"h-4 w-4\" />}\r\n          loading={isLoading}\r\n        />\r\n        <MetricCard\r\n          title={t('reports.metrics.revenue_growth')}\r\n          value={`${revenueData?.growth_rate || 0}%`}\r\n          icon={revenueData?.growth_rate && revenueData.growth_rate >= 0 ? \r\n            <TrendingUp className=\"h-4 w-4\" /> : \r\n            <TrendingDown className=\"h-4 w-4\" />\r\n          }\r\n          loading={isLoading}\r\n        />\r\n        <MetricCard\r\n          title={t('reports.metrics.top_services_count')}\r\n          value={topServicesData.length}\r\n          icon={<Target className=\"h-4 w-4\" />}\r\n          loading={isLoading}\r\n        />\r\n      </div>\r\n\r\n      {/* Revenue Analysis Charts */}\r\n      <Tabs defaultValue=\"trends\" className=\"space-y-4\">\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"trends\">{t('reports.tabs.revenue_trends')}</TabsTrigger>\r\n          <TabsTrigger value=\"services\">{t('reports.tabs.top_services')}</TabsTrigger>\r\n          <TabsTrigger value=\"analysis\">{t('reports.tabs.detailed_analysis')}</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"trends\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>{t('reports.charts.revenue_trends')}</CardTitle>\r\n              <CardDescription>\r\n                {t('reports.charts.monthly_revenue_performance')}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {isLoading ? (\r\n                <div className=\"h-80 flex items-center justify-center\">\r\n                  <div className=\"text-muted-foreground\">{t('common.loading')}</div>\r\n                </div>\r\n              ) : revenueChartData.length > 0 ? (\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <AreaChart data={revenueChartData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\r\n                    <XAxis \r\n                      dataKey=\"period\" \r\n                      className=\"text-xs text-muted-foreground\"\r\n                      tick={{ fontSize: 12 }}\r\n                    />\r\n                    <YAxis \r\n                      yAxisId=\"revenue\"\r\n                      orientation=\"left\"\r\n                      className=\"text-xs text-muted-foreground\"\r\n                      tick={{ fontSize: 12 }}\r\n                      tickFormatter={formatCurrency}\r\n                    />\r\n                    <YAxis \r\n                      yAxisId=\"orders\"\r\n                      orientation=\"right\"\r\n                      className=\"text-xs text-muted-foreground\"\r\n                      tick={{ fontSize: 12 }}\r\n                    />\r\n                    <Tooltip content={<CustomTooltip />} />\r\n                    <Area\r\n                      yAxisId=\"revenue\"\r\n                      type=\"monotone\"\r\n                      dataKey=\"revenue\"\r\n                      stroke=\"hsl(var(--primary))\"\r\n                      fill=\"hsl(var(--primary))\"\r\n                      fillOpacity={0.3}\r\n                      strokeWidth={3}\r\n                      name={t('reports.charts.revenue')}\r\n                    />\r\n                    <Line\r\n                      yAxisId=\"orders\"\r\n                      type=\"monotone\"\r\n                      dataKey=\"orders\"\r\n                      stroke=\"hsl(var(--secondary))\"\r\n                      strokeWidth={2}\r\n                      dot={{ fill: \"hsl(var(--secondary))\", r: 4 }}\r\n                      name={t('reports.charts.orders')}\r\n                    />\r\n                  </AreaChart>\r\n                </ResponsiveContainer>\r\n              ) : (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  {t('reports.no_data')}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"services\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>{t('reports.charts.top_services_by_revenue')}</CardTitle>\r\n                <CardDescription>\r\n                  {t('reports.charts.highest_revenue_generating_services')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {isLoading ? (\r\n                  <div className=\"h-72 flex items-center justify-center\">\r\n                    <div className=\"text-muted-foreground\">{t('common.loading')}</div>\r\n                  </div>\r\n                ) : topServicesData.length > 0 ? (\r\n                  <ResponsiveContainer width=\"100%\" height={300}>\r\n                    <BarChart data={topServicesData} layout=\"horizontal\">\r\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\r\n                      <XAxis \r\n                        type=\"number\"\r\n                        className=\"text-xs text-muted-foreground\"\r\n                        tick={{ fontSize: 12 }}\r\n                        tickFormatter={formatCurrency}\r\n                      />\r\n                      <YAxis \r\n                        type=\"category\"\r\n                        dataKey=\"name\"\r\n                        className=\"text-xs text-muted-foreground\"\r\n                        tick={{ fontSize: 12 }}\r\n                        width={100}\r\n                      />\r\n                      <Tooltip \r\n                        formatter={(value: number) => [formatCurrency(value), t('reports.charts.revenue')]}\r\n                        labelStyle={{ color: 'hsl(var(--foreground))' }}\r\n                      />\r\n                      <Bar\r\n                        dataKey=\"revenue\"\r\n                        fill=\"hsl(var(--primary))\"\r\n                        radius={[0, 4, 4, 0]}\r\n                      />\r\n                    </BarChart>\r\n                  </ResponsiveContainer>\r\n                ) : (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    {t('reports.no_data')}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle>{t('reports.charts.service_performance')}</CardTitle>\r\n                <CardDescription>\r\n                  {t('reports.charts.service_revenue_breakdown')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                {isLoading ? (\r\n                  <div className=\"space-y-3\">\r\n                    {[1, 2, 3, 4].map((i) => (\r\n                      <div key={i} className=\"flex justify-between items-center p-3 bg-muted/30 rounded-lg\">\r\n                        <div className=\"h-4 w-32 bg-muted rounded animate-pulse\" />\r\n                        <div className=\"h-4 w-20 bg-muted rounded animate-pulse\" />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                ) : topServicesData.length > 0 ? (\r\n                  <>\r\n                    {topServicesData.slice(0, 5).map((service, index) => {\r\n                      const percentage = revenueData?.total_revenue \r\n                        ? (service.revenue / revenueData.total_revenue) * 100 \r\n                        : 0;\r\n                      return (\r\n                        <div key={index} className=\"space-y-2\">\r\n                          <div className=\"flex justify-between items-center\">\r\n                            <span className=\"font-medium text-sm\">{service.name}</span>\r\n                            <Badge variant=\"outline\">{formatCurrency(service.revenue)}</Badge>\r\n                          </div>\r\n                          <div className=\"flex justify-between text-xs text-muted-foreground\">\r\n                            <span>{percentage.toFixed(1)}% of total revenue</span>\r\n                          </div>\r\n                          <Progress value={percentage} className=\"h-2\" />\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </>\r\n                ) : (\r\n                  <div className=\"text-center py-8 text-muted-foreground\">\r\n                    {t('reports.no_data')}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"analysis\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>{t('reports.charts.average_order_value_trend')}</CardTitle>\r\n              <CardDescription>\r\n                {t('reports.charts.aov_analysis_over_time')}\r\n              </CardDescription>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {isLoading ? (\r\n                <div className=\"h-72 flex items-center justify-center\">\r\n                  <div className=\"text-muted-foreground\">{t('common.loading')}</div>\r\n                </div>\r\n              ) : revenueChartData.length > 0 ? (\r\n                <ResponsiveContainer width=\"100%\" height={300}>\r\n                  <LineChart data={revenueChartData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\r\n                    <XAxis \r\n                      dataKey=\"period\" \r\n                      className=\"text-xs text-muted-foreground\"\r\n                      tick={{ fontSize: 12 }}\r\n                    />\r\n                    <YAxis \r\n                      className=\"text-xs text-muted-foreground\"\r\n                      tick={{ fontSize: 12 }}\r\n                      tickFormatter={formatCurrency}\r\n                    />\r\n                    <Tooltip content={<CustomTooltip />} />\r\n                    <Line\r\n                      type=\"monotone\"\r\n                      dataKey=\"avgOrderValue\"\r\n                      stroke=\"hsl(var(--primary))\"\r\n                      strokeWidth={3}\r\n                      dot={{ fill: \"hsl(var(--primary))\", r: 6 }}\r\n                      name={t('reports.charts.avg_order_value')}\r\n                    />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              ) : (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  {t('reports.no_data')}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\reports\\sections\\OperationalReports.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\sales\\OrderKanbanBoard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1162,1165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1162,1165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { \r\n  MoreHorizontal, \r\n  Calendar, \r\n  Clock, \r\n  AlertTriangle,\r\n  Edit,\r\n  Eye,\r\n  Trash\r\n} from 'lucide-react';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Order } from '@/hooks/useOrderManagement';\r\nimport { safeFormatDateOnly, calculateDaysFromNow } from '@/utils/dateUtils';\r\nimport { getStatusRowColor, getStatusBorder } from '@/utils/statusUtils';\r\n\r\ninterface OrderKanbanBoardProps {\r\n  orders: Order[];\r\n  onEdit: (order: Order) => void;\r\n  onView: (order: Order) => void;\r\n  onDelete: (orderId: string) => void;\r\n  onStatusChange?: (orderId: string, newStatus: string) => void;\r\n}\r\n\r\ninterface KanbanColumn {\r\n  id: string;\r\n  title: string;\r\n  status: string[];\r\n  color: string;\r\n  bgColor: string;\r\n  icon: any;\r\n}\r\n\r\nexport function OrderKanbanBoard({ orders, onEdit, onView, onDelete, onStatusChange }: OrderKanbanBoardProps) {\r\n  const { t } = useTranslation();\r\n  const [draggedOrder, setDraggedOrder] = useState<Order | null>(null);\r\n\r\n  const columns: KanbanColumn[] = [\r\n    {\r\n      id: 'pending',\r\n      title: 'Pending',\r\n      status: ['pending'],\r\n      color: 'text-warning',\r\n      bgColor: 'bg-warning/10',\r\n      icon: AlertTriangle\r\n    },\r\n    {\r\n      id: 'in_process',\r\n      title: 'In Process',\r\n      status: ['in_progress'],\r\n      color: 'text-primary',\r\n      bgColor: 'bg-primary/10',\r\n      icon: Clock\r\n    },\r\n    {\r\n      id: 'complete',\r\n      title: 'Complete',\r\n      status: ['completed'],\r\n      color: 'text-success',\r\n      bgColor: 'bg-success/10',\r\n      icon: Calendar\r\n    },\r\n    {\r\n      id: 'cancelled',\r\n      title: 'Cancelled',\r\n      status: ['cancelled'],\r\n      color: 'text-destructive',\r\n      bgColor: 'bg-destructive/10',\r\n      icon: AlertTriangle\r\n    }\r\n  ];\r\n\r\n  const getOrdersByColumn = (columnStatus: string[]) => {\r\n    return orders.filter(order => \r\n      columnStatus.some(status => \r\n        order.status.toLowerCase() === status.toLowerCase()\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleDragStart = (e: React.DragEvent, order: Order) => {\r\n    setDraggedOrder(order);\r\n    e.dataTransfer.effectAllowed = 'move';\r\n  };\r\n\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    e.dataTransfer.dropEffect = 'move';\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent, targetColumnId: string) => {\r\n    e.preventDefault();\r\n    if (draggedOrder && onStatusChange) {\r\n      // Map column IDs to actual status values that match database constraint\r\n      let newStatus = targetColumnId;\r\n      switch (targetColumnId) {\r\n        case 'pending':\r\n          newStatus = 'pending';\r\n          break;\r\n        case 'in_process':\r\n          newStatus = 'in_progress';\r\n          break;\r\n        case 'complete':\r\n          newStatus = 'completed';\r\n          break;\r\n        case 'cancelled':\r\n          newStatus = 'cancelled';\r\n          break;\r\n        default:\r\n          newStatus = targetColumnId;\r\n      }\r\n      onStatusChange(draggedOrder.id, newStatus);\r\n    }\r\n    setDraggedOrder(null);\r\n  };\r\n\r\n  const getPriorityColor = (priority?: string) => {\r\n    switch (priority?.toLowerCase()) {\r\n      case 'urgent': return 'border-l-destructive bg-destructive/5';\r\n      case 'high': return 'border-l-warning bg-warning/5';\r\n      case 'normal': return 'border-l-primary bg-primary/5';\r\n      case 'low': return 'border-l-muted bg-muted/5';\r\n      default: return 'border-l-border bg-background';\r\n    }\r\n  };\r\n\r\n  const formatDueDate = (dueDate?: string) => {\r\n    if (!dueDate) return null;\r\n    \r\n    const diffDays = calculateDaysFromNow(dueDate);\r\n    if (diffDays === null) return null;\r\n    \r\n    if (diffDays < 0) {\r\n      return { text: 'Overdue', variant: 'destructive' as const, days: Math.abs(diffDays) };\r\n    } else if (diffDays === 0) {\r\n      return { text: 'Due today', variant: 'warning' as const, days: 0 };\r\n    } else if (diffDays === 1) {\r\n      return { text: 'Due tomorrow', variant: 'secondary' as const, days: 1 };\r\n    } else {\r\n      return { text: `${diffDays}d`, variant: 'outline' as const, days: diffDays };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 h-[calc(100vh-300px)] overflow-hidden\">\r\n      {columns.map((column) => {\r\n        const columnOrders = getOrdersByColumn(column.status);\r\n        const Icon = column.icon;\r\n        \r\n        return (\r\n          <div\r\n            key={column.id}\r\n            className=\"flex flex-col min-h-0\"\r\n            onDragOver={handleDragOver}\r\n            onDrop={(e) => handleDrop(e, column.id)}\r\n          >\r\n            {/* Column Header */}\r\n            <Card className=\"border-border shadow-sm mb-4\">\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className={`p-1.5 rounded-md ${column.bgColor}`}>\r\n                      <Icon className={`h-4 w-4 ${column.color}`} />\r\n                    </div>\r\n                    <span className=\"text-sm font-medium\">{column.title}</span>\r\n                  </div>\r\n                  <Badge variant=\"secondary\" className=\"text-xs\">\r\n                    {columnOrders.length}\r\n                  </Badge>\r\n                </CardTitle>\r\n              </CardHeader>\r\n            </Card>\r\n\r\n            {/* Order Cards */}\r\n            <div \r\n              className={`flex-1 overflow-y-auto space-y-3 pr-2 scrollbar-thin scrollbar-thumb-border scrollbar-track-transparent min-h-[200px] ${\r\n                draggedOrder ? 'bg-accent/5 border-2 border-dashed border-accent rounded-lg' : ''\r\n              }`}\r\n            >\r\n              {columnOrders.map((order) => {\r\n                const dueInfo = formatDueDate(order.dueDate);\r\n                \r\n                return (\r\n                  <Card\r\n                    key={order.id}\r\n                    draggable={true}\r\n                    onDragStart={(e) => handleDragStart(e, order)}\r\n                    onDragEnd={() => setDraggedOrder(null)}\r\n                    className={`border-l-4 cursor-move hover:shadow-md transition-all duration-200 ${getStatusBorder(order.status)} ${getStatusRowColor(order.status)} group ${\r\n                      draggedOrder?.id === order.id ? 'opacity-50 scale-95' : ''\r\n                    }`}\r\n                  >\r\n                    <CardContent className=\"p-4\">\r\n                      {/* Order Header */}\r\n                      <div className=\"flex items-start justify-between mb-3\">\r\n                        <div>\r\n                           <div className=\"font-medium text-sm text-foreground\">\r\n                             #{order.customOrderNumber || order.id}\r\n                           </div>\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {order.stockNumber && `Stock: ${order.stockNumber}`}\r\n                          </div>\r\n                        </div>\r\n                        <DropdownMenu>\r\n                          <DropdownMenuTrigger asChild>\r\n                            <Button \r\n                              size=\"sm\" \r\n                              variant=\"ghost\" \r\n                              className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\r\n                            >\r\n                              <MoreHorizontal className=\"h-3 w-3\" />\r\n                            </Button>\r\n                          </DropdownMenuTrigger>\r\n                          <DropdownMenuContent align=\"end\" className=\"bg-popover border border-border\">\r\n                            <DropdownMenuItem onClick={() => onView(order)}>\r\n                              <Eye className=\"w-4 h-4 mr-2\" />\r\n                              View\r\n                            </DropdownMenuItem>\r\n                            <DropdownMenuItem onClick={() => onEdit(order)}>\r\n                              <Edit className=\"w-4 h-4 mr-2\" />\r\n                              Edit\r\n                            </DropdownMenuItem>\r\n                            <DropdownMenuItem \r\n                              onClick={() => onDelete(order.id)}\r\n                              className=\"text-destructive focus:text-destructive\"\r\n                            >\r\n                              <Trash className=\"w-4 h-4 mr-2\" />\r\n                              Delete\r\n                            </DropdownMenuItem>\r\n                          </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                      </div>\r\n\r\n                      {/* Customer & Vehicle Info */}\r\n                      <div className=\"space-y-2 mb-3\">\r\n                        {order.customerName && (\r\n                          <div className=\"text-sm font-medium text-foreground\">\r\n                            {order.customerName}\r\n                          </div>\r\n                        )}\r\n                        {order.vehicleInfo ? (\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            {order.vehicleInfo}\r\n                          </div>\r\n                        ) : order.vehicleVin && (\r\n                          <div className=\"text-xs text-muted-foreground\">\r\n                            VIN: {order.vehicleVin.slice(-8)}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n\r\n                      {/* Due Date & Amount */}\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {dueInfo && (\r\n                            <Badge \r\n                              variant={dueInfo.variant === 'warning' ? 'secondary' : dueInfo.variant} \r\n                              className={`text-xs px-2 py-0 h-5 ${dueInfo.variant === 'warning' ? 'bg-warning/20 text-warning border-warning' : ''}`}\r\n                            >\r\n                              {dueInfo.text}\r\n                            </Badge>\r\n                          )}\r\n                          {order.priority && order.priority !== 'normal' && (\r\n                            <Badge \r\n                              variant={order.priority === 'urgent' ? 'destructive' : 'outline'} \r\n                              className=\"text-xs px-2 py-0 h-5\"\r\n                            >\r\n                              {order.priority}\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                        {order.totalAmount && (\r\n                          <div className=\"text-xs font-medium text-success\">\r\n                            ${order.totalAmount.toLocaleString()}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n\r\n                      {/* Avatar */}\r\n                      <div className=\"flex items-center mt-3 pt-3 border-t border-border\">\r\n                        <Avatar className=\"h-6 w-6\">\r\n                          <AvatarFallback className=\"text-xs bg-primary/10 text-primary\">\r\n                            {order.customerName?.charAt(0) || 'U'}\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                        <div className=\"text-xs text-muted-foreground ml-2\">\r\n                          {safeFormatDateOnly(order.createdAt)}\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                );\r\n              })}\r\n              \r\n              {columnOrders.length === 0 && (\r\n                <div className=\"text-center py-8 text-muted-foreground\">\r\n                  <div className=\"text-sm\">No orders</div>\r\n                  <div className=\"text-xs\">Drag orders here</div>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\sales\\OrderPreviewPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\sales\\QuickFilterBar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[431,434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[431,434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card } from '@/components/ui/card';\r\nimport { Calendar, Clock, AlertCircle, BarChart3, List, Kanban, Filter, Search } from 'lucide-react';\r\nimport { Input } from '@/components/ui/input';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface FilterOption {\r\n  id: string;\r\n  label: string;\r\n  count: number;\r\n  icon: any;\r\n  color: string;\r\n}\r\n\r\ninterface QuickFilterBarProps {\r\n  activeFilter: string;\r\n  tabCounts: Record<string, number>;\r\n  onFilterChange: (filter: string) => void;\r\n  searchTerm: string;\r\n  onSearchChange: (term: string) => void;\r\n  viewMode: 'kanban' | 'table' | 'calendar';\r\n  onViewModeChange: (mode: 'kanban' | 'table' | 'calendar') => void;\r\n  showFilters?: boolean;\r\n  onToggleFilters?: () => void;\r\n}\r\n\r\nexport function QuickFilterBar({ \r\n  activeFilter,\r\n  tabCounts,\r\n  onFilterChange,\r\n  searchTerm,\r\n  onSearchChange,\r\n  viewMode,\r\n  onViewModeChange,\r\n  showFilters = false,\r\n  onToggleFilters\r\n}: QuickFilterBarProps) {\r\n  const { t } = useTranslation();\r\n\r\n  const filterOptions: FilterOption[] = [\r\n    {\r\n      id: 'dashboard',\r\n      label: 'Overview',\r\n      count: 0, // Remove count badge\r\n      icon: BarChart3,\r\n      color: 'bg-primary/10 text-primary border-primary/20'\r\n    },\r\n    {\r\n      id: 'today',\r\n      label: 'Today',\r\n      count: tabCounts.today || 0,\r\n      icon: Calendar,\r\n      color: 'bg-success/10 text-success border-success/20'\r\n    },\r\n    {\r\n      id: 'tomorrow',\r\n      label: 'Tomorrow',\r\n      count: tabCounts.tomorrow || 0,\r\n      icon: Clock,\r\n      color: 'bg-primary/10 text-primary border-primary/20'\r\n    },\r\n    {\r\n      id: 'pending',\r\n      label: 'Pending',\r\n      count: tabCounts.pending || 0,\r\n      icon: AlertCircle,\r\n      color: 'bg-warning/10 text-warning border-warning/20'\r\n    },\r\n    {\r\n      id: 'in_process',\r\n      label: 'In Process',\r\n      count: tabCounts.in_process || 0,\r\n      icon: Clock,\r\n      color: 'bg-primary/10 text-primary border-primary/20'\r\n    },\r\n    {\r\n      id: 'week',\r\n      label: 'Week',\r\n      count: tabCounts.week || 0,\r\n      icon: BarChart3,\r\n      color: 'bg-accent/10 text-accent border-accent/20'\r\n    },\r\n    {\r\n      id: 'all',\r\n      label: 'All Orders',\r\n      count: 0, // Remove count badge\r\n      icon: List,\r\n      color: 'bg-muted/50 text-foreground border-border'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Card className=\"border-border shadow-sm\">\r\n      <div className=\"p-4 space-y-4\">\r\n        {/* Search and View Toggle */}\r\n        <div className=\"flex flex-col sm:flex-row gap-4 items-center justify-between\">\r\n          {/* Search */}\r\n          <div className=\"relative flex-1 max-w-md\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\r\n            <Input\r\n              placeholder={t('layout.search_placeholder')}\r\n              value={searchTerm}\r\n              onChange={(e) => onSearchChange(e.target.value)}\r\n              className=\"pl-10 bg-background\"\r\n            />\r\n          </div>\r\n\r\n          {/* View Mode & Filters Toggle */}\r\n          <div className=\"flex items-center gap-2\">\r\n            {/* View Mode Toggle */}\r\n            <div className=\"flex items-center bg-muted/50 rounded-lg p-1\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant={viewMode === 'kanban' ? 'default' : 'ghost'}\r\n                onClick={() => onViewModeChange('kanban')}\r\n                className=\"h-8 px-2 sm:px-3\"\r\n              >\r\n                <Kanban className=\"w-4 h-4 sm:mr-2\" />\r\n                <span className=\"hidden sm:inline\">Kanban</span>\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant={viewMode === 'table' ? 'default' : 'ghost'}\r\n                onClick={() => onViewModeChange('table')}\r\n                className=\"h-8 px-2 sm:px-3\"\r\n              >\r\n                <List className=\"w-4 h-4 sm:mr-2\" />\r\n                <span className=\"hidden sm:inline\">Table</span>\r\n              </Button>\r\n              <Button\r\n                size=\"sm\"\r\n                variant={viewMode === 'calendar' ? 'default' : 'ghost'}\r\n                onClick={() => onViewModeChange('calendar')}\r\n                className=\"h-8 px-2 sm:px-3\"\r\n              >\r\n                <Calendar className=\"w-4 h-4 sm:mr-2\" />\r\n                <span className=\"hidden sm:inline\">{t('common.calendar')}</span>\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Filters Toggle */}\r\n            {onToggleFilters && (\r\n              <Button\r\n                size=\"sm\"\r\n                variant={showFilters ? 'default' : 'outline'}\r\n                onClick={onToggleFilters}\r\n                className=\"h-8 px-3\"\r\n              >\r\n                <Filter className=\"w-4 h-4 mr-2\" />\r\n                Filters\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filter Pills - Mobile Responsive */}\r\n        <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:flex lg:flex-wrap gap-2\">\r\n          {filterOptions.map((option) => {\r\n            const Icon = option.icon;\r\n            const isActive = activeFilter === option.id;\r\n            \r\n            return (\r\n              <Button\r\n                key={option.id}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => onFilterChange(option.id)}\r\n                className={`\r\n                  h-9 px-2 sm:px-3 border-2 transition-all duration-200 hover:scale-105\r\n                  ${isActive \r\n                    ? `${option.color} shadow-sm` \r\n                    : 'bg-background hover:bg-muted/50 border-border text-muted-foreground hover:text-foreground'\r\n                  }\r\n                `}\r\n              >\r\n                <Icon className=\"w-4 h-4 mr-1 sm:mr-2\" />\r\n                <span className=\"text-sm sm:text-base\">{option.label}</span>\r\n                {option.count > 0 && (\r\n                  <Badge \r\n                    variant=\"secondary\" \r\n                    className={`\r\n                      ml-2 text-xs px-1.5 py-0 min-w-[20px] h-5 \r\n                      ${isActive \r\n                        ? 'bg-white/20 text-current' \r\n                        : 'bg-muted text-muted-foreground'\r\n                      }\r\n                    `}\r\n                  >\r\n                    {option.count}\r\n                  </Badge>\r\n                )}\r\n              </Button>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* Active Filter Indicator */}\r\n        {activeFilter !== 'dashboard' && (\r\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n            <span>Active filter:</span>\r\n            <Badge variant=\"secondary\" className=\"bg-primary/10 text-primary\">\r\n              {filterOptions.find(f => f.id === activeFilter)?.label}\r\n            </Badge>\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => onFilterChange('dashboard')}\r\n              className=\"h-auto p-1 text-xs text-muted-foreground hover:text-foreground\"\r\n            >\r\n              Clear\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\sales\\SmartDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\QuickScanMode.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\VinOrderIntegration.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":31,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1022,1025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1022,1025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { \r\n  Car, \r\n  Calendar, \r\n  DollarSign, \r\n  FileText, \r\n  ArrowRight,\r\n  CheckCircle,\r\n  Clock,\r\n  AlertTriangle\r\n} from 'lucide-react';\r\nimport { useVinDecoding } from '@/hooks/useVinDecoding';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface VinOrderIntegrationProps {\r\n  vin: string;\r\n  className?: string;\r\n}\r\n\r\nexport function VinOrderIntegration({ vin, className }: VinOrderIntegrationProps) {\r\n  const { t } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const { decodeVin, loading } = useVinDecoding();\r\n  const [decodingComplete, setDecodingComplete] = useState(false);\r\n  const [decodedVehicle, setDecodedVehicle] = useState<any>(null);\r\n\r\n  const handleDecodeVin = async () => {\r\n    try {\r\n      const result = await decodeVin(vin);\r\n      setDecodedVehicle(result);\r\n      setDecodingComplete(true);\r\n    } catch (error) {\r\n      console.error('VIN decoding error:', error);\r\n    }\r\n  };\r\n\r\n  const createOrder = (orderType: 'sales' | 'service' | 'recon') => {\r\n    const baseData = {\r\n      vehicle_vin: vin,\r\n      vehicle_year: decodedVehicle?.year,\r\n      vehicle_make: decodedVehicle?.make,\r\n      vehicle_model: decodedVehicle?.model,\r\n      vehicle_info: decodedVehicle ? `${decodedVehicle.year} ${decodedVehicle.make} ${decodedVehicle.model}` : ''\r\n    };\r\n\r\n    // Navigate to respective order creation page with pre-filled data\r\n    switch (orderType) {\r\n      case 'sales':\r\n        navigate('/sales', { state: { prefillData: baseData } });\r\n        break;\r\n      case 'service':\r\n        navigate('/service', { state: { prefillData: baseData } });\r\n        break;\r\n      case 'recon':\r\n        navigate('/recon', { state: { prefillData: baseData } });\r\n        break;\r\n    }\r\n  };\r\n\r\n  const QuickActionCard = ({ \r\n    icon, \r\n    title, \r\n    description, \r\n    orderType, \r\n    color \r\n  }: {\r\n    icon: React.ElementType;\r\n    title: string;\r\n    description: string;\r\n    orderType: 'sales' | 'service' | 'recon';\r\n    color: string;\r\n  }) => {\r\n    const Icon = icon;\r\n    \r\n    return (\r\n      <Card className={cn(\r\n        \"cursor-pointer hover:shadow-md transition-all duration-200 hover:scale-[1.02]\",\r\n        !decodingComplete && \"opacity-60 pointer-events-none\"\r\n      )}>\r\n        <CardContent \r\n          className=\"p-4 text-center\"\r\n          onClick={() => createOrder(orderType)}\r\n        >\r\n          <div className={cn(\r\n            \"w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-3\",\r\n            color\r\n          )}>\r\n            <Icon className=\"w-6 h-6\" />\r\n          </div>\r\n          <h3 className=\"font-semibold mb-1 text-sm\">{title}</h3>\r\n          <p className=\"text-xs text-muted-foreground\">{description}</p>\r\n          {decodingComplete && (\r\n            <div className=\"flex items-center justify-center mt-2\">\r\n              <ArrowRight className=\"w-4 h-4 text-primary\" />\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"space-y-4\", className)}>\r\n      {/* VIN Information Card */}\r\n      <Card>\r\n        <CardHeader className=\"pb-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"text-lg flex items-center gap-2\">\r\n              <Car className=\"w-5 h-5 text-primary\" />\r\n              {t('vin_integration.vehicle_info')}\r\n            </CardTitle>\r\n            <Badge variant=\"outline\" className=\"font-mono text-xs\">\r\n              {vin}\r\n            </Badge>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          {!decodingComplete ? (\r\n            <div className=\"text-center py-6\">\r\n              <Button \r\n                onClick={handleDecodeVin}\r\n                disabled={loading}\r\n                className=\"button-enhanced\"\r\n              >\r\n                {loading ? (\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent\" />\r\n                    {t('vin_integration.decoding')}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <CheckCircle className=\"w-4 h-4\" />\r\n                    {t('vin_integration.decode_vin')}\r\n                  </div>\r\n                )}\r\n              </Button>\r\n              <p className=\"text-xs text-muted-foreground mt-2\">\r\n                {t('vin_integration.decode_description')}\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-3\">\r\n              {decodedVehicle ? (\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                  <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\r\n                    <p className=\"text-sm font-medium\">{t('vin_integration.year')}</p>\r\n                    <p className=\"text-lg font-bold text-primary\">{decodedVehicle.year}</p>\r\n                  </div>\r\n                  <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\r\n                    <p className=\"text-sm font-medium\">{t('vin_integration.make')}</p>\r\n                    <p className=\"text-lg font-bold text-primary\">{decodedVehicle.make}</p>\r\n                  </div>\r\n                  <div className=\"text-center p-3 bg-muted/50 rounded-lg\">\r\n                    <p className=\"text-sm font-medium\">{t('vin_integration.model')}</p>\r\n                    <p className=\"text-lg font-bold text-primary\">{decodedVehicle.model}</p>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-center py-4\">\r\n                  <AlertTriangle className=\"w-8 h-8 text-warning mx-auto mb-2\" />\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    {t('vin_integration.decode_failed')}\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Quick Actions */}\r\n      <Card>\r\n        <CardHeader className=\"pb-3\">\r\n          <CardTitle className=\"text-lg\">\r\n            {t('vin_integration.create_order')}\r\n          </CardTitle>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            {t('vin_integration.create_order_description')}\r\n          </p>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n            <QuickActionCard\r\n              icon={Car}\r\n              title={t('vin_integration.sales_order')}\r\n              description={t('vin_integration.sales_order_desc')}\r\n              orderType=\"sales\"\r\n              color=\"bg-primary/10 text-primary\"\r\n            />\r\n            <QuickActionCard\r\n              icon={FileText}\r\n              title={t('vin_integration.service_order')}\r\n              description={t('vin_integration.service_order_desc')}\r\n              orderType=\"service\"\r\n              color=\"bg-secondary/10 text-secondary\"\r\n            />\r\n            <QuickActionCard\r\n              icon={Calendar}\r\n              title={t('vin_integration.recon_order')}\r\n              description={t('vin_integration.recon_order_desc')}\r\n              orderType=\"recon\"\r\n              color=\"bg-accent/10 text-accent\"\r\n            />\r\n          </div>\r\n          \r\n          {!decodingComplete && (\r\n            <div className=\"mt-4 p-3 bg-warning/10 border border-warning/20 rounded-lg\">\r\n              <div className=\"flex items-start gap-2\">\r\n                <Clock className=\"w-4 h-4 text-warning mt-0.5\" />\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-warning\">\r\n                    {t('vin_integration.decode_required')}\r\n                  </p>\r\n                  <p className=\"text-xs text-muted-foreground\">\r\n                    {t('vin_integration.decode_required_desc')}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\VinScannerHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\analytics\\ScannerAnalytics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1812,1815],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1812,1815],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1996,1999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1996,1999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2125,2128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2125,2128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2282,2285],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2282,2285],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2294,2297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2294,2297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2773,2776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2773,2776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3074,3077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3074,3077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3475,3478],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3475,3478],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4949,4952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4949,4952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9337,9340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9337,9340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":238,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9348,9351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9348,9351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, PieChart, Pie, Cell, LineChart, Line } from 'recharts';\r\nimport { TrendingUp, Target, Clock, Zap, Activity, AlertTriangle } from 'lucide-react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface ScanMetrics {\r\n  totalScans: number;\r\n  successfulScans: number;\r\n  failedScans: number;\r\n  averageConfidence: number;\r\n  averageProcessingTime: number;\r\n  sourceDistribution: { [key: string]: number };\r\n  dailyScans: { date: string; scans: number; success: number }[];\r\n  confidenceDistribution: { range: string; count: number }[];\r\n}\r\n\r\ninterface ScannerAnalyticsProps {\r\n  className?: string;\r\n}\r\n\r\nexport function ScannerAnalytics({ className }: ScannerAnalyticsProps) {\r\n  const { t } = useTranslation();\r\n  const [metrics, setMetrics] = useState<ScanMetrics>({\r\n    totalScans: 0,\r\n    successfulScans: 0,\r\n    failedScans: 0,\r\n    averageConfidence: 0,\r\n    averageProcessingTime: 0,\r\n    sourceDistribution: {},\r\n    dailyScans: [],\r\n    confidenceDistribution: []\r\n  });\r\n\r\n  // Load and calculate metrics from localStorage\r\n  useEffect(() => {\r\n    const calculateMetrics = () => {\r\n      const storedHistory = localStorage.getItem('vinScannerHistory');\r\n      if (!storedHistory) return;\r\n\r\n      try {\r\n        const history = JSON.parse(storedHistory);\r\n        const totalScans = history.length;\r\n        const successfulScans = history.filter((entry: any) => entry.status === 'success').length;\r\n        const failedScans = totalScans - successfulScans;\r\n        \r\n        const averageConfidence = history.reduce((sum: number, entry: any) => sum + entry.confidence, 0) / totalScans || 0;\r\n        const averageProcessingTime = history.reduce((sum: number, entry: any) => sum + entry.processingTime, 0) / totalScans || 0;\r\n        \r\n        // Source distribution\r\n        const sourceDistribution = history.reduce((acc: any, entry: any) => {\r\n          acc[entry.source] = (acc[entry.source] || 0) + 1;\r\n          return acc;\r\n        }, {});\r\n\r\n        // Daily scans for last 7 days\r\n        const last7Days = Array.from({ length: 7 }, (_, i) => {\r\n          const date = new Date();\r\n          date.setDate(date.getDate() - i);\r\n          return date.toISOString().split('T')[0];\r\n        }).reverse();\r\n\r\n        const dailyScans = last7Days.map(date => {\r\n          const dayScans = history.filter((entry: any) => \r\n            new Date(entry.timestamp).toISOString().split('T')[0] === date\r\n          );\r\n          return {\r\n            date: new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\r\n            scans: dayScans.length,\r\n            success: dayScans.filter((entry: any) => entry.status === 'success').length\r\n          };\r\n        });\r\n\r\n        // Confidence distribution\r\n        const confidenceRanges = ['0-20%', '21-40%', '41-60%', '61-80%', '81-100%'];\r\n        const confidenceDistribution = confidenceRanges.map((range, index) => {\r\n          const min = index * 0.2;\r\n          const max = (index + 1) * 0.2;\r\n          const count = history.filter((entry: any) => \r\n            entry.confidence >= min && entry.confidence < max\r\n          ).length;\r\n          return { range, count };\r\n        });\r\n\r\n        setMetrics({\r\n          totalScans,\r\n          successfulScans,\r\n          failedScans,\r\n          averageConfidence,\r\n          averageProcessingTime,\r\n          sourceDistribution,\r\n          dailyScans,\r\n          confidenceDistribution\r\n        });\r\n      } catch (error) {\r\n        console.error('Error calculating metrics:', error);\r\n      }\r\n    };\r\n\r\n    calculateMetrics();\r\n    \r\n    // Recalculate when localStorage changes\r\n    const handleStorageChange = () => calculateMetrics();\r\n    window.addEventListener('storage', handleStorageChange);\r\n    \r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, []);\r\n\r\n  const successRate = metrics.totalScans > 0 ? (metrics.successfulScans / metrics.totalScans) * 100 : 0;\r\n\r\n  const sourceChartData = Object.entries(metrics.sourceDistribution).map(([source, count]) => ({\r\n    name: t(`vin_scanner_history.source_${source}`),\r\n    value: count,\r\n    percentage: metrics.totalScans > 0 ? ((count / metrics.totalScans) * 100).toFixed(1) : 0\r\n  }));\r\n\r\n  const COLORS = ['hsl(var(--primary))', 'hsl(var(--secondary))', 'hsl(var(--accent))'];\r\n\r\n  const StatCard = ({ \r\n    title, \r\n    value, \r\n    icon: Icon, \r\n    trend, \r\n    description,\r\n    valueClassName = '' \r\n  }: {\r\n    title: string;\r\n    value: string | number;\r\n    icon: any;\r\n    trend?: 'up' | 'down' | 'neutral';\r\n    description?: string;\r\n    valueClassName?: string;\r\n  }) => (\r\n    <Card>\r\n      <CardContent className=\"p-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex-1\">\r\n            <p className=\"text-sm font-medium text-muted-foreground\">{title}</p>\r\n            <p className={cn(\"text-2xl font-bold mt-2\", valueClassName)}>\r\n              {value}\r\n            </p>\r\n            {description && (\r\n              <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\r\n            )}\r\n          </div>\r\n          <div className=\"flex flex-col items-end\">\r\n            <div className=\"h-12 w-12 bg-primary/10 rounded-full flex items-center justify-center\">\r\n              <Icon className=\"w-6 h-6 text-primary\" />\r\n            </div>\r\n            {trend && (\r\n              <Badge \r\n                variant={trend === 'up' ? 'default' : trend === 'down' ? 'destructive' : 'secondary'}\r\n                className=\"mt-2 text-xs\"\r\n              >\r\n                <TrendingUp className={cn(\"w-3 h-3 mr-1\", trend === 'down' && \"rotate-180\")} />\r\n                {trend}\r\n              </Badge>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  return (\r\n    <div className={cn(\"space-y-6\", className)}>\r\n      {/* Stats Overview */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <StatCard\r\n          title={t('scanner_analytics.total_scans')}\r\n          value={metrics.totalScans}\r\n          icon={Activity}\r\n          trend=\"up\"\r\n        />\r\n        <StatCard\r\n          title={t('scanner_analytics.success_rate')}\r\n          value={`${successRate.toFixed(1)}%`}\r\n          icon={Target}\r\n          trend={successRate >= 80 ? 'up' : successRate >= 60 ? 'neutral' : 'down'}\r\n          valueClassName={successRate >= 80 ? 'text-green-600' : successRate >= 60 ? 'text-yellow-600' : 'text-red-600'}\r\n        />\r\n        <StatCard\r\n          title={t('scanner_analytics.avg_confidence')}\r\n          value={`${(metrics.averageConfidence * 100).toFixed(1)}%`}\r\n          icon={Zap}\r\n          trend={metrics.averageConfidence >= 0.8 ? 'up' : 'neutral'}\r\n        />\r\n        <StatCard\r\n          title={t('scanner_analytics.avg_processing_time')}\r\n          value={`${metrics.averageProcessingTime.toFixed(0)}ms`}\r\n          icon={Clock}\r\n          trend={metrics.averageProcessingTime <= 2000 ? 'up' : 'down'}\r\n          description={t('scanner_analytics.processing_time_desc')}\r\n        />\r\n      </div>\r\n\r\n      {/* Detailed Analytics */}\r\n      <Tabs defaultValue=\"overview\" className=\"w-full\">\r\n        <TabsList className=\"grid w-full grid-cols-1 sm:grid-cols-3\">\r\n          <TabsTrigger value=\"overview\">{t('scanner_analytics.overview')}</TabsTrigger>\r\n          <TabsTrigger value=\"trends\">{t('scanner_analytics.trends')}</TabsTrigger>\r\n          <TabsTrigger value=\"performance\">{t('scanner_analytics.performance')}</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value=\"overview\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n            {/* Source Distribution */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Target className=\"w-5 h-5\" />\r\n                  {t('scanner_analytics.source_distribution')}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {sourceChartData.length > 0 ? (\r\n                  <div className=\"h-[300px]\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <PieChart>\r\n                        <Pie\r\n                          data={sourceChartData}\r\n                          cx=\"50%\"\r\n                          cy=\"50%\"\r\n                          innerRadius={60}\r\n                          outerRadius={100}\r\n                          paddingAngle={5}\r\n                          dataKey=\"value\"\r\n                        >\r\n                          {sourceChartData.map((entry, index) => (\r\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\r\n                          ))}\r\n                        </Pie>\r\n                        <Tooltip\r\n                          formatter={(value: any, name: any) => [`${value} (${sourceChartData.find(d => d.name === name)?.percentage}%)`, name]}\r\n                        />\r\n                      </PieChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"h-[300px] flex items-center justify-center text-muted-foreground\">\r\n                    {t('scanner_analytics.no_data')}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Confidence Distribution */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Zap className=\"w-5 h-5\" />\r\n                  {t('scanner_analytics.confidence_distribution')}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {metrics.confidenceDistribution.length > 0 ? (\r\n                  <div className=\"h-[300px]\">\r\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                      <BarChart data={metrics.confidenceDistribution}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"range\" />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n                        <Bar dataKey=\"count\" fill=\"hsl(var(--primary))\" />\r\n                      </BarChart>\r\n                    </ResponsiveContainer>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"h-[300px] flex items-center justify-center text-muted-foreground\">\r\n                    {t('scanner_analytics.no_data')}\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"trends\" className=\"space-y-4\">\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Activity className=\"w-5 h-5\" />\r\n                {t('scanner_analytics.daily_scan_trends')}\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {metrics.dailyScans.length > 0 ? (\r\n                <div className=\"h-[400px]\">\r\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                    <LineChart data={metrics.dailyScans}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"date\" />\r\n                      <YAxis />\r\n                      <Tooltip />\r\n                      <Line \r\n                        type=\"monotone\" \r\n                        dataKey=\"scans\" \r\n                        stroke=\"hsl(var(--primary))\" \r\n                        name={t('scanner_analytics.total_scans')}\r\n                        strokeWidth={2}\r\n                      />\r\n                      <Line \r\n                        type=\"monotone\" \r\n                        dataKey=\"success\" \r\n                        stroke=\"hsl(var(--success))\" \r\n                        name={t('scanner_analytics.successful_scans')}\r\n                        strokeWidth={2}\r\n                      />\r\n                    </LineChart>\r\n                  </ResponsiveContainer>\r\n                </div>\r\n              ) : (\r\n                <div className=\"h-[400px] flex items-center justify-center text-muted-foreground\">\r\n                  {t('scanner_analytics.no_data')}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"performance\" className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            {/* Performance Metrics */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Clock className=\"w-5 h-5\" />\r\n                  {t('scanner_analytics.performance_metrics')}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div>\r\n                  <div className=\"flex justify-between text-sm mb-2\">\r\n                    <span>{t('scanner_analytics.processing_speed')}</span>\r\n                    <span>{metrics.averageProcessingTime.toFixed(0)}ms</span>\r\n                  </div>\r\n                  <Progress \r\n                    value={Math.min(100, Math.max(0, 100 - (metrics.averageProcessingTime / 50)))} \r\n                    className=\"h-2\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <div className=\"flex justify-between text-sm mb-2\">\r\n                    <span>{t('scanner_analytics.accuracy_rate')}</span>\r\n                    <span>{(metrics.averageConfidence * 100).toFixed(1)}%</span>\r\n                  </div>\r\n                  <Progress \r\n                    value={metrics.averageConfidence * 100} \r\n                    className=\"h-2\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <div className=\"flex justify-between text-sm mb-2\">\r\n                    <span>{t('scanner_analytics.success_rate')}</span>\r\n                    <span>{successRate.toFixed(1)}%</span>\r\n                  </div>\r\n                  <Progress \r\n                    value={successRate} \r\n                    className=\"h-2\"\r\n                  />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Recommendations */}\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <AlertTriangle className=\"w-5 h-5\" />\r\n                  {t('scanner_analytics.recommendations')}\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                {successRate < 80 && (\r\n                  <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n                    <p className=\"text-sm text-yellow-800\">\r\n                      {t('scanner_analytics.recommendation_success_rate')}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n                \r\n                {metrics.averageProcessingTime > 3000 && (\r\n                  <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\r\n                    <p className=\"text-sm text-red-800\">\r\n                      {t('scanner_analytics.recommendation_processing_time')}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n                \r\n                {metrics.averageConfidence < 0.7 && (\r\n                  <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\r\n                    <p className=\"text-sm text-blue-800\">\r\n                      {t('scanner_analytics.recommendation_confidence')}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n\r\n                {successRate >= 90 && metrics.averageProcessingTime <= 2000 && (\r\n                  <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\r\n                    <p className=\"text-sm text-green-800\">\r\n                      {t('scanner_analytics.recommendation_excellent')}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\analytics\\VinScannerHistory.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1669,1672],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1669,1672],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7109,7112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7109,7112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7710,7713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7710,7713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { History, Search, Filter, Download, Trash2, CheckCircle, XCircle } from 'lucide-react';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { cn } from '@/lib/utils';\r\n\r\ninterface ScanHistoryEntry {\r\n  id: string;\r\n  vin: string;\r\n  timestamp: Date;\r\n  status: 'success' | 'failed';\r\n  confidence: number;\r\n  processingTime: number;\r\n  source: 'tesseract' | 'enhanced' | 'region-detected';\r\n  imageName?: string;\r\n}\r\n\r\ninterface VinScannerHistoryProps {\r\n  className?: string;\r\n}\r\n\r\nexport function VinScannerHistory({ className }: VinScannerHistoryProps) {\r\n  const { t } = useTranslation();\r\n  const [history, setHistory] = useState<ScanHistoryEntry[]>([]);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<'all' | 'success' | 'failed'>('all');\r\n  const [sourceFilter, setSourceFilter] = useState<'all' | 'tesseract' | 'enhanced' | 'region-detected'>('all');\r\n\r\n  // Load scan history from localStorage\r\n  useEffect(() => {\r\n    const storedHistory = localStorage.getItem('vinScannerHistory');\r\n    if (storedHistory) {\r\n      try {\r\n        const parsedHistory = JSON.parse(storedHistory).map((entry: any) => ({\r\n          ...entry,\r\n          timestamp: new Date(entry.timestamp)\r\n        }));\r\n        setHistory(parsedHistory);\r\n      } catch (error) {\r\n        console.error('Error loading scan history:', error);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Save scan history to localStorage\r\n  const saveHistory = (newHistory: ScanHistoryEntry[]) => {\r\n    try {\r\n      localStorage.setItem('vinScannerHistory', JSON.stringify(newHistory));\r\n      setHistory(newHistory);\r\n    } catch (error) {\r\n      console.error('Error saving scan history:', error);\r\n    }\r\n  };\r\n\r\n  // Add new scan entry\r\n  const addScanEntry = (entry: Omit<ScanHistoryEntry, 'id' | 'timestamp'>) => {\r\n    const newEntry: ScanHistoryEntry = {\r\n      ...entry,\r\n      id: Date.now().toString(),\r\n      timestamp: new Date()\r\n    };\r\n    const newHistory = [newEntry, ...history];\r\n    saveHistory(newHistory);\r\n  };\r\n\r\n  // Clear all history\r\n  const clearHistory = () => {\r\n    saveHistory([]);\r\n  };\r\n\r\n  // Clear failed scans only\r\n  const clearFailedScans = () => {\r\n    const successfulScans = history.filter(entry => entry.status === 'success');\r\n    saveHistory(successfulScans);\r\n  };\r\n\r\n  // Export history to JSON\r\n  const exportHistory = () => {\r\n    const dataStr = JSON.stringify(history, null, 2);\r\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n    const url = URL.createObjectURL(dataBlob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `vin-scan-history-${new Date().toISOString().split('T')[0]}.json`;\r\n    link.click();\r\n    URL.revokeObjectURL(url);\r\n  };\r\n\r\n  // Filter history based on search and filters\r\n  const filteredHistory = history.filter(entry => {\r\n    const matchesSearch = entry.vin.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n                         (entry.imageName && entry.imageName.toLowerCase().includes(searchQuery.toLowerCase()));\r\n    const matchesStatus = statusFilter === 'all' || entry.status === statusFilter;\r\n    const matchesSource = sourceFilter === 'all' || entry.source === sourceFilter;\r\n    \r\n    return matchesSearch && matchesStatus && matchesSource;\r\n  });\r\n\r\n  const getStatusBadge = (status: 'success' | 'failed') => {\r\n    return (\r\n      <Badge \r\n        variant={status === 'success' ? 'default' : 'destructive'}\r\n        className=\"flex items-center gap-1\"\r\n      >\r\n        {status === 'success' ? (\r\n          <CheckCircle className=\"w-3 h-3\" />\r\n        ) : (\r\n          <XCircle className=\"w-3 h-3\" />\r\n        )}\r\n        {t(`vin_scanner_history.status_${status}`)}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const getSourceBadge = (source: string) => {\r\n    const sourceColors = {\r\n      tesseract: 'bg-blue-100 text-blue-800',\r\n      enhanced: 'bg-green-100 text-green-800',\r\n      'region-detected': 'bg-purple-100 text-purple-800'\r\n    };\r\n    \r\n    return (\r\n      <Badge variant=\"outline\" className={sourceColors[source as keyof typeof sourceColors]}>\r\n        {t(`vin_scanner_history.source_${source}`)}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card className={cn(\"w-full\", className)}>\r\n      <CardHeader className=\"pb-4\">\r\n        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-4\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <History className=\"w-5 h-5 text-primary\" />\r\n            <CardTitle className=\"text-lg\">\r\n              {t('vin_scanner_history.title')}\r\n            </CardTitle>\r\n            <Badge variant=\"secondary\" className=\"ml-2\">\r\n              {filteredHistory.length}\r\n            </Badge>\r\n          </div>\r\n          \r\n          <div className=\"flex flex-col sm:flex-row gap-2\">\r\n            <Button\r\n              onClick={exportHistory}\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              disabled={history.length === 0}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Download className=\"w-4 h-4\" />\r\n              {t('vin_scanner_history.export')}\r\n            </Button>\r\n            <Button\r\n              onClick={clearFailedScans}\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              disabled={history.filter(h => h.status === 'failed').length === 0}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <XCircle className=\"w-4 h-4\" />\r\n              {t('vin_scanner_history.clear_failed')}\r\n            </Button>\r\n            <Button\r\n              onClick={clearHistory}\r\n              variant=\"destructive\"\r\n              size=\"sm\"\r\n              disabled={history.length === 0}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Trash2 className=\"w-4 h-4\" />\r\n              {t('vin_scanner_history.clear_all')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <div className=\"flex flex-col sm:flex-row gap-3\">\r\n          <div className=\"relative flex-1\">\r\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\r\n            <Input\r\n              placeholder={t('vin_scanner_history.search_placeholder')}\r\n              value={searchQuery}\r\n              onChange={(e) => setSearchQuery(e.target.value)}\r\n              className=\"pl-10\"\r\n            />\r\n          </div>\r\n          \r\n          <div className=\"flex gap-2\">\r\n            <Select value={statusFilter} onValueChange={(value: any) => setStatusFilter(value)}>\r\n              <SelectTrigger className=\"w-32\">\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">{t('vin_scanner_history.all_status')}</SelectItem>\r\n                <SelectItem value=\"success\">{t('vin_scanner_history.status_success')}</SelectItem>\r\n                <SelectItem value=\"failed\">{t('vin_scanner_history.status_failed')}</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n            \r\n            <Select value={sourceFilter} onValueChange={(value: any) => setSourceFilter(value)}>\r\n              <SelectTrigger className=\"w-36\">\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">{t('vin_scanner_history.all_sources')}</SelectItem>\r\n                <SelectItem value=\"tesseract\">{t('vin_scanner_history.source_tesseract')}</SelectItem>\r\n                <SelectItem value=\"enhanced\">{t('vin_scanner_history.source_enhanced')}</SelectItem>\r\n                <SelectItem value=\"region-detected\">{t('vin_scanner_history.source_region_detected')}</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"p-0\">\r\n        <ScrollArea className=\"h-[400px]\">\r\n          {filteredHistory.length === 0 ? (\r\n            <div className=\"flex flex-col items-center justify-center py-8 text-center\">\r\n              <History className=\"w-12 h-12 text-muted-foreground mb-4\" />\r\n              <p className=\"text-muted-foreground\">\r\n                {searchQuery || statusFilter !== 'all' || sourceFilter !== 'all' \r\n                  ? t('vin_scanner_history.no_results')\r\n                  : t('vin_scanner_history.no_history')\r\n                }\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"divide-y\">\r\n              {filteredHistory.map((entry, index) => (\r\n                <div key={entry.id} className=\"p-4 hover:bg-muted/50 transition-colors\">\r\n                  <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <div className=\"flex items-center gap-2 mb-2\">\r\n                        <code className=\"bg-muted px-2 py-1 rounded text-sm font-mono\">\r\n                          {entry.vin}\r\n                        </code>\r\n                        {getStatusBadge(entry.status)}\r\n                      </div>\r\n                      \r\n                      <div className=\"flex flex-wrap items-center gap-2 text-sm text-muted-foreground\">\r\n                        <span>{entry.timestamp.toLocaleString()}</span>\r\n                        <Separator orientation=\"vertical\" className=\"h-4\" />\r\n                        {getSourceBadge(entry.source)}\r\n                        <Separator orientation=\"vertical\" className=\"h-4\" />\r\n                        <span>{t('vin_scanner_history.confidence')}: {(entry.confidence * 100).toFixed(1)}%</span>\r\n                        <Separator orientation=\"vertical\" className=\"h-4\" />\r\n                        <span>{t('vin_scanner_history.processing_time')}: {entry.processingTime}ms</span>\r\n                      </div>\r\n                      \r\n                      {entry.imageName && (\r\n                        <p className=\"text-xs text-muted-foreground mt-1\">\r\n                          {t('vin_scanner_history.image')}: {entry.imageName}\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </ScrollArea>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\engines\\ImagePreprocessor.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":19,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":19,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\r\n\r\ninterface PreprocessingOptions {\r\n  enhanceContrast?: boolean;\r\n  denoiseImage?: boolean;\r\n  correctPerspective?: boolean;\r\n  cropToRegion?: { x: number; y: number; width: number; height: number };\r\n  targetSize?: { width: number; height: number };\r\n}\r\n\r\ninterface PreprocessorResult {\r\n  processedImage: Blob;\r\n  originalSize: { width: number; height: number };\r\n  processedSize: { width: number; height: number };\r\n  processingTime: number;\r\n  appliedFilters: string[];\r\n}\r\n\r\nexport function useImagePreprocessor() {\r\n  const canvasRef = useRef<HTMLCanvasElement>();\r\n\r\n  const createCanvas = useCallback((width: number, height: number): HTMLCanvasElement => {\r\n    if (!canvasRef.current) {\r\n      canvasRef.current = document.createElement('canvas');\r\n    }\r\n    canvasRef.current.width = width;\r\n    canvasRef.current.height = height;\r\n    return canvasRef.current;\r\n  }, []);\r\n\r\n  const enhanceContrast = useCallback((\r\n    imageData: ImageData,\r\n    canvas: HTMLCanvasElement\r\n  ): ImageData => {\r\n    const ctx = canvas.getContext('2d')!;\r\n    const data = imageData.data;\r\n    \r\n    // Simple contrast enhancement\r\n    const factor = 1.5;\r\n    for (let i = 0; i < data.length; i += 4) {\r\n      data[i] = Math.min(255, Math.max(0, (data[i] - 128) * factor + 128));     // Red\r\n      data[i + 1] = Math.min(255, Math.max(0, (data[i + 1] - 128) * factor + 128)); // Green  \r\n      data[i + 2] = Math.min(255, Math.max(0, (data[i + 2] - 128) * factor + 128)); // Blue\r\n    }\r\n    \r\n    return imageData;\r\n  }, []);\r\n\r\n  const denoiseImage = useCallback((\r\n    imageData: ImageData,\r\n    canvas: HTMLCanvasElement\r\n  ): ImageData => {\r\n    const ctx = canvas.getContext('2d')!;\r\n    const data = imageData.data;\r\n    const width = imageData.width;\r\n    const height = imageData.height;\r\n    \r\n    // Simple gaussian blur for noise reduction\r\n    const newData = new Uint8ClampedArray(data);\r\n    const kernel = [1, 2, 1, 2, 4, 2, 1, 2, 1];\r\n    const kernelSize = 3;\r\n    const half = Math.floor(kernelSize / 2);\r\n    \r\n    for (let y = half; y < height - half; y++) {\r\n      for (let x = half; x < width - half; x++) {\r\n        let r = 0, g = 0, b = 0, total = 0;\r\n        \r\n        for (let ky = 0; ky < kernelSize; ky++) {\r\n          for (let kx = 0; kx < kernelSize; kx++) {\r\n            const px = x + kx - half;\r\n            const py = y + ky - half;\r\n            const idx = (py * width + px) * 4;\r\n            const weight = kernel[ky * kernelSize + kx];\r\n            \r\n            r += data[idx] * weight;\r\n            g += data[idx + 1] * weight;\r\n            b += data[idx + 2] * weight;\r\n            total += weight;\r\n          }\r\n        }\r\n        \r\n        const idx = (y * width + x) * 4;\r\n        newData[idx] = r / total;\r\n        newData[idx + 1] = g / total;\r\n        newData[idx + 2] = b / total;\r\n        newData[idx + 3] = data[idx + 3];\r\n      }\r\n    }\r\n    \r\n    return new ImageData(newData, width, height);\r\n  }, []);\r\n\r\n  const correctPerspective = useCallback((\r\n    canvas: HTMLCanvasElement,\r\n    sourcePoints: number[][],\r\n    destPoints: number[][]\r\n  ): void => {\r\n    const ctx = canvas.getContext('2d')!;\r\n    \r\n    // Simple perspective correction using transform matrix\r\n    // In a real implementation, this would use OpenCV.js\r\n    const matrix = calculatePerspectiveMatrix(sourcePoints, destPoints);\r\n    ctx.setTransform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);\r\n  }, []);\r\n\r\n  const calculatePerspectiveMatrix = (\r\n    sourcePoints: number[][],\r\n    destPoints: number[][]\r\n  ): number[] => {\r\n    // Simplified matrix calculation\r\n    // In production, use a proper perspective transform library\r\n    return [1, 0, 0, 1, 0, 0]; // Identity matrix for now\r\n  };\r\n\r\n  const preprocessImage = useCallback(async (\r\n    imageFile: File | Blob,\r\n    options: PreprocessingOptions = {}\r\n  ): Promise<PreprocessorResult> => {\r\n    const startTime = Date.now();\r\n    const appliedFilters: string[] = [];\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        try {\r\n          const originalSize = { width: img.width, height: img.height };\r\n          \r\n          // Calculate target size\r\n          const targetSize = options.targetSize || {\r\n            width: Math.min(img.width, 1920),\r\n            height: Math.min(img.height, 1080)\r\n          };\r\n          \r\n          const canvas = createCanvas(targetSize.width, targetSize.height);\r\n          const ctx = canvas.getContext('2d')!;\r\n          \r\n          // Draw original image\r\n          ctx.drawImage(img, 0, 0, targetSize.width, targetSize.height);\r\n          \r\n          // Get image data for processing\r\n          let imageData = ctx.getImageData(0, 0, targetSize.width, targetSize.height);\r\n          \r\n          // Apply filters\r\n          if (options.enhanceContrast) {\r\n            imageData = enhanceContrast(imageData, canvas);\r\n            appliedFilters.push('contrast');\r\n          }\r\n          \r\n          if (options.denoiseImage) {\r\n            imageData = denoiseImage(imageData, canvas);\r\n            appliedFilters.push('denoise');\r\n          }\r\n          \r\n          if (options.correctPerspective && options.cropToRegion) {\r\n            // Apply perspective correction\r\n            appliedFilters.push('perspective');\r\n          }\r\n          \r\n          // Put processed data back\r\n          ctx.putImageData(imageData, 0, 0);\r\n          \r\n          // Crop to region if specified\r\n          if (options.cropToRegion) {\r\n            const { x, y, width, height } = options.cropToRegion;\r\n            const croppedImageData = ctx.getImageData(x, y, width, height);\r\n            const croppedCanvas = createCanvas(width, height);\r\n            const croppedCtx = croppedCanvas.getContext('2d')!;\r\n            croppedCtx.putImageData(croppedImageData, 0, 0);\r\n            appliedFilters.push('crop');\r\n          }\r\n          \r\n          // Convert to blob\r\n          canvas.toBlob((blob) => {\r\n            if (blob) {\r\n              const processingTime = Date.now() - startTime;\r\n              resolve({\r\n                processedImage: blob,\r\n                originalSize,\r\n                processedSize: targetSize,\r\n                processingTime,\r\n                appliedFilters\r\n              });\r\n            } else {\r\n              reject(new Error('Failed to create processed image blob'));\r\n            }\r\n          }, 'image/jpeg', 0.9);\r\n          \r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      };\r\n      \r\n      img.onerror = () => reject(new Error('Failed to load image'));\r\n      img.src = URL.createObjectURL(imageFile);\r\n    });\r\n  }, [createCanvas, enhanceContrast, denoiseImage]);\r\n\r\n  return {\r\n    preprocessImage,\r\n    enhanceContrast,\r\n    denoiseImage,\r\n    correctPerspective\r\n  };\r\n}\r\n\r\nexport function ImagePreprocessor() {\r\n  return null; // Hook-only component\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\engines\\MultiEngineOCR.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":15,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":15,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\n\r\ninterface OCRResult {\r\n  text: string;\r\n  confidence: number;\r\n  engine: 'tesseract' | 'mlkit' | 'enhanced';\r\n  processingTime: number;\r\n}\r\n\r\ninterface MultiEngineOCRProps {\r\n  imageData: Blob | File | string;\r\n  onProgress?: (progress: number) => void;\r\n}\r\n\r\nexport function useMultiEngineOCR() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [results, setResults] = useState<OCRResult[]>([]);\r\n\r\n  const processWithTesseract = useCallback(async (\r\n    imageData: Blob | File | string,\r\n    onProgress?: (progress: number) => void\r\n  ): Promise<OCRResult> => {\r\n    const startTime = Date.now();\r\n\r\n    // Dynamic import - only load tesseract.js when actually needed\r\n    const Tesseract = await import('tesseract.js');\r\n    const worker = await Tesseract.createWorker('eng');\r\n\r\n    try {\r\n      const { data } = await worker.recognize(\r\n        imageData,\r\n        'eng',\r\n        {\r\n          logger: (m) => {\r\n            if (m.status === 'recognizing text') {\r\n              onProgress?.(m.progress * 0.4); // Tesseract gets 40% of progress\r\n            }\r\n          }\r\n        }\r\n      );\r\n\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      return {\r\n        text: data.text,\r\n        confidence: data.confidence / 100,\r\n        engine: 'tesseract',\r\n        processingTime\r\n      };\r\n    } finally {\r\n      await worker.terminate();\r\n    }\r\n  }, []);\r\n\r\n  const processWithMLKit = useCallback(async (\r\n    imageData: Blob | File | string,\r\n    onProgress?: (progress: number) => void\r\n  ): Promise<OCRResult> => {\r\n    const startTime = Date.now();\r\n    \r\n    // Simulate ML Kit processing (would be replaced with actual ML Kit integration)\r\n    onProgress?.(0.6); // Start at 60% progress\r\n    \r\n    // Enhanced processing simulation\r\n    await new Promise(resolve => setTimeout(resolve, 800));\r\n    \r\n    onProgress?.(0.8);\r\n    \r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    // For now, return a mock result - would be replaced with actual ML Kit\r\n    return {\r\n      text: '', // Would contain ML Kit results\r\n      confidence: 0.85,\r\n      engine: 'mlkit',\r\n      processingTime\r\n    };\r\n  }, []);\r\n\r\n  const processWithEnhanced = useCallback(async (\r\n    imageData: Blob | File | string,\r\n    onProgress?: (progress: number) => void\r\n  ): Promise<OCRResult> => {\r\n    const startTime = Date.now();\r\n    \r\n    onProgress?.(0.85);\r\n    \r\n    // Enhanced processing with HuggingFace transformers\r\n    // This would use the OCR model from HuggingFace\r\n    await new Promise(resolve => setTimeout(resolve, 600));\r\n    \r\n    onProgress?.(1.0);\r\n    \r\n    const processingTime = Date.now() - startTime;\r\n    \r\n    return {\r\n      text: '', // Would contain enhanced OCR results\r\n      confidence: 0.92,\r\n      engine: 'enhanced',\r\n      processingTime\r\n    };\r\n  }, []);\r\n\r\n  const processMultiEngine = useCallback(async (\r\n    imageData: Blob | File | string,\r\n    onProgress?: (progress: number) => void\r\n  ): Promise<OCRResult[]> => {\r\n    setLoading(true);\r\n    const engineResults: OCRResult[] = [];\r\n\r\n    try {\r\n      // Process with all engines in parallel\r\n      const [tesseractResult, mlkitResult, enhancedResult] = await Promise.allSettled([\r\n        processWithTesseract(imageData, onProgress),\r\n        processWithMLKit(imageData, onProgress),\r\n        processWithEnhanced(imageData, onProgress)\r\n      ]);\r\n\r\n      if (tesseractResult.status === 'fulfilled') {\r\n        engineResults.push(tesseractResult.value);\r\n      }\r\n      \r\n      if (mlkitResult.status === 'fulfilled') {\r\n        engineResults.push(mlkitResult.value);\r\n      }\r\n      \r\n      if (enhancedResult.status === 'fulfilled') {\r\n        engineResults.push(enhancedResult.value);\r\n      }\r\n\r\n      // Sort by confidence\r\n      const sortedResults = engineResults.sort((a, b) => b.confidence - a.confidence);\r\n      setResults(sortedResults);\r\n      \r\n      return sortedResults;\r\n      \r\n    } catch (error) {\r\n      console.error('Multi-engine OCR error:', error);\r\n      return [];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [processWithTesseract, processWithMLKit, processWithEnhanced]);\r\n\r\n  return {\r\n    processMultiEngine,\r\n    loading,\r\n    results\r\n  };\r\n}\r\n\r\nexport function MultiEngineOCR({ imageData, onProgress }: MultiEngineOCRProps) {\r\n  const { processMultiEngine, loading, results } = useMultiEngineOCR();\r\n\r\n  return null; // This is a hook-only component\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\engines\\RegionDetector.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":18,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":18,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef } from 'react';\r\n\r\ninterface DetectedRegion {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  confidence: number;\r\n  type: 'vin_sticker' | 'vin_plate' | 'text_region';\r\n}\r\n\r\ninterface RegionDetectionOptions {\r\n  minConfidence?: number;\r\n  maxRegions?: number;\r\n  targetType?: 'vin_sticker' | 'vin_plate' | 'any';\r\n}\r\n\r\nexport function useRegionDetector() {\r\n  const canvasRef = useRef<HTMLCanvasElement>();\r\n\r\n  const createCanvas = useCallback((width: number, height: number): HTMLCanvasElement => {\r\n    if (!canvasRef.current) {\r\n      canvasRef.current = document.createElement('canvas');\r\n    }\r\n    canvasRef.current.width = width;\r\n    canvasRef.current.height = height;\r\n    return canvasRef.current;\r\n  }, []);\r\n\r\n  const detectEdges = useCallback((\r\n    imageData: ImageData,\r\n    canvas: HTMLCanvasElement\r\n  ): ImageData => {\r\n    const data = imageData.data;\r\n    const width = imageData.width;\r\n    const height = imageData.height;\r\n    const newData = new Uint8ClampedArray(data.length);\r\n\r\n    // Sobel edge detection\r\n    const sobelX = [-1, 0, 1, -2, 0, 2, -1, 0, 1];\r\n    const sobelY = [-1, -2, -1, 0, 0, 0, 1, 2, 1];\r\n\r\n    for (let y = 1; y < height - 1; y++) {\r\n      for (let x = 1; x < width - 1; x++) {\r\n        let pixelX = 0;\r\n        let pixelY = 0;\r\n\r\n        for (let i = -1; i <= 1; i++) {\r\n          for (let j = -1; j <= 1; j++) {\r\n            const idx = ((y + i) * width + (x + j)) * 4;\r\n            const gray = (data[idx] + data[idx + 1] + data[idx + 2]) / 3;\r\n            \r\n            pixelX += gray * sobelX[(i + 1) * 3 + (j + 1)];\r\n            pixelY += gray * sobelY[(i + 1) * 3 + (j + 1)];\r\n          }\r\n        }\r\n\r\n        const magnitude = Math.sqrt(pixelX * pixelX + pixelY * pixelY);\r\n        const idx = (y * width + x) * 4;\r\n        \r\n        newData[idx] = Math.min(255, magnitude);\r\n        newData[idx + 1] = Math.min(255, magnitude);\r\n        newData[idx + 2] = Math.min(255, magnitude);\r\n        newData[idx + 3] = 255;\r\n      }\r\n    }\r\n\r\n    return new ImageData(newData, width, height);\r\n  }, []);\r\n\r\n  const findRectangularRegions = useCallback((\r\n    edgeData: ImageData,\r\n    minArea: number = 1000\r\n  ): DetectedRegion[] => {\r\n    const data = edgeData.data;\r\n    const width = edgeData.width;\r\n    const height = edgeData.height;\r\n    const regions: DetectedRegion[] = [];\r\n\r\n    // Simple rectangle detection using contours\r\n    const threshold = 128;\r\n    const visited = new Set<number>();\r\n\r\n    for (let y = 10; y < height - 10; y += 5) {\r\n      for (let x = 10; x < width - 10; x += 5) {\r\n        const idx = (y * width + x) * 4;\r\n        const intensity = data[idx];\r\n\r\n        if (intensity > threshold && !visited.has(idx)) {\r\n          const region = floodFill(data, width, height, x, y, threshold, visited);\r\n          \r\n          if (region && region.width * region.height > minArea) {\r\n            // Check if region looks like a VIN sticker (rectangular, appropriate aspect ratio)\r\n            const aspectRatio = region.width / region.height;\r\n            \r\n            let confidence = 0.3;\r\n            let type: DetectedRegion['type'] = 'text_region';\r\n            \r\n            // VIN stickers are typically rectangular with aspect ratio between 2:1 and 4:1\r\n            if (aspectRatio >= 2 && aspectRatio <= 4 && region.height >= 30) {\r\n              confidence += 0.4;\r\n              type = 'vin_sticker';\r\n            }\r\n            \r\n            // VIN plates are more square-ish\r\n            if (aspectRatio >= 1 && aspectRatio <= 2 && region.width >= 100) {\r\n              confidence += 0.3;\r\n              type = 'vin_plate';\r\n            }\r\n\r\n            regions.push({\r\n              ...region,\r\n              confidence,\r\n              type\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return regions.sort((a, b) => b.confidence - a.confidence);\r\n  }, []);\r\n\r\n  const floodFill = (\r\n    data: Uint8ClampedArray,\r\n    width: number,\r\n    height: number,\r\n    startX: number,\r\n    startY: number,\r\n    threshold: number,\r\n    visited: Set<number>\r\n  ): DetectedRegion | null => {\r\n    const stack = [{ x: startX, y: startY }];\r\n    const pixels: { x: number; y: number }[] = [];\r\n    let minX = startX, maxX = startX;\r\n    let minY = startY, maxY = startY;\r\n\r\n    while (stack.length > 0) {\r\n      const { x, y } = stack.pop()!;\r\n      \r\n      if (x < 0 || x >= width || y < 0 || y >= height) continue;\r\n      \r\n      const idx = (y * width + x) * 4;\r\n      if (visited.has(idx)) continue;\r\n      \r\n      const intensity = data[idx];\r\n      if (intensity < threshold) continue;\r\n\r\n      visited.add(idx);\r\n      pixels.push({ x, y });\r\n\r\n      minX = Math.min(minX, x);\r\n      maxX = Math.max(maxX, x);\r\n      minY = Math.min(minY, y);\r\n      maxY = Math.max(maxY, y);\r\n\r\n      // Add neighbors\r\n      stack.push(\r\n        { x: x + 1, y },\r\n        { x: x - 1, y },\r\n        { x, y: y + 1 },\r\n        { x, y: y - 1 }\r\n      );\r\n\r\n      // Limit flood fill to prevent excessive processing\r\n      if (pixels.length > 10000) break;\r\n    }\r\n\r\n    if (pixels.length < 50) return null;\r\n\r\n    return {\r\n      x: minX,\r\n      y: minY,\r\n      width: maxX - minX,\r\n      height: maxY - minY,\r\n      confidence: 0,\r\n      type: 'text_region'\r\n    };\r\n  };\r\n\r\n  const detectVinStickerTemplate = useCallback((\r\n    imageData: ImageData\r\n  ): DetectedRegion[] => {\r\n    // Template matching for common VIN sticker patterns\r\n    const templates = [\r\n      { width: 200, height: 50 }, // Common VIN sticker size\r\n      { width: 150, height: 40 },\r\n      { width: 250, height: 60 }\r\n    ];\r\n\r\n    const regions: DetectedRegion[] = [];\r\n    const data = imageData.data;\r\n    const width = imageData.width;\r\n    const height = imageData.height;\r\n\r\n    for (const template of templates) {\r\n      for (let y = 0; y <= height - template.height; y += 10) {\r\n        for (let x = 0; x <= width - template.width; x += 10) {\r\n          const confidence = calculateTemplateMatch(\r\n            data,\r\n            width,\r\n            height,\r\n            x,\r\n            y,\r\n            template.width,\r\n            template.height\r\n          );\r\n\r\n          if (confidence > 0.6) {\r\n            regions.push({\r\n              x,\r\n              y,\r\n              width: template.width,\r\n              height: template.height,\r\n              confidence,\r\n              type: 'vin_sticker'\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return regions;\r\n  }, []);\r\n\r\n  const calculateTemplateMatch = (\r\n    data: Uint8ClampedArray,\r\n    width: number,\r\n    height: number,\r\n    startX: number,\r\n    startY: number,\r\n    templateWidth: number,\r\n    templateHeight: number\r\n  ): number => {\r\n    // Simplified template matching based on edge density and rectangular shape\r\n    let edgeCount = 0;\r\n    let totalPixels = 0;\r\n\r\n    // Check edges of the rectangular region\r\n    for (let y = startY; y < startY + templateHeight; y++) {\r\n      for (let x = startX; x < startX + templateWidth; x++) {\r\n        if (x >= width || y >= height) continue;\r\n        \r\n        const idx = (y * width + x) * 4;\r\n        const intensity = (data[idx] + data[idx + 1] + data[idx + 2]) / 3;\r\n        \r\n        // Check if this is an edge pixel\r\n        const isEdge = intensity < 100 || intensity > 200;\r\n        if (isEdge) edgeCount++;\r\n        totalPixels++;\r\n      }\r\n    }\r\n\r\n    // Calculate confidence based on edge density and shape\r\n    const edgeDensity = edgeCount / totalPixels;\r\n    const aspectRatio = templateWidth / templateHeight;\r\n    \r\n    let confidence = edgeDensity * 0.6;\r\n    \r\n    // Prefer VIN sticker aspect ratios\r\n    if (aspectRatio >= 2 && aspectRatio <= 4) {\r\n      confidence += 0.3;\r\n    }\r\n    \r\n    return Math.min(1, confidence);\r\n  };\r\n\r\n  const detectTextRegions = useCallback(async (\r\n    imageFile: File | Blob,\r\n    options: RegionDetectionOptions = {}\r\n  ): Promise<DetectedRegion[]> => {\r\n    const {\r\n      minConfidence = 0.5,\r\n      maxRegions = 10,\r\n      targetType = 'any'\r\n    } = options;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n      \r\n      img.onload = () => {\r\n        try {\r\n          const canvas = createCanvas(img.width, img.height);\r\n          const ctx = canvas.getContext('2d')!;\r\n          \r\n          // Draw image\r\n          ctx.drawImage(img, 0, 0);\r\n          const imageData = ctx.getImageData(0, 0, img.width, img.height);\r\n          \r\n          // Detect edges\r\n          const edgeData = detectEdges(imageData, canvas);\r\n          \r\n          // Find rectangular regions\r\n          const rectangularRegions = findRectangularRegions(edgeData);\r\n          \r\n          // Detect VIN sticker templates\r\n          const templateRegions = detectVinStickerTemplate(imageData);\r\n          \r\n          // Combine and filter results\r\n          const allRegions = [...rectangularRegions, ...templateRegions];\r\n          \r\n          const filteredRegions = allRegions\r\n            .filter(region => {\r\n              if (region.confidence < minConfidence) return false;\r\n              if (targetType !== 'any' && region.type !== targetType) return false;\r\n              return true;\r\n            })\r\n            .sort((a, b) => b.confidence - a.confidence)\r\n            .slice(0, maxRegions);\r\n\r\n          resolve(filteredRegions);\r\n          \r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      };\r\n      \r\n      img.onerror = () => reject(new Error('Failed to load image'));\r\n      img.src = URL.createObjectURL(imageFile);\r\n    });\r\n  }, [createCanvas, detectEdges, findRectangularRegions, detectVinStickerTemplate]);\r\n\r\n  return {\r\n    detectTextRegions,\r\n    detectEdges,\r\n    findRectangularRegions,\r\n    detectVinStickerTemplate\r\n  };\r\n}\r\n\r\nexport function RegionDetector() {\r\n  return null; // Hook-only component\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\engines\\VinValidator.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":24,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":24,"endColumn":32},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'vinWeights' array makes the dependencies of useCallback Hook (at line 73) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'vinWeights' in its own useMemo() Hook.","line":27,"column":9,"nodeType":"VariableDeclarator","endLine":27,"endColumn":74},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'vinValues' object makes the dependencies of useCallback Hook (at line 73) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'vinValues' in its own useMemo() Hook.","line":28,"column":9,"nodeType":"VariableDeclarator","endLine":33,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'yearCodes' object makes the dependencies of useCallback Hook (at line 119) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'yearCodes' in its own useMemo() Hook.","line":35,"column":9,"nodeType":"VariableDeclarator","endLine":40,"endColumn":4},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'manufacturerCodes' object makes the dependencies of useCallback Hook (at line 126) change on every render. Move it inside the useCallback callback. Alternatively, wrap the initialization of 'manufacturerCodes' in its own useMemo() Hook.","line":42,"column":9,"nodeType":"VariableDeclarator","endLine":48,"endColumn":4}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface VinValidationResult {\r\n  isValid: boolean;\r\n  confidence: number;\r\n  checkDigitValid: boolean;\r\n  year?: number;\r\n  manufacturer?: string;\r\n  errors: string[];\r\n  warnings: string[];\r\n  suggestions: string[];\r\n}\r\n\r\ninterface VinComponents {\r\n  wmi: string;           // World Manufacturer Identifier (positions 1-3)\r\n  vds: string;           // Vehicle Descriptor Section (positions 4-9)\r\n  checkDigit: string;    // Check digit (position 9)\r\n  modelYear: string;     // Model year (position 10)\r\n  plantCode: string;     // Plant code (position 11)\r\n  serialNumber: string;  // Serial number (positions 12-17)\r\n}\r\n\r\nexport function useVinValidator() {\r\n  const { t } = useTranslation();\r\n\r\n  const vinWeights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2];\r\n  const vinValues: { [key: string]: number } = {\r\n    'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8,\r\n    'J': 1, 'K': 2, 'L': 3, 'M': 4, 'N': 5, 'P': 7, 'R': 9,\r\n    'S': 2, 'T': 3, 'U': 4, 'V': 5, 'W': 6, 'X': 7, 'Y': 8, 'Z': 9,\r\n    '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9\r\n  };\r\n\r\n  const yearCodes: { [key: string]: number } = {\r\n    'A': 1980, 'B': 1981, 'C': 1982, 'D': 1983, 'E': 1984, 'F': 1985, 'G': 1986, 'H': 1987,\r\n    'J': 1988, 'K': 1989, 'L': 1990, 'M': 1991, 'N': 1992, 'P': 1993, 'R': 1994, 'S': 1995,\r\n    'T': 1996, 'V': 1997, 'W': 1998, 'X': 1999, 'Y': 2000, '1': 2001, '2': 2002, '3': 2003,\r\n    '4': 2004, '5': 2005, '6': 2006, '7': 2007, '8': 2008, '9': 2009\r\n  };\r\n\r\n  const manufacturerCodes: { [key: string]: string } = {\r\n    '1': 'United States', '4': 'United States', '5': 'United States',\r\n    '2': 'Canada', '3': 'Mexico',\r\n    'J': 'Japan', 'K': 'South Korea', 'L': 'China',\r\n    'S': 'United Kingdom', 'T': 'Czechoslovakia', 'V': 'France',\r\n    'W': 'Germany', 'Y': 'Sweden', 'Z': 'Italy'\r\n  };\r\n\r\n  const parseVinComponents = useCallback((vin: string): VinComponents => {\r\n    return {\r\n      wmi: vin.substring(0, 3),\r\n      vds: vin.substring(3, 9),\r\n      checkDigit: vin.substring(8, 9),\r\n      modelYear: vin.substring(9, 10),\r\n      plantCode: vin.substring(10, 11),\r\n      serialNumber: vin.substring(11, 17)\r\n    };\r\n  }, []);\r\n\r\n  const calculateCheckDigit = useCallback((vin: string): string => {\r\n    let sum = 0;\r\n    \r\n    for (let i = 0; i < 17; i++) {\r\n      if (i !== 8) { // Skip check digit position\r\n        const value = vinValues[vin[i]] || 0;\r\n        sum += value * vinWeights[i];\r\n      }\r\n    }\r\n    \r\n    const checkDigit = sum % 11;\r\n    return checkDigit === 10 ? 'X' : checkDigit.toString();\r\n  }, [vinValues, vinWeights]);\r\n\r\n  const validateBasicFormat = useCallback((vin: string): { valid: boolean; errors: string[] } => {\r\n    const errors: string[] = [];\r\n    \r\n    // Check length\r\n    if (vin.length !== 17) {\r\n      errors.push(t('vin_validator.errors.invalid_length'));\r\n      return { valid: false, errors };\r\n    }\r\n    \r\n    // Check for invalid characters (I, O, Q not allowed)\r\n    if (!/^[A-HJ-NPR-Z0-9]{17}$/.test(vin)) {\r\n      if (/[IOQ]/.test(vin)) {\r\n        errors.push(t('vin_validator.errors.invalid_characters_ioq'));\r\n      } else {\r\n        errors.push(t('vin_validator.errors.invalid_characters'));\r\n      }\r\n      return { valid: false, errors };\r\n    }\r\n    \r\n    return { valid: true, errors: [] };\r\n  }, [t]);\r\n\r\n  const validateCheckDigit = useCallback((vin: string): boolean => {\r\n    const expectedCheckDigit = calculateCheckDigit(vin);\r\n    return vin[8] === expectedCheckDigit;\r\n  }, [calculateCheckDigit]);\r\n\r\n  const getModelYear = useCallback((vin: string): number | undefined => {\r\n    const yearChar = vin[9];\r\n    const baseYear = yearCodes[yearChar];\r\n    \r\n    if (!baseYear) return undefined;\r\n    \r\n    // Determine if it's the first or second cycle (30-year cycles)\r\n    const currentYear = new Date().getFullYear();\r\n    const year1 = baseYear;\r\n    const year2 = baseYear + 30;\r\n    \r\n    // Choose the year closest to current year that makes sense\r\n    if (Math.abs(currentYear - year1) <= Math.abs(currentYear - year2)) {\r\n      return year1;\r\n    } else {\r\n      return year2;\r\n    }\r\n  }, [yearCodes]);\r\n\r\n  const getManufacturer = useCallback((vin: string): string | undefined => {\r\n    const wmi = vin.substring(0, 3);\r\n    const firstChar = wmi[0];\r\n\r\n    return manufacturerCodes[firstChar];\r\n  }, [manufacturerCodes]);\r\n\r\n  const validateVin = useCallback((vin: string): VinValidationResult => {\r\n    const cleanVin = vin.toUpperCase().trim();\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n    const suggestions: string[] = [];\r\n    \r\n    // Basic format validation\r\n    const basicValidation = validateBasicFormat(cleanVin);\r\n    if (!basicValidation.valid) {\r\n      return {\r\n        isValid: false,\r\n        confidence: 0,\r\n        checkDigitValid: false,\r\n        errors: basicValidation.errors,\r\n        warnings,\r\n        suggestions\r\n      };\r\n    }\r\n    \r\n    // Check digit validation\r\n    const checkDigitValid = validateCheckDigit(cleanVin);\r\n    if (!checkDigitValid) {\r\n      errors.push(t('vin_validator.errors.invalid_check_digit'));\r\n    }\r\n    \r\n    // Parse components\r\n    const components = parseVinComponents(cleanVin);\r\n    const year = getModelYear(cleanVin);\r\n    const manufacturer = getManufacturer(cleanVin);\r\n    \r\n    // Additional validations and warnings\r\n    if (!year) {\r\n      warnings.push(t('vin_validator.warnings.unknown_year'));\r\n    } else if (year > new Date().getFullYear() + 1) {\r\n      warnings.push(t('vin_validator.warnings.future_year'));\r\n    } else if (year < 1980) {\r\n      warnings.push(t('vin_validator.warnings.old_year'));\r\n    }\r\n    \r\n    if (!manufacturer) {\r\n      warnings.push(t('vin_validator.warnings.unknown_manufacturer'));\r\n    }\r\n    \r\n    // Calculate confidence score\r\n    let confidence = 0.5; // Base confidence\r\n    \r\n    if (checkDigitValid) confidence += 0.3;\r\n    if (year && year >= 1980 && year <= new Date().getFullYear() + 1) confidence += 0.1;\r\n    if (manufacturer) confidence += 0.1;\r\n    \r\n    // Suggestions for common issues\r\n    if (!checkDigitValid) {\r\n      const expectedCheckDigit = calculateCheckDigit(cleanVin);\r\n      suggestions.push(t('vin_validator.suggestions.check_digit_should_be', { digit: expectedCheckDigit }));\r\n    }\r\n    \r\n    // Check for common OCR errors\r\n    const commonSubstitutions = [\r\n      { from: '0', to: 'O' },\r\n      { from: '1', to: 'I' },\r\n      { from: '5', to: 'S' },\r\n      { from: '8', to: 'B' },\r\n      { from: '6', to: 'G' }\r\n    ];\r\n    \r\n    for (const sub of commonSubstitutions) {\r\n      if (cleanVin.includes(sub.from)) {\r\n        const suggested = cleanVin.replace(new RegExp(sub.from, 'g'), sub.to);\r\n        if (validateCheckDigit(suggested)) {\r\n          suggestions.push(t('vin_validator.suggestions.try_substitution', { \r\n            from: sub.from, \r\n            to: sub.to,\r\n            vin: suggested \r\n          }));\r\n        }\r\n      }\r\n    }\r\n    \r\n    const isValid = errors.length === 0;\r\n    \r\n    return {\r\n      isValid,\r\n      confidence: Math.min(1, confidence),\r\n      checkDigitValid,\r\n      year,\r\n      manufacturer,\r\n      errors,\r\n      warnings,\r\n      suggestions\r\n    };\r\n  }, [validateBasicFormat, validateCheckDigit, parseVinComponents, getModelYear, getManufacturer, calculateCheckDigit, t]);\r\n\r\n  const validateMultipleVins = useCallback((vins: string[]): VinValidationResult[] => {\r\n    return vins.map(validateVin);\r\n  }, [validateVin]);\r\n\r\n  const suggestCorrections = useCallback((vin: string): string[] => {\r\n    const suggestions: string[] = [];\r\n    const cleanVin = vin.toUpperCase().trim();\r\n    \r\n    // Common OCR corrections\r\n    const corrections = [\r\n      { pattern: /O/g, replacement: '0' },\r\n      { pattern: /I/g, replacement: '1' },\r\n      { pattern: /Q/g, replacement: '0' },\r\n      { pattern: /[^A-HJ-NPR-Z0-9]/g, replacement: '' }\r\n    ];\r\n    \r\n    let corrected = cleanVin;\r\n    for (const correction of corrections) {\r\n      corrected = corrected.replace(correction.pattern, correction.replacement);\r\n    }\r\n    \r\n    if (corrected !== cleanVin && validateVin(corrected).isValid) {\r\n      suggestions.push(corrected);\r\n    }\r\n    \r\n    return suggestions;\r\n  }, [validateVin]);\r\n\r\n  return {\r\n    validateVin,\r\n    validateMultipleVins,\r\n    suggestCorrections,\r\n    calculateCheckDigit,\r\n    parseVinComponents,\r\n    getModelYear,\r\n    getManufacturer\r\n  };\r\n}\r\n\r\nexport function VinValidator() {\r\n  return null; // Hook-only component\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\enhanced\\VinAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\enhanced\\VinHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\enhanced\\VinStatistics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1787,1790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1787,1790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1979,1982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1979,1982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2203,2206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2203,2206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2327,2330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2327,2330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2481,2484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2481,2484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2493,2496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2493,2496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2759,2762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2759,2762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":95,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2909,2912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2909,2912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3289,3292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3289,3292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3548,3551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3548,3551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  BarChart3, \r\n  Target, \r\n  Clock, \r\n  CheckCircle, \r\n  XCircle,\r\n  Camera,\r\n  Upload,\r\n  Edit3,\r\n  TrendingUp,\r\n  Calendar\r\n} from 'lucide-react';\r\nimport { format, isToday, isThisWeek, subDays } from 'date-fns';\r\n\r\ninterface VinStats {\r\n  totalScans: number;\r\n  validScans: number;\r\n  invalidScans: number;\r\n  averageConfidence: number;\r\n  scansToday: number;\r\n  scansThisWeek: number;\r\n  sourceBreakdown: {\r\n    camera: number;\r\n    upload: number;\r\n    manual: number;\r\n  };\r\n  averageProcessingTime: number;\r\n  successRate: number;\r\n  dailyTrend: Array<{\r\n    date: string;\r\n    scans: number;\r\n    success: number;\r\n  }>;\r\n}\r\n\r\ninterface VinStatisticsProps {\r\n  className?: string;\r\n  refreshTrigger?: number;\r\n}\r\n\r\nexport function VinStatistics({ className, refreshTrigger }: VinStatisticsProps) {\r\n  const { t } = useTranslation();\r\n  const [stats, setStats] = useState<VinStats>({\r\n    totalScans: 0,\r\n    validScans: 0,\r\n    invalidScans: 0,\r\n    averageConfidence: 0,\r\n    scansToday: 0,\r\n    scansThisWeek: 0,\r\n    sourceBreakdown: { camera: 0, upload: 0, manual: 0 },\r\n    averageProcessingTime: 0,\r\n    successRate: 0,\r\n    dailyTrend: []\r\n  });\r\n\r\n  const calculateStats = () => {\r\n    try {\r\n      const storedHistory = localStorage.getItem('vinScannerHistory');\r\n      if (!storedHistory) return;\r\n\r\n      const history = JSON.parse(storedHistory);\r\n      if (!Array.isArray(history) || history.length === 0) return;\r\n\r\n      const totalScans = history.length;\r\n      const validScans = history.filter((entry: any) => entry.isValid).length;\r\n      const invalidScans = totalScans - validScans;\r\n\r\n      // Calculate average confidence\r\n      const totalConfidence = history.reduce((sum: number, entry: any) => sum + (entry.confidence || 0), 0);\r\n      const averageConfidence = totalScans > 0 ? totalConfidence / totalScans : 0;\r\n\r\n      // Calculate scans today and this week\r\n      const scansToday = history.filter((entry: any) => \r\n        isToday(new Date(entry.scannedAt))\r\n      ).length;\r\n\r\n      const scansThisWeek = history.filter((entry: any) => \r\n        isThisWeek(new Date(entry.scannedAt))\r\n      ).length;\r\n\r\n      // Source breakdown\r\n      const sourceBreakdown = history.reduce((acc: any, entry: any) => {\r\n        const source = entry.source || 'manual';\r\n        acc[source] = (acc[source] || 0) + 1;\r\n        return acc;\r\n      }, { camera: 0, upload: 0, manual: 0 });\r\n\r\n      // Average processing time\r\n      const entriesWithTime = history.filter((entry: any) => entry.processingTime);\r\n      const averageProcessingTime = entriesWithTime.length > 0\r\n        ? entriesWithTime.reduce((sum: number, entry: any) => sum + entry.processingTime, 0) / entriesWithTime.length\r\n        : 0;\r\n\r\n      // Success rate\r\n      const successRate = totalScans > 0 ? (validScans / totalScans) * 100 : 0;\r\n\r\n      // Daily trend (last 7 days)\r\n      const last7Days = Array.from({ length: 7 }, (_, i) => {\r\n        const date = subDays(new Date(), i);\r\n        const dayScans = history.filter((entry: any) => \r\n          format(new Date(entry.scannedAt), 'yyyy-MM-dd') === format(date, 'yyyy-MM-dd')\r\n        );\r\n        \r\n        return {\r\n          date: format(date, 'MMM dd'),\r\n          scans: dayScans.length,\r\n          success: dayScans.filter((entry: any) => entry.isValid).length\r\n        };\r\n      }).reverse();\r\n\r\n      setStats({\r\n        totalScans,\r\n        validScans,\r\n        invalidScans,\r\n        averageConfidence,\r\n        scansToday,\r\n        scansThisWeek,\r\n        sourceBreakdown,\r\n        averageProcessingTime,\r\n        successRate,\r\n        dailyTrend: last7Days\r\n      });\r\n    } catch (error) {\r\n      console.error('Error calculating VIN statistics:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    calculateStats();\r\n  }, [refreshTrigger]);\r\n\r\n  useEffect(() => {\r\n    calculateStats();\r\n\r\n    // Listen for storage changes\r\n    const handleStorageChange = (e: StorageEvent) => {\r\n      if (e.key === 'vinScannerHistory') {\r\n        calculateStats();\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, []);\r\n\r\n  const getSourceIcon = (source: string) => {\r\n    switch (source) {\r\n      case 'camera': return Camera;\r\n      case 'upload': return Upload;\r\n      case 'manual': return Edit3;\r\n      default: return Edit3;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <BarChart3 className=\"w-5 h-5\" />\r\n          VIN Scanner Statistics\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Performance metrics and usage analytics\r\n        </CardDescription>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"space-y-6\">\r\n        {/* Overview Cards */}\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n          <div className=\"text-center p-4 bg-primary/5 rounded-lg border\">\r\n            <div className=\"text-2xl font-bold text-primary\">{stats.totalScans}</div>\r\n            <div className=\"text-sm text-muted-foreground\">Total Scans</div>\r\n          </div>\r\n          \r\n          <div className=\"text-center p-4 bg-success/5 rounded-lg border\">\r\n            <div className=\"text-2xl font-bold text-success\">{stats.validScans}</div>\r\n            <div className=\"text-sm text-muted-foreground\">Valid VINs</div>\r\n          </div>\r\n          \r\n          <div className=\"text-center p-4 bg-muted/50 rounded-lg border\">\r\n            <div className=\"text-2xl font-bold\">{stats.scansToday}</div>\r\n            <div className=\"text-sm text-muted-foreground\">Today</div>\r\n          </div>\r\n          \r\n          <div className=\"text-center p-4 bg-muted/50 rounded-lg border\">\r\n            <div className=\"text-2xl font-bold\">{Math.round(stats.successRate)}%</div>\r\n            <div className=\"text-sm text-muted-foreground\">Success Rate</div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Success Rate Progress */}\r\n        <div className=\"space-y-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Target className=\"w-4 h-4\" />\r\n              <span className=\"font-medium\">Success Rate</span>\r\n            </div>\r\n            <span className=\"text-sm text-muted-foreground\">\r\n              {stats.validScans}/{stats.totalScans} valid\r\n            </span>\r\n          </div>\r\n          <Progress value={stats.successRate} className=\"h-3\" />\r\n        </div>\r\n\r\n        {/* Average Confidence */}\r\n        <div className=\"space-y-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <CheckCircle className=\"w-4 h-4\" />\r\n              <span className=\"font-medium\">Average Confidence</span>\r\n            </div>\r\n            <span className=\"text-sm text-muted-foreground\">\r\n              {Math.round(stats.averageConfidence * 100)}%\r\n            </span>\r\n          </div>\r\n          <Progress value={stats.averageConfidence * 100} className=\"h-3\" />\r\n        </div>\r\n\r\n        {/* Source Breakdown */}\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center gap-2 font-medium\">\r\n            <Camera className=\"w-4 h-4\" />\r\n            Scan Sources\r\n          </div>\r\n          \r\n          <div className=\"space-y-3\">\r\n            {Object.entries(stats.sourceBreakdown).map(([source, count]) => {\r\n              const Icon = getSourceIcon(source);\r\n              const percentage = stats.totalScans > 0 ? (count / stats.totalScans) * 100 : 0;\r\n              \r\n              return (\r\n                <div key={source}>\r\n                  <div className=\"flex items-center justify-between mb-1\">\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                      <Icon className=\"w-4 h-4\" />\r\n                      <span className=\"capitalize\">{source}</span>\r\n                    </div>\r\n                    <span className=\"text-sm text-muted-foreground\">\r\n                      {count} ({Math.round(percentage)}%)\r\n                    </span>\r\n                  </div>\r\n                  <Progress value={percentage} className=\"h-2\" />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Performance Metrics */}\r\n        <div className=\"grid grid-cols-2 gap-4\">\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center gap-2 text-sm font-medium\">\r\n              <Clock className=\"w-4 h-4\" />\r\n              Avg. Processing Time\r\n            </div>\r\n            <div className=\"text-lg font-bold\">\r\n              {stats.averageProcessingTime > 0 ? `${Math.round(stats.averageProcessingTime)}ms` : 'N/A'}\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center gap-2 text-sm font-medium\">\r\n              <Calendar className=\"w-4 h-4\" />\r\n              This Week\r\n            </div>\r\n            <div className=\"text-lg font-bold\">\r\n              {stats.scansThisWeek} scans\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Weekly Trend */}\r\n        {stats.dailyTrend.some(day => day.scans > 0) && (\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center gap-2 font-medium\">\r\n              <TrendingUp className=\"w-4 h-4\" />\r\n              Daily Activity (Last 7 Days)\r\n            </div>\r\n            \r\n            <div className=\"grid grid-cols-7 gap-2\">\r\n              {stats.dailyTrend.map((day, index) => {\r\n                const maxScans = Math.max(...stats.dailyTrend.map(d => d.scans));\r\n                const height = maxScans > 0 ? (day.scans / maxScans) * 100 : 0;\r\n                \r\n                return (\r\n                  <div key={index} className=\"text-center\">\r\n                    <div className=\"h-16 flex items-end justify-center mb-1\">\r\n                      <div\r\n                        className=\"w-4 bg-primary rounded-t transition-all duration-300\"\r\n                        style={{ height: `${Math.max(height, 4)}%` }}\r\n                        title={`${day.date}: ${day.scans} scans, ${day.success} valid`}\r\n                      />\r\n                    </div>\r\n                    <div className=\"text-xs text-muted-foreground\">\r\n                      {day.date.split(' ')[1]}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {stats.totalScans === 0 && (\r\n          <div className=\"text-center py-8 text-muted-foreground\">\r\n            <BarChart3 className=\"mx-auto h-12 w-12 mb-4\" />\r\n            <p>No scanning data available yet</p>\r\n            <p className=\"text-sm\">Start scanning VINs to see statistics</p>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\modern\\ModernVinScanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\modern\\ScannerOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\modern\\VinConfidenceIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\modern\\VinStickerDetector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\scanner\\modern\\VinTargetingGuides.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\stock\\StockAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\stock\\StockCSVUploader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[919,922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[919,922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1015,1018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1015,1018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Separator } from '@/components/ui/separator';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useStockManagement } from '@/hooks/useStockManagement';\r\nimport { \r\n  Upload, \r\n  FileText, \r\n  AlertCircle, \r\n  CheckCircle, \r\n  Download,\r\n  Trash2,\r\n  Play,\r\n  X\r\n} from 'lucide-react';\r\n\r\ninterface UploadFile {\r\n  file: File;\r\n  id: string;\r\n  status: 'pending' | 'uploading' | 'success' | 'error';\r\n  progress: number;\r\n  error?: string;\r\n  preview?: any[];\r\n  metadata?: {\r\n    separator?: string;\r\n    timestamp?: Date | null;\r\n  };\r\n  result?: any;\r\n}\r\n\r\ninterface StockCSVUploaderProps {\r\n  dealerId?: number;\r\n}\r\n\r\nexport const StockCSVUploader: React.FC<StockCSVUploaderProps> = ({ dealerId }) => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const { uploadCSV, loading } = useStockManagement(dealerId);\r\n  const [uploadFiles, setUploadFiles] = useState<UploadFile[]>([]);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n\r\n  const onDrop = useCallback((acceptedFiles: File[]) => {\r\n    const newFiles: UploadFile[] = acceptedFiles.map(file => ({\r\n      file,\r\n      id: `${file.name}-${Date.now()}`,\r\n      status: 'pending',\r\n      progress: 0\r\n    }));\r\n    \r\n    setUploadFiles(prev => [...prev, ...newFiles]);\r\n    \r\n    // Auto-preview first file\r\n    if (newFiles.length > 0) {\r\n      previewFile(newFiles[0]);\r\n    }\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\r\n    onDrop,\r\n    accept: {\r\n      'text/csv': ['.csv'],\r\n      'application/vnd.ms-excel': ['.csv'],\r\n      'text/plain': ['.csv']\r\n    },\r\n    maxFiles: 5,\r\n    maxSize: 10 * 1024 * 1024 // 10MB\r\n  });\r\n\r\n  const previewFile = async (uploadFile: UploadFile) => {\r\n    try {\r\n      const text = await uploadFile.file.text();\r\n      const { detectSeparator, extractFileTimestamp } = await import('@/utils/csvUtils');\r\n      \r\n      // Detect separator and use it for consistent parsing\r\n      const separator = detectSeparator(text);\r\n      const timestamp = extractFileTimestamp(uploadFile.file.name);\r\n      \r\n      const lines = text.split('\\n').filter(line => line.trim()).slice(0, 6);\r\n      const preview = lines.map(line => line.split(separator));\r\n      \r\n      console.log(`📋 Preview for ${uploadFile.file.name}:`, {\r\n        separator: `\"${separator}\"`,\r\n        timestamp,\r\n        columns: preview[0]?.length || 0,\r\n        rows: preview.length - 1\r\n      });\r\n      \r\n      setUploadFiles(prev => \r\n        prev.map(f => f.id === uploadFile.id ? { \r\n          ...f, \r\n          preview,\r\n          metadata: { separator, timestamp }\r\n        } : f)\r\n      );\r\n    } catch (error) {\r\n      console.error('Error previewing file:', error);\r\n    }\r\n  };\r\n\r\n  const removeFile = (id: string) => {\r\n    setUploadFiles(prev => prev.filter(f => f.id !== id));\r\n  };\r\n\r\n  const uploadFile = async (uploadFile: UploadFile) => {\r\n    try {\r\n      setUploadFiles(prev => \r\n        prev.map(f => f.id === uploadFile.id ? { ...f, status: 'uploading', progress: 0 } : f)\r\n      );\r\n\r\n      // Simulate progress\r\n      const progressInterval = setInterval(() => {\r\n        setUploadFiles(prev => \r\n          prev.map(f => {\r\n            if (f.id === uploadFile.id && f.progress < 90) {\r\n              return { ...f, progress: f.progress + 10 };\r\n            }\r\n            return f;\r\n          })\r\n        );\r\n      }, 200);\r\n\r\n      const result = await uploadCSV(uploadFile.file);\r\n      \r\n      clearInterval(progressInterval);\r\n      \r\n      if (result.success) {\r\n        setUploadFiles(prev => \r\n          prev.map(f => \r\n            f.id === uploadFile.id \r\n              ? { ...f, status: 'success', progress: 100, result } \r\n              : f\r\n          )\r\n        );\r\n        \r\n        toast({\r\n          title: t('stock.upload.success'),\r\n          description: result.details ? \r\n            `${result.message}. Separator: \"${result.details.separator}\"` : \r\n            result.message,\r\n        });\r\n      } else {\r\n        throw new Error(result.message || 'Upload failed');\r\n      }\r\n    } catch (error) {\r\n      setUploadFiles(prev => \r\n        prev.map(f => \r\n          f.id === uploadFile.id \r\n            ? { \r\n                ...f, \r\n                status: 'error', \r\n                progress: 0, \r\n                error: error instanceof Error ? error.message : 'Unknown error' \r\n              } \r\n            : f\r\n        )\r\n      );\r\n      \r\n      toast({\r\n        title: t('stock.upload.error'),\r\n        description: error instanceof Error ? error.message : t('stock.upload.error_message'),\r\n        variant: \"destructive\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const uploadAllFiles = async () => {\r\n    const pendingFiles = uploadFiles.filter(f => f.status === 'pending' || f.status === 'error');\r\n    \r\n    for (const file of pendingFiles) {\r\n      await uploadFile(file);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'success':\r\n        return <CheckCircle className=\"w-4 h-4 text-success\" />;\r\n      case 'error':\r\n        return <AlertCircle className=\"w-4 h-4 text-destructive\" />;\r\n      case 'uploading':\r\n        return <Upload className=\"w-4 h-4 text-primary animate-pulse\" />;\r\n      default:\r\n        return <FileText className=\"w-4 h-4 text-muted-foreground\" />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Upload Area */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center space-x-2\">\r\n            <Upload className=\"w-5 h-5\" />\r\n            <span>{t('stock.upload.title')}</span>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div\r\n            {...getRootProps()}\r\n            className={`\r\n              border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors\r\n              ${isDragActive \r\n                ? 'border-primary bg-primary/5' \r\n                : 'border-muted-foreground/25 hover:border-primary/50'\r\n              }\r\n            `}\r\n          >\r\n            <input {...getInputProps()} />\r\n            <Upload className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground\" />\r\n            {isDragActive ? (\r\n              <p className=\"text-lg font-medium\">{t('stock.upload.drop_files')}</p>\r\n            ) : (\r\n              <div className=\"space-y-2\">\r\n                <p className=\"text-lg font-medium\">{t('stock.upload.drag_drop_files')}</p>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  {t('stock.upload.supported_formats')}\r\n                </p>\r\n                <Button variant=\"outline\" className=\"mt-4\">\r\n                  {t('stock.upload.browse_files')}\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Sample CSV Download */}\r\n          <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\r\n            <div className=\"flex items-center space-x-3\">\r\n              <FileText className=\"w-5 h-5 text-primary\" />\r\n              <div>\r\n                <p className=\"font-medium\">{t('stock.upload.sample_csv')}</p>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  {t('stock.upload.sample_csv_description')}\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <Button variant=\"outline\" size=\"sm\">\r\n              <Download className=\"w-4 h-4 mr-2\" />\r\n              {t('stock.upload.download_sample')}\r\n            </Button>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* File List */}\r\n      {uploadFiles.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle>{t('stock.upload.files_to_upload')}</CardTitle>\r\n              <div className=\"flex gap-2\">\r\n                <Button \r\n                  variant=\"outline\" \r\n                  size=\"sm\"\r\n                  onClick={() => setUploadFiles([])}\r\n                >\r\n                  <Trash2 className=\"w-4 h-4 mr-2\" />\r\n                  {t('stock.upload.clear_all')}\r\n                </Button>\r\n                <Button \r\n                  size=\"sm\"\r\n                  onClick={uploadAllFiles}\r\n                  disabled={loading || uploadFiles.every(f => f.status === 'success')}\r\n                >\r\n                  <Play className=\"w-4 h-4 mr-2\" />\r\n                  {t('stock.upload.upload_all')}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {uploadFiles.map((uploadFile) => (\r\n              <div key={uploadFile.id} className=\"space-y-3\">\r\n                <div className=\"flex items-center justify-between p-4 border rounded-lg\">\r\n                  <div className=\"flex items-center space-x-3 flex-1\">\r\n                    {getStatusIcon(uploadFile.status)}\r\n                    <div className=\"flex-1\">\r\n                      <p className=\"font-medium\">{uploadFile.file.name}</p>\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        {(uploadFile.file.size / 1024 / 1024).toFixed(2)} MB\r\n                      </p>\r\n                      {uploadFile.status === 'uploading' && (\r\n                        <Progress value={uploadFile.progress} className=\"mt-2 h-2\" />\r\n                      )}\r\n                      {uploadFile.error && (\r\n                        <Alert className=\"mt-2\">\r\n                          <AlertCircle className=\"h-4 w-4\" />\r\n                          <AlertDescription>{uploadFile.error}</AlertDescription>\r\n                        </Alert>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Badge variant={\r\n                      uploadFile.status === 'success' ? 'default' :\r\n                      uploadFile.status === 'error' ? 'destructive' :\r\n                      uploadFile.status === 'uploading' ? 'outline' : 'secondary'\r\n                    }>\r\n                      {t(`stock.upload.status.${uploadFile.status}`)}\r\n                    </Badge>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => removeFile(uploadFile.id)}\r\n                    >\r\n                      <X className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* File Preview with Debug Info */}\r\n                {uploadFile.preview && (\r\n                  <div className=\"ml-7 space-y-3\">\r\n                    <div className=\"p-4 bg-muted/30 rounded-lg\">\r\n                      <div className=\"flex justify-between items-center mb-2\">\r\n                        <p className=\"text-sm font-medium\">{t('stock.upload.preview')}:</p>\r\n                        <div className=\"flex gap-2 text-xs\">\r\n                          {uploadFile.metadata?.separator && (\r\n                            <Badge variant=\"outline\">\r\n                              Sep: \"{uploadFile.metadata.separator}\"\r\n                            </Badge>\r\n                          )}\r\n                          {uploadFile.metadata?.timestamp && (\r\n                            <Badge variant=\"outline\">\r\n                              {uploadFile.metadata.timestamp.toLocaleDateString()}\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-xs font-mono space-y-1\">\r\n                        {uploadFile.preview.slice(0, 3).map((row, index) => (\r\n                          <div key={index} className=\"truncate\">\r\n                            {row.slice(0, 6).join(' | ')}\r\n                            {row.length > 6 && ' | ...'}\r\n                          </div>\r\n                        ))}\r\n                        {uploadFile.preview.length > 3 && (\r\n                          <div className=\"text-muted-foreground\">\r\n                            ... {t('stock.upload.more_rows', { count: uploadFile.preview.length - 3 })}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Processing Results */}\r\n                    {uploadFile.result?.details && (\r\n                      <div className=\"p-4 bg-muted/20 rounded-lg\">\r\n                        <p className=\"text-sm font-medium mb-2\">Processing Details:</p>\r\n                        <div className=\"grid grid-cols-2 gap-2 text-xs\">\r\n                          <div>Processed: {uploadFile.result.details.processed}</div>\r\n                          <div>Valid: {uploadFile.result.details.valid}</div>\r\n                          <div>Invalid: {uploadFile.result.details.invalid}</div>\r\n                          <div>Separator: &quot;{uploadFile.result.details.separator}&quot;</div>\r\n                        </div>\r\n                        {uploadFile.result.details.mappedColumns && (\r\n                          <div className=\"mt-2\">\r\n                            <p className=\"text-xs font-medium\">Mapped Columns:</p>\r\n                            <div className=\"text-xs text-muted-foreground\">\r\n                              {Object.entries(uploadFile.result.details.mappedColumns).map(([field, column]) => (\r\n                                <div key={field}>{field} ← {String(column)}</div>\r\n                              ))}\r\n                            </div>\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\stock\\StockDMSConfig.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\stock\\StockDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\stock\\StockInventoryTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\stock\\StockSyncHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\stock\\VehicleDetailsModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[566,569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[566,569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { X, Car, DollarSign, Info, MapPin, TrendingUp, Database, Camera } from 'lucide-react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogTitle,\r\n  DialogClose,\r\n} from '@/components/ui/dialog';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Label } from '@/components/ui/label';\r\nimport { ScrollArea } from '@/components/ui/scroll-area';\r\n\r\ninterface VehicleDetailsModalProps {\r\n  vehicle: any;\r\n  open: boolean;\r\n  onOpenChange: (open: boolean) => void;\r\n}\r\n\r\nexport const VehicleDetailsModal: React.FC<VehicleDetailsModalProps> = ({\r\n  vehicle,\r\n  open,\r\n  onOpenChange\r\n}) => {\r\n  const { t } = useTranslation();\r\n\r\n  if (!vehicle) return null;\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"max-w-7xl max-h-[95vh] p-0 overflow-hidden\">\r\n        <div className=\"flex flex-col h-full\">\r\n          {/* Sticky Header */}\r\n          <div className=\"sticky top-0 z-10 px-6 py-4 border-b bg-background/95 backdrop-blur shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <DialogTitle className=\"text-2xl font-bold\">\r\n                  {vehicle.year} {vehicle.make} {vehicle.model || `${vehicle.raw_data?.Model || ''} ${vehicle.raw_data?.Trim || ''}`.trim()}\r\n                </DialogTitle>\r\n                <p className=\"text-muted-foreground\">\r\n                  {t('stock.vehicleDetails.stockNumber')}: {vehicle.stock_number} | VIN: {vehicle.vin}\r\n                </p>\r\n              </div>\r\n              <DialogClose className=\"rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100\">\r\n                <X className=\"h-4 w-4\" />\r\n              </DialogClose>\r\n            </div>\r\n          </div>\r\n\r\n          <ScrollArea className=\"flex-1\">\r\n            <div className=\"p-6 space-y-6\">\r\n              {/* First Row - Image and Overview */}\r\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n                {/* Vehicle Image */}\r\n                <Card className=\"lg:col-span-1 shadow-sm hover:shadow-md transition-shadow\">\r\n                  <CardContent className=\"p-0\">\r\n                    <div className=\"relative h-96 bg-muted rounded-lg overflow-hidden\">\r\n                      {vehicle.key_photo_url ? (\r\n                        <img\r\n                          src={vehicle.key_photo_url}\r\n                          alt={`${vehicle.year} ${vehicle.make} ${vehicle.model || `${vehicle.raw_data?.Model || ''} ${vehicle.raw_data?.Trim || ''}`.trim()}`}\r\n                          className=\"w-full h-full object-cover\"\r\n                          onError={(e) => {\r\n                            const target = e.target as HTMLImageElement;\r\n                            target.src = '/placeholder.svg';\r\n                          }}\r\n                        />\r\n                      ) : (\r\n                        <div className=\"flex items-center justify-center h-full\">\r\n                          <Camera className=\"h-12 w-12 text-muted-foreground\" />\r\n                        </div>\r\n                      )}\r\n                      \r\n                      {/* Enhanced Status Badges */}\r\n                      <div className=\"absolute bottom-2 right-2 flex flex-col gap-1\">\r\n                        {vehicle.photo_count && (\r\n                          <div className=\"bg-black/70 text-white px-2 py-1 rounded text-sm\">\r\n                            {vehicle.photo_count} {t('stock.vehicleDetails.photos')}\r\n                          </div>\r\n                        )}\r\n                        {(vehicle.objective || vehicle.raw_data?.Objective) && (\r\n                          <div className={`px-2 py-1 rounded text-sm font-medium ${\r\n                            (vehicle.objective || vehicle.raw_data?.Objective)?.toLowerCase() === 'retail' \r\n                              ? 'bg-green-500/90 text-white' \r\n                              : 'bg-blue-500/90 text-white'\r\n                          }`}>\r\n                            {vehicle.objective || vehicle.raw_data?.Objective}\r\n                          </div>\r\n                        )}\r\n                        {(vehicle.age_days || vehicle.raw_data?.Age) && (\r\n                          <div className=\"bg-orange-500/90 text-white px-2 py-1 rounded text-sm\">\r\n                            {vehicle.age_days || vehicle.raw_data?.Age}d\r\n                          </div>\r\n                        )}\r\n                        {vehicle.is_certified && (\r\n                          <div className=\"bg-yellow-500/90 text-white px-2 py-1 rounded text-sm\">\r\n                            {t('stock.vehicleDetails.certified')}\r\n                          </div>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n\r\n                {/* Vehicle Overview */}\r\n                <Card className=\"lg:col-span-2 shadow-sm hover:shadow-md transition-shadow\">\r\n                  <CardHeader>\r\n                    <CardTitle className=\"flex items-center gap-2\">\r\n                      <Car className=\"h-5 w-5\" />\r\n                      {t('stock.vehicleDetails.overview')}\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.year')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.year || 'N/A'}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.make')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.make || 'N/A'}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.model')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.model || `${vehicle.raw_data?.Model || ''} ${vehicle.raw_data?.Trim || ''}`.trim() || 'N/A'}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.trim')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.trim || vehicle.raw_data?.Trim || 'N/A'}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.vin')}</Label>\r\n                        <p className=\"font-medium font-mono text-sm\">{vehicle.vin || 'N/A'}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.stockNumber')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.stock_number || 'N/A'}</p>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n\r\n              {/* Second Row */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\r\n                {/* Pricing Information */}\r\n                <Card className=\"shadow-sm hover:shadow-md transition-shadow\">\r\n                  <CardHeader>\r\n                    <CardTitle className=\"flex items-center gap-2\">\r\n                      <DollarSign className=\"h-5 w-5\" />\r\n                      {t('stock.vehicleDetails.pricing')}\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"space-y-3\">\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.price')}</Label>\r\n                        <p className=\"font-medium text-lg\">\r\n                          {vehicle.price ? `$${vehicle.price.toLocaleString()}` : 'N/A'}\r\n                        </p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.msrp')}</Label>\r\n                        <p className=\"font-medium\">\r\n                          {vehicle.msrp ? `$${vehicle.msrp.toLocaleString()}` : 'N/A'}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n\r\n                {/* Vehicle Details */}\r\n                <Card className=\"shadow-sm hover:shadow-md transition-shadow\">\r\n                  <CardHeader>\r\n                    <CardTitle className=\"flex items-center gap-2\">\r\n                      <Info className=\"h-5 w-5\" />\r\n                      {t('stock.vehicleDetails.details')}\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"space-y-3\">\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.mileage')}</Label>\r\n                        <p className=\"font-medium\">\r\n                          {vehicle.mileage ? `${vehicle.mileage.toLocaleString()} mi` : 'N/A'}\r\n                        </p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.color')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.color || 'N/A'}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.drivetrain')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.drivetrain || 'N/A'}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.certified')}</Label>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <span className=\"font-medium\">\r\n                            {vehicle.is_certified ? t('common.yes') : t('common.no')}\r\n                          </span>\r\n                          {vehicle.is_certified && (\r\n                            <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-800\">\r\n                              {t('stock.vehicleDetails.certified')}\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n\r\n                {/* Location & Status */}\r\n                <Card className=\"shadow-sm hover:shadow-md transition-shadow\">\r\n                  <CardHeader>\r\n                    <CardTitle className=\"flex items-center gap-2\">\r\n                      <MapPin className=\"h-5 w-5\" />\r\n                      {t('stock.vehicleDetails.locationStatus')}\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"space-y-3\">\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.lotLocation')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.lot_location || 'N/A'}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.dmsStatus')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.dms_status || 'N/A'}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.objective')}</Label>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <span className=\"font-medium\">{vehicle.objective || vehicle.raw_data?.Objective || 'N/A'}</span>\r\n                          {(vehicle.objective || vehicle.raw_data?.Objective) && (\r\n                            <Badge variant=\"outline\" className={\r\n                              (vehicle.objective || vehicle.raw_data?.Objective)?.toLowerCase() === 'retail' \r\n                                ? 'border-green-500 text-green-700' \r\n                                : 'border-blue-500 text-blue-700'\r\n                            }>\r\n                              {vehicle.objective || vehicle.raw_data?.Objective}\r\n                            </Badge>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.ageDays')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.age_days || vehicle.raw_data?.Age || 0} days</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.riskLight')}</Label>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <div className={`w-3 h-3 rounded-full ${\r\n                            vehicle.risk_light?.toLowerCase() === 'red' ? 'bg-red-500' :\r\n                            vehicle.risk_light?.toLowerCase() === 'yellow' ? 'bg-yellow-500' :\r\n                            vehicle.risk_light?.toLowerCase() === 'green' ? 'bg-green-500' :\r\n                            'bg-gray-300'\r\n                          }`} />\r\n                          <span className=\"font-medium\">{vehicle.risk_light || 'N/A'}</span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n\r\n              {/* Third Row */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                {/* Lead Performance */}\r\n                <Card className=\"shadow-sm hover:shadow-md transition-shadow\">\r\n                  <CardHeader>\r\n                    <CardTitle className=\"flex items-center gap-2\">\r\n                      <TrendingUp className=\"h-5 w-5\" />\r\n                      {t('stock.vehicleDetails.leadPerformance')}\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"space-y-3\">\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.leadsLast7Days')}</Label>\r\n                        <p className=\"font-medium text-lg\">{vehicle.leads_last_7_days || 0}</p>\r\n                      </div>\r\n                      <div>\r\n                        <Label className=\"text-muted-foreground\">{t('stock.vehicleDetails.leadsTotal')}</Label>\r\n                        <p className=\"font-medium\">{vehicle.leads_total || 0}</p>\r\n                      </div>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n\r\n                {/* Raw Data */}\r\n                <Card className=\"shadow-sm hover:shadow-md transition-shadow\">\r\n                  <CardHeader>\r\n                    <CardTitle className=\"flex items-center gap-2\">\r\n                      <Database className=\"h-5 w-5\" />\r\n                      {t('stock.vehicleDetails.rawData')}\r\n                    </CardTitle>\r\n                  </CardHeader>\r\n                  <CardContent>\r\n                    <div className=\"max-h-40 overflow-y-auto\">\r\n                      <pre className=\"text-xs bg-muted p-2 rounded\">\r\n                        {JSON.stringify(vehicle.raw_data, null, 2)}\r\n                      </pre>\r\n                    </div>\r\n                  </CardContent>\r\n                </Card>\r\n              </div>\r\n            </div>\r\n          </ScrollArea>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":29,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":29,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\r\n        secondary: \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive: \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nexport interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;\r\n}\r\n\r\nexport { Badge, badgeVariants };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":47,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":47,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-0 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm\",\r\n        destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-sm\",\r\n        outline: \"border border-border bg-background hover:bg-secondary\",\r\n        secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-secondary/80\",\r\n        link: \"text-foreground underline-offset-4 hover:underline\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nexport interface ButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof buttonVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\r\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\";\r\n    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;\r\n  },\r\n);\r\nButton.displayName = \"Button\";\r\n\r\nexport { Button, buttonVariants };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\chart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\command.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":24,"column":11,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":24,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[733,784],"text":"type CommandDialogProps = DialogProps"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { type DialogProps } from \"@radix-ui/react-dialog\";\r\nimport { Command as CommandPrimitive } from \"cmdk\";\r\nimport { Search } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\r\n\r\nconst Command = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nCommand.displayName = CommandPrimitive.displayName;\r\n\r\ninterface CommandDialogProps extends DialogProps {}\r\n\r\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\r\n  return (\r\n    <Dialog {...props}>\r\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\r\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\r\n          {children}\r\n        </Command>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst CommandInput = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Input>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\r\n>(({ className, ...props }, ref) => (\r\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\r\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\r\n    <CommandPrimitive.Input\r\n      ref={ref}\r\n      className={cn(\r\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  </div>\r\n));\r\n\r\nCommandInput.displayName = CommandPrimitive.Input.displayName;\r\n\r\nconst CommandList = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.List\r\n    ref={ref}\r\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandList.displayName = CommandPrimitive.List.displayName;\r\n\r\nconst CommandEmpty = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Empty>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\r\n>((props, ref) => <CommandPrimitive.Empty ref={ref} className=\"py-6 text-center text-sm\" {...props} />);\r\n\r\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName;\r\n\r\nconst CommandGroup = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Group>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Group\r\n    ref={ref}\r\n    className={cn(\r\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandGroup.displayName = CommandPrimitive.Group.displayName;\r\n\r\nconst CommandSeparator = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Separator ref={ref} className={cn(\"-mx-1 h-px bg-border\", className)} {...props} />\r\n));\r\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName;\r\n\r\nconst CommandItem = React.forwardRef<\r\n  React.ElementRef<typeof CommandPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\r\n>(({ className, ...props }, ref) => (\r\n  <CommandPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\n\r\nCommandItem.displayName = CommandPrimitive.Item.displayName;\r\n\r\nconst CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {\r\n  return <span className={cn(\"ml-auto text-xs tracking-widest text-muted-foreground\", className)} {...props} />;\r\n};\r\nCommandShortcut.displayName = \"CommandShortcut\";\r\n\r\nexport {\r\n  Command,\r\n  CommandDialog,\r\n  CommandInput,\r\n  CommandList,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandItem,\r\n  CommandShortcut,\r\n  CommandSeparator,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\due-date-indicator.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":126,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":126,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { Clock, AlertTriangle, CheckCircle } from 'lucide-react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { cn } from '@/lib/utils';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { \r\n  calculateTimeStatus, \r\n  formatCountdown, \r\n  TimeStatusInfo,\r\n  type AttentionLevel \r\n} from '@/utils/dueDateUtils';\r\n\r\ninterface DueDateIndicatorProps {\r\n  dueDate: string | null;\r\n  orderType?: string;\r\n  compact?: boolean;\r\n  className?: string;\r\n}\r\n\r\nexport function DueDateIndicator({ \r\n  dueDate, \r\n  orderType = 'sales',\r\n  compact = false,\r\n  className \r\n}: DueDateIndicatorProps) {\r\n  const { t } = useTranslation();\r\n  const [timeStatus, setTimeStatus] = useState<TimeStatusInfo | null>(null);\r\n\r\n  // Update time status every minute for real-time countdown\r\n  useEffect(() => {\r\n    const updateTimeStatus = () => {\r\n      if (!dueDate) {\r\n        setTimeStatus(null);\r\n        return;\r\n      }\r\n      \r\n      const status = calculateTimeStatus(dueDate);\r\n      setTimeStatus(status);\r\n    };\r\n\r\n    updateTimeStatus();\r\n    \r\n    // Update every 60 seconds for live countdown\r\n    const interval = setInterval(updateTimeStatus, 60000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, [dueDate]);\r\n\r\n  // Don't render if no due date or no time status\r\n  if (!timeStatus || timeStatus.status === 'no-due-date') {\r\n    return null;\r\n  }\r\n\r\n  const getIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'on-time':\r\n        return <CheckCircle className=\"w-3 h-3\" />;\r\n      case 'need-attention':\r\n        return <Clock className=\"w-3 h-3\" />;\r\n      case 'delayed':\r\n        return <AlertTriangle className=\"w-3 h-3\" />;\r\n      default:\r\n        return <Clock className=\"w-3 h-3\" />;\r\n    }\r\n  };\r\n\r\n  const getBadgeVariant = (status: string) => {\r\n    switch (status) {\r\n      case 'on-time':\r\n        return 'default';\r\n      case 'need-attention':\r\n        return 'secondary';\r\n      case 'delayed':\r\n        return 'destructive';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  if (compact) {\r\n    return (\r\n      <div className={cn(\"flex items-center gap-1\", className)}>\r\n        <div className={cn(\"flex items-center gap-1\", timeStatus.color)}>\r\n          {getIcon(timeStatus.status)}\r\n          <span className=\"text-xs font-medium\">\r\n            {formatCountdown(timeStatus.timeRemaining)}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"flex flex-col gap-1\", className)}>\r\n      {/* Status Badge */}\r\n      <Badge \r\n        variant={getBadgeVariant(timeStatus.status)}\r\n        className={cn(\r\n          \"text-xs font-medium h-5 px-2\",\r\n          timeStatus.bgColor,\r\n          timeStatus.color,\r\n          \"border border-current/20\"\r\n        )}\r\n      >\r\n        <div className=\"flex items-center gap-1\">\r\n          {getIcon(timeStatus.status)}\r\n          <span>{timeStatus.badge}</span>\r\n        </div>\r\n      </Badge>\r\n      \r\n      {/* Time Countdown */}\r\n      <div className={cn(\r\n        \"flex items-center gap-1 text-xs font-mono\",\r\n        timeStatus.color\r\n      )}>\r\n        <Clock className=\"w-3 h-3\" />\r\n        <span>{timeStatus.formattedTime}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n/**\r\n * Hook to get attention level for row styling\r\n */\r\nexport function useDueDateAttention(dueDate: string | null): AttentionLevel {\r\n  const [attentionLevel, setAttentionLevel] = useState<AttentionLevel>('none');\r\n\r\n  useEffect(() => {\r\n    if (!dueDate) {\r\n      setAttentionLevel('none');\r\n      return;\r\n    }\r\n\r\n    const updateAttention = () => {\r\n      const status = calculateTimeStatus(dueDate);\r\n      setAttentionLevel(status.attentionLevel);\r\n    };\r\n\r\n    updateAttention();\r\n    \r\n    // Update every minute\r\n    const interval = setInterval(updateAttention, 60000);\r\n    return () => clearInterval(interval);\r\n  }, [dueDate]);\r\n\r\n  return attentionLevel;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\due-date-time-picker.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\duplicate-badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\duplicate-popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\duplicate-tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":129,"column":10,"nodeType":"Identifier","messageId":"namedExport","endLine":129,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext } from \"react-hook-form\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Label } from \"@/components/ui/label\";\r\n\r\nconst Form = FormProvider;\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n> = {\r\n  name: TName;\r\n};\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  );\r\n};\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext);\r\n  const itemContext = React.useContext(FormItemContext);\r\n  const { getFieldState, formState } = useFormContext();\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState);\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\");\r\n  }\r\n\r\n  const { id } = itemContext;\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  };\r\n};\r\n\r\ntype FormItemContextValue = {\r\n  id: string;\r\n};\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);\r\n\r\nconst FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(\r\n  ({ className, ...props }, ref) => {\r\n    const id = React.useId();\r\n\r\n    return (\r\n      <FormItemContext.Provider value={{ id }}>\r\n        <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n      </FormItemContext.Provider>\r\n    );\r\n  },\r\n);\r\nFormItem.displayName = \"FormItem\";\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField();\r\n\r\n  return <Label ref={ref} className={cn(error && \"text-destructive\", className)} htmlFor={formItemId} {...props} />;\r\n});\r\nFormLabel.displayName = \"FormLabel\";\r\n\r\nconst FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(\r\n  ({ ...props }, ref) => {\r\n    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\r\n\r\n    return (\r\n      <Slot\r\n        ref={ref}\r\n        id={formItemId}\r\n        aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}\r\n        aria-invalid={!!error}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nFormControl.displayName = \"FormControl\";\r\n\r\nconst FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\r\n  ({ className, ...props }, ref) => {\r\n    const { formDescriptionId } = useFormField();\r\n\r\n    return <p ref={ref} id={formDescriptionId} className={cn(\"text-sm text-muted-foreground\", className)} {...props} />;\r\n  },\r\n);\r\nFormDescription.displayName = \"FormDescription\";\r\n\r\nconst FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(\r\n  ({ className, children, ...props }, ref) => {\r\n    const { error, formMessageId } = useFormField();\r\n    const body = error ? String(error?.message) : children;\r\n\r\n    if (!body) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <p ref={ref} id={formMessageId} className={cn(\"text-sm font-medium text-destructive\", className)} {...props}>\r\n        {body}\r\n      </p>\r\n    );\r\n  },\r\n);\r\nFormMessage.displayName = \"FormMessage\";\r\n\r\nexport { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\navigation-menu.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":111,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":111,"endColumn":29}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\";\r\nimport { cva } from \"class-variance-authority\";\r\nimport { ChevronDown } from \"lucide-react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst NavigationMenu = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Root\r\n    ref={ref}\r\n    className={cn(\"relative z-10 flex max-w-max flex-1 items-center justify-center\", className)}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <NavigationMenuViewport />\r\n  </NavigationMenuPrimitive.Root>\r\n));\r\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;\r\n\r\nconst NavigationMenuList = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.List\r\n    ref={ref}\r\n    className={cn(\"group flex flex-1 list-none items-center justify-center space-x-1\", className)}\r\n    {...props}\r\n  />\r\n));\r\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;\r\n\r\nconst NavigationMenuItem = NavigationMenuPrimitive.Item;\r\n\r\nconst navigationMenuTriggerStyle = cva(\r\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\",\r\n);\r\n\r\nconst NavigationMenuTrigger = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\r\n    {...props}\r\n  >\r\n    {children}{\" \"}\r\n    <ChevronDown\r\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\r\n      aria-hidden=\"true\"\r\n    />\r\n  </NavigationMenuPrimitive.Trigger>\r\n));\r\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;\r\n\r\nconst NavigationMenuContent = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;\r\n\r\nconst NavigationMenuLink = NavigationMenuPrimitive.Link;\r\n\r\nconst NavigationMenuViewport = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\r\n>(({ className, ...props }, ref) => (\r\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\r\n    <NavigationMenuPrimitive.Viewport\r\n      className={cn(\r\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\r\n        className,\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  </div>\r\n));\r\nNavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;\r\n\r\nconst NavigationMenuIndicator = React.forwardRef<\r\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\r\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\r\n>(({ className, ...props }, ref) => (\r\n  <NavigationMenuPrimitive.Indicator\r\n    ref={ref}\r\n    className={cn(\r\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\r\n      className,\r\n    )}\r\n    {...props}\r\n  >\r\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\r\n  </NavigationMenuPrimitive.Indicator>\r\n));\r\nNavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;\r\n\r\nexport {\r\n  navigationMenuTriggerStyle,\r\n  NavigationMenu,\r\n  NavigationMenuList,\r\n  NavigationMenuItem,\r\n  NavigationMenuContent,\r\n  NavigationMenuTrigger,\r\n  NavigationMenuLink,\r\n  NavigationMenuIndicator,\r\n  NavigationMenuViewport,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\sidebar.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":637,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":637,"endColumn":13}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { Slot } from \"@radix-ui/react-slot\";\r\nimport { VariantProps, cva } from \"class-variance-authority\";\r\nimport { PanelLeft } from \"lucide-react\";\r\n\r\nimport { useIsMobile } from \"@/hooks/use-mobile\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\";\r\nimport { Skeleton } from \"@/components/ui/skeleton\";\r\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\r\n\r\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\";\r\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\r\nconst SIDEBAR_WIDTH = \"16rem\";\r\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\r\nconst SIDEBAR_WIDTH_ICON = \"4rem\";\r\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\r\n\r\ntype SidebarContext = {\r\n  state: \"expanded\" | \"collapsed\";\r\n  open: boolean;\r\n  setOpen: (open: boolean) => void;\r\n  openMobile: boolean;\r\n  setOpenMobile: (open: boolean) => void;\r\n  isMobile: boolean;\r\n  toggleSidebar: () => void;\r\n};\r\n\r\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\r\n\r\nfunction useSidebar() {\r\n  const context = React.useContext(SidebarContext);\r\n  if (!context) {\r\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nconst SidebarProvider = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    defaultOpen?: boolean;\r\n    open?: boolean;\r\n    onOpenChange?: (open: boolean) => void;\r\n  }\r\n>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {\r\n  const isMobile = useIsMobile();\r\n  const [openMobile, setOpenMobile] = React.useState(false);\r\n\r\n  // This is the internal state of the sidebar.\r\n  // We use openProp and setOpenProp for control from outside the component.\r\n  const [_open, _setOpen] = React.useState(defaultOpen);\r\n  const open = openProp ?? _open;\r\n  const setOpen = React.useCallback(\r\n    (value: boolean | ((value: boolean) => boolean)) => {\r\n      const openState = typeof value === \"function\" ? value(open) : value;\r\n      if (setOpenProp) {\r\n        setOpenProp(openState);\r\n      } else {\r\n        _setOpen(openState);\r\n      }\r\n\r\n      // This sets the cookie to keep the sidebar state.\r\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\r\n    },\r\n    [setOpenProp, open],\r\n  );\r\n\r\n  // Helper to toggle the sidebar.\r\n  const toggleSidebar = React.useCallback(() => {\r\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\r\n  }, [isMobile, setOpen, setOpenMobile]);\r\n\r\n  // Adds a keyboard shortcut to toggle the sidebar.\r\n  React.useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {\r\n        event.preventDefault();\r\n        toggleSidebar();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  }, [toggleSidebar]);\r\n\r\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\r\n  // This makes it easier to style the sidebar with Tailwind classes.\r\n  const state = open ? \"expanded\" : \"collapsed\";\r\n\r\n  const contextValue = React.useMemo<SidebarContext>(\r\n    () => ({\r\n      state,\r\n      open,\r\n      setOpen,\r\n      isMobile,\r\n      openMobile,\r\n      setOpenMobile,\r\n      toggleSidebar,\r\n    }),\r\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],\r\n  );\r\n\r\n  return (\r\n    <SidebarContext.Provider value={contextValue}>\r\n      <TooltipProvider delayDuration={0}>\r\n        <div\r\n          style={\r\n            {\r\n              \"--sidebar-width\": SIDEBAR_WIDTH,\r\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\r\n              ...style,\r\n            } as React.CSSProperties\r\n          }\r\n          className={cn(\"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\", className)}\r\n          ref={ref}\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      </TooltipProvider>\r\n    </SidebarContext.Provider>\r\n  );\r\n});\r\nSidebarProvider.displayName = \"SidebarProvider\";\r\n\r\nconst Sidebar = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    side?: \"left\" | \"right\";\r\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\r\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\r\n  }\r\n>(({ side = \"left\", variant = \"sidebar\", collapsible = \"offcanvas\", className, children, ...props }, ref) => {\r\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\r\n\r\n  if (collapsible === \"none\") {\r\n    return (\r\n      <div\r\n        className={cn(\"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\", className)}\r\n        ref={ref}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isMobile) {\r\n    return (\r\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\r\n        <SheetContent\r\n          data-sidebar=\"sidebar\"\r\n          data-mobile=\"true\"\r\n          className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\r\n          style={\r\n            {\r\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\r\n            } as React.CSSProperties\r\n          }\r\n          side={side}\r\n        >\r\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\r\n        </SheetContent>\r\n      </Sheet>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      className=\"group peer hidden text-sidebar-foreground md:block\"\r\n      data-state={state}\r\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\r\n      data-variant={variant}\r\n      data-side={side}\r\n    >\r\n      {/* This is what handles the sidebar gap on desktop */}\r\n      <div\r\n        className={cn(\r\n          \"relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\r\n          \"group-data-[collapsible=offcanvas]:w-0\",\r\n          \"group-data-[side=right]:rotate-180\",\r\n          variant === \"floating\" || variant === \"inset\"\r\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\r\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\r\n        )}\r\n      />\r\n      <div\r\n        className={cn(\r\n          \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\r\n          side === \"left\"\r\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\r\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\r\n          // Adjust the padding for floating and inset variants.\r\n          variant === \"floating\" || variant === \"inset\"\r\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\r\n            : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        <div\r\n          data-sidebar=\"sidebar\"\r\n          className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\r\n        >\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\nSidebar.displayName = \"Sidebar\";\r\n\r\nconst SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(\r\n  ({ className, onClick, ...props }, ref) => {\r\n    const { toggleSidebar } = useSidebar();\r\n\r\n    return (\r\n      <Button\r\n        ref={ref}\r\n        data-sidebar=\"trigger\"\r\n        variant=\"ghost\"\r\n        size=\"icon\"\r\n        className={cn(\"h-7 w-7\", className)}\r\n        onClick={(event) => {\r\n          console.log('🖱️ SidebarTrigger clicked!');\r\n          onClick?.(event);\r\n          toggleSidebar();\r\n        }}\r\n        {...props}\r\n      >\r\n        <PanelLeft />\r\n        <span className=\"sr-only\">Toggle Sidebar</span>\r\n      </Button>\r\n    );\r\n  },\r\n);\r\nSidebarTrigger.displayName = \"SidebarTrigger\";\r\n\r\nconst SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\">>(\r\n  ({ className, ...props }, ref) => {\r\n    const { toggleSidebar } = useSidebar();\r\n\r\n    return (\r\n      <button\r\n        ref={ref}\r\n        data-sidebar=\"rail\"\r\n        aria-label=\"Toggle Sidebar\"\r\n        tabIndex={-1}\r\n        onClick={toggleSidebar}\r\n        title=\"Toggle Sidebar\"\r\n        className={cn(\r\n          \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 hover:after:bg-sidebar-border sm:flex\",\r\n          \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\r\n          \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\r\n          \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\r\n          \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\r\n          \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarRail.displayName = \"SidebarRail\";\r\n\r\nconst SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<\"main\">>(({ className, ...props }, ref) => {\r\n  return (\r\n    <main\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\r\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarInset.displayName = \"SidebarInset\";\r\n\r\nconst SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <Input\r\n        ref={ref}\r\n        data-sidebar=\"input\"\r\n        className={cn(\r\n          \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarInput.displayName = \"SidebarInput\";\r\n\r\nconst SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\r\n  return <div ref={ref} data-sidebar=\"header\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\r\n});\r\nSidebarHeader.displayName = \"SidebarHeader\";\r\n\r\nconst SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\r\n  return <div ref={ref} data-sidebar=\"footer\" className={cn(\"flex flex-col gap-2 p-2\", className)} {...props} />;\r\n});\r\nSidebarFooter.displayName = \"SidebarFooter\";\r\n\r\nconst SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(\r\n  ({ className, ...props }, ref) => {\r\n    return (\r\n      <Separator\r\n        ref={ref}\r\n        data-sidebar=\"separator\"\r\n        className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarSeparator.displayName = \"SidebarSeparator\";\r\n\r\nconst SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"content\"\r\n      className={cn(\r\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarContent.displayName = \"SidebarContent\";\r\n\r\nconst SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(({ className, ...props }, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"group\"\r\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarGroup.displayName = \"SidebarGroup\";\r\n\r\nconst SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\"> & { asChild?: boolean }>(\r\n  ({ className, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"div\";\r\n\r\n    return (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"group-label\"\r\n        className={cn(\r\n          \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n          \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\r\n\r\nconst SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<\"button\"> & { asChild?: boolean }>(\r\n  ({ className, asChild = false, ...props }, ref) => {\r\n    const Comp = asChild ? Slot : \"button\";\r\n\r\n    return (\r\n      <Comp\r\n        ref={ref}\r\n        data-sidebar=\"group-action\"\r\n        className={cn(\r\n          \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n          // Increases the hit area of the button on mobile.\r\n          \"after:absolute after:-inset-2 after:md:hidden\",\r\n          \"group-data-[collapsible=icon]:hidden\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      />\r\n    );\r\n  },\r\n);\r\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\r\n\r\nconst SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\r\n  ({ className, ...props }, ref) => (\r\n    <div ref={ref} data-sidebar=\"group-content\" className={cn(\"w-full text-sm\", className)} {...props} />\r\n  ),\r\n);\r\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\r\n\r\nconst SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(({ className, ...props }, ref) => (\r\n  <ul ref={ref} data-sidebar=\"menu\" className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)} {...props} />\r\n));\r\nSidebarMenu.displayName = \"SidebarMenu\";\r\n\r\nconst SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ className, ...props }, ref) => (\r\n  <li ref={ref} data-sidebar=\"menu-item\" className={cn(\"group/menu-item relative\", className)} {...props} />\r\n));\r\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\r\n\r\nconst sidebarMenuButtonVariants = cva(\r\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\r\n        outline:\r\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\r\n      },\r\n      size: {\r\n        default: \"h-8 text-sm\",\r\n        sm: \"h-7 text-xs\",\r\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nconst SidebarMenuButton = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean;\r\n    isActive?: boolean;\r\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\r\n  } & VariantProps<typeof sidebarMenuButtonVariants>\r\n>(({ asChild = false, isActive = false, variant = \"default\", size = \"default\", tooltip, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\";\r\n  const { isMobile, state } = useSidebar();\r\n\r\n  const button = (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\r\n      {...props}\r\n    />\r\n  );\r\n\r\n  if (!tooltip) {\r\n    return button;\r\n  }\r\n\r\n  if (typeof tooltip === \"string\") {\r\n    tooltip = {\r\n      children: tooltip,\r\n    };\r\n  }\r\n\r\n  return (\r\n    <Tooltip>\r\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\r\n      <TooltipContent side=\"right\" align=\"center\" hidden={state !== \"collapsed\" || isMobile} {...tooltip} />\r\n    </Tooltip>\r\n  );\r\n});\r\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\r\n\r\nconst SidebarMenuAction = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<\"button\"> & {\r\n    asChild?: boolean;\r\n    showOnHover?: boolean;\r\n  }\r\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\";\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-action\"\r\n      className={cn(\r\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform peer-hover/menu-button:text-sidebar-accent-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\r\n        // Increases the hit area of the button on mobile.\r\n        \"after:absolute after:-inset-2 after:md:hidden\",\r\n        \"peer-data-[size=sm]/menu-button:top-1\",\r\n        \"peer-data-[size=default]/menu-button:top-1.5\",\r\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        showOnHover &&\r\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\r\n\r\nconst SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<\"div\">>(\r\n  ({ className, ...props }, ref) => (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-badge\"\r\n      className={cn(\r\n        \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\r\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\r\n        \"peer-data-[size=sm]/menu-button:top-1\",\r\n        \"peer-data-[size=default]/menu-button:top-1.5\",\r\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\r\n\r\nconst SidebarMenuSkeleton = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    showIcon?: boolean;\r\n  }\r\n>(({ className, showIcon = false, ...props }, ref) => {\r\n  // Random width between 50 to 90%.\r\n  const width = React.useMemo(() => {\r\n    return `${Math.floor(Math.random() * 40) + 50}%`;\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      data-sidebar=\"menu-skeleton\"\r\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\r\n      {...props}\r\n    >\r\n      {showIcon && <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />}\r\n      <Skeleton\r\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\r\n        data-sidebar=\"menu-skeleton-text\"\r\n        style={\r\n          {\r\n            \"--skeleton-width\": width,\r\n          } as React.CSSProperties\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n});\r\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\r\n\r\nconst SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<\"ul\">>(\r\n  ({ className, ...props }, ref) => (\r\n    <ul\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub\"\r\n      className={cn(\r\n        \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  ),\r\n);\r\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\r\n\r\nconst SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<\"li\">>(({ ...props }, ref) => (\r\n  <li ref={ref} {...props} />\r\n));\r\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\r\n\r\nconst SidebarMenuSubButton = React.forwardRef<\r\n  HTMLAnchorElement,\r\n  React.ComponentProps<\"a\"> & {\r\n    asChild?: boolean;\r\n    size?: \"sm\" | \"md\";\r\n    isActive?: boolean;\r\n  }\r\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"a\";\r\n\r\n  return (\r\n    <Comp\r\n      ref={ref}\r\n      data-sidebar=\"menu-sub-button\"\r\n      data-size={size}\r\n      data-active={isActive}\r\n      className={cn(\r\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring aria-disabled:pointer-events-none aria-disabled:opacity-50 hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\r\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\r\n        size === \"sm\" && \"text-xs\",\r\n        size === \"md\" && \"text-sm\",\r\n        \"group-data-[collapsible=icon]:hidden\",\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\r\n\r\nexport {\r\n  Sidebar,\r\n  SidebarContent,\r\n  SidebarFooter,\r\n  SidebarGroup,\r\n  SidebarGroupAction,\r\n  SidebarGroupContent,\r\n  SidebarGroupLabel,\r\n  SidebarHeader,\r\n  SidebarInput,\r\n  SidebarInset,\r\n  SidebarMenu,\r\n  SidebarMenuAction,\r\n  SidebarMenuBadge,\r\n  SidebarMenuButton,\r\n  SidebarMenuItem,\r\n  SidebarMenuSkeleton,\r\n  SidebarMenuSub,\r\n  SidebarMenuSubButton,\r\n  SidebarMenuSubItem,\r\n  SidebarProvider,\r\n  SidebarRail,\r\n  SidebarSeparator,\r\n  SidebarTrigger,\r\n  useSidebar,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\sonner.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":27,"column":19,"nodeType":"Identifier","messageId":"namedExport","endLine":27,"endColumn":24}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useTheme } from \"next-themes\";\r\nimport { Toaster as Sonner, toast } from \"sonner\";\r\n\r\ntype ToasterProps = React.ComponentProps<typeof Sonner>;\r\n\r\nconst Toaster = ({ ...props }: ToasterProps) => {\r\n  const { theme = \"system\" } = useTheme();\r\n\r\n  return (\r\n    <Sonner\r\n      theme={theme as ToasterProps[\"theme\"]}\r\n      className=\"toaster group\"\r\n      toastOptions={{\r\n        classNames: {\r\n          toast:\r\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\r\n          description: \"group-[.toast]:text-muted-foreground\",\r\n          actionButton: \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\r\n          cancelButton: \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\r\n        },\r\n      }}\r\n      {...props}\r\n    />\r\n  );\r\n};\r\n\r\nexport { Toaster, toast };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":5,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":5,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[79,163],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nexport interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\r\n\r\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {\r\n  return (\r\n    <textarea\r\n      className={cn(\r\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n        className,\r\n      )}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nTextarea.displayName = \"Textarea\";\r\n\r\nexport { Textarea };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\toggle.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":37,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":37,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst toggleVariants = cva(\r\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-transparent\",\r\n        outline: \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-3\",\r\n        sm: \"h-9 px-2.5\",\r\n        lg: \"h-11 px-5\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  },\r\n);\r\n\r\nconst Toggle = React.forwardRef<\r\n  React.ElementRef<typeof TogglePrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>\r\n>(({ className, variant, size, ...props }, ref) => (\r\n  <TogglePrimitive.Root ref={ref} className={cn(toggleVariants({ variant, size, className }))} {...props} />\r\n));\r\n\r\nToggle.displayName = TogglePrimitive.Root.displayName;\r\n\r\nexport { Toggle, toggleVariants };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\vehicle-search-input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\vin-barcode-scanner.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5033,5036],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5033,5036],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useRef, useCallback, useEffect } from 'react';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport { Camera, Upload, X, Loader2, AlertCircle } from 'lucide-react';\r\nimport { useVinScanner } from '@/hooks/useVinScanner';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface VinBarcodeScannerProps {\r\n  open: boolean;\r\n  onClose: () => void;\r\n  onVinDetected: (vin: string) => void;\r\n}\r\n\r\nexport function VinBarcodeScanner({ open, onClose, onVinDetected }: VinBarcodeScannerProps) {\r\n  const { t } = useTranslation();\r\n  const { scanVin, loading, error } = useVinScanner();\r\n  \r\n  const [cameraActive, setCameraActive] = useState(false);\r\n  const [cameraLoading, setCameraLoading] = useState(false);\r\n  const [detectedVins, setDetectedVins] = useState<string[]>([]);\r\n  const [errorMessage, setErrorMessage] = useState<string | null>(null);\r\n  \r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const streamRef = useRef<MediaStream | null>(null);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const stopCamera = useCallback(() => {\r\n    console.log('🛑 Stopping camera...');\r\n    if (streamRef.current) {\r\n      streamRef.current.getTracks().forEach(track => track.stop());\r\n      streamRef.current = null;\r\n    }\r\n    setCameraActive(false);\r\n    setCameraLoading(false);\r\n    setErrorMessage(null);\r\n  }, []);\r\n\r\n  const startCamera = useCallback(async () => {\r\n    if (cameraLoading || cameraActive) return;\r\n    \r\n    console.log('🎬 Starting camera with direct approach...');\r\n    setCameraLoading(true);\r\n    setErrorMessage(null);\r\n    \r\n    try {\r\n      const stream = await navigator.mediaDevices.getUserMedia({\r\n        video: {\r\n          facingMode: 'environment',\r\n          width: { ideal: 1280, min: 640 },\r\n          height: { ideal: 720, min: 480 }\r\n        }\r\n      });\r\n      \r\n      console.log('✅ Camera stream acquired:', {\r\n        id: stream.id,\r\n        active: stream.active,\r\n        tracks: stream.getVideoTracks().length\r\n      });\r\n      \r\n      streamRef.current = stream;\r\n      \r\n      // First, set camera active to trigger render of video element\r\n      console.log('🔄 Setting camera active to render video element...');\r\n      setCameraActive(true);\r\n      \r\n      // Setup video after React renders the video element\r\n      const setupVideoWithRetries = async () => {\r\n        let attempts = 0;\r\n        const maxAttempts = 20; // 2 seconds total\r\n        \r\n        while (attempts < maxAttempts) {\r\n          const video = videoRef.current;\r\n          const container = containerRef.current;\r\n          \r\n          console.log(`🔧 Setup attempt ${attempts + 1}:`, {\r\n            videoElement: !!video,\r\n            container: !!container,\r\n            streamActive: stream.active\r\n          });\r\n          \r\n          if (video) {\r\n            console.log('📺 Video element found! Setting up stream...');\r\n            \r\n            // Setup video\r\n            video.srcObject = stream;\r\n            video.autoplay = true;\r\n            video.playsInline = true;\r\n            video.muted = true;\r\n            \r\n            console.log('🎥 Stream assigned to video element');\r\n            \r\n            // Wait for video to be ready\r\n            const waitForVideo = new Promise((resolve) => {\r\n              const onReady = () => {\r\n                console.log('✅ VIDEO READY!', {\r\n                  width: video.videoWidth,\r\n                  height: video.videoHeight,\r\n                  readyState: video.readyState\r\n                });\r\n                setCameraLoading(false);\r\n                resolve(true);\r\n              };\r\n              \r\n              video.addEventListener('loadedmetadata', onReady, { once: true });\r\n              video.addEventListener('playing', onReady, { once: true });\r\n              \r\n              // Also try immediate play\r\n              video.play()\r\n                .then(() => {\r\n                  console.log('▶️ Video play successful');\r\n                  onReady();\r\n                })\r\n                .catch((playErr) => {\r\n                  console.warn('⚠️ Video play failed (but continuing):', playErr);\r\n                  onReady();\r\n                });\r\n              \r\n              // Safety timeout\r\n              setTimeout(onReady, 1500);\r\n            });\r\n            \r\n            await waitForVideo;\r\n            return;\r\n          }\r\n          \r\n          attempts++;\r\n          await new Promise(resolve => setTimeout(resolve, 100));\r\n        }\r\n        \r\n        console.error('💥 Failed to find video element after', maxAttempts, 'attempts');\r\n        setErrorMessage('Could not initialize video element');\r\n        setCameraLoading(false);\r\n      };\r\n      \r\n      // Start setup process\r\n      setupVideoWithRetries();\r\n      \r\n    } catch (err: any) {\r\n      console.error('💥 Camera setup failed:', err);\r\n      setCameraLoading(false);\r\n      \r\n      if (err.name === 'NotAllowedError') {\r\n        setErrorMessage(t('vinScanner.permissionDenied'));\r\n      } else if (err.name === 'NotFoundError') {\r\n        setErrorMessage(t('vinScanner.noCamera'));\r\n      } else {\r\n        setErrorMessage(t('vinScanner.cameraError'));\r\n      }\r\n    }\r\n  }, [t, cameraLoading, cameraActive]);\r\n\r\n  const captureImage = useCallback(async () => {\r\n    const video = videoRef.current;\r\n    if (!video || !cameraActive) {\r\n      console.warn('📸 Cannot capture:', { video: !!video, active: cameraActive });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      console.log('📸 Capturing from video:', video.videoWidth, 'x', video.videoHeight);\r\n      \r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      if (!ctx) return;\r\n\r\n      canvas.width = video.videoWidth || 640;\r\n      canvas.height = video.videoHeight || 480;\r\n      ctx.drawImage(video, 0, 0);\r\n\r\n      canvas.toBlob(async (blob) => {\r\n        if (blob) {\r\n          console.log('🔍 Processing image for VIN...');\r\n          const file = new File([blob], 'vin.jpg', { type: 'image/jpeg' });\r\n          const vins = await scanVin(file);\r\n          \r\n          console.log('🎯 VIN scan result:', vins);\r\n          setDetectedVins(vins);\r\n          \r\n          if (vins.length === 1) {\r\n            onVinDetected(vins[0]);\r\n            onClose();\r\n          }\r\n        }\r\n      }, 'image/jpeg', 0.95);\r\n    } catch (err) {\r\n      console.error('📸 Capture failed:', err);\r\n      setErrorMessage(t('vinScanner.captureError'));\r\n    }\r\n  }, [scanVin, cameraActive, onVinDetected, onClose, t]);\r\n\r\n  const handleFileUpload = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = event.target.files?.[0];\r\n    if (!file) return;\r\n    \r\n    const vins = await scanVin(file);\r\n    setDetectedVins(vins);\r\n    \r\n    if (vins.length === 1) {\r\n      onVinDetected(vins[0]);\r\n      onClose();\r\n    }\r\n  }, [scanVin, onVinDetected, onClose]);\r\n\r\n  // Cleanup on dialog close\r\n  useEffect(() => {\r\n    if (!open) {\r\n      stopCamera();\r\n      setDetectedVins([]);\r\n      setErrorMessage(null);\r\n    }\r\n    return () => {\r\n      stopCamera();\r\n    };\r\n  }, [open, stopCamera]);\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onClose}>\r\n      <DialogContent className=\"max-w-md\" aria-describedby=\"vin-scanner-desc\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <Camera className=\"h-5 w-5\" />\r\n            {t('vinScanner.title')}\r\n          </DialogTitle>\r\n          <DialogDescription id=\"vin-scanner-desc\">\r\n            {t('vinScanner.instruction')}\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-4\">\r\n          {/* Error Alert */}\r\n          {(error || errorMessage) && (\r\n            <Alert variant=\"destructive\">\r\n              <AlertCircle className=\"h-4 w-4\" />\r\n              <AlertDescription>{error || errorMessage}</AlertDescription>\r\n            </Alert>\r\n          )}\r\n\r\n          {/* Detected VINs */}\r\n          {detectedVins.length > 0 && (\r\n            <div className=\"space-y-2\">\r\n              <p className=\"text-sm font-medium\">\r\n                {t('vinScanner.detected')} ({detectedVins.length})\r\n              </p>\r\n              {detectedVins.map((vin, index) => (\r\n                <Button\r\n                  key={index}\r\n                  variant=\"outline\"\r\n                  className=\"w-full justify-start font-mono text-sm\"\r\n                  onClick={() => onVinDetected(vin)}\r\n                >\r\n                  {vin}\r\n                </Button>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {/* Main Content */}\r\n          <div className=\"space-y-4\">\r\n            {cameraActive ? (\r\n              // Camera Active View\r\n              <div className=\"space-y-3\">\r\n                <div \r\n                  ref={containerRef}\r\n                  className=\"relative bg-gray-900 rounded-lg overflow-hidden border\"\r\n                  style={{ aspectRatio: '4/3', minHeight: '200px' }}\r\n                >\r\n                  <video\r\n                    ref={videoRef}\r\n                    autoPlay\r\n                    playsInline\r\n                    muted\r\n                    className=\"w-full h-full object-cover\"\r\n                    style={{ \r\n                      display: 'block',\r\n                      width: '100%',\r\n                      height: '100%'\r\n                    }}\r\n                    onLoadedMetadata={() => console.log('📺 Video metadata loaded')}\r\n                    onCanPlay={() => console.log('🎯 Video can play')}\r\n                    onPlaying={() => console.log('▶️ Video is playing')}\r\n                    onError={(e) => console.error('💥 Video element error:', e)}\r\n                  />\r\n                  \r\n                  {cameraLoading && (\r\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-black/70\">\r\n                      <div className=\"text-center text-white\">\r\n                        <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-2\" />\r\n                        <p className=\"text-sm\">{t('vinScanner.initializingCamera')}</p>\r\n                      </div>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                <div className=\"flex gap-2\">\r\n                  <Button\r\n                    onClick={captureImage}\r\n                    disabled={loading}\r\n                    className=\"flex-1\"\r\n                  >\r\n                    {loading ? (\r\n                      <>\r\n                        <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\r\n                        Scanning...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <Camera className=\"h-4 w-4 mr-2\" />\r\n                        {t('vinScanner.capture')}\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                  <Button variant=\"outline\" onClick={stopCamera} size=\"icon\">\r\n                    <X className=\"h-4 w-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              // Start Screen\r\n              <div className=\"text-center py-8\">\r\n                <div className=\"relative\">\r\n                  <Camera className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\r\n                  {cameraLoading && (\r\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\r\n                      <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                <p className=\"text-sm text-muted-foreground mb-6\">\r\n                  {cameraLoading ? 'Starting camera...' : t('vinScanner.instruction')}\r\n                </p>\r\n                \r\n                <div className=\"space-y-3\">\r\n                  <Button \r\n                    onClick={startCamera} \r\n                    disabled={cameraLoading}\r\n                    className=\"w-full\"\r\n                    size=\"lg\"\r\n                  >\r\n                    {cameraLoading ? (\r\n                      <>\r\n                        <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                        Starting...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <Camera className=\"h-4 w-4 mr-2\" />\r\n                        {t('vinScanner.startCamera')}\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                  \r\n                  <Button\r\n                    variant=\"outline\"\r\n                    onClick={() => fileInputRef.current?.click()}\r\n                    className=\"w-full\"\r\n                    size=\"lg\"\r\n                  >\r\n                    <Upload className=\"h-4 w-4 mr-2\" />\r\n                    {t('vinScanner.uploadImage')}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <input\r\n            ref={fileInputRef}\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            className=\"hidden\"\r\n            onChange={handleFileUpload}\r\n            capture=\"environment\"\r\n          />\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\ui\\vin-input-with-scanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\AdvancedUserFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\DirectUserCreationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\UnifiedUserManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\UserActivityFeed.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[633,636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[633,636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\r\nimport { \r\n  UserPlus, \r\n  Shield, \r\n  Mail, \r\n  UserCheck, \r\n  Clock,\r\n  Activity\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface RecentActivity {\r\n  id: string;\r\n  type: 'user_joined' | 'role_assigned' | 'invitation_sent' | 'user_activated';\r\n  description: string;\r\n  timestamp: string;\r\n  user?: string;\r\n  metadata?: any;\r\n}\r\n\r\ninterface UserActivityFeedProps {\r\n  activities: RecentActivity[];\r\n}\r\n\r\nexport const UserActivityFeed: React.FC<UserActivityFeedProps> = ({ activities }) => {\r\n  const { t } = useTranslation();\r\n\r\n  const getActivityIcon = (type: RecentActivity['type']) => {\r\n    switch (type) {\r\n      case 'user_joined':\r\n        return <UserPlus className=\"h-4 w-4 text-green-600\" />;\r\n      case 'role_assigned':\r\n        return <Shield className=\"h-4 w-4 text-blue-600\" />;\r\n      case 'invitation_sent':\r\n        return <Mail className=\"h-4 w-4 text-yellow-600\" />;\r\n      case 'user_activated':\r\n        return <UserCheck className=\"h-4 w-4 text-purple-600\" />;\r\n      default:\r\n        return <Activity className=\"h-4 w-4 text-gray-600\" />;\r\n    }\r\n  };\r\n\r\n  const getActivityBadgeVariant = (type: RecentActivity['type']) => {\r\n    switch (type) {\r\n      case 'user_joined':\r\n        return 'default';\r\n      case 'role_assigned':\r\n        return 'secondary';\r\n      case 'invitation_sent':\r\n        return 'outline';\r\n      case 'user_activated':\r\n        return 'default';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  const getActivityBadgeText = (type: RecentActivity['type']) => {\r\n    switch (type) {\r\n      case 'user_joined':\r\n        return 'New User';\r\n      case 'role_assigned':\r\n        return 'Role Update';\r\n      case 'invitation_sent':\r\n        return 'Invitation';\r\n      case 'user_activated':\r\n        return 'Activated';\r\n      default:\r\n        return 'Activity';\r\n    }\r\n  };\r\n\r\n  const getUserInitials = (email?: string) => {\r\n    if (!email) return 'U';\r\n    return email.split('@')[0].slice(0, 2).toUpperCase();\r\n  };\r\n\r\n  if (activities.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Activity className=\"h-5 w-5\" />\r\n            Recent Activity\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"text-center py-8\">\r\n            <Activity className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n            <p className=\"text-muted-foreground\">No recent activity</p>\r\n            <p className=\"text-sm text-muted-foreground mt-1\">\r\n              User activities will appear here when they occur\r\n            </p>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Activity className=\"h-5 w-5\" />\r\n          Recent Activity\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent>\r\n        <div className=\"space-y-4\">\r\n          {activities.map((activity) => (\r\n            <div key={activity.id} className=\"flex items-start gap-4 p-4 rounded-lg border bg-card hover:bg-muted/50 transition-colors\">\r\n              {/* Avatar */}\r\n              <Avatar className=\"h-10 w-10\">\r\n                <AvatarFallback className=\"text-xs\">\r\n                  {getUserInitials(activity.user)}\r\n                </AvatarFallback>\r\n              </Avatar>\r\n\r\n              {/* Content */}\r\n              <div className=\"flex-1 min-w-0\">\r\n                <div className=\"flex items-center gap-2 mb-1\">\r\n                  {getActivityIcon(activity.type)}\r\n                  <Badge variant={getActivityBadgeVariant(activity.type)} className=\"text-xs\">\r\n                    {getActivityBadgeText(activity.type)}\r\n                  </Badge>\r\n                </div>\r\n                \r\n                <p className=\"text-sm font-medium text-foreground mb-1\">\r\n                  {activity.description}\r\n                </p>\r\n                \r\n                {activity.user && (\r\n                  <p className=\"text-sm text-muted-foreground mb-2\">\r\n                    User: {activity.user}\r\n                  </p>\r\n                )}\r\n\r\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\r\n                  <Clock className=\"h-3 w-3\" />\r\n                  {formatDistanceToNow(new Date(activity.timestamp), { addSuffix: true })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Show More Button */}\r\n        {activities.length > 5 && (\r\n          <div className=\"mt-6 text-center\">\r\n            <button className=\"text-sm text-primary hover:underline\">\r\n              View all activity\r\n            </button>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\UserAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\UserAuditLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\UserDashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1858,1861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1858,1861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { PermissionGuard } from '@/components/permissions/PermissionGuard';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { \r\n  Users, \r\n  UserCheck, \r\n  UserPlus, \r\n  Mail, \r\n  Shield, \r\n  Activity,\r\n  Download,\r\n  Filter,\r\n  TrendingUp,\r\n  Building2,\r\n  Clock,\r\n  CheckCircle\r\n} from 'lucide-react';\r\nimport { UserStatsCards } from './UserStatsCards';\r\nimport { UserActivityFeed } from './UserActivityFeed';\r\nimport { AdvancedUserFilters } from './AdvancedUserFilters';\r\nimport { UnifiedUserManagement } from './UnifiedUserManagement';\r\nimport { InvitationManagement } from '../invitations/InvitationManagement';\r\nimport { AdvancedPermissionManager } from '@/components/permissions/AdvancedPermissionManager';\r\nimport { UserAnalytics } from './UserAnalytics';\r\nimport { UserAuditLog } from './UserAuditLog';\r\nimport { UserPasswordManagement } from './password/UserPasswordManagement';\r\n\r\ninterface UserDashboardStats {\r\n  totalUsers: number;\r\n  activeUsers: number;\r\n  pendingInvitations: number;\r\n  recentlyJoined: number;\r\n  roleDistribution: Array<{ role: string; count: number; color: string }>;\r\n  dealershipDistribution: Array<{ dealership: string; userCount: number }>;\r\n  monthlyGrowth: number;\r\n}\r\n\r\ninterface RecentActivity {\r\n  id: string;\r\n  type: 'user_joined' | 'role_assigned' | 'invitation_sent' | 'user_activated';\r\n  description: string;\r\n  timestamp: string;\r\n  user?: string;\r\n  metadata?: any;\r\n}\r\n\r\nexport const UserDashboard: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  \r\n  // State management\r\n  const [stats, setStats] = useState<UserDashboardStats | null>(null);\r\n  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  // Data fetching\r\n  const fetchDashboardData = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Fetch user statistics\r\n      const [usersResult, invitationsResult, rolesResult, dealershipsResult] = await Promise.all([\r\n        // Users with memberships (INNER JOIN - only users with memberships)\r\n        supabase\r\n          .from('profiles')\r\n          .select(`\r\n            *,\r\n            dealer_memberships!inner (\r\n              dealer_id,\r\n              is_active,\r\n              created_at\r\n            )\r\n          `),\r\n        \r\n        // Pending invitations\r\n        supabase\r\n          .from('dealer_invitations')\r\n          .select('*')\r\n          .is('accepted_at', null)\r\n          .gt('expires_at', new Date().toISOString()),\r\n        \r\n        // Role distribution\r\n        supabase.rpc('get_user_roles', { user_uuid: null }),\r\n        \r\n        // Dealerships for distribution\r\n        supabase\r\n          .from('dealerships')\r\n          .select('id, name')\r\n          .eq('status', 'active')\r\n      ]);\r\n\r\n      if (usersResult.error) throw usersResult.error;\r\n      if (invitationsResult.error) throw invitationsResult.error;\r\n\r\n      const users = usersResult.data || [];\r\n      const invitations = invitationsResult.data || [];\r\n      const dealerships = dealershipsResult.data || [];\r\n\r\n      console.log('🔍 DEBUG UserDashboard: Invitations:', invitations.length);\r\n      console.log('🔍 DEBUG UserDashboard: Dealerships:', dealerships.length);\r\n\r\n      // Calculate stats\r\n      const activeUsers = users.filter(user => \r\n        user.dealer_memberships?.some((m: { is_active: boolean }) => m.is_active)\r\n      );\r\n\r\n      const recentlyJoined = users.filter(user => {\r\n        const joinDate = new Date(user.created_at);\r\n        const weekAgo = new Date();\r\n        weekAgo.setDate(weekAgo.getDate() - 7);\r\n        return joinDate > weekAgo;\r\n      });\r\n\r\n      // Role distribution (mock data for now - would need proper role aggregation)\r\n      const roleDistribution = [\r\n        { role: 'Dealer Admin', count: Math.floor(users.length * 0.1), color: 'bg-blue-500' },\r\n        { role: 'Sales Manager', count: Math.floor(users.length * 0.15), color: 'bg-green-500' },\r\n        { role: 'Service Advisor', count: Math.floor(users.length * 0.25), color: 'bg-yellow-500' },\r\n        { role: 'Detail Staff', count: Math.floor(users.length * 0.4), color: 'bg-purple-500' },\r\n        { role: 'Viewer', count: Math.floor(users.length * 0.1), color: 'bg-gray-500' }\r\n      ];\r\n\r\n      // Dealership distribution\r\n      const dealershipDistribution = dealerships.map(dealer => ({\r\n        dealership: dealer.name,\r\n        userCount: users.filter(user => \r\n          user.dealer_memberships?.some((m: { dealer_id: number }) => m.dealer_id === dealer.id)\r\n        ).length\r\n      }));\r\n\r\n      const dashboardStats: UserDashboardStats = {\r\n        totalUsers: users.length,\r\n        activeUsers: activeUsers.length,\r\n        pendingInvitations: invitations.length,\r\n        recentlyJoined: recentlyJoined.length,\r\n        roleDistribution,\r\n        dealershipDistribution,\r\n        monthlyGrowth: Math.round(((recentlyJoined.length * 4) / users.length) * 100) // Approximate monthly growth\r\n      };\r\n\r\n      setStats(dashboardStats);\r\n\r\n      // Mock recent activity (in a real app, this would come from an activity log)\r\n      const mockActivity: RecentActivity[] = [\r\n        {\r\n          id: '1',\r\n          type: 'user_joined',\r\n          description: 'New user joined the system',\r\n          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\r\n          user: 'john@dealer.com'\r\n        },\r\n        {\r\n          id: '2',\r\n          type: 'role_assigned',\r\n          description: 'Role assigned to user',\r\n          timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\r\n          user: 'sarah@dealer.com'\r\n        },\r\n        {\r\n          id: '3',\r\n          type: 'invitation_sent',\r\n          description: 'Invitation sent to new user',\r\n          timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\r\n          user: 'mike@dealer.com'\r\n        }\r\n      ];\r\n\r\n      setRecentActivity(mockActivity);\r\n\r\n    } catch (error: unknown) {\r\n      console.error('Error fetching dashboard data:', error);\r\n      const errorMessage = error instanceof Error ? error.message : 'Error loading dashboard data';\r\n      toast({\r\n        title: t('common.error'),\r\n        description: errorMessage,\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [t, toast]);\r\n\r\n  const handleRefresh = async () => {\r\n    setRefreshing(true);\r\n    await fetchDashboardData();\r\n    setRefreshing(false);\r\n    toast({\r\n      title: t('common.success'),\r\n      description: 'Dashboard data refreshed',\r\n    });\r\n  };\r\n\r\n  const handleExportUsers = async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select(`\r\n          email,\r\n          first_name,\r\n          last_name,\r\n          user_type,\r\n          created_at,\r\n          dealer_memberships (\r\n            dealer_id,\r\n            is_active\r\n          )\r\n        `);\r\n\r\n      if (error) throw error;\r\n\r\n      // Convert to CSV format\r\n      const csvContent = [\r\n        ['Email', 'First Name', 'Last Name', 'Type', 'Created At', 'Active'].join(','),\r\n        ...data.map(user => [\r\n          user.email,\r\n          user.first_name || '',\r\n          user.last_name || '',\r\n          user.user_type,\r\n          new Date(user.created_at).toLocaleDateString(),\r\n          user.dealer_memberships?.some((m: { is_active: boolean }) => m.is_active) ? 'Yes' : 'No'\r\n        ].join(','))\r\n      ].join('\\n');\r\n\r\n      // Download CSV\r\n      const blob = new Blob([csvContent], { type: 'text/csv' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `users-export-${new Date().toISOString().split('T')[0]}.csv`;\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: 'Users exported successfully',\r\n      });\r\n    } catch (error: unknown) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Error exporting users';\r\n      toast({\r\n        title: t('common.error'),\r\n        description: errorMessage,\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDashboardData();\r\n  }, [fetchDashboardData]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\r\n          {[...Array(4)].map((_, i) => (\r\n            <Card key={i} className=\"animate-pulse\">\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"h-4 bg-muted rounded w-1/2 mb-2\"></div>\r\n                <div className=\"h-8 bg-muted rounded w-1/3\"></div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n        <div className=\"h-96 bg-muted rounded animate-pulse\"></div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <PermissionGuard module=\"users\" permission=\"read\">\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight\">{t('user_management.title')}</h1>\r\n            <p className=\"text-muted-foreground\">\r\n              {t('user_management.manage_description')}\r\n            </p>\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={handleRefresh}\r\n              disabled={refreshing}\r\n              className=\"flex items-center gap-2\"\r\n            >\r\n              <Activity className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\r\n              {t('common.refresh')}\r\n            </Button>\r\n            <PermissionGuard module=\"users\" permission=\"admin\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={handleExportUsers}\r\n                className=\"flex items-center gap-2\"\r\n              >\r\n                <Download className=\"h-4 w-4\" />\r\n                {t('user_management.export_report')}\r\n              </Button>\r\n            </PermissionGuard>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Stats Cards */}\r\n        {stats && <UserStatsCards stats={stats} />}\r\n\r\n        {/* Main Content Tabs */}\r\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\r\n          <TabsList className=\"grid w-full grid-cols-8\">\r\n            <TabsTrigger value=\"overview\">{t('management.overview')}</TabsTrigger>\r\n            <TabsTrigger value=\"users\">{t('management.users')}</TabsTrigger>\r\n            <TabsTrigger value=\"invitations\">Invitations</TabsTrigger>\r\n            <TabsTrigger value=\"permissions\">Permissions</TabsTrigger>\r\n            <TabsTrigger value=\"activity\">{t('common.activity')}</TabsTrigger>\r\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\r\n            <TabsTrigger value=\"audit\">Audit Log</TabsTrigger>\r\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\r\n            <TabsTrigger value=\"password-security\">Password Security</TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"overview\" className=\"space-y-6\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n              {/* Role Distribution Chart */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Shield className=\"h-5 w-5\" />\r\n                    Role Distribution\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-3\">\r\n                    {stats?.roleDistribution.map((role, index) => (\r\n                      <div key={index} className=\"flex items-center justify-between\">\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <div className={`w-3 h-3 rounded-full ${role.color}`}></div>\r\n                          <span className=\"text-sm font-medium\">{role.role}</span>\r\n                        </div>\r\n                        <Badge variant=\"outline\">{role.count}</Badge>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Dealership Distribution */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Building2 className=\"h-5 w-5\" />\r\n                    Dealership Distribution\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-3\">\r\n                    {stats?.dealershipDistribution.slice(0, 5).map((dealer, index) => (\r\n                      <div key={index} className=\"flex items-center justify-between\">\r\n                        <span className=\"text-sm font-medium truncate\">{dealer.dealership}</span>\r\n                        <Badge variant=\"outline\">{dealer.userCount} users</Badge>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"users\">\r\n            <UnifiedUserManagement />\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"activity\">\r\n            <UserActivityFeed activities={recentActivity} />\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"analytics\">\r\n            <UserAnalytics dealerId={stats?.dealershipDistribution?.[0] ? 5 : undefined} />\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"invitations\">\r\n            <InvitationManagement />\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"permissions\">\r\n            <AdvancedPermissionManager />\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"audit\">\r\n            <UserAuditLog dealerId={stats?.dealershipDistribution?.[0] ? 5 : undefined} />\r\n          </TabsContent>\r\n\r\n        <TabsContent value=\"notifications\">\r\n          <div className=\"text-center py-8\">\r\n            <h3 className=\"text-lg font-medium\">Notification Center</h3>\r\n            <p className=\"text-muted-foreground\">Smart notification management coming soon</p>\r\n          </div>\r\n        </TabsContent>\r\n\r\n        <TabsContent value=\"password-security\">\r\n          <PermissionGuard module=\"users\" permission=\"write\">\r\n            <UserPasswordManagement />\r\n          </PermissionGuard>\r\n        </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </PermissionGuard>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\UserStatsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\password\\BulkPasswordOperations.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4331,4334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4331,4334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":147,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5185,5188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5185,5188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Checkbox } from '@/components/ui/checkbox';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Progress } from '@/components/ui/progress';\r\nimport { \r\n  Users, \r\n  Play, \r\n  AlertTriangle, \r\n  CheckCircle, \r\n  XCircle,\r\n  Clock,\r\n  Filter\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { usePasswordManagement } from '@/hooks/usePasswordManagement';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface BulkPasswordOperationsProps {\r\n  dealerId: number;\r\n}\r\n\r\nexport const BulkPasswordOperations = ({ dealerId }: BulkPasswordOperationsProps) => {\r\n  const { t } = useTranslation();\r\n  const { bulkPasswordOperation, getBulkOperations, loading } = usePasswordManagement();\r\n  \r\n  const [operationType, setOperationType] = useState<'bulk_reset' | 'bulk_force_change' | 'bulk_temp_password'>('bulk_reset');\r\n  const [targetUsers, setTargetUsers] = useState<string[]>([]);\r\n  const [availableUsers, setAvailableUsers] = useState<Array<{ user_id: string; profiles: { id: string; email: string; first_name?: string; last_name?: string } }>>([]);\r\n  const [recentOperations, setRecentOperations] = useState<Array<{ id: string; operation_type: string; created_at: string; user_count: number }>>([]);\r\n  const [loadingUsers, setLoadingUsers] = useState(false);\r\n\r\n  const fetchUsers = useCallback(async () => {\r\n    try {\r\n      setLoadingUsers(true);\r\n\r\n      const { data, error } = await supabase\r\n        .from('dealer_memberships')\r\n        .select(`\r\n          user_id,\r\n          profiles!inner(id, email, first_name, last_name)\r\n        `)\r\n        .eq('dealer_id', dealerId)\r\n        .eq('is_active', true);\r\n\r\n      if (error) throw error;\r\n      setAvailableUsers(data || []);\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching users:', error);\r\n    } finally {\r\n      setLoadingUsers(false);\r\n    }\r\n  }, [dealerId]);\r\n\r\n  const fetchRecentOperations = useCallback(async () => {\r\n    try {\r\n      const operations = await getBulkOperations(dealerId);\r\n      setRecentOperations(operations.slice(0, 5)); // Show last 5 operations\r\n    } catch (error) {\r\n      console.error('Error fetching operations:', error);\r\n    }\r\n  }, [dealerId, getBulkOperations]);\r\n\r\n  useEffect(() => {\r\n    if (dealerId) {\r\n      fetchUsers();\r\n      fetchRecentOperations();\r\n    }\r\n  }, [dealerId, fetchUsers, fetchRecentOperations]);\r\n\r\n  const handleUserToggle = (userId: string, checked: boolean) => {\r\n    if (checked) {\r\n      setTargetUsers(prev => [...prev, userId]);\r\n    } else {\r\n      setTargetUsers(prev => prev.filter(id => id !== userId));\r\n    }\r\n  };\r\n\r\n  const selectAll = () => {\r\n    setTargetUsers(availableUsers.map(user => user.user_id));\r\n  };\r\n\r\n  const selectNone = () => {\r\n    setTargetUsers([]);\r\n  };\r\n\r\n  const handleBulkOperation = async () => {\r\n    if (targetUsers.length === 0) return;\r\n\r\n    try {\r\n      await bulkPasswordOperation(\r\n        operationType,\r\n        dealerId,\r\n        { userIds: targetUsers }\r\n      );\r\n\r\n      // Reset selection\r\n      setTargetUsers([]);\r\n      \r\n      // Refresh recent operations\r\n      await fetchRecentOperations();\r\n\r\n    } catch (error) {\r\n      console.error('Error executing bulk operation:', error);\r\n    }\r\n  };\r\n\r\n  const getOperationStatusBadge = (status: string) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return <Badge variant=\"default\" className=\"bg-green-100 text-green-800\"><CheckCircle className=\"h-3 w-3 mr-1\" />{t('common.completed')}</Badge>;\r\n      case 'processing':\r\n        return <Badge variant=\"secondary\"><Clock className=\"h-3 w-3 mr-1\" />{t('common.processing')}</Badge>;\r\n      case 'failed':\r\n        return <Badge variant=\"destructive\"><XCircle className=\"h-3 w-3 mr-1\" />{t('common.failed')}</Badge>;\r\n      default:\r\n        return <Badge variant=\"outline\"><Clock className=\"h-3 w-3 mr-1\" />{t('common.pending')}</Badge>;\r\n    }\r\n  };\r\n\r\n  const getOperationProgress = (operation: any) => {\r\n    if (operation.total_users === 0) return 0;\r\n    return Math.round((operation.processed_users / operation.total_users) * 100);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Operation Configuration */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Users className=\"h-5 w-5\" />\r\n            {t('password_management.bulk_configuration')}\r\n          </CardTitle>\r\n          <CardDescription>\r\n            {t('password_management.bulk_configuration_desc')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {/* Operation Type */}\r\n          <div className=\"space-y-2\">\r\n            <Label>{t('password_management.operation_type')}</Label>\r\n            <Select value={operationType} onValueChange={(value: any) => setOperationType(value)}>\r\n              <SelectTrigger>\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"bulk_reset\">\r\n                  {t('password_management.bulk_email_reset')}\r\n                </SelectItem>\r\n                <SelectItem value=\"bulk_force_change\">\r\n                  {t('password_management.bulk_force_change')}\r\n                </SelectItem>\r\n                <SelectItem value=\"bulk_temp_password\">\r\n                  {t('password_management.bulk_temp_password')}\r\n                </SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {/* User Selection */}\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <Label>{t('password_management.select_users')}</Label>\r\n              <div className=\"flex gap-2\">\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={selectAll}\r\n                  disabled={loadingUsers}\r\n                >\r\n                  {t('common.select_all')}\r\n                </Button>\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={selectNone}\r\n                >\r\n                  {t('common.select_none')}\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {loadingUsers ? (\r\n              <div className=\"text-sm text-muted-foreground\">\r\n                {t('common.loading')}...\r\n              </div>\r\n            ) : (\r\n              <div className=\"max-h-60 overflow-y-auto border rounded-lg\">\r\n                {availableUsers.map((user) => (\r\n                  <div key={user.user_id} className=\"flex items-center space-x-2 p-3 border-b last:border-b-0\">\r\n                    <Checkbox\r\n                      id={`user-${user.user_id}`}\r\n                      checked={targetUsers.includes(user.user_id)}\r\n                      onCheckedChange={(checked) => \r\n                        handleUserToggle(user.user_id, checked as boolean)\r\n                      }\r\n                    />\r\n                    <Label \r\n                      htmlFor={`user-${user.user_id}`} \r\n                      className=\"flex-1 cursor-pointer\"\r\n                    >\r\n                      <div className=\"font-medium\">\r\n                        {user.profiles?.first_name} {user.profiles?.last_name}\r\n                      </div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        {user.profiles?.email}\r\n                      </div>\r\n                    </Label>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            )}\r\n\r\n            {targetUsers.length > 0 && (\r\n              <div className=\"p-3 bg-primary/5 border border-primary/20 rounded-lg\">\r\n                <Badge variant=\"outline\">\r\n                  {t('password_management.selected_users', { count: targetUsers.length })}\r\n                </Badge>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Warning */}\r\n          {targetUsers.length > 0 && (\r\n            <div className=\"flex items-start gap-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\r\n              <AlertTriangle className=\"h-5 w-5 text-yellow-600 mt-0.5\" />\r\n              <div className=\"text-sm\">\r\n                <p className=\"font-medium text-yellow-800\">\r\n                  {t('password_management.bulk_warning_title')}\r\n                </p>\r\n                <p className=\"text-yellow-700 mt-1\">\r\n                  {t('password_management.bulk_warning_desc', { \r\n                    count: targetUsers.length,\r\n                    operation: operationType \r\n                  })}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Execute Button */}\r\n          <Button\r\n            onClick={handleBulkOperation}\r\n            disabled={loading || targetUsers.length === 0}\r\n            className=\"w-full\"\r\n            variant={targetUsers.length > 0 ? \"default\" : \"outline\"}\r\n          >\r\n            {loading ? (\r\n              <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\r\n            ) : (\r\n              <Play className=\"h-4 w-4 mr-2\" />\r\n            )}\r\n            {t('password_management.execute_operation')}\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Recent Operations */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Filter className=\"h-5 w-5\" />\r\n            {t('password_management.recent_operations')}\r\n          </CardTitle>\r\n          <CardDescription>\r\n            {t('password_management.recent_operations_desc')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {recentOperations.length === 0 ? (\r\n            <p className=\"text-muted-foreground text-center py-6\">\r\n              {t('password_management.no_operations')}\r\n            </p>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              {recentOperations.map((operation) => (\r\n                <div key={operation.id} className=\"border rounded-lg p-4\">\r\n                  <div className=\"flex items-center justify-between mb-2\">\r\n                    <div className=\"font-medium\">\r\n                      {t(`password_management.${operation.operation_type}`)}\r\n                    </div>\r\n                    {getOperationStatusBadge(operation.status)}\r\n                  </div>\r\n                  \r\n                  <div className=\"text-sm text-muted-foreground mb-2\">\r\n                    {t('password_management.operation_details', {\r\n                      total: operation.total_users,\r\n                      successful: operation.successful_operations,\r\n                      failed: operation.failed_operations\r\n                    })}\r\n                  </div>\r\n                  \r\n                  {operation.status === 'processing' && (\r\n                    <Progress \r\n                      value={getOperationProgress(operation)} \r\n                      className=\"h-2\" \r\n                    />\r\n                  )}\r\n                  \r\n                  <div className=\"text-xs text-muted-foreground mt-2\">\r\n                    {t('common.created_at')}: {new Date(operation.created_at).toLocaleString()}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\password\\PasswordActivityLog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\password\\PasswordPolicyManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\password\\PasswordResetActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1290,1293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1290,1293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1695,1698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1695,1698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7012,7015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7012,7015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Key, \r\n  Mail, \r\n  Lock, \r\n  RefreshCw, \r\n  Eye, \r\n  EyeOff,\r\n  Copy,\r\n  Search,\r\n  User\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { usePasswordManagement } from '@/hooks/usePasswordManagement';\r\nimport { usePasswordPolicies } from '@/hooks/usePasswordPolicies';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface PasswordResetActionsProps {\r\n  dealerId: number;\r\n}\r\n\r\nexport const PasswordResetActions = ({ dealerId }: PasswordResetActionsProps) => {\r\n  const { t } = useTranslation();\r\n  const { resetUserPassword, loading } = usePasswordManagement();\r\n  const { generateSecurePassword } = usePasswordPolicies(dealerId);\r\n  \r\n  const [selectedUser, setSelectedUser] = useState<any>(null);\r\n  const [resetType, setResetType] = useState<'email_reset' | 'temp_password' | 'force_change'>('email_reset');\r\n  const [tempPassword, setTempPassword] = useState('');\r\n  const [forceChange, setForceChange] = useState(true);\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [userSearch, setUserSearch] = useState('');\r\n  const [searchResults, setSearchResults] = useState<any[]>([]);\r\n  const [searchLoading, setSearchLoading] = useState(false);\r\n\r\n  const searchUsers = async (query: string) => {\r\n    if (!query.trim()) {\r\n      setSearchResults([]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setSearchLoading(true);\r\n      \r\n      const { data, error } = await supabase\r\n        .from('dealer_memberships')\r\n        .select(`\r\n          user_id,\r\n          profiles!inner(id, email, first_name, last_name)\r\n        `)\r\n        .eq('dealer_id', dealerId)\r\n        .eq('is_active', true)\r\n        .or(`profiles.email.ilike.%${query}%, profiles.first_name.ilike.%${query}%, profiles.last_name.ilike.%${query}%`);\r\n\r\n      if (error) throw error;\r\n      setSearchResults(data || []);\r\n\r\n    } catch (error) {\r\n      console.error('Error searching users:', error);\r\n      setSearchResults([]);\r\n    } finally {\r\n      setSearchLoading(false);\r\n    }\r\n  };\r\n\r\n  const generatePassword = () => {\r\n    const newPassword = generateSecurePassword();\r\n    setTempPassword(newPassword);\r\n  };\r\n\r\n  const copyPassword = async () => {\r\n    await navigator.clipboard.writeText(tempPassword);\r\n  };\r\n\r\n  const handleReset = async () => {\r\n    if (!selectedUser) return;\r\n\r\n    try {\r\n      await resetUserPassword(\r\n        selectedUser.user_id,\r\n        resetType,\r\n        dealerId,\r\n        {\r\n          tempPassword: resetType === 'temp_password' ? tempPassword : undefined,\r\n          forceChange\r\n        }\r\n      );\r\n\r\n      // Reset form\r\n      setSelectedUser(null);\r\n      setUserSearch('');\r\n      setTempPassword('');\r\n      setSearchResults([]);\r\n\r\n    } catch (error) {\r\n      console.error('Error resetting password:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* User Search */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Search className=\"h-5 w-5\" />\r\n            {t('password_management.select_user')}\r\n          </CardTitle>\r\n          <CardDescription>\r\n            {t('password_management.search_user_desc')}\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor=\"user-search\">{t('password_management.search_users')}</Label>\r\n            <Input\r\n              id=\"user-search\"\r\n              placeholder={t('password_management.search_placeholder')}\r\n              value={userSearch}\r\n              onChange={(e) => {\r\n                setUserSearch(e.target.value);\r\n                searchUsers(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          {searchLoading && (\r\n            <div className=\"text-sm text-muted-foreground\">\r\n              {t('common.searching')}...\r\n            </div>\r\n          )}\r\n\r\n          {searchResults.length > 0 && (\r\n            <div className=\"space-y-2 max-h-40 overflow-y-auto\">\r\n              {searchResults.map((user) => (\r\n                <div\r\n                  key={user.user_id}\r\n                  className={`p-3 border rounded-lg cursor-pointer transition-colors ${\r\n                    selectedUser?.user_id === user.user_id\r\n                      ? 'bg-primary/10 border-primary'\r\n                      : 'hover:bg-muted'\r\n                  }`}\r\n                  onClick={() => setSelectedUser(user)}\r\n                >\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <User className=\"h-4 w-4\" />\r\n                    <div>\r\n                      <div className=\"font-medium\">\r\n                        {user.profiles?.first_name} {user.profiles?.last_name}\r\n                      </div>\r\n                      <div className=\"text-sm text-muted-foreground\">\r\n                        {user.profiles?.email}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {selectedUser && (\r\n            <div className=\"p-3 bg-primary/5 border border-primary/20 rounded-lg\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Badge variant=\"outline\">\r\n                  {t('password_management.selected')}\r\n                </Badge>\r\n                <span className=\"font-medium\">\r\n                  {selectedUser.profiles?.first_name} {selectedUser.profiles?.last_name}\r\n                </span>\r\n                <span className=\"text-sm text-muted-foreground\">\r\n                  ({selectedUser.profiles?.email})\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Reset Options */}\r\n      {selectedUser && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Key className=\"h-5 w-5\" />\r\n              {t('password_management.reset_options')}\r\n            </CardTitle>\r\n            <CardDescription>\r\n              {t('password_management.choose_reset_method')}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-6\">\r\n            {/* Reset Type Selection */}\r\n            <div className=\"space-y-2\">\r\n              <Label>{t('password_management.reset_type')}</Label>\r\n              <Select value={resetType} onValueChange={(value: any) => setResetType(value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"email_reset\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Mail className=\"h-4 w-4\" />\r\n                      {t('password_management.email_reset')}\r\n                    </div>\r\n                  </SelectItem>\r\n                  <SelectItem value=\"temp_password\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Lock className=\"h-4 w-4\" />\r\n                      {t('password_management.temp_password')}\r\n                    </div>\r\n                  </SelectItem>\r\n                  <SelectItem value=\"force_change\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <RefreshCw className=\"h-4 w-4\" />\r\n                      {t('password_management.force_change')}\r\n                    </div>\r\n                  </SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            {/* Temporary Password */}\r\n            {resetType === 'temp_password' && (\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"temp-password\">\r\n                  {t('password_management.temporary_password')}\r\n                </Label>\r\n                <div className=\"flex gap-2\">\r\n                  <div className=\"relative flex-1\">\r\n                    <Input\r\n                      id=\"temp-password\"\r\n                      type={showPassword ? 'text' : 'password'}\r\n                      value={tempPassword}\r\n                      onChange={(e) => setTempPassword(e.target.value)}\r\n                      placeholder={t('password_management.enter_temp_password')}\r\n                    />\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      className=\"absolute right-1 top-1/2 -translate-y-1/2 h-7 w-7\"\r\n                      onClick={() => setShowPassword(!showPassword)}\r\n                    >\r\n                      {showPassword ? (\r\n                        <EyeOff className=\"h-4 w-4\" />\r\n                      ) : (\r\n                        <Eye className=\"h-4 w-4\" />\r\n                      )}\r\n                    </Button>\r\n                  </div>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    onClick={generatePassword}\r\n                  >\r\n                    <RefreshCw className=\"h-4 w-4\" />\r\n                  </Button>\r\n                  {tempPassword && (\r\n                    <Button\r\n                      type=\"button\"\r\n                      variant=\"outline\"\r\n                      onClick={copyPassword}\r\n                    >\r\n                      <Copy className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Force Change Option */}\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Switch\r\n                id=\"force-change\"\r\n                checked={forceChange}\r\n                onCheckedChange={setForceChange}\r\n              />\r\n              <Label htmlFor=\"force-change\">\r\n                {t('password_management.force_change_next_login')}\r\n              </Label>\r\n            </div>\r\n\r\n            {/* Reset Button */}\r\n            <Button\r\n              onClick={handleReset}\r\n              disabled={loading || !selectedUser}\r\n              className=\"w-full\"\r\n            >\r\n              {loading ? (\r\n                <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\r\n              ) : (\r\n                <Key className=\"h-4 w-4 mr-2\" />\r\n              )}\r\n              {t('password_management.reset_password')}\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\password\\PasswordSecurityDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\users\\password\\UserPasswordManagement.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\components\\workflows\\VisualWorkflowBuilder.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1216,1219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1216,1219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback, useRef, useMemo } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { \r\n  Play, \r\n  Pause, \r\n  Save, \r\n  Plus, \r\n  Trash2, \r\n  Settings, \r\n  Zap,\r\n  MessageSquare,\r\n  Mail,\r\n  Phone,\r\n  Clock,\r\n  Users,\r\n  Database,\r\n  GitBranch,\r\n  Filter,\r\n  ArrowRight,\r\n  Circle,\r\n  Square\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { DragDropContext, Droppable, Draggable } from '@hello-pangea/dnd';\r\n\r\ninterface WorkflowNode {\r\n  id: string;\r\n  type: 'trigger' | 'condition' | 'action' | 'delay';\r\n  title: string;\r\n  description: string;\r\n  config: any;\r\n  position: { x: number; y: number };\r\n  connections: string[];\r\n}\r\n\r\ninterface WorkflowTemplate {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  category: string;\r\n  nodes: WorkflowNode[];\r\n  isActive: boolean;\r\n}\r\n\r\ninterface VisualWorkflowBuilderProps {\r\n  dealerId: number;\r\n  onSave?: (workflow: WorkflowTemplate) => void;\r\n  editingWorkflow?: WorkflowTemplate;\r\n}\r\n\r\nexport const VisualWorkflowBuilder: React.FC<VisualWorkflowBuilderProps> = ({\r\n  dealerId,\r\n  onSave,\r\n  editingWorkflow\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const [workflow, setWorkflow] = useState<WorkflowTemplate>(\r\n    editingWorkflow || {\r\n      id: `workflow-${Date.now()}`,\r\n      name: t('workflows.new_workflow', 'New Workflow'),\r\n      description: '',\r\n      category: 'custom',\r\n      nodes: [],\r\n      isActive: false\r\n    }\r\n  );\r\n  const [selectedNode, setSelectedNode] = useState<WorkflowNode | null>(null);\r\n  const [isConfigOpen, setIsConfigOpen] = useState(false);\r\n  const [draggedNodeType, setDraggedNodeType] = useState<string | null>(null);\r\n  const canvasRef = useRef<HTMLDivElement>(null);\r\n\r\n  const nodeTypes = useMemo(() => [\r\n    {\r\n      type: 'trigger',\r\n      title: t('workflows.triggers', 'Triggers'),\r\n      items: [\r\n        { id: 'order_created', title: t('workflows.order_created', 'Order Created'), icon: Plus },\r\n        { id: 'status_changed', title: t('workflows.status_changed', 'Status Changed'), icon: GitBranch },\r\n        { id: 'time_based', title: t('workflows.time_based', 'Time Based'), icon: Clock },\r\n        { id: 'sms_received', title: t('workflows.sms_received', 'SMS Received'), icon: MessageSquare }\r\n      ]\r\n    },\r\n    {\r\n      type: 'condition',\r\n      title: t('workflows.conditions', 'Conditions'),\r\n      items: [\r\n        { id: 'if_status', title: t('workflows.if_status', 'If Status'), icon: Filter },\r\n        { id: 'if_time', title: t('workflows.if_time', 'If Time'), icon: Clock },\r\n        { id: 'if_customer', title: t('workflows.if_customer', 'If Customer'), icon: Users },\r\n        { id: 'if_value', title: t('workflows.if_value', 'If Value'), icon: Database }\r\n      ]\r\n    },\r\n    {\r\n      type: 'action',\r\n      title: t('workflows.actions', 'Actions'),\r\n      items: [\r\n        { id: 'send_sms', title: t('workflows.send_sms', 'Send SMS'), icon: MessageSquare },\r\n        { id: 'send_email', title: t('workflows.send_email', 'Send Email'), icon: Mail },\r\n        { id: 'make_call', title: t('workflows.make_call', 'Make Call'), icon: Phone },\r\n        { id: 'update_status', title: t('workflows.update_status', 'Update Status'), icon: Database },\r\n        { id: 'notify_team', title: t('workflows.notify_team', 'Notify Team'), icon: Users }\r\n      ]\r\n    },\r\n    {\r\n      type: 'delay',\r\n      title: t('workflows.delays', 'Delays'),\r\n      items: [\r\n        { id: 'wait_minutes', title: t('workflows.wait_minutes', 'Wait Minutes'), icon: Clock },\r\n        { id: 'wait_hours', title: t('workflows.wait_hours', 'Wait Hours'), icon: Clock },\r\n        { id: 'wait_days', title: t('workflows.wait_days', 'Wait Days'), icon: Clock }\r\n      ]\r\n    }\r\n  ], [t]);\r\n\r\n  const handleDragStart = useCallback((event: React.DragEvent, nodeType: string, nodeId: string) => {\r\n    setDraggedNodeType(`${nodeType}:${nodeId}`);\r\n    event.dataTransfer.effectAllowed = 'copy';\r\n  }, []);\r\n\r\n  const handleDrop = useCallback((event: React.DragEvent) => {\r\n    event.preventDefault();\r\n    if (!draggedNodeType || !canvasRef.current) return;\r\n\r\n    const rect = canvasRef.current.getBoundingClientRect();\r\n    const x = event.clientX - rect.left;\r\n    const y = event.clientY - rect.top;\r\n\r\n    const [type, id] = draggedNodeType.split(':');\r\n    const nodeTypeInfo = nodeTypes.find(nt => nt.type === type);\r\n    const nodeInfo = nodeTypeInfo?.items.find(item => item.id === id);\r\n\r\n    if (!nodeInfo) return;\r\n\r\n    const newNode: WorkflowNode = {\r\n      id: `node-${Date.now()}`,\r\n      type: type as WorkflowNode['type'],\r\n      title: nodeInfo.title,\r\n      description: '',\r\n      config: {},\r\n      position: { x, y },\r\n      connections: []\r\n    };\r\n\r\n    setWorkflow(prev => ({\r\n      ...prev,\r\n      nodes: [...prev.nodes, newNode]\r\n    }));\r\n\r\n    setDraggedNodeType(null);\r\n  }, [draggedNodeType, nodeTypes]);\r\n\r\n  const handleDragOver = useCallback((event: React.DragEvent) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'copy';\r\n  }, []);\r\n\r\n  const handleNodeClick = (node: WorkflowNode) => {\r\n    setSelectedNode(node);\r\n    setIsConfigOpen(true);\r\n  };\r\n\r\n  const handleNodeDelete = (nodeId: string) => {\r\n    setWorkflow(prev => ({\r\n      ...prev,\r\n      nodes: prev.nodes.filter(node => node.id !== nodeId)\r\n    }));\r\n  };\r\n\r\n  const handleNodeUpdate = (updatedNode: WorkflowNode) => {\r\n    setWorkflow(prev => ({\r\n      ...prev,\r\n      nodes: prev.nodes.map(node => \r\n        node.id === updatedNode.id ? updatedNode : node\r\n      )\r\n    }));\r\n    setIsConfigOpen(false);\r\n  };\r\n\r\n  const handleSaveWorkflow = () => {\r\n    onSave?.(workflow);\r\n  };\r\n\r\n  const getNodeIcon = (type: WorkflowNode['type']) => {\r\n    switch (type) {\r\n      case 'trigger': return <Zap className=\"h-4 w-4\" />;\r\n      case 'condition': return <GitBranch className=\"h-4 w-4\" />;\r\n      case 'action': return <Play className=\"h-4 w-4\" />;\r\n      case 'delay': return <Clock className=\"h-4 w-4\" />;\r\n      default: return <Circle className=\"h-4 w-4\" />;\r\n    }\r\n  };\r\n\r\n  const getNodeColor = (type: WorkflowNode['type']) => {\r\n    switch (type) {\r\n      case 'trigger': return 'bg-green-100 border-green-300 text-green-800';\r\n      case 'condition': return 'bg-yellow-100 border-yellow-300 text-yellow-800';\r\n      case 'action': return 'bg-blue-100 border-blue-300 text-blue-800';\r\n      case 'delay': return 'bg-purple-100 border-purple-300 text-purple-800';\r\n      default: return 'bg-gray-100 border-gray-300 text-gray-800';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-full bg-gray-50 dark:bg-gray-900\">\r\n      {/* Sidebar with node types */}\r\n      <div className=\"w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 p-4 overflow-y-auto\">\r\n        <div className=\"space-y-6\">\r\n          <div>\r\n            <h3 className=\"font-semibold text-sm mb-3\">{t('workflows.workflow_builder', 'Workflow Builder')}</h3>\r\n            <div className=\"space-y-2\">\r\n              <Input\r\n                placeholder={t('workflows.workflow_name', 'Workflow name')}\r\n                value={workflow.name}\r\n                onChange={(e) => setWorkflow(prev => ({ ...prev, name: e.target.value }))}\r\n              />\r\n              <Textarea\r\n                placeholder={t('workflows.workflow_description', 'Description')}\r\n                value={workflow.description}\r\n                onChange={(e) => setWorkflow(prev => ({ ...prev, description: e.target.value }))}\r\n                rows={2}\r\n              />\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Switch\r\n                  checked={workflow.isActive}\r\n                  onCheckedChange={(checked) => setWorkflow(prev => ({ ...prev, isActive: checked }))}\r\n                />\r\n                <Label className=\"text-sm\">{t('workflows.active', 'Active')}</Label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {nodeTypes.map((nodeType) => (\r\n            <div key={nodeType.type}>\r\n              <h4 className=\"font-medium text-sm mb-2 text-gray-600 dark:text-gray-400\">\r\n                {nodeType.title}\r\n              </h4>\r\n              <div className=\"space-y-1\">\r\n                {nodeType.items.map((item) => (\r\n                  <div\r\n                    key={item.id}\r\n                    draggable\r\n                    onDragStart={(e) => handleDragStart(e, nodeType.type, item.id)}\r\n                    className=\"flex items-center gap-2 p-2 rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 cursor-grab hover:shadow-sm transition-shadow\"\r\n                  >\r\n                    <item.icon className=\"h-4 w-4 text-gray-500\" />\r\n                    <span className=\"text-sm\">{item.title}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Main canvas */}\r\n      <div className=\"flex-1 flex flex-col\">\r\n        {/* Toolbar */}\r\n        <div className=\"bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Badge variant=\"outline\">{workflow.nodes.length} nodes</Badge>\r\n              <Badge variant={workflow.isActive ? \"default\" : \"secondary\"}>\r\n                {workflow.isActive ? t('workflows.active', 'Active') : t('workflows.inactive', 'Inactive')}\r\n              </Badge>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button variant=\"outline\" onClick={() => setWorkflow(prev => ({ ...prev, nodes: [] }))}>\r\n                <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                {t('workflows.clear', 'Clear')}\r\n              </Button>\r\n              <Button onClick={handleSaveWorkflow}>\r\n                <Save className=\"h-4 w-4 mr-2\" />\r\n                {t('workflows.save', 'Save')}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Canvas */}\r\n        <div\r\n          ref={canvasRef}\r\n          className=\"flex-1 relative overflow-auto bg-gray-50 dark:bg-gray-900\"\r\n          onDrop={handleDrop}\r\n          onDragOver={handleDragOver}\r\n          style={{\r\n            backgroundImage: `\r\n              radial-gradient(circle, #d1d5db 1px, transparent 1px)\r\n            `,\r\n            backgroundSize: '20px 20px'\r\n          }}\r\n        >\r\n          {workflow.nodes.length === 0 && (\r\n            <div className=\"absolute inset-0 flex items-center justify-center\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-gray-400 mb-2\">\r\n                  <ArrowRight className=\"h-12 w-12 mx-auto\" />\r\n                </div>\r\n                <p className=\"text-gray-500 text-lg font-medium\">\r\n                  {t('workflows.drag_to_start', 'Drag components here to start building')}\r\n                </p>\r\n                <p className=\"text-gray-400 text-sm\">\r\n                  {t('workflows.drag_description', 'Create automated workflows by connecting triggers, conditions, and actions')}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {workflow.nodes.map((node) => (\r\n            <div\r\n              key={node.id}\r\n              className={`absolute cursor-pointer select-none ${getNodeColor(node.type)}`}\r\n              style={{\r\n                left: node.position.x,\r\n                top: node.position.y,\r\n                transform: 'translate(-50%, -50%)'\r\n              }}\r\n              onClick={() => handleNodeClick(node)}\r\n            >\r\n              <div className=\"p-3 rounded-lg border-2 min-w-32 max-w-48\">\r\n                <div className=\"flex items-center justify-between mb-1\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getNodeIcon(node.type)}\r\n                    <span className=\"font-medium text-sm\">{node.title}</span>\r\n                  </div>\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      handleNodeDelete(node.id);\r\n                    }}\r\n                    className=\"h-6 w-6 p-0 hover:bg-red-100\"\r\n                  >\r\n                    <Trash2 className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n                {node.description && (\r\n                  <p className=\"text-xs opacity-75\">{node.description}</p>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Node Configuration Dialog */}\r\n      <Dialog open={isConfigOpen} onOpenChange={setIsConfigOpen}>\r\n        <DialogContent className=\"max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"flex items-center gap-2\">\r\n              {selectedNode && getNodeIcon(selectedNode.type)}\r\n              {t('workflows.configure_node', 'Configure Node')}\r\n            </DialogTitle>\r\n            <DialogDescription>\r\n              {t('workflows.configure_description', 'Configure the settings for this workflow node')}\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          \r\n          {selectedNode && (\r\n            <NodeConfigForm\r\n              node={selectedNode}\r\n              onSave={handleNodeUpdate}\r\n              onCancel={() => setIsConfigOpen(false)}\r\n            />\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\ninterface NodeConfigFormProps {\r\n  node: WorkflowNode;\r\n  onSave: (node: WorkflowNode) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst NodeConfigForm: React.FC<NodeConfigFormProps> = ({ node, onSave, onCancel }) => {\r\n  const { t } = useTranslation();\r\n  const [config, setConfig] = useState(node.config);\r\n  const [description, setDescription] = useState(node.description);\r\n\r\n  const handleSave = () => {\r\n    onSave({\r\n      ...node,\r\n      config,\r\n      description\r\n    });\r\n  };\r\n\r\n  const renderConfigFields = () => {\r\n    switch (node.type) {\r\n      case 'trigger':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label>{t('workflows.trigger_event', 'Trigger Event')}</Label>\r\n              <Select value={config.event} onValueChange={(value) => setConfig(prev => ({ ...prev, event: value }))}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder={t('workflows.select_event', 'Select event')} />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"order_created\">{t('workflows.order_created', 'Order Created')}</SelectItem>\r\n                  <SelectItem value=\"status_changed\">{t('workflows.status_changed', 'Status Changed')}</SelectItem>\r\n                  <SelectItem value=\"sms_received\">{t('workflows.sms_received', 'SMS Received')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'condition':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label>{t('workflows.condition_type', 'Condition Type')}</Label>\r\n              <Select value={config.type} onValueChange={(value) => setConfig(prev => ({ ...prev, type: value }))}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder={t('workflows.select_condition', 'Select condition')} />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"status_equals\">{t('workflows.status_equals', 'Status Equals')}</SelectItem>\r\n                  <SelectItem value=\"time_between\">{t('workflows.time_between', 'Time Between')}</SelectItem>\r\n                  <SelectItem value=\"customer_type\">{t('workflows.customer_type', 'Customer Type')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <Label>{t('workflows.condition_value', 'Value')}</Label>\r\n              <Input\r\n                value={config.value || ''}\r\n                onChange={(e) => setConfig(prev => ({ ...prev, value: e.target.value }))}\r\n                placeholder={t('workflows.enter_value', 'Enter value')}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'action':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label>{t('workflows.action_type', 'Action Type')}</Label>\r\n              <Select value={config.type} onValueChange={(value) => setConfig(prev => ({ ...prev, type: value }))}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder={t('workflows.select_action', 'Select action')} />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"send_sms\">{t('workflows.send_sms', 'Send SMS')}</SelectItem>\r\n                  <SelectItem value=\"send_email\">{t('workflows.send_email', 'Send Email')}</SelectItem>\r\n                  <SelectItem value=\"update_status\">{t('workflows.update_status', 'Update Status')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            {config.type === 'send_sms' && (\r\n              <div>\r\n                <Label>{t('workflows.sms_message', 'SMS Message')}</Label>\r\n                <Textarea\r\n                  value={config.message || ''}\r\n                  onChange={(e) => setConfig(prev => ({ ...prev, message: e.target.value }))}\r\n                  placeholder={t('workflows.enter_message', 'Enter message')}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        );\r\n\r\n      case 'delay':\r\n        return (\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label>{t('workflows.delay_duration', 'Delay Duration')}</Label>\r\n              <div className=\"flex gap-2\">\r\n                <Input\r\n                  type=\"number\"\r\n                  value={config.duration || ''}\r\n                  onChange={(e) => setConfig(prev => ({ ...prev, duration: parseInt(e.target.value) }))}\r\n                  placeholder=\"1\"\r\n                />\r\n                <Select value={config.unit} onValueChange={(value) => setConfig(prev => ({ ...prev, unit: value }))}>\r\n                  <SelectTrigger className=\"w-32\">\r\n                    <SelectValue placeholder=\"Unit\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"minutes\">{t('workflows.minutes', 'Minutes')}</SelectItem>\r\n                    <SelectItem value=\"hours\">{t('workflows.hours', 'Hours')}</SelectItem>\r\n                    <SelectItem value=\"days\">{t('workflows.days', 'Days')}</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div>\r\n        <Label>{t('workflows.node_description', 'Description')}</Label>\r\n        <Input\r\n          value={description}\r\n          onChange={(e) => setDescription(e.target.value)}\r\n          placeholder={t('workflows.enter_description', 'Enter description')}\r\n        />\r\n      </div>\r\n\r\n      {renderConfigFields()}\r\n\r\n      <div className=\"flex justify-end gap-2 pt-4\">\r\n        <Button variant=\"outline\" onClick={onCancel}>\r\n          {t('common.cancel', 'Cancel')}\r\n        </Button>\r\n        <Button onClick={handleSave}>\r\n          {t('common.save', 'Save')}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\config\\development.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\contexts\\AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[401,404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[401,404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[474,477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[474,477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":16,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":16,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { User, Session } from '@supabase/supabase-js';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  session: Session | null;\r\n  loading: boolean;\r\n  signUp: (email: string, password: string, firstName?: string, lastName?: string) => Promise<{ error: any }>;\r\n  signIn: (email: string, password: string) => Promise<{ error: any }>;\r\n  signOut: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }: { children: React.ReactNode }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Set up auth state listener FIRST\r\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\r\n      (event, session) => {\r\n        setSession(session);\r\n        setUser(session?.user ?? null);\r\n        if (event === 'SIGNED_IN' || event === 'SIGNED_OUT') {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    );\r\n\r\n    // THEN check for existing session\r\n    supabase.auth.getSession().then(({ data: { session } }) => {\r\n      setSession(session);\r\n      setUser(session?.user ?? null);\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => subscription.unsubscribe();\r\n  }, []);\r\n\r\n  const signUp = async (email: string, password: string, firstName?: string, lastName?: string) => {\r\n    const redirectUrl = `${window.location.origin}/dashboard`;\r\n    \r\n    const { error } = await supabase.auth.signUp({\r\n      email,\r\n      password,\r\n      options: {\r\n        emailRedirectTo: redirectUrl,\r\n        data: {\r\n          first_name: firstName,\r\n          last_name: lastName,\r\n        }\r\n      }\r\n    });\r\n    return { error };\r\n  };\r\n\r\n  const signIn = async (email: string, password: string) => {\r\n    const { error } = await supabase.auth.signInWithPassword({\r\n      email,\r\n      password,\r\n    });\r\n    return { error };\r\n  };\r\n\r\n  const signOut = async () => {\r\n    await supabase.auth.signOut();\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    session,\r\n    loading,\r\n    signUp,\r\n    signIn,\r\n    signOut,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\contexts\\GlobalChatProvider.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1102,1105],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1102,1105],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1145,1148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1145,1148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1167,1170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1167,1170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":247,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":247,"endColumn":30}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useChatConversations } from '@/hooks/useChatConversations';\r\nimport { useSmartNotifications } from '@/hooks/useSmartNotifications';\r\nimport { useUserPresence } from '@/hooks/useUserPresence';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface ActiveChat {\r\n  conversationId: string;\r\n  entityType?: string;\r\n  entityId?: string;\r\n  participantName?: string;\r\n  lastMessage?: string;\r\n  unreadCount?: number;\r\n}\r\n\r\ninterface GlobalChatContextType {\r\n  // Chat state\r\n  isFloatingChatOpen: boolean;\r\n  setIsFloatingChatOpen: (open: boolean) => void;\r\n  activeChats: ActiveChat[];\r\n  \r\n  // Quick actions\r\n  openContextualChat: (entityType: string, entityId: string, participantId?: string) => void;\r\n  openDirectMessage: (userId: string) => void;\r\n  sendQuickSMS: (phone: string, message: string, entityType?: string, entityId?: string) => Promise<void>;\r\n  \r\n  // Notifications\r\n  totalUnreadCount: number;\r\n  notificationGroups: any[];\r\n  \r\n  // Presence\r\n  teamPresence: any[];\r\n  userStatus: any;\r\n  \r\n  // Loading states\r\n  loading: boolean;\r\n}\r\n\r\nconst GlobalChatContext = createContext<GlobalChatContextType | undefined>(undefined);\r\n\r\ninterface GlobalChatProviderProps {\r\n  children: ReactNode;\r\n  dealerId?: number;\r\n}\r\n\r\nexport function GlobalChatProvider({ children, dealerId }: GlobalChatProviderProps) {\r\n  const { user } = useAuth();\r\n  const [isFloatingChatOpen, setIsFloatingChatOpen] = useState(false);\r\n  const [activeChats, setActiveChats] = useState<ActiveChat[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Hook integrations\r\n  const { conversations, createConversation } = useChatConversations();\r\n  const { groupedNotifications, unreadCount } = useSmartNotifications(dealerId);\r\n  const { usersPresence, myPresence } = useUserPresence(dealerId);\r\n\r\n  const openContextualChat = async (entityType: string, entityId: string, participantId?: string) => {\r\n    if (!dealerId || !user?.id) {\r\n      console.warn('Cannot open contextual chat: Missing dealerId or user');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Create or find existing conversation\r\n      let conversationName = `${entityType.charAt(0).toUpperCase() + entityType.slice(1)} Discussion`;\r\n      \r\n      if (entityType === 'order') {\r\n        // Get order details for better naming\r\n        const { data: order } = await supabase\r\n          .from('orders')\r\n          .select('order_number, customer_name')\r\n          .eq('id', entityId)\r\n          .single();\r\n        \r\n        if (order) {\r\n          conversationName = `Order ${order.order_number}`;\r\n        }\r\n      }\r\n\r\n      const conversation = await createConversation({\r\n        name: conversationName,\r\n        conversation_type: 'group',\r\n        is_private: false,\r\n        participant_ids: [],\r\n        dealer_id: dealerId\r\n      });\r\n\r\n      if (conversation) {\r\n        // Add to active chats\r\n        const newActiveChat: ActiveChat = {\r\n          conversationId: conversation.id,\r\n          entityType,\r\n          entityId,\r\n          participantName: conversationName,\r\n          unreadCount: 0\r\n        };\r\n\r\n        setActiveChats(prev => {\r\n          const exists = prev.find(chat => chat.conversationId === conversation.id);\r\n          if (exists) return prev;\r\n          return [...prev, newActiveChat];\r\n        });\r\n\r\n        // Open floating chat\r\n        setIsFloatingChatOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error opening contextual chat:', error);\r\n    }\r\n  };\r\n\r\n  const openDirectMessage = async (userId: string) => {\r\n    if (!dealerId || !user?.id) {\r\n      console.warn('Cannot open direct message: Missing dealerId or user');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Get user profile for naming\r\n      const { data: profile } = await supabase\r\n        .from('profiles')\r\n        .select('first_name, last_name, email')\r\n        .eq('id', userId)\r\n        .single();\r\n\r\n      const userName = profile ? `${profile.first_name} ${profile.last_name}` : 'Direct Message';\r\n\r\n      const conversation = await createConversation({\r\n        name: userName,\r\n        conversation_type: 'direct',\r\n        is_private: true,\r\n        participant_ids: [userId],\r\n        dealer_id: dealerId\r\n      });\r\n\r\n      if (conversation) {\r\n        const newActiveChat: ActiveChat = {\r\n          conversationId: conversation.id,\r\n          participantName: userName,\r\n          unreadCount: 0\r\n        };\r\n\r\n        setActiveChats(prev => {\r\n          const exists = prev.find(chat => chat.conversationId === conversation.id);\r\n          if (exists) return prev;\r\n          return [...prev, newActiveChat];\r\n        });\r\n\r\n        setIsFloatingChatOpen(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error opening direct message:', error);\r\n    }\r\n  };\r\n\r\n  const sendQuickSMS = async (\r\n    phone: string, \r\n    message: string, \r\n    entityType?: string, \r\n    entityId?: string\r\n  ) => {\r\n    if (!dealerId) {\r\n      console.warn('Cannot send SMS: Missing dealerId');\r\n      throw new Error('Dealer ID required for SMS');\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await supabase.functions.invoke('enhanced-sms', {\r\n        body: {\r\n          to: phone,\r\n          message,\r\n          entityType,\r\n          entityId,\r\n          dealerId\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error sending SMS:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Load active conversations on mount\r\n  useEffect(() => {\r\n    if (!conversations.length) return;\r\n\r\n    const recentConversations = conversations\r\n      .slice(0, 5)\r\n      .map(conv => ({\r\n        conversationId: conv.id,\r\n        participantName: conv.name || 'Unknown',\r\n        unreadCount: conv.unread_count || 0,\r\n        lastMessage: conv.other_participant?.name || ''\r\n      }));\r\n\r\n    setActiveChats(recentConversations);\r\n    setLoading(false);\r\n  }, [conversations]);\r\n\r\n  // Keyboard shortcut for opening chat\r\n  useEffect(() => {\r\n    const handleKeyboard = (e: KeyboardEvent) => {\r\n      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {\r\n        e.preventDefault();\r\n        setIsFloatingChatOpen(prev => !prev);\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyboard);\r\n    return () => document.removeEventListener('keydown', handleKeyboard);\r\n  }, []);\r\n\r\n  const value: GlobalChatContextType = {\r\n    // Chat state\r\n    isFloatingChatOpen,\r\n    setIsFloatingChatOpen,\r\n    activeChats,\r\n    \r\n    // Quick actions\r\n    openContextualChat,\r\n    openDirectMessage,\r\n    sendQuickSMS,\r\n    \r\n    // Notifications\r\n    totalUnreadCount: unreadCount,\r\n    notificationGroups: groupedNotifications,\r\n    \r\n    // Presence\r\n    teamPresence: usersPresence,\r\n    userStatus: myPresence,\r\n    \r\n    // Loading\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <GlobalChatContext.Provider value={value}>\r\n      {children}\r\n    </GlobalChatContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useGlobalChat() {\r\n  const context = useContext(GlobalChatContext);\r\n  if (context === undefined) {\r\n    throw new Error('useGlobalChat must be used within a GlobalChatProvider');\r\n  }\r\n  return context;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\contexts\\PermissionContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":10,"column":124,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":127,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[583,586],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[583,586],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":17,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":17,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { createContext, useContext } from 'react';\r\nimport { usePermissions, AppModule, PermissionLevel, UserPermission, UserRole } from '@/hooks/usePermissions';\r\n\r\ninterface PermissionContextType {\r\n  permissions: UserPermission[];\r\n  roles: UserRole[];\r\n  loading: boolean;\r\n  hasPermission: (module: AppModule, requiredLevel: PermissionLevel) => boolean;\r\n  checkPermission: (module: AppModule, requiredLevel: PermissionLevel) => Promise<boolean>;\r\n  assignRole: (userId: string, roleName: string, expiresAt?: string) => Promise<{ success: boolean; error?: string; data?: any }>;\r\n  removeRole: (userId: string, roleId: string) => Promise<{ success: boolean; error?: string }>;\r\n  refreshPermissions: () => void;\r\n}\r\n\r\nconst PermissionContext = createContext<PermissionContextType | undefined>(undefined);\r\n\r\nexport const usePermissionContext = () => {\r\n  const context = useContext(PermissionContext);\r\n  if (context === undefined) {\r\n    throw new Error('usePermissionContext must be used within a PermissionProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface PermissionProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const PermissionProvider: React.FC<PermissionProviderProps> = ({ children }) => {\r\n  const permissionData = usePermissions();\r\n\r\n  return (\r\n    <PermissionContext.Provider value={permissionData}>\r\n      {children}\r\n    </PermissionContext.Provider>\r\n  );\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useAccessibleDealerships.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useAdvancedVinScanner.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3366,3369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3366,3369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useVinScanner } from './useVinScanner';\r\nimport { useMultiEngineOCR } from '@/components/scanner/engines/MultiEngineOCR';\r\nimport { useImagePreprocessor } from '@/components/scanner/engines/ImagePreprocessor';\r\nimport { useRegionDetector } from '@/components/scanner/engines/RegionDetector';\r\nimport { useVinValidator } from '@/components/scanner/engines/VinValidator';\r\n\r\ninterface VinScanResult {\r\n  vin: string;\r\n  confidence: number;\r\n  source: 'tesseract' | 'enhanced' | 'region-detected';\r\n}\r\n\r\ninterface UseAdvancedVinScannerReturn {\r\n  scanVin: (\r\n    imageSource: File | Blob | string,\r\n    onConfidenceUpdate?: (confidence: number) => void\r\n  ) => Promise<VinScanResult[]>;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport function useAdvancedVinScanner(): UseAdvancedVinScannerReturn {\r\n  const { t } = useTranslation();\r\n  const { scanVin: basicScanVin, loading: basicLoading } = useVinScanner();\r\n  const { processMultiEngine } = useMultiEngineOCR();\r\n  const { preprocessImage } = useImagePreprocessor();\r\n  const { detectTextRegions } = useRegionDetector();\r\n  const { validateVin, suggestCorrections } = useVinValidator();\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Enhanced VIN validation with confidence scoring\r\n  const validateVinWithConfidence = (vin: string): { isValid: boolean; confidence: number } => {\r\n    const validation = validateVin(vin);\r\n    return {\r\n      isValid: validation.isValid,\r\n      confidence: validation.confidence\r\n    };\r\n  };\r\n\r\n  // Process image with multiple techniques\r\n  const scanVin = useCallback(async (\r\n    imageSource: File | Blob | string,\r\n    onConfidenceUpdate?: (confidence: number) => void\r\n  ): Promise<VinScanResult[]> => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const results: VinScanResult[] = [];\r\n      \r\n      // Step 1: Image preprocessing if it's a Blob/File\r\n      onConfidenceUpdate?.(0.1);\r\n      let processedImage: File | Blob | string = imageSource;\r\n      \r\n      if (typeof imageSource === 'object' && imageSource instanceof File) {\r\n        try {\r\n          const preprocessResult = await preprocessImage(imageSource, {\r\n            enhanceContrast: true,\r\n            denoiseImage: true,\r\n            targetSize: { width: 1920, height: 1080 }\r\n          });\r\n          processedImage = preprocessResult.processedImage;\r\n          onConfidenceUpdate?.(0.2);\r\n        } catch (preprocessError) {\r\n          console.warn('Preprocessing failed, using original image:', preprocessError);\r\n        }\r\n      } else if (typeof imageSource === 'object' && imageSource instanceof Blob) {\r\n        try {\r\n          const preprocessResult = await preprocessImage(imageSource, {\r\n            enhanceContrast: true,\r\n            denoiseImage: true,\r\n            targetSize: { width: 1920, height: 1080 }\r\n          });\r\n          processedImage = preprocessResult.processedImage;\r\n          onConfidenceUpdate?.(0.2);\r\n        } catch (preprocessError) {\r\n          console.warn('Preprocessing failed, using original image:', preprocessError);\r\n        }\r\n      }\r\n\r\n      // Step 2: Region detection for VIN stickers\r\n      onConfidenceUpdate?.(0.3);\r\n      let vinRegions: any[] = [];\r\n      \r\n      if (typeof processedImage === 'object' && processedImage instanceof Blob) {\r\n        try {\r\n          vinRegions = await detectTextRegions(processedImage, {\r\n            targetType: 'vin_sticker',\r\n            minConfidence: 0.5,\r\n            maxRegions: 5\r\n          });\r\n          onConfidenceUpdate?.(0.4);\r\n        } catch (regionError) {\r\n          console.warn('Region detection failed:', regionError);\r\n        }\r\n      }\r\n\r\n      // Step 3: Multi-engine OCR processing\r\n      onConfidenceUpdate?.(0.5);\r\n      \r\n      // Convert Blob to File if needed for basic scanner\r\n      let scanSource: File | Blob | string = processedImage;\r\n      if (typeof processedImage === 'object' && processedImage instanceof Blob && !(processedImage instanceof File)) {\r\n        scanSource = new File([processedImage], 'capture.jpg', { type: 'image/jpeg' });\r\n      }\r\n      \r\n      // Use multi-engine OCR\r\n      const ocrResults = await processMultiEngine(scanSource as File | Blob | string, onConfidenceUpdate);\r\n      \r\n      // Process OCR results\r\n      for (const ocrResult of ocrResults) {\r\n        // Extract potential VINs from OCR text\r\n        const vinPattern = /[A-HJ-NPR-Z0-9]{17}/g;\r\n        const matches = ocrResult.text.match(vinPattern) || [];\r\n        \r\n        for (const vin of matches) {\r\n          const validation = validateVin(vin);\r\n          if (validation.isValid) {\r\n            results.push({\r\n              vin,\r\n              confidence: Math.min(1, validation.confidence * ocrResult.confidence),\r\n              source: ocrResult.engine as 'tesseract' | 'enhanced' | 'region-detected'\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      // Fallback to basic scanning if no results\r\n      if (results.length === 0) {\r\n        onConfidenceUpdate?.(0.7);\r\n        const basicVins = await basicScanVin(scanSource as File | string);\r\n        \r\n        for (const vin of basicVins) {\r\n          const validation = validateVin(vin);\r\n          if (validation.isValid) {\r\n            results.push({\r\n              vin,\r\n              confidence: validation.confidence * 0.8, // Scale down as it's basic OCR\r\n              source: 'tesseract'\r\n            });\r\n          } else if (validation.confidence > 0.3) {\r\n            // Try corrections for low-confidence VINs\r\n            const suggestions = suggestCorrections(vin);\r\n            for (const suggestion of suggestions) {\r\n              const suggestionValidation = validateVin(suggestion);\r\n              if (suggestionValidation.isValid) {\r\n                results.push({\r\n                  vin: suggestion,\r\n                  confidence: suggestionValidation.confidence * 0.7,\r\n                  source: 'tesseract'\r\n                });\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      onConfidenceUpdate?.(0.9);\r\n\r\n      // Step 3: Advanced pattern matching and cleanup\r\n      const cleanedResults = results\r\n        .map(result => {\r\n          // Apply additional confidence adjustments based on patterns\r\n          let adjustedConfidence = result.confidence;\r\n          \r\n          // Check for common VIN patterns\r\n          const vin = result.vin;\r\n          \r\n          // First character should be digit 1-5 or letter for country code\r\n          if (/^[1-5A-Z]/.test(vin)) {\r\n            adjustedConfidence += 0.05;\r\n          }\r\n          \r\n          // 10th character should be year indicator\r\n          const yearChar = vin[9];\r\n          const validYearChars = 'ABCDEFGHJKLMNPRSTVWXY123456789';\r\n          if (validYearChars.includes(yearChar)) {\r\n            adjustedConfidence += 0.05;\r\n          }\r\n          \r\n          return {\r\n            ...result,\r\n            confidence: Math.min(1, adjustedConfidence)\r\n          };\r\n        })\r\n        .sort((a, b) => b.confidence - a.confidence); // Sort by confidence\r\n\r\n      onConfidenceUpdate?.(1);\r\n\r\n      // Remove duplicates and low-confidence results\r\n      const uniqueResults = cleanedResults.filter((result, index, array) => {\r\n        return array.findIndex(r => r.vin === result.vin) === index && result.confidence > 0.3;\r\n      });\r\n\r\n      if (uniqueResults.length === 0) {\r\n        setError(t('modern_vin_scanner.errors.no_vin_detected'));\r\n      }\r\n\r\n      return uniqueResults;\r\n\r\n    } catch (err) {\r\n      console.error('Advanced VIN scanning error:', err);\r\n      setError(t('modern_vin_scanner.errors.processing_failed'));\r\n      return [];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [basicScanVin, processMultiEngine, preprocessImage, detectTextRegions, validateVin, suggestCorrections, t]);\r\n\r\n  return {\r\n    scanVin,\r\n    loading: loading || basicLoading,\r\n    error\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useAppInitialization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useCarWashOrderManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[951,954],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[951,954],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1336,1339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1336,1339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":55,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2094,2097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2094,2097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":95,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":98,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4490,4493],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4490,4493],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9544,9547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9544,9547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9649,9652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9649,9652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'generateQR'. Either include it or remove the dependency array.","line":325,"column":6,"nodeType":"ArrayExpression","endLine":325,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [user, generateQR]","fix":{"range":[12092,12111],"text":"[user, generateQR]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":327,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":327,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12186,12189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12186,12189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'refreshData'. Either exclude it or remove the dependency array.","line":396,"column":6,"nodeType":"ArrayExpression","endLine":396,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [user]","fix":{"range":[14063,14082],"text":"[user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":421,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":421,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14797,14800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14797,14800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":424,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":424,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14995,14998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14995,14998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useOrderActions } from '@/hooks/useOrderActions';\r\nimport { orderNumberService } from '@/services/orderNumberService';\r\nimport type { Database } from '@/integrations/supabase/types';\r\n\r\n// Use Supabase types but create a unified interface for components\r\ntype SupabaseOrder = Database['public']['Tables']['orders']['Row'];\r\n\r\n// Unified CarWash Order type for components\r\nexport interface CarWashOrder {\r\n  id: string;\r\n  vehicleYear?: number;\r\n  vehicleMake?: string;\r\n  vehicleModel?: string;\r\n  vehicleInfo?: string;\r\n  vehicleVin?: string;\r\n  stockNumber?: string;\r\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\r\n  priority?: string;\r\n  isWaiter?: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  totalAmount?: number;\r\n  services?: any[];\r\n  notes?: string;\r\n  customOrderNumber?: string;\r\n  dealerId: number;\r\n  tag?: string;\r\n  // Enhanced fields from JOINs\r\n  dealershipName?: string;\r\n  assignedGroupName?: string;\r\n  createdByGroupName?: string;\r\n  assignedTo?: string;\r\n  dueTime?: string;\r\n  dueDate?: string;\r\n}\r\n\r\n// Transform Supabase order to component order\r\nconst transformCarWashOrder = (supabaseOrder: any): CarWashOrder => ({\r\n  id: supabaseOrder.id,\r\n  vehicleYear: supabaseOrder.vehicle_year || undefined,\r\n  vehicleMake: supabaseOrder.vehicle_make || undefined,\r\n  vehicleModel: supabaseOrder.vehicle_model || undefined,\r\n  vehicleInfo: supabaseOrder.vehicle_info || undefined,\r\n  vehicleVin: supabaseOrder.vehicle_vin || undefined,\r\n  stockNumber: supabaseOrder.stock_number || undefined,\r\n  status: supabaseOrder.status as 'pending' | 'in_progress' | 'completed' | 'cancelled',\r\n  priority: supabaseOrder.priority || undefined,\r\n  isWaiter: supabaseOrder.priority === 'urgent',\r\n  createdAt: supabaseOrder.created_at,\r\n  updatedAt: supabaseOrder.updated_at,\r\n  totalAmount: supabaseOrder.total_amount || undefined,\r\n  services: supabaseOrder.services as any[] || [],\r\n  notes: supabaseOrder.notes || undefined,\r\n  customOrderNumber: supabaseOrder.custom_order_number || undefined,\r\n  dealerId: supabaseOrder.dealer_id,\r\n  tag: supabaseOrder.tag || undefined,\r\n  // Enhanced fields from manual JOINs (will be set in refreshData)\r\n  dealershipName: 'Unknown Dealer',\r\n  assignedGroupName: undefined,\r\n  createdByGroupName: undefined,\r\n  assignedTo: 'Unassigned',\r\n  dueTime: supabaseOrder.sla_deadline ? new Date(supabaseOrder.sla_deadline).toLocaleTimeString('en-US', { \r\n    hour: '2-digit', \r\n    minute: '2-digit',\r\n    hour12: true \r\n  }) : undefined,\r\n  dueDate: supabaseOrder.sla_deadline || supabaseOrder.due_date || undefined,\r\n});\r\n\r\nexport const useCarWashOrderManagement = (activeTab: string) => {\r\n  const [orders, setOrders] = useState<CarWashOrder[]>([]);\r\n  const [tabCounts, setTabCounts] = useState({\r\n    today: 0,\r\n    week: 0,\r\n    all: 0,\r\n    pending: 0,\r\n    in_progress: 0,\r\n    completed: 0,\r\n    cancelled: 0,\r\n    waiter: 0,\r\n  });\r\n  const [filters, setFilters] = useState({\r\n    search: '',\r\n    status: '',\r\n    dealership: '',\r\n    dateRange: { from: null, to: null },\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const { user } = useAuth();\r\n  const { generateQR } = useOrderActions();\r\n\r\n  const calculateTabCounts = useMemo(() => (allOrders: CarWashOrder[]) => {\r\n    const today = new Date();\r\n    const weekFromNow = new Date(today);\r\n    weekFromNow.setDate(weekFromNow.getDate() + 7);\r\n\r\n    return {\r\n      today: allOrders.filter(order => {\r\n        const orderDate = new Date(order.createdAt);\r\n        return orderDate.toDateString() === today.toDateString();\r\n      }).length,\r\n      week: allOrders.filter(order => {\r\n        const orderDate = new Date(order.createdAt);\r\n        return orderDate >= today && orderDate <= weekFromNow;\r\n      }).length,\r\n      all: allOrders.length,\r\n      pending: allOrders.filter(order => order.status === 'pending').length,\r\n      in_progress: allOrders.filter(order => order.status === 'in_progress').length,\r\n      completed: allOrders.filter(order => order.status === 'completed').length,\r\n      cancelled: allOrders.filter(order => order.status === 'cancelled').length,\r\n      waiter: allOrders.filter(order => order.isWaiter).length,\r\n    };\r\n  }, []);\r\n\r\n  const filterOrders = useMemo(() => (allOrders: CarWashOrder[], tab: string, currentFilters: any) => {\r\n    let filtered = [...allOrders];\r\n\r\n    // Apply tab-specific filtering\r\n    if (tab !== 'dashboard' && tab !== 'all') {\r\n      const today = new Date();\r\n      const weekFromNow = new Date(today);\r\n      weekFromNow.setDate(weekFromNow.getDate() + 7);\r\n\r\n      switch (tab) {\r\n        case 'today':\r\n          filtered = filtered.filter(order => {\r\n            const orderDate = new Date(order.createdAt);\r\n            return orderDate.toDateString() === today.toDateString();\r\n          });\r\n          break;\r\n        case 'week':\r\n          filtered = filtered.filter(order => {\r\n            const orderDate = new Date(order.createdAt);\r\n            return orderDate >= today && orderDate <= weekFromNow;\r\n          });\r\n          break;\r\n        case 'pending':\r\n          filtered = filtered.filter(order => order.status === 'pending');\r\n          break;\r\n        case 'in_progress':\r\n          filtered = filtered.filter(order => order.status === 'in_progress');\r\n          break;\r\n        case 'completed':\r\n          filtered = filtered.filter(order => order.status === 'completed');\r\n          break;\r\n        case 'cancelled':\r\n          filtered = filtered.filter(order => order.status === 'cancelled');\r\n          break;\r\n        case 'waiter':\r\n          filtered = filtered.filter(order => order.isWaiter);\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Apply global filters\r\n    if (currentFilters.search) {\r\n      const searchLower = currentFilters.search.toLowerCase();\r\n      filtered = filtered.filter(order =>\r\n        order.id?.toLowerCase().includes(searchLower) ||\r\n        order.vehicleVin?.toLowerCase().includes(searchLower) ||\r\n        order.stockNumber?.toLowerCase().includes(searchLower) ||\r\n        order.tag?.toLowerCase().includes(searchLower) ||\r\n        `${order.vehicleYear} ${order.vehicleMake} ${order.vehicleModel}`.toLowerCase().includes(searchLower)\r\n      );\r\n    }\r\n\r\n    if (currentFilters.status) {\r\n      filtered = filtered.filter(order => order.status === currentFilters.status);\r\n    }\r\n\r\n    if (currentFilters.dealership) {\r\n      filtered = filtered.filter(order => order.dealerId.toString() === currentFilters.dealership);\r\n    }\r\n\r\n    if (currentFilters.dateRange?.from) {\r\n      const fromDate = new Date(currentFilters.dateRange.from);\r\n      filtered = filtered.filter(order => new Date(order.createdAt) >= fromDate);\r\n    }\r\n\r\n    if (currentFilters.dateRange?.to) {\r\n      const toDate = new Date(currentFilters.dateRange.to);\r\n      toDate.setHours(23, 59, 59, 999);\r\n      filtered = filtered.filter(order => new Date(order.createdAt) <= toDate);\r\n    }\r\n\r\n    return filtered;\r\n  }, []);\r\n\r\n  const refreshData = useCallback(async () => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Fetch car wash orders from Supabase (basic query first)\r\n      const { data: orders, error } = await supabase\r\n        .from('orders')\r\n        .select('*')\r\n        .eq('order_type', 'car_wash')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('Error fetching car wash orders:', error);\r\n        return;\r\n      }\r\n\r\n      // Fetch dealerships data separately\r\n      const { data: dealerships, error: dealershipsError } = await supabase\r\n        .from('dealerships')\r\n        .select('id, name');\r\n\r\n      if (dealershipsError) {\r\n        console.error('Error fetching dealerships:', dealershipsError);\r\n      }\r\n\r\n      // Fetch dealer groups data separately\r\n      const { data: dealerGroups, error: groupsError } = await supabase\r\n        .from('dealer_groups')\r\n        .select('id, name');\r\n\r\n      if (groupsError) {\r\n        console.error('Error fetching dealer groups:', groupsError);\r\n      }\r\n\r\n      // Create lookup maps for better performance\r\n      const dealershipMap = new Map(dealerships?.map(d => [d.id, d.name]) || []);\r\n      const groupMap = new Map(dealerGroups?.map(g => [g.id, g.name]) || []);\r\n\r\n      // Transform orders with joined data\r\n      const allOrders = (orders || []).map(order => {\r\n        const transformedOrder = transformCarWashOrder(order);\r\n        // Add joined data manually\r\n        transformedOrder.dealershipName = dealershipMap.get(order.dealer_id) || 'Unknown Dealer';\r\n        transformedOrder.assignedGroupName = order.assigned_group_id ? groupMap.get(order.assigned_group_id) : undefined;\r\n        transformedOrder.createdByGroupName = order.created_by_group_id ? groupMap.get(order.created_by_group_id) : undefined;\r\n        transformedOrder.assignedTo = transformedOrder.assignedGroupName || 'Unassigned';\r\n        return transformedOrder;\r\n      });\r\n\r\n      const filtered = filterOrders(allOrders, activeTab, filters);\r\n      \r\n      setOrders(filtered);\r\n      setTabCounts(calculateTabCounts(allOrders));\r\n    } catch (error) {\r\n      console.error('Error in refreshData:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [activeTab, filters, filterOrders, calculateTabCounts, user]);\r\n\r\n  const updateFilters = useCallback((newFilters: any) => {\r\n    setFilters(newFilters);\r\n  }, []);\r\n\r\n  const createOrder = useCallback(async (orderData: any) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      console.log('Creating car wash order with data:', orderData);\r\n      \r\n      // Use database function to generate sequential order number\r\n      const { data: orderNumberData, error: numberError } = await supabase\r\n        .rpc('generate_custom_order_number');\r\n\r\n      if (numberError || !orderNumberData) {\r\n        console.error('Error generating order number:', numberError);\r\n        throw new Error('Failed to generate order number');\r\n      }\r\n\r\n      const newOrder = {\r\n        order_number: orderNumberData, // Use sequential CW-1001, CW-1002, etc.\r\n        customer_name: 'Car Wash Service', // Default for car wash orders\r\n        vehicle_year: orderData.vehicleYear ? parseInt(orderData.vehicleYear.toString()) : null,\r\n        vehicle_make: orderData.vehicleMake,\r\n        vehicle_model: orderData.vehicleModel,\r\n        vehicle_vin: orderData.vehicleVin,\r\n        vehicle_info: orderData.vehicleInfo,\r\n        stock_number: orderData.stockNumber,\r\n        tag: orderData.tag,\r\n        order_type: 'car_wash',\r\n        status: 'pending',\r\n        priority: orderData.isWaiter ? 'urgent' : 'normal',\r\n        services: orderData.services || [],\r\n        total_amount: orderData.totalAmount || 0,\r\n        notes: orderData.notes,\r\n        dealer_id: orderData.dealerId ? parseInt(orderData.dealerId.toString()) : 5,\r\n      };\r\n\r\n      console.log('Inserting car wash order to DB:', newOrder);\r\n\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .insert(newOrder)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error creating car wash order:', error);\r\n        throw error;\r\n      }\r\n\r\n      console.log('Car wash order created successfully:', data);\r\n      \r\n      // Auto-generate QR code and shortlink\r\n      try {\r\n        await generateQR(data.id, data.order_number, data.dealer_id);\r\n        console.log('QR code and shortlink generated for order:', data.order_number);\r\n      } catch (qrError) {\r\n        console.error('Failed to generate QR code:', qrError);\r\n        // Don't fail the order creation if QR generation fails\r\n      }\r\n      \r\n      // Real-time subscription will handle the data update automatically\r\n    } catch (error) {\r\n      console.error('Error in createOrder:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, refreshData]);\r\n\r\n  const updateOrder = useCallback(async (orderId: string, orderData: any) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Map waiter checkbox to priority\r\n      const updateData = {\r\n        ...orderData,\r\n        priority: orderData.isWaiter ? 'urgent' : (orderData.priority || 'normal')\r\n      };\r\n      \r\n      // Remove isWaiter from update data as it's not a DB field\r\n      delete updateData.isWaiter;\r\n\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .update(updateData)\r\n        .eq('id', orderId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error updating car wash order:', error);\r\n        throw error;\r\n      }\r\n\r\n      // Update local state immediately for better UX\r\n      setOrders(prevOrders => \r\n        prevOrders.map(order => \r\n          order.id === orderId \r\n            ? { ...order, ...updateData, updatedAt: new Date().toISOString(), isWaiter: updateData.priority === 'urgent' }\r\n            : order\r\n        )\r\n      );\r\n      \r\n      console.log('Car wash order updated successfully:', data);\r\n    } catch (error) {\r\n      console.error('Error in updateOrder:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  const deleteOrder = useCallback(async (orderId: string) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      const { error } = await supabase\r\n        .from('orders')\r\n        .delete()\r\n        .eq('id', orderId);\r\n\r\n      if (error) {\r\n        console.error('Error deleting car wash order:', error);\r\n        throw error;\r\n      }\r\n\r\n      console.log('Car wash order deleted successfully');\r\n      // Real-time subscription will handle the data update automatically\r\n    } catch (error) {\r\n      console.error('Error in deleteOrder:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, refreshData]);\r\n\r\n  // Initialize data on mount and when dependencies change\r\n  useEffect(() => {\r\n    refreshData();\r\n  }, [refreshData]);\r\n\r\n  // Real-time subscription for car wash orders\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const channel = supabase\r\n      .channel('car_wash_orders_realtime')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'orders',\r\n          filter: 'order_type=eq.car_wash'\r\n        },\r\n        async (payload) => {\r\n          console.log('Car wash order real-time update:', payload);\r\n          \r\n          if (payload.eventType === 'INSERT') {\r\n            const newOrder = transformCarWashOrder(payload.new as any);\r\n            setOrders(prevOrders => [newOrder, ...prevOrders]);\r\n          } else if (payload.eventType === 'UPDATE') {\r\n            const updatedOrder = transformCarWashOrder(payload.new as any);\r\n            setOrders(prevOrders => \r\n              prevOrders.map(order => \r\n                order.id === updatedOrder.id ? updatedOrder : order\r\n              )\r\n            );\r\n          } else if (payload.eventType === 'DELETE') {\r\n            setOrders(prevOrders => \r\n              prevOrders.filter(order => order.id !== payload.old.id)\r\n            );\r\n          }\r\n          \r\n          // Recalculate tab counts\r\n          const allOrders = [...orders];\r\n          setTabCounts(calculateTabCounts(allOrders));\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [user, orders, calculateTabCounts]);\r\n\r\n  return {\r\n    orders,\r\n    tabCounts,\r\n    filters,\r\n    loading,\r\n    updateFilters,\r\n    refreshData,\r\n    createOrder,\r\n    updateOrder,\r\n    deleteOrder,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useChatConversations.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[723,726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[723,726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4032,4035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4032,4035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":149,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5071,5074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5071,5074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5361,5364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5361,5364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":168,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5986,5989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5986,5989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7473,7476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7473,7476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'refreshConversations'. Either include it or remove the dependency array.","line":252,"column":6,"nodeType":"ArrayExpression","endLine":252,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [refreshConversations, user.id]","fix":{"range":[9125,9135],"text":"[refreshConversations, user.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'refreshConversations'. Either include it or remove the dependency array.","line":271,"column":6,"nodeType":"ArrayExpression","endLine":271,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [refreshConversations]","fix":{"range":[9715,9717],"text":"[refreshConversations]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'refreshConversations'. Either include it or remove the dependency array.","line":295,"column":6,"nodeType":"ArrayExpression","endLine":295,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [refreshConversations]","fix":{"range":[10456,10458],"text":"[refreshConversations]"}}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\n\r\nexport interface ChatConversation {\r\n  id: string;\r\n  dealer_id: number;\r\n  conversation_type: 'direct' | 'group' | 'channel' | 'announcement';\r\n  name?: string;\r\n  description?: string;\r\n  avatar_url?: string;\r\n  is_private: boolean;\r\n  is_archived: boolean;\r\n  is_muted: boolean;\r\n  last_message_at?: string;\r\n  created_by?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  max_participants?: number;\r\n  allow_external_users: boolean;\r\n  metadata: Record<string, any>;\r\n  \r\n  // Computed fields\r\n  participant_count?: number;\r\n  unread_count?: number;\r\n  last_message_preview?: string;\r\n  other_participant?: {\r\n    id: string;\r\n    name: string;\r\n    avatar_url?: string;\r\n    is_online?: boolean;\r\n  };\r\n}\r\n\r\ninterface UseChatConversationsReturn {\r\n  conversations: ChatConversation[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  \r\n  // Actions\r\n  createConversation: (data: CreateConversationData) => Promise<ChatConversation | null>;\r\n  updateConversation: (id: string, updates: Partial<ChatConversation>) => Promise<boolean>;\r\n  archiveConversation: (id: string) => Promise<boolean>;\r\n  deleteConversation: (id: string) => Promise<boolean>;\r\n  \r\n  // Search and filters\r\n  searchQuery: string;\r\n  setSearchQuery: (query: string) => void;\r\n  conversationType: string;\r\n  setConversationType: (type: string) => void;\r\n  \r\n  // Utils\r\n  refreshConversations: () => void;\r\n  getConversationById: (id: string) => ChatConversation | undefined;\r\n}\r\n\r\ninterface CreateConversationData {\r\n  conversation_type: 'direct' | 'group' | 'channel' | 'announcement';\r\n  name?: string;\r\n  description?: string;\r\n  is_private?: boolean;\r\n  participant_ids: string[];\r\n  dealer_id: number;\r\n}\r\n\r\nexport const useChatConversations = (dealerId?: number): UseChatConversationsReturn => {\r\n  const { user } = useAuth();\r\n  const { dealerships } = useAccessibleDealerships();\r\n  \r\n  const [conversations, setConversations] = useState<ChatConversation[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [conversationType, setConversationType] = useState('all');\r\n\r\n  const activeDealerId = dealerId || dealerships[0]?.id;\r\n\r\n  // Fetch conversations with participants and unread counts\r\n  const fetchConversations = useCallback(async () => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Get conversations where user is participant\r\n      const { data: conversationsData, error: conversationsError } = await supabase\r\n        .from('chat_conversations')\r\n        .select(`\r\n          *,\r\n          chat_participants!inner (\r\n            user_id,\r\n            is_active,\r\n            last_read_at,\r\n            notification_frequency\r\n          )\r\n        `)\r\n        .eq('dealer_id', activeDealerId)\r\n        .eq('chat_participants.user_id', user.id)\r\n        .eq('chat_participants.is_active', true)\r\n        .order('last_message_at', { ascending: false, nullsFirst: false });\r\n\r\n      if (conversationsError) throw conversationsError;\r\n\r\n      // Get real unread counts for each conversation\r\n      const conversationIds = conversationsData?.map(c => c.id) || [];\r\n      \r\n      let unreadData: { conversation_id: string; unread_count: number }[] = [];\r\n      if (conversationIds.length > 0) {\r\n        const { data: unreadCounts, error: unreadError } = await supabase\r\n          .rpc('get_unread_message_counts', {\r\n            conversation_ids: conversationIds,\r\n            user_id: user.id\r\n          });\r\n\r\n        if (!unreadError && unreadCounts) {\r\n          unreadData = unreadCounts;\r\n        }\r\n      }\r\n\r\n      // Get real last message previews\r\n      let lastMessages: any[] = [];\r\n      if (conversationIds.length > 0) {\r\n        const { data: lastMessageData, error: lastMessageError } = await supabase\r\n          .rpc('get_conversation_last_messages', {\r\n            conversation_ids: conversationIds\r\n          });\r\n\r\n        if (!lastMessageError && lastMessageData) {\r\n          lastMessages = lastMessageData;\r\n        }\r\n      }\r\n\r\n      // Get participants data with real profiles\r\n      const participantsPromises = conversationIds.map(async (convId) => {\r\n        const { data: participants } = await supabase\r\n          .rpc('get_conversation_participants', {\r\n            conversation_uuid: convId,\r\n            requesting_user_id: user.id\r\n          });\r\n        return { convId, participants: participants || [] };\r\n      });\r\n\r\n      const participantsResults = await Promise.all(participantsPromises);\r\n\r\n      // Process conversations with real data\r\n      const processedConversations: ChatConversation[] = conversationsData?.map(conv => {\r\n        const unreadInfo = unreadData?.find((u: any) => u.conversation_id === conv.id);\r\n        const lastMessage = lastMessages?.find(m => m.conversation_id === conv.id);\r\n        const participantsInfo = participantsResults.find(p => p.convId === conv.id);\r\n        const otherParticipants = participantsInfo?.participants?.filter((p: any) => p.user_id !== user.id) || [];\r\n        \r\n        // For direct conversations, get the other participant\r\n        let otherParticipant = undefined;\r\n        if (conv.conversation_type === 'direct' && otherParticipants?.length > 0) {\r\n          const participant = otherParticipants[0];\r\n          otherParticipant = {\r\n            id: participant.user_id,\r\n            name: participant.user_name,\r\n            avatar_url: undefined,\r\n            is_online: participant.presence_status === 'online'\r\n          };\r\n        }\r\n\r\n        return {\r\n          ...conv,\r\n          metadata: (conv.metadata as Record<string, any>) || {},\r\n          unread_count: unreadInfo?.unread_count || 0,\r\n          participant_count: participantsInfo?.participants?.length || 0,\r\n          other_participant: otherParticipant,\r\n          last_message_preview: lastMessage?.last_message_content,\r\n          last_message_at: lastMessage?.last_message_at || conv.last_message_at\r\n        };\r\n      }) || [];\r\n\r\n      setConversations(processedConversations);\r\n    } catch (err) {\r\n      console.error('Error fetching conversations:', err);\r\n      setError(err instanceof Error ? err.message : 'Error fetching conversations');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Create new conversation\r\n  const createConversation = useCallback(async (data: CreateConversationData): Promise<ChatConversation | null> => {\r\n    if (!user?.id) return null;\r\n\r\n    try {\r\n      // For direct conversations, check if one already exists\r\n      if (data.conversation_type === 'direct' && data.participant_ids.length === 1) {\r\n        const { data: existing } = await supabase\r\n          .from('chat_conversations')\r\n          .select(`\r\n            *,\r\n            chat_participants!inner (user_id)\r\n          `)\r\n          .eq('dealer_id', data.dealer_id)\r\n          .eq('conversation_type', 'direct');\r\n\r\n        // Find existing direct conversation between these users\r\n        const existingConv = existing?.find(conv => {\r\n          const participantIds = conv.chat_participants.map((p: any) => p.user_id);\r\n          return participantIds.includes(user.id) && \r\n                 participantIds.includes(data.participant_ids[0]) &&\r\n                 participantIds.length === 2;\r\n        });\r\n\r\n        if (existingConv) {\r\n          return existingConv as ChatConversation;\r\n        }\r\n      }\r\n\r\n      // Create conversation\r\n      const { data: conversation, error: convError } = await supabase\r\n        .from('chat_conversations')\r\n        .insert({\r\n          dealer_id: data.dealer_id,\r\n          conversation_type: data.conversation_type,\r\n          name: data.name,\r\n          description: data.description,\r\n          is_private: data.is_private ?? true,\r\n          created_by: user.id\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (convError) throw convError;\r\n\r\n      // Add participants (including creator)\r\n      const allParticipantIds = [user.id, ...data.participant_ids];\r\n      const participantsToInsert = allParticipantIds.map((participantId, index) => ({\r\n        conversation_id: conversation.id,\r\n        user_id: participantId,\r\n        permission_level: index === 0 ? 'admin' : 'write' as 'admin' | 'write'\r\n      }));\r\n\r\n      const { error: participantsError } = await supabase\r\n        .from('chat_participants')\r\n        .insert(participantsToInsert);\r\n\r\n      if (participantsError) throw participantsError;\r\n\r\n      await refreshConversations();\r\n      return conversation as ChatConversation;\r\n    } catch (err) {\r\n      console.error('Error creating conversation:', err);\r\n      setError(err instanceof Error ? err.message : 'Error creating conversation');\r\n      return null;\r\n    }\r\n  }, [user?.id]);\r\n\r\n  // Update conversation\r\n  const updateConversation = useCallback(async (id: string, updates: Partial<ChatConversation>): Promise<boolean> => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('chat_conversations')\r\n        .update(updates)\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n\r\n      await refreshConversations();\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error updating conversation:', err);\r\n      setError(err instanceof Error ? err.message : 'Error updating conversation');\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Archive conversation\r\n  const archiveConversation = useCallback(async (id: string): Promise<boolean> => {\r\n    return updateConversation(id, { is_archived: true });\r\n  }, [updateConversation]);\r\n\r\n  // Delete conversation\r\n  const deleteConversation = useCallback(async (id: string): Promise<boolean> => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('chat_conversations')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n\r\n      await refreshConversations();\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error deleting conversation:', err);\r\n      setError(err instanceof Error ? err.message : 'Error deleting conversation');\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Utility functions\r\n  const refreshConversations = useCallback(() => {\r\n    fetchConversations();\r\n  }, [fetchConversations]);\r\n\r\n  const getConversationById = useCallback((id: string) => {\r\n    return conversations.find(conv => conv.id === id);\r\n  }, [conversations]);\r\n\r\n  // Filter conversations based on search and type\r\n  const filteredConversations = conversations.filter(conv => {\r\n    // Type filter\r\n    if (conversationType !== 'all' && conv.conversation_type !== conversationType) {\r\n      return false;\r\n    }\r\n\r\n    // Search filter\r\n    if (searchQuery) {\r\n      const query = searchQuery.toLowerCase();\r\n      const searchTerms = [\r\n        conv.name?.toLowerCase(),\r\n        conv.description?.toLowerCase(),\r\n        conv.other_participant?.name?.toLowerCase()\r\n      ].filter(Boolean);\r\n      \r\n      return searchTerms.some(term => term?.includes(query));\r\n    }\r\n\r\n    return true;\r\n  });\r\n\r\n  // Real-time subscriptions\r\n  useEffect(() => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    // Subscribe to conversation changes\r\n    const conversationChannel = supabase\r\n      .channel(`conversations:${activeDealerId}`)\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'chat_conversations',\r\n          filter: `dealer_id=eq.${activeDealerId}`\r\n        },\r\n        () => {\r\n          fetchConversations();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    // Subscribe to participant changes\r\n    const participantChannel = supabase\r\n      .channel(`participants:${user.id}`)\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'chat_participants',\r\n          filter: `user_id=eq.${user.id}`\r\n        },\r\n        () => {\r\n          fetchConversations();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(conversationChannel);\r\n      supabase.removeChannel(participantChannel);\r\n    };\r\n  }, [user?.id, activeDealerId, fetchConversations]);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    fetchConversations();\r\n  }, [fetchConversations]);\r\n\r\n  return {\r\n    conversations: filteredConversations,\r\n    loading,\r\n    error,\r\n    createConversation,\r\n    updateConversation,\r\n    archiveConversation,\r\n    deleteConversation,\r\n    searchQuery,\r\n    setSearchQuery,\r\n    conversationType,\r\n    setConversationType,\r\n    refreshConversations,\r\n    getConversationById\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useChatMessages.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[994,997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[994,997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3909,3912],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3909,3912],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4563,4566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4563,4566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4901,4904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4901,4904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":211,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6771,6774],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6771,6774],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7461,7464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7461,7464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":237,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7763,7766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7763,7766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":292,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":292,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9743,9746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9743,9746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'conversationId' and 'user?.id'. Either include them or remove the dependency array.","line":341,"column":6,"nodeType":"ArrayExpression","endLine":341,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [conversationId, sendMessageWithOptions, user?.id]","fix":{"range":[11358,11382],"text":"[conversationId, sendMessageWithOptions, user?.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'conversationId' and 'user?.id'. Either include them or remove the dependency array.","line":375,"column":6,"nodeType":"ArrayExpression","endLine":375,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [conversationId, sendMessageWithOptions, user?.id]","fix":{"range":[12527,12551],"text":"[conversationId, sendMessageWithOptions, user?.id]"}}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\n\r\nexport interface ChatMessage {\r\n  id: string;\r\n  conversation_id: string;\r\n  user_id: string;\r\n  message_type: 'text' | 'voice' | 'file' | 'image' | 'system';\r\n  content?: string;\r\n  \r\n  // Files and media\r\n  file_url?: string;\r\n  file_name?: string;\r\n  file_size?: number;\r\n  file_type?: string;\r\n  \r\n  // Voice messages\r\n  voice_duration_ms?: number;\r\n  voice_transcription?: string;\r\n  \r\n  // Threading\r\n  parent_message_id?: string;\r\n  thread_count: number;\r\n  \r\n  // State\r\n  is_edited: boolean;\r\n  is_deleted: boolean;\r\n  is_system_message: boolean;\r\n  \r\n  // Social features\r\n  reactions: Record<string, string[]>; // {emoji: [user_ids]}\r\n  mentions: string[];\r\n  \r\n  // Timestamps\r\n  created_at: string;\r\n  updated_at: string;\r\n  edited_at?: string;\r\n  deleted_at?: string;\r\n  \r\n  metadata: Record<string, any>;\r\n  \r\n  // Computed fields\r\n  sender?: {\r\n    id: string;\r\n    name: string;\r\n    avatar_url?: string;\r\n  };\r\n  replies?: ChatMessage[];\r\n  is_own_message?: boolean;\r\n  is_mentioned?: boolean;\r\n}\r\n\r\nexport interface UseChatMessagesReturn {\r\n  messages: ChatMessage[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  hasMore: boolean;\r\n  \r\n  // Actions\r\n  sendMessage: (content: string, mentions?: string[]) => Promise<ChatMessage | null>;\r\n  sendVoiceMessage: (audioBlob: Blob, transcription?: string) => Promise<ChatMessage | null>;\r\n  sendFileMessage: (file: File, description?: string) => Promise<ChatMessage | null>;\r\n  replyToMessage: (parentId: string, content: string) => Promise<ChatMessage | null>;\r\n  editMessage: (messageId: string, newContent: string) => Promise<boolean>;\r\n  deleteMessage: (messageId: string) => Promise<boolean>;\r\n  addReaction: (messageId: string, emoji: string) => Promise<boolean>;\r\n  removeReaction: (messageId: string, emoji: string) => Promise<boolean>;\r\n  \r\n  // Pagination\r\n  loadMore: () => void;\r\n  loadNewerMessages: () => void;\r\n  \r\n  // Utils\r\n  markAsRead: () => void;\r\n  scrollToMessage: (messageId: string) => void;\r\n  getMessageById: (messageId: string) => ChatMessage | undefined;\r\n  \r\n  // Typing indicators\r\n  typingUsers: string[];\r\n  setIsTyping: (typing: boolean) => void;\r\n}\r\n\r\ninterface SendMessageOptions {\r\n  content: string;\r\n  mentions?: string[];\r\n  parent_message_id?: string;\r\n  file_url?: string;\r\n  file_name?: string;\r\n  file_size?: number;\r\n  file_type?: string;\r\n  message_type?: 'text' | 'voice' | 'file' | 'image';\r\n}\r\n\r\nexport const useChatMessages = (conversationId: string): UseChatMessagesReturn => {\r\n  const { user } = useAuth();\r\n  const [messages, setMessages] = useState<ChatMessage[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [typingUsers, setTypingUsers] = useState<string[]>([]);\r\n  \r\n  const typingTimeoutRef = useRef<NodeJS.Timeout>();\r\n  const lastMessageIdRef = useRef<string>();\r\n  const PAGE_SIZE = 50;\r\n\r\n  // Fetch messages with pagination\r\n  const fetchMessages = useCallback(async (before?: string, limit = PAGE_SIZE) => {\r\n    if (!user?.id || !conversationId) return;\r\n\r\n    try {\r\n      setError(null);\r\n\r\n      let query = supabase\r\n        .from('chat_messages')\r\n        .select('*')\r\n        .eq('conversation_id', conversationId)\r\n        .eq('is_deleted', false)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit);\r\n\r\n      if (before) {\r\n        query = query.lt('created_at', before);\r\n      }\r\n\r\n      const { data, error: fetchError } = await query;\r\n\r\n      if (fetchError) throw fetchError;\r\n\r\n      // Get real sender information\r\n      const userIds = [...new Set(data?.map(msg => msg.user_id) || [])];\r\n      let senderProfiles: Record<string, any> = {};\r\n      \r\n      if (userIds.length > 0) {\r\n        const { data: profiles } = await supabase\r\n          .from('profiles')\r\n          .select('id, first_name, last_name, email')\r\n          .in('id', userIds);\r\n        \r\n        if (profiles) {\r\n          senderProfiles = profiles.reduce((acc, profile) => {\r\n            acc[profile.id] = {\r\n              id: profile.id,\r\n              name: profile.first_name && profile.last_name \r\n                ? `${profile.first_name} ${profile.last_name}`\r\n                : profile.email,\r\n              avatar_url: undefined\r\n            };\r\n            return acc;\r\n          }, {} as Record<string, any>);\r\n        }\r\n      }\r\n\r\n      // Process messages with real sender info\r\n      const processedMessages: ChatMessage[] = data?.map(msg => ({\r\n        ...msg,\r\n        reactions: (msg.reactions as Record<string, string[]>) || {},\r\n        mentions: (msg.mentions as string[]) || [],\r\n        metadata: (msg.metadata as Record<string, any>) || {},\r\n        sender: senderProfiles[msg.user_id] || {\r\n          id: msg.user_id,\r\n          name: 'Unknown User',\r\n          avatar_url: undefined\r\n        },\r\n        is_own_message: msg.user_id === user.id,\r\n        is_mentioned: ((msg.mentions as string[]) || []).includes(user.id) || false\r\n      })) || [];\r\n\r\n      if (before) {\r\n        setMessages(prev => [...processedMessages.reverse(), ...prev]);\r\n      } else {\r\n        setMessages(processedMessages.reverse());\r\n        if (processedMessages.length > 0) {\r\n          lastMessageIdRef.current = processedMessages[0].id;\r\n        }\r\n      }\r\n\r\n      setHasMore(data?.length === limit);\r\n    } catch (err) {\r\n      console.error('Error fetching messages:', err);\r\n      setError(err instanceof Error ? err.message : 'Error fetching messages');\r\n    }\r\n  }, [user?.id, conversationId]);\r\n\r\n  // Load more older messages\r\n  const loadMore = useCallback(() => {\r\n    if (!hasMore || loading) return;\r\n    \r\n    const oldestMessage = messages[0];\r\n    if (oldestMessage) {\r\n      fetchMessages(oldestMessage.created_at);\r\n    }\r\n  }, [messages, hasMore, loading, fetchMessages]);\r\n\r\n  // Load newer messages (for real-time updates)\r\n  const loadNewerMessages = useCallback(async () => {\r\n    if (!user?.id || !conversationId || !lastMessageIdRef.current) return;\r\n\r\n    try {\r\n      const { data } = await supabase\r\n        .from('chat_messages')\r\n        .select('*')\r\n        .eq('conversation_id', conversationId)\r\n        .eq('is_deleted', false)\r\n        .gt('created_at', messages[messages.length - 1]?.created_at || new Date().toISOString())\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (data && data.length > 0) {\r\n        // Get sender profiles for new messages\r\n        const userIds = [...new Set(data.map(msg => msg.user_id))];\r\n        let senderProfiles: Record<string, any> = {};\r\n        \r\n        if (userIds.length > 0) {\r\n          const { data: profiles } = await supabase\r\n            .from('profiles')\r\n            .select('id, first_name, last_name, email')\r\n            .in('id', userIds);\r\n          \r\n          if (profiles) {\r\n            senderProfiles = profiles.reduce((acc, profile) => {\r\n              acc[profile.id] = {\r\n                id: profile.id,\r\n                name: profile.first_name && profile.last_name \r\n                  ? `${profile.first_name} ${profile.last_name}`\r\n                  : profile.email,\r\n                avatar_url: undefined\r\n              };\r\n              return acc;\r\n            }, {} as Record<string, any>);\r\n          }\r\n        }\r\n\r\n        const processedMessages: ChatMessage[] = data.map(msg => ({\r\n          ...msg,\r\n          reactions: (msg.reactions as Record<string, string[]>) || {},\r\n          mentions: (msg.mentions as string[]) || [],\r\n          metadata: (msg.metadata as Record<string, any>) || {},\r\n          sender: senderProfiles[msg.user_id] || {\r\n            id: msg.user_id,\r\n            name: 'Unknown User',\r\n            avatar_url: undefined\r\n          },\r\n          is_own_message: msg.user_id === user.id,\r\n          is_mentioned: ((msg.mentions as string[]) || []).includes(user.id) || false\r\n        }));\r\n\r\n        setMessages(prev => [...prev, ...processedMessages]);\r\n        lastMessageIdRef.current = processedMessages[processedMessages.length - 1].id;\r\n      }\r\n    } catch (err) {\r\n      console.error('Error loading newer messages:', err);\r\n    }\r\n  }, [user?.id, conversationId, messages]);\r\n\r\n  // Send text message\r\n  const sendMessage = useCallback(async (content: string, mentions: string[] = []): Promise<ChatMessage | null> => {\r\n    return sendMessageWithOptions({\r\n      content,\r\n      mentions,\r\n      message_type: 'text'\r\n    });\r\n  }, [sendMessageWithOptions]);\r\n\r\n  // Generic send message function\r\n  const sendMessageWithOptions = useCallback(async (options: SendMessageOptions): Promise<ChatMessage | null> => {\r\n    if (!user?.id || !conversationId) return null;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('chat_messages')\r\n        .insert({\r\n          conversation_id: conversationId,\r\n          user_id: user.id,\r\n          message_type: options.message_type || 'text',\r\n          content: options.content,\r\n          mentions: options.mentions || [],\r\n          parent_message_id: options.parent_message_id,\r\n          file_url: options.file_url,\r\n          file_name: options.file_name,\r\n          file_size: options.file_size,\r\n          file_type: options.file_type\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      const newMessage: ChatMessage = {\r\n        ...data,\r\n        reactions: (data.reactions as Record<string, string[]>) || {},\r\n        mentions: (data.mentions as string[]) || [],\r\n        metadata: (data.metadata as Record<string, any>) || {},\r\n        sender: {\r\n          id: data.user_id,\r\n          name: 'You',\r\n          avatar_url: undefined\r\n        },\r\n        is_own_message: true,\r\n        is_mentioned: false\r\n      };\r\n\r\n      // Don't add to state here - real-time subscription will handle it\r\n      return newMessage;\r\n    } catch (err) {\r\n      console.error('Error sending message:', err);\r\n      setError(err instanceof Error ? err.message : 'Error sending message');\r\n      return null;\r\n    }\r\n  }, [user?.id, conversationId]);\r\n\r\n  // Send voice message\r\n  const sendVoiceMessage = useCallback(async (audioBlob: Blob, transcription?: string): Promise<ChatMessage | null> => {\r\n    if (!user?.id) return null;\r\n\r\n    try {\r\n      // Upload audio file\r\n      const fileName = `voice_${Date.now()}.webm`;\r\n      const { data: uploadData, error: uploadError } = await supabase.storage\r\n        .from('chat-attachments')\r\n        .upload(`${conversationId}/${fileName}`, audioBlob);\r\n\r\n      if (uploadError) throw uploadError;\r\n\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from('chat-attachments')\r\n        .getPublicUrl(uploadData.path);\r\n\r\n        return sendMessageWithOptions({\r\n          content: transcription || '',\r\n          message_type: 'voice',\r\n          file_url: publicUrl,\r\n          file_name: fileName,\r\n          file_size: audioBlob.size,\r\n          file_type: audioBlob.type\r\n        });\r\n    } catch (err) {\r\n      console.error('Error sending voice message:', err);\r\n      setError(err instanceof Error ? err.message : 'Error sending voice message');\r\n      return null;\r\n    }\r\n  }, [sendMessageWithOptions]);\r\n\r\n  // Send file message\r\n  const sendFileMessage = useCallback(async (file: File, description?: string): Promise<ChatMessage | null> => {\r\n    if (!user?.id) return null;\r\n\r\n    try {\r\n      // Upload file\r\n      const fileName = `${Date.now()}_${file.name}`;\r\n      const { data: uploadData, error: uploadError } = await supabase.storage\r\n        .from('chat-attachments')\r\n        .upload(`${conversationId}/${fileName}`, file);\r\n\r\n      if (uploadError) throw uploadError;\r\n\r\n      const { data: { publicUrl } } = supabase.storage\r\n        .from('chat-attachments')\r\n        .getPublicUrl(uploadData.path);\r\n\r\n      const messageType = file.type.startsWith('image/') ? 'image' : 'file';\r\n\r\n      return sendMessageWithOptions({\r\n        content: description || file.name,\r\n        message_type: messageType,\r\n        file_url: publicUrl,\r\n        file_name: file.name,\r\n        file_size: file.size,\r\n        file_type: file.type\r\n      });\r\n    } catch (err) {\r\n      console.error('Error sending file message:', err);\r\n      setError(err instanceof Error ? err.message : 'Error sending file message');\r\n      return null;\r\n    }\r\n  }, [sendMessageWithOptions]);\r\n\r\n  // Reply to message\r\n  const replyToMessage = useCallback(async (parentId: string, content: string): Promise<ChatMessage | null> => {\r\n    return sendMessageWithOptions({\r\n      content,\r\n      parent_message_id: parentId,\r\n      message_type: 'text'\r\n    });\r\n  }, [sendMessageWithOptions]);\r\n\r\n  // Edit message\r\n  const editMessage = useCallback(async (messageId: string, newContent: string): Promise<boolean> => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('chat_messages')\r\n        .update({\r\n          content: newContent,\r\n          is_edited: true,\r\n          edited_at: new Date().toISOString()\r\n        })\r\n        .eq('id', messageId);\r\n\r\n      if (error) throw error;\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error editing message:', err);\r\n      setError(err instanceof Error ? err.message : 'Error editing message');\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Delete message\r\n  const deleteMessage = useCallback(async (messageId: string): Promise<boolean> => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('chat_messages')\r\n        .update({\r\n          is_deleted: true,\r\n          deleted_at: new Date().toISOString()\r\n        })\r\n        .eq('id', messageId);\r\n\r\n      if (error) throw error;\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error deleting message:', err);\r\n      setError(err instanceof Error ? err.message : 'Error deleting message');\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Add reaction\r\n  const addReaction = useCallback(async (messageId: string, emoji: string): Promise<boolean> => {\r\n    if (!user?.id) return false;\r\n\r\n    try {\r\n      // Get current message\r\n      const { data: message } = await supabase\r\n        .from('chat_messages')\r\n        .select('reactions')\r\n        .eq('id', messageId)\r\n        .single();\r\n\r\n      if (!message) return false;\r\n\r\n      const reactions = message.reactions || {};\r\n      const emojiReactions = reactions[emoji] || [];\r\n      \r\n      // Add user to emoji reactions if not already there\r\n      if (!emojiReactions.includes(user.id)) {\r\n        emojiReactions.push(user.id);\r\n        reactions[emoji] = emojiReactions;\r\n\r\n        const { error } = await supabase\r\n          .from('chat_messages')\r\n          .update({ reactions })\r\n          .eq('id', messageId);\r\n\r\n        if (error) throw error;\r\n      }\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error adding reaction:', err);\r\n      setError(err instanceof Error ? err.message : 'Error adding reaction');\r\n      return false;\r\n    }\r\n  }, [user?.id]);\r\n\r\n  // Remove reaction\r\n  const removeReaction = useCallback(async (messageId: string, emoji: string): Promise<boolean> => {\r\n    if (!user?.id) return false;\r\n\r\n    try {\r\n      // Get current message\r\n      const { data: message } = await supabase\r\n        .from('chat_messages')\r\n        .select('reactions')\r\n        .eq('id', messageId)\r\n        .single();\r\n\r\n      if (!message) return false;\r\n\r\n      const reactions = message.reactions || {};\r\n      const emojiReactions = reactions[emoji] || [];\r\n      \r\n      // Remove user from emoji reactions\r\n      const filteredReactions = emojiReactions.filter((id: string) => id !== user.id);\r\n      \r\n      if (filteredReactions.length === 0) {\r\n        delete reactions[emoji];\r\n      } else {\r\n        reactions[emoji] = filteredReactions;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('chat_messages')\r\n        .update({ reactions })\r\n        .eq('id', messageId);\r\n\r\n      if (error) throw error;\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error removing reaction:', err);\r\n      setError(err instanceof Error ? err.message : 'Error removing reaction');\r\n      return false;\r\n    }\r\n  }, [user?.id]);\r\n\r\n  // Mark messages as read\r\n  const markAsRead = useCallback(async () => {\r\n    if (!user?.id || !conversationId || messages.length === 0) return;\r\n\r\n    try {\r\n      await supabase\r\n        .from('chat_participants')\r\n        .update({ last_read_at: new Date().toISOString() })\r\n        .eq('conversation_id', conversationId)\r\n        .eq('user_id', user.id);\r\n    } catch (err) {\r\n      console.error('Error marking messages as read:', err);\r\n    }\r\n  }, [user?.id, conversationId, messages]);\r\n\r\n  // Typing indicator\r\n  const setIsTyping = useCallback(async (typing: boolean) => {\r\n    if (!user?.id || !conversationId) return;\r\n\r\n    // Simplified typing indicator for now\r\n    if (typing) {\r\n      if (typingTimeoutRef.current) {\r\n        clearTimeout(typingTimeoutRef.current);\r\n      }\r\n      typingTimeoutRef.current = setTimeout(() => {\r\n        setIsTyping(false);\r\n      }, 3000);\r\n    }\r\n  }, [user?.id, conversationId]);\r\n\r\n  // Utility functions\r\n  const scrollToMessage = useCallback((messageId: string) => {\r\n    const element = document.getElementById(`message-${messageId}`);\r\n    element?.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n  }, []);\r\n\r\n  const getMessageById = useCallback((messageId: string) => {\r\n    return messages.find(msg => msg.id === messageId);\r\n  }, [messages]);\r\n\r\n  // Real-time subscriptions\r\n  useEffect(() => {\r\n    if (!user?.id || !conversationId) return;\r\n\r\n    // Subscribe to new messages\r\n    const messageChannel = supabase\r\n      .channel(`messages:${conversationId}`)\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: 'INSERT',\r\n          schema: 'public',\r\n          table: 'chat_messages',\r\n          filter: `conversation_id=eq.${conversationId}`\r\n        },\r\n        () => {\r\n          loadNewerMessages();\r\n        }\r\n      )\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: 'UPDATE',\r\n          schema: 'public',\r\n          table: 'chat_messages',\r\n          filter: `conversation_id=eq.${conversationId}`\r\n        },\r\n        (payload) => {\r\n          setMessages(prev => prev.map(msg => \r\n            msg.id === payload.new.id \r\n              ? { ...msg, ...payload.new }\r\n              : msg\r\n          ));\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(messageChannel);\r\n      if (typingTimeoutRef.current) {\r\n        clearTimeout(typingTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [user?.id, conversationId, loadNewerMessages]);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    if (conversationId) {\r\n      setLoading(true);\r\n      fetchMessages().finally(() => setLoading(false));\r\n    }\r\n  }, [conversationId, fetchMessages]);\r\n\r\n  // Auto-scroll to bottom for new messages\r\n  useEffect(() => {\r\n    if (messages.length > 0) {\r\n      const latestMessage = messages[messages.length - 1];\r\n      if (latestMessage?.is_own_message) {\r\n        // Auto-scroll for own messages\r\n        setTimeout(() => {\r\n          const element = document.getElementById(`message-${latestMessage.id}`);\r\n          element?.scrollIntoView({ behavior: 'smooth' });\r\n        }, 100);\r\n      }\r\n    }\r\n  }, [messages]);\r\n\r\n  return {\r\n    messages,\r\n    loading,\r\n    error,\r\n    hasMore,\r\n    sendMessage,\r\n    sendVoiceMessage,\r\n    sendFileMessage,\r\n    replyToMessage,\r\n    editMessage,\r\n    deleteMessage,\r\n    addReaction,\r\n    removeReaction,\r\n    loadMore,\r\n    loadNewerMessages,\r\n    markAsRead,\r\n    scrollToMessage,\r\n    getMessageById,\r\n    typingUsers,\r\n    setIsTyping\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useChatNotifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1487,1490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1487,1490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":342,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11673,11676],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11673,11676],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\nimport { toast } from 'sonner';\r\n\r\nexport type NotificationFrequency = 'all' | 'mentions' | 'none' | 'scheduled';\r\n\r\nexport interface ChatNotificationSettings {\r\n  user_id: string;\r\n  dealer_id: number;\r\n  \r\n  // Global settings\r\n  enable_push_notifications: boolean;\r\n  enable_desktop_notifications: boolean;\r\n  enable_email_notifications: boolean;\r\n  \r\n  // Per-type settings\r\n  direct_message_notifications: NotificationFrequency;\r\n  group_message_notifications: NotificationFrequency;\r\n  channel_message_notifications: NotificationFrequency;\r\n  \r\n  // Do Not Disturb\r\n  quiet_hours_start?: string; // HH:MM format\r\n  quiet_hours_end?: string;   // HH:MM format\r\n  quiet_days: number[];       // 0=Sunday, 1=Monday, etc.\r\n  \r\n  // Sound settings\r\n  enable_message_sounds: boolean;\r\n  enable_mention_sounds: boolean;\r\n  custom_sound_url?: string;\r\n}\r\n\r\nexport interface ChatNotification {\r\n  id: string;\r\n  type: 'direct_message' | 'group_message' | 'channel_message' | 'mention' | 'system';\r\n  title: string;\r\n  message: string;\r\n  conversation_id: string;\r\n  conversation_name?: string;\r\n  sender_id: string;\r\n  sender_name: string;\r\n  created_at: string;\r\n  is_read: boolean;\r\n  is_muted: boolean;\r\n  metadata: Record<string, any>;\r\n}\r\n\r\ninterface UseChatNotificationsReturn {\r\n  // Settings\r\n  settings: ChatNotificationSettings | null;\r\n  updateSettings: (updates: Partial<ChatNotificationSettings>) => Promise<boolean>;\r\n  \r\n  // Notification state\r\n  notifications: ChatNotification[];\r\n  unreadCount: number;\r\n  \r\n  // Actions\r\n  markAsRead: (notificationId: string) => Promise<boolean>;\r\n  markAllAsRead: () => Promise<boolean>;\r\n  muteNotification: (notificationId: string) => Promise<boolean>;\r\n  deleteNotification: (notificationId: string) => Promise<boolean>;\r\n  clearAllNotifications: () => Promise<boolean>;\r\n  \r\n  // Utils\r\n  isInQuietHours: () => boolean;\r\n  shouldNotify: (conversationType: string, isMention: boolean) => boolean;\r\n  playNotificationSound: (isMention?: boolean) => void;\r\n  \r\n  // Desktop/Push notifications\r\n  requestNotificationPermission: () => Promise<boolean>;\r\n  showDesktopNotification: (notification: Omit<ChatNotification, 'id' | 'is_read' | 'is_muted' | 'created_at'>) => void;\r\n  \r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const useChatNotifications = (dealerId?: number): UseChatNotificationsReturn => {\r\n  const { user } = useAuth();\r\n  const { dealerships } = useAccessibleDealerships();\r\n  \r\n  const [settings, setSettings] = useState<ChatNotificationSettings | null>(null);\r\n  const [notifications, setNotifications] = useState<ChatNotification[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const audioRef = useRef<HTMLAudioElement>();\r\n  const mentionAudioRef = useRef<HTMLAudioElement>();\r\n  \r\n  const activeDealerId = dealerId || dealerships[0]?.id;\r\n\r\n  // Initialize notification settings\r\n  const initializeSettings = useCallback(async () => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      setError(null);\r\n\r\n      const { data: existingSettings, error: fetchError } = await supabase\r\n        .from('chat_notification_settings')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId)\r\n        .single();\r\n\r\n      if (fetchError && fetchError.code === 'PGRST116') {\r\n        // Create default settings\r\n        const defaultSettings: Omit<ChatNotificationSettings, 'user_id' | 'dealer_id'> = {\r\n          enable_push_notifications: true,\r\n          enable_desktop_notifications: true,\r\n          enable_email_notifications: false,\r\n          direct_message_notifications: 'all',\r\n          group_message_notifications: 'mentions',\r\n          channel_message_notifications: 'mentions',\r\n          quiet_hours_start: undefined,\r\n          quiet_hours_end: undefined,\r\n          quiet_days: [],\r\n          enable_message_sounds: true,\r\n          enable_mention_sounds: true,\r\n          custom_sound_url: undefined\r\n        };\r\n\r\n        const { data: newSettings, error: createError } = await supabase\r\n          .from('chat_notification_settings')\r\n          .insert({\r\n            user_id: user.id,\r\n            dealer_id: activeDealerId,\r\n            ...defaultSettings\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) throw createError;\r\n        const typedNewSettings = {\r\n          ...newSettings,\r\n          quiet_days: (newSettings.quiet_days as number[]) || []\r\n        };\r\n        setSettings(typedNewSettings);\r\n      } else if (fetchError) {\r\n        throw fetchError;\r\n      } else {\r\n        // Cast JSON fields to proper types\r\n        const typedSettings = {\r\n          ...existingSettings,\r\n          quiet_days: (existingSettings.quiet_days as number[]) || []\r\n        };\r\n        setSettings(typedSettings);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error initializing notification settings:', err);\r\n      setError(err instanceof Error ? err.message : 'Error initializing notification settings');\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Fetch notifications\r\n  const fetchNotifications = useCallback(async () => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      // For demo purposes, we'll simulate notifications\r\n      // In a real implementation, this would fetch from a notifications table\r\n      const mockNotifications: ChatNotification[] = [];\r\n      setNotifications(mockNotifications);\r\n    } catch (err) {\r\n      console.error('Error fetching notifications:', err);\r\n      setError(err instanceof Error ? err.message : 'Error fetching notifications');\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Update settings\r\n  const updateSettings = useCallback(async (updates: Partial<ChatNotificationSettings>): Promise<boolean> => {\r\n    if (!user?.id || !activeDealerId) return false;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('chat_notification_settings')\r\n        .update(updates)\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId);\r\n\r\n      if (error) throw error;\r\n\r\n      setSettings(prev => prev ? { ...prev, ...updates } : null);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error updating notification settings:', err);\r\n      setError(err instanceof Error ? err.message : 'Error updating notification settings');\r\n      return false;\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Check if currently in quiet hours\r\n  const isInQuietHours = useCallback((): boolean => {\r\n    if (!settings?.quiet_hours_start || !settings?.quiet_hours_end) {\r\n      return false;\r\n    }\r\n\r\n    const now = new Date();\r\n    const currentTime = now.getHours() * 100 + now.getMinutes();\r\n    const currentDay = now.getDay(); // 0 = Sunday\r\n\r\n    // Check if today is a quiet day\r\n    if (settings.quiet_days.includes(currentDay)) {\r\n      return true;\r\n    }\r\n\r\n    // Parse quiet hours\r\n    const [startHour, startMinute] = settings.quiet_hours_start.split(':').map(Number);\r\n    const [endHour, endMinute] = settings.quiet_hours_end.split(':').map(Number);\r\n    \r\n    const startTime = startHour * 100 + startMinute;\r\n    const endTime = endHour * 100 + endMinute;\r\n\r\n    // Handle overnight quiet hours (e.g., 22:00 to 08:00)\r\n    if (startTime > endTime) {\r\n      return currentTime >= startTime || currentTime <= endTime;\r\n    } else {\r\n      return currentTime >= startTime && currentTime <= endTime;\r\n    }\r\n  }, [settings]);\r\n\r\n  // Check if should notify based on settings\r\n  const shouldNotify = useCallback((conversationType: string, isMention: boolean): boolean => {\r\n    if (!settings || isInQuietHours()) return false;\r\n\r\n    let frequency: NotificationFrequency;\r\n    \r\n    switch (conversationType) {\r\n      case 'direct':\r\n        frequency = settings.direct_message_notifications;\r\n        break;\r\n      case 'group':\r\n        frequency = settings.group_message_notifications;\r\n        break;\r\n      case 'channel':\r\n      case 'announcement':\r\n        frequency = settings.channel_message_notifications;\r\n        break;\r\n      default:\r\n        return false;\r\n    }\r\n\r\n    switch (frequency) {\r\n      case 'all':\r\n        return true;\r\n      case 'mentions':\r\n        return isMention;\r\n      case 'none':\r\n        return false;\r\n      case 'scheduled':\r\n        return !isInQuietHours();\r\n      default:\r\n        return false;\r\n    }\r\n  }, [settings, isInQuietHours]);\r\n\r\n  // Play notification sound\r\n  const playNotificationSound = useCallback((isMention = false) => {\r\n    if (!settings) return;\r\n\r\n    if (isMention && settings.enable_mention_sounds) {\r\n      if (mentionAudioRef.current) {\r\n        mentionAudioRef.current.play().catch(console.error);\r\n      }\r\n    } else if (settings.enable_message_sounds) {\r\n      if (audioRef.current) {\r\n        audioRef.current.play().catch(console.error);\r\n      }\r\n    }\r\n  }, [settings]);\r\n\r\n  // Request notification permission\r\n  const requestNotificationPermission = useCallback(async (): Promise<boolean> => {\r\n    if (!('Notification' in window)) {\r\n      console.warn('This browser does not support notifications');\r\n      return false;\r\n    }\r\n\r\n    if (Notification.permission === 'granted') {\r\n      return true;\r\n    }\r\n\r\n    if (Notification.permission === 'denied') {\r\n      return false;\r\n    }\r\n\r\n    const permission = await Notification.requestPermission();\r\n    return permission === 'granted';\r\n  }, []);\r\n\r\n  // Show desktop notification\r\n  const showDesktopNotification = useCallback((notification: Omit<ChatNotification, 'id' | 'is_read' | 'is_muted' | 'created_at'>) => {\r\n    if (!settings?.enable_desktop_notifications) return;\r\n    if (!('Notification' in window) || Notification.permission !== 'granted') return;\r\n\r\n    try {\r\n      const desktopNotification = new Notification(notification.title, {\r\n        body: notification.message,\r\n        icon: '/favicon.ico',\r\n        tag: notification.conversation_id, // Prevent duplicate notifications\r\n        requireInteraction: notification.type === 'mention',\r\n        silent: false\r\n      });\r\n\r\n      desktopNotification.onclick = () => {\r\n        window.focus();\r\n        // Navigate to conversation\r\n        window.location.hash = `/chat/conversation/${notification.conversation_id}`;\r\n        desktopNotification.close();\r\n      };\r\n\r\n      // Auto-close after 5 seconds\r\n      setTimeout(() => {\r\n        desktopNotification.close();\r\n      }, 5000);\r\n    } catch (err) {\r\n      console.error('Error showing desktop notification:', err);\r\n    }\r\n  }, [settings?.enable_desktop_notifications]);\r\n\r\n  // Show in-app notification\r\n  const showInAppNotification = useCallback((notification: Omit<ChatNotification, 'id' | 'is_read' | 'is_muted' | 'created_at'>) => {\r\n    const isMention = notification.type === 'mention';\r\n    \r\n    toast(notification.title, {\r\n      description: notification.message,\r\n      action: {\r\n        label: 'Ver',\r\n        onClick: () => {\r\n          window.location.hash = `/chat/conversation/${notification.conversation_id}`;\r\n        }\r\n      },\r\n      duration: isMention ? 10000 : 5000,\r\n      className: isMention ? 'border-orange-500' : undefined\r\n    });\r\n\r\n    // Play sound\r\n    playNotificationSound(isMention);\r\n  }, [playNotificationSound]);\r\n\r\n  // Process incoming message for notifications\r\n  const processMessageForNotification = useCallback((message: any, conversationType: string, conversationName?: string) => {\r\n    if (!user?.id || message.user_id === user.id) return; // Don't notify for own messages\r\n\r\n    const isMention = message.mentions?.includes(user.id);\r\n    \r\n    if (!shouldNotify(conversationType, isMention)) return;\r\n\r\n    const notification = {\r\n      type: isMention ? 'mention' : `${conversationType}_message`,\r\n      title: isMention ? 'Te mencionaron' : conversationName || 'Nuevo mensaje',\r\n      message: `${message.sender?.name}: ${message.content || '📎 Archivo adjunto'}`,\r\n      conversation_id: message.conversation_id,\r\n      conversation_name: conversationName,\r\n      sender_id: message.user_id,\r\n      sender_name: message.sender?.name || 'Usuario desconocido',\r\n      metadata: {\r\n        message_id: message.id,\r\n        message_type: message.message_type\r\n      }\r\n    } as Omit<ChatNotification, 'id' | 'is_read' | 'is_muted' | 'created_at'>;\r\n\r\n    // Show notifications\r\n    showInAppNotification(notification);\r\n    showDesktopNotification(notification);\r\n\r\n    // Add to notifications list\r\n    const fullNotification: ChatNotification = {\r\n      ...notification,\r\n      id: `notif_${Date.now()}_${Math.random()}`,\r\n      is_read: false,\r\n      is_muted: false,\r\n      created_at: new Date().toISOString()\r\n    };\r\n\r\n    setNotifications(prev => [fullNotification, ...prev].slice(0, 100)); // Keep last 100 notifications\r\n  }, [user?.id, shouldNotify, showInAppNotification, showDesktopNotification]);\r\n\r\n  // Notification actions\r\n  const markAsRead = useCallback(async (notificationId: string): Promise<boolean> => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === notificationId ? { ...notif, is_read: true } : notif\r\n    ));\r\n    return true;\r\n  }, []);\r\n\r\n  const markAllAsRead = useCallback(async (): Promise<boolean> => {\r\n    setNotifications(prev => prev.map(notif => ({ ...notif, is_read: true })));\r\n    return true;\r\n  }, []);\r\n\r\n  const muteNotification = useCallback(async (notificationId: string): Promise<boolean> => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === notificationId ? { ...notif, is_muted: true } : notif\r\n    ));\r\n    return true;\r\n  }, []);\r\n\r\n  const deleteNotification = useCallback(async (notificationId: string): Promise<boolean> => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== notificationId));\r\n    return true;\r\n  }, []);\r\n\r\n  const clearAllNotifications = useCallback(async (): Promise<boolean> => {\r\n    setNotifications([]);\r\n    return true;\r\n  }, []);\r\n\r\n  // Computed values\r\n  const unreadCount = notifications.filter(n => !n.is_read && !n.is_muted).length;\r\n\r\n  // Initialize audio elements\r\n  useEffect(() => {\r\n    audioRef.current = new Audio('/sounds/notification.mp3');\r\n    mentionAudioRef.current = new Audio('/sounds/mention.mp3');\r\n    \r\n    // Set volume\r\n    if (audioRef.current) audioRef.current.volume = 0.5;\r\n    if (mentionAudioRef.current) mentionAudioRef.current.volume = 0.7;\r\n\r\n    return () => {\r\n      audioRef.current = undefined;\r\n      mentionAudioRef.current = undefined;\r\n    };\r\n  }, []);\r\n\r\n  // Real-time message subscription for notifications\r\n  useEffect(() => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    const messageChannel = supabase\r\n      .channel(`notifications:${activeDealerId}:${user.id}`)\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: 'INSERT',\r\n          schema: 'public',\r\n          table: 'chat_messages',\r\n          filter: `user_id=neq.${user.id}` // Only listen to messages from others\r\n        },\r\n        async (payload) => {\r\n          // Get conversation info\r\n          const { data: conversation } = await supabase\r\n            .from('chat_conversations')\r\n            .select('conversation_type, name')\r\n            .eq('id', payload.new.conversation_id)\r\n            .single();\r\n\r\n          if (conversation) {\r\n            processMessageForNotification(\r\n              payload.new, \r\n              conversation.conversation_type,\r\n              conversation.name\r\n            );\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(messageChannel);\r\n    };\r\n  }, [user?.id, activeDealerId, processMessageForNotification]);\r\n\r\n  // Initialize on mount\r\n  useEffect(() => {\r\n    if (user?.id && activeDealerId) {\r\n      setLoading(true);\r\n      Promise.all([\r\n        initializeSettings(),\r\n        fetchNotifications()\r\n      ]).finally(() => setLoading(false));\r\n    }\r\n  }, [user?.id, activeDealerId, initializeSettings, fetchNotifications]);\r\n\r\n  return {\r\n    settings,\r\n    updateSettings,\r\n    notifications,\r\n    unreadCount,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    muteNotification,\r\n    deleteNotification,\r\n    clearAllNotifications,\r\n    isInQuietHours,\r\n    shouldNotify,\r\n    playNotificationSound,\r\n    requestNotificationPermission,\r\n    showDesktopNotification,\r\n    loading,\r\n    error\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useChatPermissions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":144,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4615,4618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4615,4618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\n\r\nexport type ChatPermissionLevel = 'read' | 'write' | 'moderate' | 'admin';\r\n\r\nexport interface ChatPermissions {\r\n  // Conversation permissions\r\n  canCreateDirectChats: boolean;\r\n  canCreateGroups: boolean;\r\n  canCreateChannels: boolean;\r\n  canCreateAnnouncements: boolean;\r\n  \r\n  // Message permissions\r\n  canSendMessages: boolean;\r\n  canSendVoiceMessages: boolean;\r\n  canSendFiles: boolean;\r\n  canEditOwnMessages: boolean;\r\n  canDeleteOwnMessages: boolean;\r\n  canDeleteOthersMessages: boolean;\r\n  \r\n  // Moderation permissions\r\n  canModerateConversations: boolean;\r\n  canManageParticipants: boolean;\r\n  canMuteUsers: boolean;\r\n  canKickUsers: boolean;\r\n  canBanUsers: boolean;\r\n  \r\n  // System permissions\r\n  canViewAllConversations: boolean;\r\n  canManageChatSettings: boolean;\r\n  isAdmin: boolean;\r\n}\r\n\r\nexport interface UserContactPermissions {\r\n  user_id: string;\r\n  dealer_id: number;\r\n  allow_direct_messages: boolean;\r\n  allow_group_invitations: boolean;\r\n  allow_channel_mentions: boolean;\r\n  blocked_users: string[];\r\n  favorite_contacts: string[];\r\n  show_online_status: boolean;\r\n  show_last_seen: boolean;\r\n  auto_accept_invites: boolean;\r\n}\r\n\r\ninterface UseChatPermissionsReturn {\r\n  // Current user permissions\r\n  permissions: ChatPermissions;\r\n  contactPermissions: UserContactPermissions | null;\r\n  \r\n  // Permission checks\r\n  canPerformAction: (action: keyof ChatPermissions) => boolean;\r\n  canContactUser: (targetUserId: string) => Promise<boolean>;\r\n  canInviteToGroup: (targetUserId: string) => Promise<boolean>;\r\n  canMentionInChannel: (targetUserId: string) => Promise<boolean>;\r\n  \r\n  // Contact management\r\n  blockUser: (userId: string) => Promise<boolean>;\r\n  unblockUser: (userId: string) => Promise<boolean>;\r\n  addToFavorites: (userId: string) => Promise<boolean>;\r\n  removeFromFavorites: (userId: string) => Promise<boolean>;\r\n  isUserBlocked: (userId: string) => boolean;\r\n  isUserFavorite: (userId: string) => boolean;\r\n  \r\n  // Settings management\r\n  updateContactPermissions: (updates: Partial<UserContactPermissions>) => Promise<boolean>;\r\n  \r\n  loading: boolean;\r\n  error: string | null;\r\n  refreshPermissions: () => void;\r\n}\r\n\r\nexport const useChatPermissions = (dealerId?: number): UseChatPermissionsReturn => {\r\n  const { user } = useAuth();\r\n  const { dealerships } = useAccessibleDealerships();\r\n  \r\n  const [permissions, setPermissions] = useState<ChatPermissions>({\r\n    canCreateDirectChats: false,\r\n    canCreateGroups: false,\r\n    canCreateChannels: false,\r\n    canCreateAnnouncements: false,\r\n    canSendMessages: false,\r\n    canSendVoiceMessages: false,\r\n    canSendFiles: false,\r\n    canEditOwnMessages: false,\r\n    canDeleteOwnMessages: false,\r\n    canDeleteOthersMessages: false,\r\n    canModerateConversations: false,\r\n    canManageParticipants: false,\r\n    canMuteUsers: false,\r\n    canKickUsers: false,\r\n    canBanUsers: false,\r\n    canViewAllConversations: false,\r\n    canManageChatSettings: false,\r\n    isAdmin: false\r\n  });\r\n  \r\n  const [contactPermissions, setContactPermissions] = useState<UserContactPermissions | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const activeDealerId = dealerId || dealerships[0]?.id;\r\n\r\n  // Fetch user permissions based on roles and group memberships\r\n  const fetchPermissions = useCallback(async () => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      setError(null);\r\n\r\n      // Check if user is admin\r\n      const { data: profile } = await supabase\r\n        .from('profiles')\r\n        .select('role')\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      const isAdmin = profile?.role === 'admin';\r\n\r\n      // Get user's dealer membership and group permissions\r\n      const { data: membershipData } = await supabase\r\n        .from('dealer_memberships')\r\n        .select(`\r\n          *,\r\n          dealer_membership_groups (\r\n            group_id,\r\n            dealer_groups (\r\n              name,\r\n              permissions\r\n            )\r\n          )\r\n        `)\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId)\r\n        .eq('is_active', true)\r\n        .single();\r\n\r\n      // Collect all permissions from groups\r\n      const groupPermissions = new Set<string>();\r\n      \r\n      membershipData?.dealer_membership_groups?.forEach((membership: any) => {\r\n        const groupPerms = membership.dealer_groups?.permissions || [];\r\n        groupPerms.forEach((perm: string) => groupPermissions.add(perm));\r\n      });\r\n\r\n      // Define permission mappings\r\n      const permissionMap: ChatPermissions = {\r\n        canCreateDirectChats: isAdmin || groupPermissions.has('chat.create_direct') || groupPermissions.has('chat.*'),\r\n        canCreateGroups: isAdmin || groupPermissions.has('chat.create_groups') || groupPermissions.has('chat.*'),\r\n        canCreateChannels: isAdmin || groupPermissions.has('chat.create_channels') || groupPermissions.has('chat.*'),\r\n        canCreateAnnouncements: isAdmin || groupPermissions.has('chat.create_announcements') || groupPermissions.has('chat.*'),\r\n        \r\n        canSendMessages: isAdmin || groupPermissions.has('chat.send_messages') || groupPermissions.has('chat.*'),\r\n        canSendVoiceMessages: isAdmin || groupPermissions.has('chat.send_voice') || groupPermissions.has('chat.*'),\r\n        canSendFiles: isAdmin || groupPermissions.has('chat.send_files') || groupPermissions.has('chat.*'),\r\n        canEditOwnMessages: isAdmin || groupPermissions.has('chat.edit_messages') || groupPermissions.has('chat.*'),\r\n        canDeleteOwnMessages: isAdmin || groupPermissions.has('chat.delete_messages') || groupPermissions.has('chat.*'),\r\n        canDeleteOthersMessages: isAdmin || groupPermissions.has('chat.delete_others_messages') || groupPermissions.has('chat.*'),\r\n        \r\n        canModerateConversations: isAdmin || groupPermissions.has('chat.moderate') || groupPermissions.has('chat.*'),\r\n        canManageParticipants: isAdmin || groupPermissions.has('chat.manage_participants') || groupPermissions.has('chat.*'),\r\n        canMuteUsers: isAdmin || groupPermissions.has('chat.mute_users') || groupPermissions.has('chat.*'),\r\n        canKickUsers: isAdmin || groupPermissions.has('chat.kick_users') || groupPermissions.has('chat.*'),\r\n        canBanUsers: isAdmin || groupPermissions.has('chat.ban_users') || groupPermissions.has('chat.*'),\r\n        \r\n        canViewAllConversations: isAdmin || groupPermissions.has('chat.view_all') || groupPermissions.has('chat.*'),\r\n        canManageChatSettings: isAdmin || groupPermissions.has('chat.manage_settings') || groupPermissions.has('chat.*'),\r\n        isAdmin\r\n      };\r\n\r\n      setPermissions(permissionMap);\r\n\r\n    } catch (err) {\r\n      console.error('Error fetching permissions:', err);\r\n      setError(err instanceof Error ? err.message : 'Error fetching permissions');\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Fetch user contact permissions\r\n  const fetchContactPermissions = useCallback(async () => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      const { data, error: fetchError } = await supabase\r\n        .from('user_contact_permissions')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId)\r\n        .single();\r\n\r\n      if (fetchError && fetchError.code === 'PGRST116') {\r\n        // Create default contact permissions\r\n        const defaultPermissions = {\r\n          user_id: user.id,\r\n          dealer_id: activeDealerId,\r\n          allow_direct_messages: true,\r\n          allow_group_invitations: true,\r\n          allow_channel_mentions: true,\r\n          blocked_users: [],\r\n          favorite_contacts: [],\r\n          show_online_status: true,\r\n          show_last_seen: true,\r\n          auto_accept_invites: false\r\n        };\r\n\r\n        const newPermissions = {\r\n          ...defaultPermissions,\r\n          user_id: user.id,\r\n          dealer_id: activeDealerId,\r\n          blocked_users: [],\r\n          favorite_contacts: []\r\n        };\r\n\r\n        const { data: newPermissionsData, error: createError } = await supabase\r\n          .from('user_contact_permissions')\r\n          .insert(newPermissions)\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) throw createError;\r\n        const typedNewPermissions = {\r\n          ...newPermissionsData,\r\n          blocked_users: (newPermissionsData.blocked_users as string[]) || [],\r\n          favorite_contacts: (newPermissionsData.favorite_contacts as string[]) || []\r\n        };\r\n        setContactPermissions(typedNewPermissions);\r\n      } else if (fetchError) {\r\n        throw fetchError;\r\n      } else {\r\n        // Cast JSON fields to proper types\r\n        const typedPermissions = {\r\n          ...data,\r\n          blocked_users: (data.blocked_users as string[]) || [],\r\n          favorite_contacts: (data.favorite_contacts as string[]) || []\r\n        };\r\n        setContactPermissions(typedPermissions);\r\n      }\r\n    } catch (err) {\r\n      console.error('Error fetching contact permissions:', err);\r\n      setError(err instanceof Error ? err.message : 'Error fetching contact permissions');\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Permission check utility\r\n  const canPerformAction = useCallback((action: keyof ChatPermissions): boolean => {\r\n    return permissions[action] === true;\r\n  }, [permissions]);\r\n\r\n  // Check if user can contact another user\r\n  const canContactUser = useCallback(async (targetUserId: string): Promise<boolean> => {\r\n    if (!user?.id || targetUserId === user.id) return false;\r\n\r\n    try {\r\n      // Check if current user has permission to send direct messages\r\n      if (!permissions.canCreateDirectChats) return false;\r\n\r\n      // Check if target user allows direct messages\r\n      const { data: targetPermissions } = await supabase\r\n        .from('user_contact_permissions')\r\n        .select('allow_direct_messages, blocked_users')\r\n        .eq('user_id', targetUserId)\r\n        .eq('dealer_id', activeDealerId)\r\n        .single();\r\n\r\n      if (!targetPermissions?.allow_direct_messages) return false;\r\n\r\n      // Check if current user is blocked by target\r\n      const blockedUsers = (targetPermissions.blocked_users as string[]) || [];\r\n      if (blockedUsers.includes(user.id)) return false;\r\n\r\n      // Check if current user has blocked the target\r\n      const currentUserBlockedUsers = (contactPermissions?.blocked_users as string[]) || [];\r\n      if (currentUserBlockedUsers.includes(targetUserId)) return false;\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error checking contact permissions:', err);\r\n      return false;\r\n    }\r\n  }, [user?.id, permissions.canCreateDirectChats, contactPermissions?.blocked_users, activeDealerId]);\r\n\r\n  // Check if user can invite to group\r\n  const canInviteToGroup = useCallback(async (targetUserId: string): Promise<boolean> => {\r\n    if (!user?.id || targetUserId === user.id) return false;\r\n\r\n    try {\r\n      // Check if current user has permission to manage participants\r\n      if (!permissions.canManageParticipants) return false;\r\n\r\n      // Check if target user allows group invitations\r\n      const { data: targetPermissions } = await supabase\r\n        .from('user_contact_permissions')\r\n        .select('allow_group_invitations, blocked_users')\r\n        .eq('user_id', targetUserId)\r\n        .eq('dealer_id', activeDealerId)\r\n        .single();\r\n\r\n      if (!targetPermissions?.allow_group_invitations) return false;\r\n\r\n      // Check blocking status\r\n      const blockedUsers = (targetPermissions.blocked_users as string[]) || [];\r\n      if (blockedUsers.includes(user.id)) return false;\r\n\r\n      const currentUserBlockedUsers = (contactPermissions?.blocked_users as string[]) || [];\r\n      if (currentUserBlockedUsers.includes(targetUserId)) return false;\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error checking group invite permissions:', err);\r\n      return false;\r\n    }\r\n  }, [user?.id, permissions.canManageParticipants, contactPermissions?.blocked_users, activeDealerId]);\r\n\r\n  // Check if user can mention in channel\r\n  const canMentionInChannel = useCallback(async (targetUserId: string): Promise<boolean> => {\r\n    if (!user?.id || targetUserId === user.id) return false;\r\n\r\n    try {\r\n      // Check if target user allows channel mentions\r\n      const { data: targetPermissions } = await supabase\r\n        .from('user_contact_permissions')\r\n        .select('allow_channel_mentions, blocked_users')\r\n        .eq('user_id', targetUserId)\r\n        .eq('dealer_id', activeDealerId)\r\n        .single();\r\n\r\n      if (!targetPermissions?.allow_channel_mentions) return false;\r\n\r\n      // Check blocking status\r\n      const blockedUsers = (targetPermissions.blocked_users as string[]) || [];\r\n      if (blockedUsers.includes(user.id)) return false;\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error checking mention permissions:', err);\r\n      return false;\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Block user\r\n  const blockUser = useCallback(async (userId: string): Promise<boolean> => {\r\n    if (!user?.id || !contactPermissions) return false;\r\n\r\n    try {\r\n      const currentBlocked = contactPermissions.blocked_users || [];\r\n      if (currentBlocked.includes(userId)) return true;\r\n\r\n      const updatedBlocked = [...currentBlocked, userId];\r\n\r\n      const { error } = await supabase\r\n        .from('user_contact_permissions')\r\n        .update({ blocked_users: updatedBlocked })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId);\r\n\r\n      if (error) throw error;\r\n\r\n      setContactPermissions(prev => prev ? {\r\n        ...prev,\r\n        blocked_users: updatedBlocked\r\n      } : null);\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error blocking user:', err);\r\n      setError(err instanceof Error ? err.message : 'Error blocking user');\r\n      return false;\r\n    }\r\n  }, [user?.id, contactPermissions, activeDealerId]);\r\n\r\n  // Unblock user\r\n  const unblockUser = useCallback(async (userId: string): Promise<boolean> => {\r\n    if (!user?.id || !contactPermissions) return false;\r\n\r\n    try {\r\n      const currentBlocked = contactPermissions.blocked_users || [];\r\n      const updatedBlocked = currentBlocked.filter(id => id !== userId);\r\n\r\n      const { error } = await supabase\r\n        .from('user_contact_permissions')\r\n        .update({ blocked_users: updatedBlocked })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId);\r\n\r\n      if (error) throw error;\r\n\r\n      setContactPermissions(prev => prev ? {\r\n        ...prev,\r\n        blocked_users: updatedBlocked\r\n      } : null);\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error unblocking user:', err);\r\n      setError(err instanceof Error ? err.message : 'Error unblocking user');\r\n      return false;\r\n    }\r\n  }, [user?.id, contactPermissions, activeDealerId]);\r\n\r\n  // Add to favorites\r\n  const addToFavorites = useCallback(async (userId: string): Promise<boolean> => {\r\n    if (!user?.id || !contactPermissions) return false;\r\n\r\n    try {\r\n      const currentFavorites = contactPermissions.favorite_contacts || [];\r\n      if (currentFavorites.includes(userId)) return true;\r\n\r\n      const updatedFavorites = [...currentFavorites, userId];\r\n\r\n      const { error } = await supabase\r\n        .from('user_contact_permissions')\r\n        .update({ favorite_contacts: updatedFavorites })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId);\r\n\r\n      if (error) throw error;\r\n\r\n      setContactPermissions(prev => prev ? {\r\n        ...prev,\r\n        favorite_contacts: updatedFavorites\r\n      } : null);\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error adding to favorites:', err);\r\n      setError(err instanceof Error ? err.message : 'Error adding to favorites');\r\n      return false;\r\n    }\r\n  }, [user?.id, contactPermissions, activeDealerId]);\r\n\r\n  // Remove from favorites\r\n  const removeFromFavorites = useCallback(async (userId: string): Promise<boolean> => {\r\n    if (!user?.id || !contactPermissions) return false;\r\n\r\n    try {\r\n      const currentFavorites = contactPermissions.favorite_contacts || [];\r\n      const updatedFavorites = currentFavorites.filter(id => id !== userId);\r\n\r\n      const { error } = await supabase\r\n        .from('user_contact_permissions')\r\n        .update({ favorite_contacts: updatedFavorites })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId);\r\n\r\n      if (error) throw error;\r\n\r\n      setContactPermissions(prev => prev ? {\r\n        ...prev,\r\n        favorite_contacts: updatedFavorites\r\n      } : null);\r\n\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error removing from favorites:', err);\r\n      setError(err instanceof Error ? err.message : 'Error removing from favorites');\r\n      return false;\r\n    }\r\n  }, [user?.id, contactPermissions, activeDealerId]);\r\n\r\n  // Utility functions\r\n  const isUserBlocked = useCallback((userId: string): boolean => {\r\n    return contactPermissions?.blocked_users?.includes(userId) || false;\r\n  }, [contactPermissions?.blocked_users]);\r\n\r\n  const isUserFavorite = useCallback((userId: string): boolean => {\r\n    return contactPermissions?.favorite_contacts?.includes(userId) || false;\r\n  }, [contactPermissions?.favorite_contacts]);\r\n\r\n  // Update contact permissions\r\n  const updateContactPermissions = useCallback(async (updates: Partial<UserContactPermissions>): Promise<boolean> => {\r\n    if (!user?.id || !activeDealerId) return false;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('user_contact_permissions')\r\n        .update(updates)\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId);\r\n\r\n      if (error) throw error;\r\n\r\n      setContactPermissions(prev => prev ? { ...prev, ...updates } : null);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error updating contact permissions:', err);\r\n      setError(err instanceof Error ? err.message : 'Error updating contact permissions');\r\n      return false;\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Refresh all permissions\r\n  const refreshPermissions = useCallback(() => {\r\n    if (user?.id && activeDealerId) {\r\n      fetchPermissions();\r\n      fetchContactPermissions();\r\n    }\r\n  }, [user?.id, activeDealerId, fetchPermissions, fetchContactPermissions]);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    if (user?.id && activeDealerId) {\r\n      setLoading(true);\r\n      Promise.all([\r\n        fetchPermissions(),\r\n        fetchContactPermissions()\r\n      ]).finally(() => setLoading(false));\r\n    }\r\n  }, [user?.id, activeDealerId, fetchPermissions, fetchContactPermissions]);\r\n\r\n  return {\r\n    permissions,\r\n    contactPermissions,\r\n    canPerformAction,\r\n    canContactUser,\r\n    canInviteToGroup,\r\n    canMentionInChannel,\r\n    blockUser,\r\n    unblockUser,\r\n    addToFavorites,\r\n    removeFromFavorites,\r\n    isUserBlocked,\r\n    isUserFavorite,\r\n    updateContactPermissions,\r\n    loading,\r\n    error,\r\n    refreshPermissions\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useCloudSync.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":273,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7781,7784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7781,7784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useState } from 'react';\r\nimport { storage } from '@/lib/localStorage';\r\nimport { cloudSync } from '@/lib/cloudSync';\r\nimport { toast } from 'sonner';\r\n\r\n/**\r\n * Hook for cloud-synced persisted state with enterprise features\r\n */\r\nexport function useCloudSyncedState<T>(\r\n  key: string,\r\n  defaultValue: T,\r\n  options: {\r\n    priority?: 'critical' | 'important' | 'normal' | 'low';\r\n    autoSync?: boolean;\r\n    restoreOnMount?: boolean;\r\n    showNotifications?: boolean;\r\n  } = {}\r\n): [T, (value: T | ((prev: T) => T)) => void, {\r\n  syncing: boolean;\r\n  synced: boolean;\r\n  lastSync?: number;\r\n  error?: string;\r\n}] {\r\n  const {\r\n    priority = 'normal',\r\n    autoSync = true,\r\n    restoreOnMount = true,\r\n    showNotifications = false\r\n  } = options;\r\n\r\n  const [state, setState] = useState<T>(defaultValue);\r\n  const [syncing, setSyncing] = useState(false);\r\n  const [synced, setSynced] = useState(false);\r\n  const [lastSync, setLastSync] = useState<number>();\r\n  const [error, setError] = useState<string>();\r\n\r\n  // Load initial value and optionally restore from cloud\r\n  useEffect(() => {\r\n    const loadInitialValue = async () => {\r\n      try {\r\n        if (restoreOnMount && cloudSync.isNetworkOnline()) {\r\n          setSyncing(true);\r\n          const restored = await storage.restoreFromCloud(key, defaultValue, {\r\n            cloudSync: true,\r\n            syncPriority: priority\r\n          });\r\n          setState(restored);\r\n          \r\n          if (showNotifications && restored !== defaultValue) {\r\n            toast.success(`Restored ${key} from cloud`, {\r\n              description: 'Your data has been synced across devices'\r\n            });\r\n          }\r\n        } else {\r\n          // Load from localStorage only\r\n          const stored = storage.get(key, defaultValue, {\r\n            cloudSync: autoSync,\r\n            syncPriority: priority\r\n          });\r\n          setState(stored);\r\n        }\r\n\r\n        // Update sync status\r\n        const syncStatus = storage.getCloudSyncStatus(key);\r\n        setSynced(syncStatus.synced);\r\n        setLastSync(syncStatus.lastSync);\r\n      } catch (err) {\r\n        console.error(`Failed to load ${key}:`, err);\r\n        setError(err instanceof Error ? err.message : 'Unknown error');\r\n      } finally {\r\n        setSyncing(false);\r\n      }\r\n    };\r\n\r\n    loadInitialValue();\r\n  }, [key, defaultValue, restoreOnMount, priority, autoSync, showNotifications]);\r\n\r\n  // Cloud-synced setter\r\n  const setCloudSyncedState = useCallback(async (value: T | ((prev: T) => T)) => {\r\n    setState(prevState => {\r\n      const newValue = typeof value === 'function' ? (value as (prev: T) => T)(prevState) : value;\r\n      \r\n      // Save to localStorage with cloud sync\r\n      const success = storage.set(key, newValue, {\r\n        cloudSync: autoSync,\r\n        syncPriority: priority\r\n      });\r\n\r\n      if (success && autoSync) {\r\n        // Async cloud sync\r\n        setSyncing(true);\r\n        storage.syncToCloud(key, {\r\n          cloudSync: true,\r\n          syncPriority: priority\r\n        }).then(syncSuccess => {\r\n          setSynced(syncSuccess);\r\n          setLastSync(Date.now());\r\n          setError(undefined);\r\n          \r\n          if (showNotifications && syncSuccess) {\r\n            toast.success(`Synced ${key} to cloud`);\r\n          }\r\n        }).catch(err => {\r\n          setError(err.message);\r\n          if (showNotifications) {\r\n            toast.error(`Failed to sync ${key}`, {\r\n              description: err.message\r\n            });\r\n          }\r\n        }).finally(() => {\r\n          setSyncing(false);\r\n        });\r\n      }\r\n\r\n      return newValue;\r\n    });\r\n  }, [key, autoSync, priority, showNotifications]);\r\n\r\n  return [state, setCloudSyncedState, { syncing, synced, lastSync, error }];\r\n}\r\n\r\n/**\r\n * Enhanced tab persistence with cloud sync\r\n */\r\nexport function useCloudSyncedTabPersistence(\r\n  pageKey: string,\r\n  defaultTab: string,\r\n  validTabs: string[],\r\n  dealerId?: string\r\n) {\r\n  const storageKey = dealerId \r\n    ? `pages.${pageKey}.${dealerId}.activeTab`\r\n    : `pages.${pageKey}.activeTab`;\r\n\r\n  const [activeTab, setActiveTab, syncStatus] = useCloudSyncedState(\r\n    storageKey,\r\n    defaultTab,\r\n    {\r\n      priority: 'critical',\r\n      autoSync: true,\r\n      restoreOnMount: true,\r\n      showNotifications: false\r\n    }\r\n  );\r\n\r\n  const setValidatedTab = useCallback((tab: string) => {\r\n    if (validTabs.includes(tab)) {\r\n      setActiveTab(tab);\r\n    } else {\r\n      console.warn(`⚠️ Invalid tab ${tab}, ignoring`);\r\n    }\r\n  }, [validTabs, setActiveTab]);\r\n\r\n  return [activeTab, setValidatedTab, syncStatus] as const;\r\n}\r\n\r\n/**\r\n * Hook for cloud sync status monitoring\r\n */\r\nexport function useCloudSyncStatus() {\r\n  const [isOnline, setIsOnline] = useState(cloudSync.isNetworkOnline());\r\n  const [syncStatuses, setSyncStatuses] = useState(new Map());\r\n\r\n  useEffect(() => {\r\n    const updateStatus = () => {\r\n      setIsOnline(cloudSync.isNetworkOnline());\r\n      setSyncStatuses(cloudSync.getAllSyncStatuses());\r\n    };\r\n\r\n    // Update status every 5 seconds\r\n    const interval = setInterval(updateStatus, 5000);\r\n    \r\n    // Update on network status change\r\n    window.addEventListener('online', updateStatus);\r\n    window.addEventListener('offline', updateStatus);\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n      window.removeEventListener('online', updateStatus);\r\n      window.removeEventListener('offline', updateStatus);\r\n    };\r\n  }, []);\r\n\r\n  const forceSyncAll = useCallback(async () => {\r\n    try {\r\n      await storage.forceSyncAll();\r\n      setSyncStatuses(cloudSync.getAllSyncStatuses());\r\n      toast.success('All data synced to cloud');\r\n    } catch (error) {\r\n      toast.error('Failed to sync data', {\r\n        description: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    isOnline,\r\n    syncStatuses,\r\n    forceSyncAll\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for enterprise session recovery\r\n */\r\nexport function useSessionRecovery() {\r\n  const [isRecovering, setIsRecovering] = useState(false);\r\n  const [recoveryAvailable, setRecoveryAvailable] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check if recovery data is available\r\n    const checkRecovery = async () => {\r\n      try {\r\n        const hasCloudData = cloudSync.isNetworkOnline();\r\n        setRecoveryAvailable(hasCloudData);\r\n      } catch (error) {\r\n        console.warn('Recovery check failed:', error);\r\n      }\r\n    };\r\n\r\n    checkRecovery();\r\n  }, []);\r\n\r\n  const recoverSession = useCallback(async () => {\r\n    if (!recoveryAvailable) return false;\r\n\r\n    setIsRecovering(true);\r\n    try {\r\n      // Setup cloud sync and restore critical data\r\n      const success = await storage.setupCloudSync();\r\n      \r\n      if (success) {\r\n        toast.success('Session recovered from cloud', {\r\n          description: 'Your workspace has been restored'\r\n        });\r\n        return true;\r\n      } else {\r\n        toast.error('Failed to recover session');\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      toast.error('Session recovery failed', {\r\n        description: error instanceof Error ? error.message : 'Unknown error'\r\n      });\r\n      return false;\r\n    } finally {\r\n      setIsRecovering(false);\r\n    }\r\n  }, [recoveryAvailable]);\r\n\r\n  return {\r\n    isRecovering,\r\n    recoveryAvailable,\r\n    recoverSession\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for theme cloud sync\r\n */\r\nexport function useCloudSyncedTheme() {\r\n  return useCloudSyncedState('theme.custom', null, {\r\n    priority: 'important',\r\n    autoSync: true,\r\n    restoreOnMount: true,\r\n    showNotifications: true\r\n  });\r\n}\r\n\r\n/**\r\n * Hook for user preferences cloud sync\r\n */\r\nexport function useCloudSyncedPreferences<T extends Record<string, any>>(\r\n  defaultPreferences: T\r\n) {\r\n  return useCloudSyncedState('user.preferences', defaultPreferences, {\r\n    priority: 'critical',\r\n    autoSync: true,\r\n    restoreOnMount: true,\r\n    showNotifications: false\r\n  });\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useCommunications.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[502,505],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[502,505],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2162,2165],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2162,2165],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2723,2726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2723,2726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2838,2841],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2838,2841],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3793,3796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3793,3796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3912,3915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3912,3915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { toast } from 'sonner';\r\n\r\ninterface Message {\r\n  id: string;\r\n  order_id: string;\r\n  parent_message_id?: string;\r\n  user_id: string;\r\n  message_type: 'text' | 'voice' | 'file' | 'system_update';\r\n  content?: string;\r\n  voice_file_path?: string;\r\n  voice_duration_ms?: number;\r\n  voice_transcription?: string;\r\n  attachments: any[];\r\n  mentions: string[];\r\n  reactions: Record<string, string[]>;\r\n  is_edited: boolean;\r\n  edited_at?: string;\r\n  reply_count: number;\r\n  is_internal: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n  user_name?: string;\r\n  user_avatar?: string;\r\n  replies?: Message[];\r\n}\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  avatar?: string;\r\n}\r\n\r\nexport function useCommunications(orderId: string) {\r\n  const { t } = useTranslation();\r\n  const [messages, setMessages] = useState<Message[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [mentionUsers, setMentionUsers] = useState<User[]>([]);\r\n  const [currentUserId, setCurrentUserId] = useState<string | null>(null);\r\n\r\n  // Load messages with pagination\r\n  const loadMessages = useCallback(async (offset = 0, limit = 50) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Get messages\r\n      const { data: messagesData, error: messagesError } = await supabase\r\n        .from('order_communications')\r\n        .select('*')\r\n        .eq('order_id', orderId)\r\n        .is('parent_message_id', null) // Only root messages first\r\n        .order('created_at', { ascending: false })\r\n        .range(offset, offset + limit - 1);\r\n\r\n      if (messagesError) throw messagesError;\r\n\r\n      // Get user profiles for messages\r\n      const userIds = [...new Set(messagesData?.map(m => m.user_id) || [])];\r\n      const { data: profiles } = await supabase\r\n        .from('profiles')\r\n        .select('id, first_name, last_name, email')\r\n        .in('id', userIds);\r\n\r\n      const profileMap = profiles?.reduce((acc: any, profile) => {\r\n        acc[profile.id] = {\r\n          name: `${profile.first_name || ''} ${profile.last_name || ''}`.trim() || 'Unknown User',\r\n          email: profile.email\r\n        };\r\n        return acc;\r\n      }, {}) || {};\r\n\r\n      // Format messages with user info\r\n      const formattedMessages: Message[] = messagesData?.map(message => ({\r\n        ...message,\r\n        message_type: message.message_type as 'text' | 'voice' | 'file' | 'system_update',\r\n        attachments: Array.isArray(message.attachments) ? \r\n          (message.attachments as any[]).filter(Boolean) : [],\r\n        mentions: Array.isArray(message.mentions) ? \r\n          (message.mentions as any[]).filter(Boolean).map(String) : [],\r\n        reactions: typeof message.reactions === 'object' && message.reactions !== null ? \r\n          message.reactions as Record<string, string[]> : {},\r\n        user_name: profileMap[message.user_id]?.name,\r\n        user_email: profileMap[message.user_id]?.email\r\n      })) || [];\r\n\r\n      // Load replies for each message\r\n      for (const message of formattedMessages) {\r\n        if (message.reply_count > 0) {\r\n          const { data: replies } = await supabase\r\n            .from('order_communications')\r\n            .select('*')\r\n            .eq('parent_message_id', message.id)\r\n            .order('created_at', { ascending: true });\r\n\r\n          message.replies = replies?.map(reply => ({\r\n            ...reply,\r\n            message_type: reply.message_type as 'text' | 'voice' | 'file' | 'system_update',\r\n            attachments: Array.isArray(reply.attachments) ? \r\n              (reply.attachments as any[]).filter(Boolean) : [],\r\n            mentions: Array.isArray(reply.mentions) ? \r\n              (reply.mentions as any[]).filter(Boolean).map(String) : [],\r\n            reactions: typeof reply.reactions === 'object' && reply.reactions !== null ? \r\n              reply.reactions as Record<string, string[]> : {},\r\n            user_name: profileMap[reply.user_id]?.name,\r\n            user_email: profileMap[reply.user_id]?.email\r\n          })) || [];\r\n        }\r\n      }\r\n\r\n      if (offset === 0) {\r\n        setMessages(formattedMessages.reverse()); // Reverse to show newest at bottom\r\n      } else {\r\n        setMessages(prev => [...formattedMessages.reverse(), ...prev]);\r\n      }\r\n\r\n      setHasMore(formattedMessages.length === limit);\r\n    } catch (error) {\r\n      console.error('Error loading messages:', error);\r\n      toast.error(t('communication.error_loading_messages'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [orderId, t]);\r\n\r\n  // Load mention users (dealership members)\r\n  const loadMentionUsers = useCallback(async () => {\r\n    try {\r\n      // Get current user's dealer ID first\r\n      const { data: userData } = await supabase.auth.getUser();\r\n      if (!userData.user) return;\r\n\r\n      setCurrentUserId(userData.user.id);\r\n\r\n      const { data: profile } = await supabase\r\n        .from('profiles')\r\n        .select('dealership_id')\r\n        .eq('id', userData.user.id)\r\n        .single();\r\n\r\n      if (!profile?.dealership_id) return;\r\n\r\n      // Get all dealer members\r\n      const { data: members } = await supabase\r\n        .from('dealer_memberships')\r\n        .select(`\r\n          user_id,\r\n          profiles!inner(\r\n            id,\r\n            first_name,\r\n            last_name,\r\n            email\r\n          )\r\n        `)\r\n        .eq('dealer_id', profile.dealership_id)\r\n        .eq('is_active', true);\r\n\r\n      const users: User[] = members?.map(member => ({\r\n        id: member.profiles.id,\r\n        name: `${member.profiles.first_name || ''} ${member.profiles.last_name || ''}`.trim(),\r\n        email: member.profiles.email\r\n      })) || [];\r\n\r\n      setMentionUsers(users);\r\n    } catch (error) {\r\n      console.error('Error loading mention users:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Send text message\r\n  const sendMessage = useCallback(async (\r\n    content: string, \r\n    type: 'public' | 'internal', \r\n    mentions: string[], \r\n    attachments: File[]\r\n  ) => {\r\n    try {\r\n      const { data: userData } = await supabase.auth.getUser();\r\n      if (!userData.user) throw new Error('User not authenticated');\r\n\r\n      // Upload attachments first\r\n      const uploadedAttachments = [];\r\n      for (const file of attachments) {\r\n        const fileExt = file.name.split('.').pop();\r\n        const fileName = `${Date.now()}-${Math.random().toString(36).substring(2)}.${fileExt}`;\r\n        const filePath = `communications/${orderId}/${fileName}`;\r\n\r\n        const { error: uploadError } = await supabase.storage\r\n          .from('order-attachments')\r\n          .upload(filePath, file);\r\n\r\n        if (uploadError) throw uploadError;\r\n\r\n        uploadedAttachments.push({\r\n          name: file.name,\r\n          path: filePath,\r\n          size: file.size,\r\n          type: file.type\r\n        });\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('order_communications')\r\n        .insert({\r\n          order_id: orderId,\r\n          user_id: userData.user.id,\r\n          message_type: 'text',\r\n          content: content,\r\n          mentions: mentions,\r\n          attachments: uploadedAttachments,\r\n          is_internal: type === 'internal'\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      // Reload messages\r\n      await loadMessages();\r\n      \r\n      toast.success(t('communication.message_sent'));\r\n    } catch (error) {\r\n      console.error('Error sending message:', error);\r\n      toast.error(t('communication.error_sending_message'));\r\n    }\r\n  }, [orderId, loadMessages, t]);\r\n\r\n  // Send voice message\r\n  const sendVoiceMessage = useCallback(async (audioBlob: Blob, duration: number) => {\r\n    try {\r\n      const { data: userData } = await supabase.auth.getUser();\r\n      if (!userData.user) throw new Error('User not authenticated');\r\n\r\n      // Upload audio file\r\n      const fileName = `voice-${Date.now()}.webm`;\r\n      const filePath = `communications/${orderId}/voice/${fileName}`;\r\n\r\n      const { error: uploadError } = await supabase.storage\r\n        .from('order-attachments')\r\n        .upload(filePath, audioBlob);\r\n\r\n      if (uploadError) throw uploadError;\r\n\r\n      const { error } = await supabase\r\n        .from('order_communications')\r\n        .insert({\r\n          order_id: orderId,\r\n          user_id: userData.user.id,\r\n          message_type: 'voice',\r\n          voice_file_path: filePath,\r\n          voice_duration_ms: duration * 1000\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      await loadMessages();\r\n      toast.success(t('communication.voice_message_sent'));\r\n    } catch (error) {\r\n      console.error('Error sending voice message:', error);\r\n      toast.error(t('communication.error_sending_voice'));\r\n    }\r\n  }, [orderId, loadMessages, t]);\r\n\r\n  // Reply to message\r\n  const replyToMessage = useCallback(async (parentMessageId: string, content: string) => {\r\n    try {\r\n      const { data: userData } = await supabase.auth.getUser();\r\n      if (!userData.user) throw new Error('User not authenticated');\r\n\r\n      const { error } = await supabase\r\n        .from('order_communications')\r\n        .insert({\r\n          order_id: orderId,\r\n          parent_message_id: parentMessageId,\r\n          user_id: userData.user.id,\r\n          message_type: 'text',\r\n          content: content\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      await loadMessages();\r\n      toast.success(t('communication.reply_sent'));\r\n    } catch (error) {\r\n      console.error('Error sending reply:', error);\r\n      toast.error(t('communication.error_sending_reply'));\r\n    }\r\n  }, [orderId, loadMessages, t]);\r\n\r\n  // Add reaction\r\n  const addReaction = useCallback(async (messageId: string, emoji: string) => {\r\n    try {\r\n      const { data: userData } = await supabase.auth.getUser();\r\n      if (!userData.user) throw new Error('User not authenticated');\r\n\r\n      // Get current message\r\n      const { data: message } = await supabase\r\n        .from('order_communications')\r\n        .select('reactions')\r\n        .eq('id', messageId)\r\n        .single();\r\n\r\n      if (!message) return;\r\n\r\n      const reactions = message.reactions || {};\r\n      const emojiReactions = reactions[emoji] || [];\r\n      \r\n      // Toggle user's reaction\r\n      const userIndex = emojiReactions.indexOf(userData.user.id);\r\n      if (userIndex > -1) {\r\n        emojiReactions.splice(userIndex, 1);\r\n      } else {\r\n        emojiReactions.push(userData.user.id);\r\n      }\r\n\r\n      // Update reactions\r\n      if (emojiReactions.length === 0) {\r\n        delete reactions[emoji];\r\n      } else {\r\n        reactions[emoji] = emojiReactions;\r\n      }\r\n\r\n      const { error } = await supabase\r\n        .from('order_communications')\r\n        .update({ reactions })\r\n        .eq('id', messageId);\r\n\r\n      if (error) throw error;\r\n\r\n      // Update local state immediately for better UX\r\n      setMessages(prev => prev.map(msg => {\r\n        if (msg.id === messageId) {\r\n          return { ...msg, reactions: reactions as Record<string, string[]> };\r\n        }\r\n        if (msg.replies) {\r\n          return {\r\n            ...msg,\r\n            replies: msg.replies.map(reply =>\r\n              reply.id === messageId ? { ...reply, reactions: reactions as Record<string, string[]> } : reply\r\n            )\r\n          };\r\n        }\r\n        return msg;\r\n      }));\r\n\r\n    } catch (error) {\r\n      console.error('Error adding reaction:', error);\r\n      toast.error(t('communication.error_adding_reaction'));\r\n    }\r\n  }, [t]);\r\n\r\n  // Load more messages\r\n  const loadMore = useCallback(() => {\r\n    if (hasMore && !loading) {\r\n      loadMessages(messages.length);\r\n    }\r\n  }, [messages.length, hasMore, loading, loadMessages]);\r\n\r\n  // Set up real-time subscriptions\r\n  useEffect(() => {\r\n    const channel = supabase\r\n      .channel('order_communications')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'order_communications',\r\n          filter: `order_id=eq.${orderId}`\r\n        },\r\n        () => {\r\n          // Reload messages when changes occur\r\n          loadMessages(0);\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [orderId, loadMessages]);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    loadMessages();\r\n    loadMentionUsers();\r\n  }, [loadMessages, loadMentionUsers]);\r\n\r\n  return {\r\n    messages,\r\n    loading,\r\n    hasMore,\r\n    mentionUsers,\r\n    currentUserId,\r\n    sendMessage,\r\n    sendVoiceMessage,\r\n    replyToMessage,\r\n    addReaction,\r\n    loadMore\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useDealershipModules.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useDetailHubIntegration.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":110,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3161,3164],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3161,3164],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4036,4039],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4036,4039],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4567,4570],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4567,4570],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5504,5507],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5504,5507],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6508,6511],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6508,6511],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":273,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7860,7863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7860,7863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":321,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9358,9361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9358,9361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":359,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":359,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10367,10370],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10367,10370],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":397,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":397,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11382,11385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11382,11385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":435,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12484,12487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12484,12487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\ninterface Employee {\r\n  id: string;\r\n  employee_number: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  role: string;\r\n  department: string;\r\n  hourly_rate: number;\r\n  hire_date: string;\r\n  status: 'active' | 'inactive';\r\n  face_id?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface TimeEntry {\r\n  id: string;\r\n  employee_id: string;\r\n  clock_in: string;\r\n  clock_out?: string;\r\n  break_start?: string;\r\n  break_end?: string;\r\n  total_hours: number;\r\n  regular_hours: number;\r\n  overtime_hours: number;\r\n  status: 'active' | 'complete';\r\n  created_at: string;\r\n}\r\n\r\ninterface FaceRecognitionResult {\r\n  employee_id: string;\r\n  confidence: number;\r\n  success: boolean;\r\n  face_id?: string;\r\n}\r\n\r\n// Mock data for development\r\nconst mockEmployees: Employee[] = [\r\n  {\r\n    id: 'emp-001',\r\n    employee_number: 'EMP001',\r\n    first_name: 'John',\r\n    last_name: 'Smith',\r\n    email: 'john.smith@dealership.com',\r\n    role: 'Senior Detailer',\r\n    department: 'Detail',\r\n    hourly_rate: 25.00,\r\n    hire_date: '2023-01-15',\r\n    status: 'active',\r\n    face_id: 'face_001',\r\n    created_at: '2023-01-15T00:00:00Z',\r\n    updated_at: '2023-01-15T00:00:00Z'\r\n  },\r\n  {\r\n    id: 'emp-002',\r\n    employee_number: 'EMP002',\r\n    first_name: 'Maria',\r\n    last_name: 'Garcia',\r\n    email: 'maria.garcia@dealership.com',\r\n    role: 'Detail Technician',\r\n    department: 'Detail',\r\n    hourly_rate: 20.00,\r\n    hire_date: '2023-03-20',\r\n    status: 'active',\r\n    created_at: '2023-03-20T00:00:00Z',\r\n    updated_at: '2023-03-20T00:00:00Z'\r\n  }\r\n];\r\n\r\nexport const useDetailHubIntegration = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [employees, setEmployees] = useState<Employee[]>(mockEmployees);\r\n  const [timeEntries, setTimeEntries] = useState<TimeEntry[]>([]);\r\n  const { toast } = useToast();\r\n\r\n  // Employee Management\r\n  const createEmployee = useCallback(async (employeeData: Partial<Employee>) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      const newEmployee: Employee = {\r\n        id: `emp-${Date.now()}`,\r\n        employee_number: `EMP${String(employees.length + 1).padStart(3, '0')}`,\r\n        first_name: employeeData.first_name || '',\r\n        last_name: employeeData.last_name || '',\r\n        email: employeeData.email || '',\r\n        role: employeeData.role || '',\r\n        department: employeeData.department || '',\r\n        hourly_rate: employeeData.hourly_rate || 0,\r\n        hire_date: employeeData.hire_date || new Date().toISOString().split('T')[0],\r\n        status: 'active',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      setEmployees(prev => [...prev, newEmployee]);\r\n      \r\n      toast({\r\n        title: \"Employee Created\",\r\n        description: `${newEmployee.first_name} ${newEmployee.last_name} has been added successfully.`\r\n      });\r\n\r\n      return { data: newEmployee, error: null };\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\"\r\n      });\r\n      return { data: null, error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [employees.length, toast]);\r\n\r\n  const updateEmployee = useCallback(async (employeeId: string, updates: Partial<Employee>) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      setEmployees(prev => prev.map(emp => \r\n        emp.id === employeeId \r\n          ? { ...emp, ...updates, updated_at: new Date().toISOString() }\r\n          : emp\r\n      ));\r\n      \r\n      toast({\r\n        title: \"Employee Updated\",\r\n        description: \"Employee information has been updated successfully.\"\r\n      });\r\n\r\n      return { data: updates, error: null };\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\"\r\n      });\r\n      return { data: null, error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [toast]);\r\n\r\n  const fetchEmployees = useCallback(async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Employees are already set in state\r\n      return { data: employees, error: null };\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch employees\",\r\n        variant: \"destructive\"\r\n      });\r\n      return { data: null, error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [employees, toast]);\r\n\r\n  // Face Recognition Integration (Mock)\r\n  const enrollFace = useCallback(async (employeeId: string, imageData: string) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate AWS Rekognition API call\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      const faceId = `face_${employeeId}_${Date.now()}`;\r\n      \r\n      // Update employee with face_id\r\n      await updateEmployee(employeeId, { face_id: faceId });\r\n\r\n      toast({\r\n        title: \"Face Enrollment Complete\",\r\n        description: \"Employee can now use facial recognition for time tracking.\"\r\n      });\r\n\r\n      return { data: { face_id: faceId }, error: null };\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Enrollment Failed\",\r\n        description: error.message,\r\n        variant: \"destructive\"\r\n      });\r\n      return { data: null, error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [updateEmployee, toast]);\r\n\r\n  const verifyFace = useCallback(async (imageData: string): Promise<FaceRecognitionResult> => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate face recognition\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // Mock successful recognition for demo\r\n      const employee = employees.find(emp => emp.face_id);\r\n      \r\n      if (employee && Math.random() > 0.2) { // 80% success rate for demo\r\n        return {\r\n          employee_id: employee.id,\r\n          confidence: 0.95,\r\n          success: true,\r\n          face_id: employee.face_id\r\n        };\r\n      } else {\r\n        return {\r\n          employee_id: '',\r\n          confidence: 0,\r\n          success: false\r\n        };\r\n      }\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Face Recognition Error\",\r\n        description: error.message,\r\n        variant: \"destructive\"\r\n      });\r\n      return {\r\n        employee_id: '',\r\n        confidence: 0,\r\n        success: false\r\n      };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [employees, toast]);\r\n\r\n  // Time Tracking (Mock)\r\n  const clockIn = useCallback(async (employeeId: string, method: 'face' | 'manual' = 'manual') => {\r\n    setLoading(true);\r\n    try {\r\n      // Check if employee already clocked in\r\n      const existingEntry = timeEntries.find(entry => \r\n        entry.employee_id === employeeId && entry.status === 'active'\r\n      );\r\n\r\n      if (existingEntry) {\r\n        throw new Error('Employee is already clocked in');\r\n      }\r\n\r\n      const newEntry: TimeEntry = {\r\n        id: `time-${Date.now()}`,\r\n        employee_id: employeeId,\r\n        clock_in: new Date().toISOString(),\r\n        status: 'active',\r\n        regular_hours: 0,\r\n        overtime_hours: 0,\r\n        total_hours: 0,\r\n        created_at: new Date().toISOString()\r\n      };\r\n\r\n      setTimeEntries(prev => [...prev, newEntry]);\r\n\r\n      toast({\r\n        title: \"Clocked In\",\r\n        description: `Successfully clocked in at ${new Date().toLocaleTimeString()}`\r\n      });\r\n\r\n      return { data: newEntry, error: null };\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Clock In Failed\",\r\n        description: error.message,\r\n        variant: \"destructive\"\r\n      });\r\n      return { data: null, error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [timeEntries, toast]);\r\n\r\n  const clockOut = useCallback(async (employeeId: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const activeEntry = timeEntries.find(entry => \r\n        entry.employee_id === employeeId && entry.status === 'active'\r\n      );\r\n\r\n      if (!activeEntry) {\r\n        throw new Error('No active time entry found');\r\n      }\r\n\r\n      const clockOutTime = new Date();\r\n      const clockInTime = new Date(activeEntry.clock_in);\r\n      const totalHours = (clockOutTime.getTime() - clockInTime.getTime()) / (1000 * 60 * 60);\r\n      const regularHours = Math.min(totalHours, 8);\r\n      const overtimeHours = Math.max(totalHours - 8, 0);\r\n\r\n      const updatedEntry: TimeEntry = {\r\n        ...activeEntry,\r\n        clock_out: clockOutTime.toISOString(),\r\n        total_hours: totalHours,\r\n        regular_hours: regularHours,\r\n        overtime_hours: overtimeHours,\r\n        status: 'complete'\r\n      };\r\n\r\n      setTimeEntries(prev => prev.map(entry => \r\n        entry.id === activeEntry.id ? updatedEntry : entry\r\n      ));\r\n\r\n      toast({\r\n        title: \"Clocked Out\",\r\n        description: `Successfully clocked out. Total hours: ${totalHours.toFixed(2)}`\r\n      });\r\n\r\n      return { data: updatedEntry, error: null };\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Clock Out Failed\",\r\n        description: error.message,\r\n        variant: \"destructive\"\r\n      });\r\n      return { data: null, error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [timeEntries, toast]);\r\n\r\n  const startBreak = useCallback(async (employeeId: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const activeEntry = timeEntries.find(entry => \r\n        entry.employee_id === employeeId && entry.status === 'active'\r\n      );\r\n\r\n      if (!activeEntry) {\r\n        throw new Error('No active time entry found');\r\n      }\r\n\r\n      const updatedEntry = {\r\n        ...activeEntry,\r\n        break_start: new Date().toISOString()\r\n      };\r\n\r\n      setTimeEntries(prev => prev.map(entry => \r\n        entry.id === activeEntry.id ? updatedEntry : entry\r\n      ));\r\n\r\n      toast({\r\n        title: \"Break Started\",\r\n        description: \"Break time has been recorded\"\r\n      });\r\n\r\n      return { data: updatedEntry, error: null };\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\"\r\n      });\r\n      return { data: null, error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [timeEntries, toast]);\r\n\r\n  const endBreak = useCallback(async (employeeId: string) => {\r\n    setLoading(true);\r\n    try {\r\n      const activeEntry = timeEntries.find(entry => \r\n        entry.employee_id === employeeId && entry.status === 'active'\r\n      );\r\n\r\n      if (!activeEntry || !activeEntry.break_start) {\r\n        throw new Error('No active break found');\r\n      }\r\n\r\n      const updatedEntry = {\r\n        ...activeEntry,\r\n        break_end: new Date().toISOString()\r\n      };\r\n\r\n      setTimeEntries(prev => prev.map(entry => \r\n        entry.id === activeEntry.id ? updatedEntry : entry\r\n      ));\r\n\r\n      toast({\r\n        title: \"Break Ended\",\r\n        description: \"Break time has been recorded\"\r\n      });\r\n\r\n      return { data: updatedEntry, error: null };\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: error.message,\r\n        variant: \"destructive\"\r\n      });\r\n      return { data: null, error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [timeEntries, toast]);\r\n\r\n  // Utility function to generate employee number\r\n  const generateEmployeeNumber = async (): Promise<string> => {\r\n    return `EMP${String(employees.length + 1).padStart(3, '0')}`;\r\n  };\r\n\r\n  // Fetch time entries (Mock)\r\n  const fetchTimeEntries = useCallback(async (startDate?: string, endDate?: string) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      let filteredEntries = timeEntries;\r\n      \r\n      if (startDate) {\r\n        filteredEntries = filteredEntries.filter(entry => \r\n          entry.clock_in >= startDate\r\n        );\r\n      }\r\n      if (endDate) {\r\n        filteredEntries = filteredEntries.filter(entry => \r\n          entry.clock_in <= endDate\r\n        );\r\n      }\r\n\r\n      return { data: filteredEntries, error: null };\r\n    } catch (error: any) {\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to fetch time entries\",\r\n        variant: \"destructive\"\r\n      });\r\n      return { data: null, error };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [timeEntries, toast]);\r\n\r\n  return {\r\n    // State\r\n    loading,\r\n    employees,\r\n    timeEntries,\r\n\r\n    // Employee Management\r\n    createEmployee,\r\n    updateEmployee,\r\n    fetchEmployees,\r\n\r\n    // Face Recognition\r\n    enrollFace,\r\n    verifyFace,\r\n\r\n    // Time Tracking\r\n    clockIn,\r\n    clockOut,\r\n    startBreak,\r\n    endBreak,\r\n    fetchTimeEntries,\r\n\r\n    // Utilities\r\n    generateEmployeeNumber\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useEnhancedNotifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[749,752],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[749,752],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":40,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1446,1449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1446,1449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":229,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6841,6844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6841,6844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6888,6891],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6888,6891],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7110,7113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7110,7113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7228,7231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7228,7231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7781,7784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7781,7784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":277,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8322,8325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8322,8325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":294,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8939,8942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8939,8942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from '@/hooks/use-toast';\r\nimport { \r\n  notificationService, \r\n  NotificationRequest, \r\n  NotificationResult,\r\n  NotificationTemplate,\r\n  DealerNotificationConfig,\r\n  UserNotificationPreferences,\r\n  NotificationChannel\r\n} from '@/services/notificationService';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nexport interface EnhancedNotification {\r\n  id: string;\r\n  dealer_id: number;\r\n  user_id?: string;\r\n  notification_type: string;\r\n  entity_type?: string;\r\n  entity_id?: string;\r\n  channels: NotificationChannel[];\r\n  notification_data: Record<string, any>;\r\n  priority: string;\r\n  scheduled_for: string;\r\n  status: string;\r\n  attempts: number;\r\n  created_at: string;\r\n}\r\n\r\nexport function useEnhancedNotifications(dealerId?: number) {\r\n  const { user } = useAuth();\r\n  const { t } = useTranslation();\r\n  const [loading, setLoading] = useState(false);\r\n  const [notifications, setNotifications] = useState<EnhancedNotification[]>([]);\r\n  const [templates, setTemplates] = useState<NotificationTemplate[]>([]);\r\n  const [dealerConfig, setDealerConfig] = useState<DealerNotificationConfig | null>(null);\r\n  const [userPreferences, setUserPreferences] = useState<UserNotificationPreferences | null>(null);\r\n  const [analytics, setAnalytics] = useState<any>(null);\r\n\r\n  // Load initial data\r\n  const loadData = useCallback(async () => {\r\n    if (!dealerId || !user) return;\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const [templatesData, configData, prefsData] = await Promise.all([\r\n        notificationService.getTemplates(dealerId),\r\n        notificationService.getDealerConfig(dealerId),\r\n        notificationService.getUserPreferences(user.id, dealerId)\r\n      ]);\r\n\r\n      setTemplates(templatesData);\r\n      setDealerConfig(configData);\r\n      setUserPreferences(prefsData);\r\n\r\n      // Load notifications from queue\r\n      const { data: queueData } = await supabase\r\n        .from('notification_queue')\r\n        .select('*')\r\n        .eq('dealer_id', dealerId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(50);\r\n\r\n      if (queueData) {\r\n        setNotifications(queueData as unknown as EnhancedNotification[]);\r\n      }\r\n\r\n      // Load analytics\r\n      const analyticsData = await notificationService.getAnalytics(dealerId, {\r\n        startDate: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Last 30 days\r\n        endDate: new Date()\r\n      });\r\n      setAnalytics(analyticsData);\r\n\r\n    } catch (error) {\r\n      console.error('Load notifications data error:', error);\r\n      toast({\r\n        title: t('notifications.error'),\r\n        description: t('notifications.loadError'),\r\n        variant: 'destructive'\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dealerId, user, t]);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [loadData]);\r\n\r\n  // Real-time updates\r\n  useEffect(() => {\r\n    if (!dealerId) return;\r\n\r\n    const channel = supabase\r\n      .channel(`notifications_${dealerId}`)\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'notification_queue',\r\n          filter: `dealer_id=eq.${dealerId}`\r\n        },\r\n        () => {\r\n          loadData();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [dealerId, loadData]);\r\n\r\n  // Core notification functions\r\n  const sendNotification = useCallback(async (request: NotificationRequest): Promise<NotificationResult> => {\r\n    if (!dealerId) throw new Error('Dealer ID required');\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const result = await notificationService.send({\r\n        ...request,\r\n        dealerId,\r\n        userId: request.userId || user?.id\r\n      });\r\n\r\n      if (result.success) {\r\n        toast({\r\n          title: t('notifications.sent'),\r\n          description: t('notifications.sentSuccessfully')\r\n        });\r\n        loadData(); // Refresh data\r\n      } else {\r\n        throw new Error('Failed to send notification');\r\n      }\r\n\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Send notification error:', error);\r\n      toast({\r\n        title: t('notifications.error'),\r\n        description: t('notifications.sendError'),\r\n        variant: 'destructive'\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dealerId, user, t, loadData]);\r\n\r\n  const sendBatchNotifications = useCallback(async (requests: NotificationRequest[]): Promise<NotificationResult[]> => {\r\n    if (!dealerId) throw new Error('Dealer ID required');\r\n    \r\n    setLoading(true);\r\n    try {\r\n      const enrichedRequests = requests.map(req => ({\r\n        ...req,\r\n        dealerId,\r\n        userId: req.userId || user?.id\r\n      }));\r\n\r\n      const results = await notificationService.sendBatch(enrichedRequests);\r\n      \r\n      const successful = results.filter(r => r.success).length;\r\n      const failed = results.filter(r => !r.success).length;\r\n\r\n      toast({\r\n        title: t('notifications.batchSent'),\r\n        description: t('notifications.batchSentMessage', { successful, failed })\r\n      });\r\n\r\n      loadData(); // Refresh data\r\n      return results;\r\n    } catch (error) {\r\n      console.error('Send batch notifications error:', error);\r\n      toast({\r\n        title: t('notifications.error'),\r\n        description: t('notifications.batchSendError'),\r\n        variant: 'destructive'\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dealerId, user, t, loadData]);\r\n\r\n  // Configuration management\r\n  const updateUserPreferences = useCallback(async (\r\n    preferences: Partial<UserNotificationPreferences>\r\n  ): Promise<boolean> => {\r\n    if (!user || !dealerId) return false;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const success = await notificationService.updateUserPreferences(\r\n        user.id,\r\n        dealerId,\r\n        preferences\r\n      );\r\n\r\n      if (success) {\r\n        toast({\r\n          title: t('notifications.preferencesUpdated'),\r\n          description: t('notifications.preferencesUpdatedMessage')\r\n        });\r\n        loadData(); // Refresh data\r\n      }\r\n\r\n      return success;\r\n    } catch (error) {\r\n      console.error('Update preferences error:', error);\r\n      toast({\r\n        title: t('notifications.error'),\r\n        description: t('notifications.preferencesUpdateError'),\r\n        variant: 'destructive'\r\n      });\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, dealerId, t, loadData]);\r\n\r\n  // Template management\r\n  const renderTemplate = useCallback(async (\r\n    templateId: string, \r\n    data: Record<string, any>\r\n  ): Promise<Record<NotificationChannel, any>> => {\r\n    try {\r\n      return await notificationService.renderTemplate(templateId, data);\r\n    } catch (error) {\r\n      console.error('Render template error:', error);\r\n      return {} as Record<NotificationChannel, any>;\r\n    }\r\n  }, []);\r\n\r\n  // Quick notification methods\r\n  const notifyOrderUpdate = useCallback(async (orderData: any) => {\r\n    if (!user || !dealerId) return;\r\n\r\n    return sendNotification({\r\n      dealerId,\r\n      userId: user.id,\r\n      notificationType: 'order_update',\r\n      entityType: 'order',\r\n      entityId: orderData.id,\r\n      channels: ['in_app', 'push'],\r\n      data: {\r\n        order_number: orderData.order_number,\r\n        status: orderData.status,\r\n        customer_name: orderData.customer_name\r\n      },\r\n      priority: 'normal'\r\n    });\r\n  }, [user, dealerId, sendNotification]);\r\n\r\n  const notifyNewMessage = useCallback(async (messageData: any) => {\r\n    if (!user || !dealerId) return;\r\n\r\n    return sendNotification({\r\n      dealerId,\r\n      userId: user.id,\r\n      notificationType: 'new_message',\r\n      entityType: 'message',\r\n      entityId: messageData.id,\r\n      channels: ['in_app', 'push'],\r\n      data: {\r\n        sender_name: messageData.sender_name,\r\n        message_preview: messageData.content?.substring(0, 100) || ''\r\n      },\r\n      priority: 'high'\r\n    });\r\n  }, [user, dealerId, sendNotification]);\r\n\r\n  const notifySystemAlert = useCallback(async (alertData: any) => {\r\n    if (!dealerId) return;\r\n\r\n    return notificationService.notifySystemAlert(dealerId, alertData);\r\n  }, [dealerId]);\r\n\r\n  // Analytics helpers\r\n  const getChannelStats = useCallback(() => {\r\n    if (!analytics || !Array.isArray(analytics)) return {};\r\n\r\n    const stats: Record<NotificationChannel, { sent: number; delivered: number; failed: number }> = {\r\n      sms: { sent: 0, delivered: 0, failed: 0 },\r\n      email: { sent: 0, delivered: 0, failed: 0 },\r\n      push: { sent: 0, delivered: 0, failed: 0 },\r\n      in_app: { sent: 0, delivered: 0, failed: 0 }\r\n    };\r\n\r\n    analytics.forEach((record: any) => {\r\n      const channel = record.channel as NotificationChannel;\r\n      if (stats[channel]) {\r\n        if (record.event_type === 'sent') stats[channel].sent++;\r\n        else if (record.event_type === 'delivered') stats[channel].delivered++;\r\n        else if (record.event_type === 'failed') stats[channel].failed++;\r\n      }\r\n    });\r\n\r\n    return stats;\r\n  }, [analytics]);\r\n\r\n  const getTotalNotifications = useCallback(() => {\r\n    return notifications.length;\r\n  }, [notifications]);\r\n\r\n  const getPendingNotifications = useCallback(() => {\r\n    return notifications.filter(n => n.status === 'queued').length;\r\n  }, [notifications]);\r\n\r\n  const getFailedNotifications = useCallback(() => {\r\n    return notifications.filter(n => n.status === 'failed').length;\r\n  }, [notifications]);\r\n\r\n  return {\r\n    // Data\r\n    loading,\r\n    notifications,\r\n    templates,\r\n    dealerConfig,\r\n    userPreferences,\r\n    analytics,\r\n\r\n    // Core functions\r\n    sendNotification,\r\n    sendBatchNotifications,\r\n    updateUserPreferences,\r\n    renderTemplate,\r\n\r\n    // Quick methods\r\n    notifyOrderUpdate,\r\n    notifyNewMessage,\r\n    notifySystemAlert,\r\n\r\n    // Analytics\r\n    getChannelStats,\r\n    getTotalNotifications,\r\n    getPendingNotifications,\r\n    getFailedNotifications,\r\n\r\n    // Utility\r\n    refresh: loadData\r\n  };\r\n}\r\n\r\n// Hook for notification preferences management\r\nexport function useNotificationPreferences(dealerId?: number) {\r\n  const { user } = useAuth();\r\n  const [preferences, setPreferences] = useState<UserNotificationPreferences | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const loadPreferences = useCallback(async () => {\r\n    if (!user || !dealerId) return;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const prefs = await notificationService.getUserPreferences(user.id, dealerId);\r\n      setPreferences(prefs);\r\n    } catch (error) {\r\n      console.error('Load preferences error:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, dealerId]);\r\n\r\n  const updatePreferences = useCallback(async (updates: Partial<UserNotificationPreferences>) => {\r\n    if (!user || !dealerId) return false;\r\n\r\n    setLoading(true);\r\n    try {\r\n      const success = await notificationService.updateUserPreferences(user.id, dealerId, updates);\r\n      if (success) {\r\n        await loadPreferences();\r\n      }\r\n      return success;\r\n    } catch (error) {\r\n      console.error('Update preferences error:', error);\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, dealerId, loadPreferences]);\r\n\r\n  useEffect(() => {\r\n    loadPreferences();\r\n  }, [loadPreferences]);\r\n\r\n  return {\r\n    preferences,\r\n    loading,\r\n    updatePreferences,\r\n    refresh: loadPreferences\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useEntityFollowers.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2288,2291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2288,2291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2345,2348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2345,2348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3978,3981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3978,3981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { toast } from '@/hooks/use-toast';\r\n\r\nexport interface EntityFollower {\r\n  id: string;\r\n  user_id: string;\r\n  follow_type: string;\r\n  notification_level: string;\r\n  followed_at: string;\r\n  user_name: string;\r\n  user_email: string;\r\n  presence_status: string;\r\n}\r\n\r\nexport interface UseEntityFollowersReturn {\r\n  followers: EntityFollower[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  followerCount: number;\r\n  isFollowing: boolean;\r\n  followEntity: (notificationLevel?: string) => Promise<void>;\r\n  unfollowEntity: () => Promise<void>;\r\n  updateNotificationLevel: (level: string) => Promise<void>;\r\n  refreshFollowers: () => Promise<void>;\r\n}\r\n\r\nexport function useEntityFollowers(\r\n  entityType: string,\r\n  entityId: string | undefined,\r\n  dealerId?: number\r\n): UseEntityFollowersReturn {\r\n  const { user } = useAuth();\r\n  const [followers, setFollowers] = useState<EntityFollower[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchFollowers = useCallback(async () => {\r\n    if (!entityId || !dealerId) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const { data, error: fetchError } = await supabase\r\n        .rpc('get_entity_followers', {\r\n          p_entity_type: entityType,\r\n          p_entity_id: entityId,\r\n          p_dealer_id: dealerId\r\n        });\r\n\r\n      if (fetchError) throw fetchError;\r\n\r\n      setFollowers(data || []);\r\n    } catch (err) {\r\n      console.error('Error fetching followers:', err);\r\n      setError(err instanceof Error ? err.message : 'Error fetching followers');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [entityType, entityId, dealerId]);\r\n\r\n  const followEntity = useCallback(async (notificationLevel = 'all') => {\r\n    if (!entityId || !dealerId || !user?.id) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('entity_followers')\r\n        .upsert({\r\n          entity_type: entityType,\r\n          entity_id: entityId,\r\n          user_id: user.id,\r\n          dealer_id: dealerId,\r\n          follow_type: 'manual' as any,\r\n          notification_level: notificationLevel as any,\r\n          followed_by: user.id\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      await fetchFollowers();\r\n      toast({\r\n        title: \"Following\",\r\n        description: `You're now following this ${entityType}`\r\n      });\r\n    } catch (err) {\r\n      console.error('Error following entity:', err);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to follow entity\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  }, [entityType, entityId, dealerId, user?.id, fetchFollowers]);\r\n\r\n  const unfollowEntity = useCallback(async () => {\r\n    if (!entityId || !dealerId || !user?.id) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('entity_followers')\r\n        .delete()\r\n        .match({\r\n          entity_type: entityType,\r\n          entity_id: entityId,\r\n          user_id: user.id,\r\n          dealer_id: dealerId\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      await fetchFollowers();\r\n      toast({\r\n        title: \"Unfollowed\",\r\n        description: `You're no longer following this ${entityType}`\r\n      });\r\n    } catch (err) {\r\n      console.error('Error unfollowing entity:', err);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to unfollow entity\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  }, [entityType, entityId, dealerId, user?.id, fetchFollowers]);\r\n\r\n  const updateNotificationLevel = useCallback(async (level: string) => {\r\n    if (!entityId || !dealerId || !user?.id) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('entity_followers')\r\n        .update({ notification_level: level as any })\r\n        .match({\r\n          entity_type: entityType,\r\n          entity_id: entityId,\r\n          user_id: user.id,\r\n          dealer_id: dealerId\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      await fetchFollowers();\r\n      toast({\r\n        title: \"Notifications Updated\",\r\n        description: `Notification level set to ${level}`\r\n      });\r\n    } catch (err) {\r\n      console.error('Error updating notification level:', err);\r\n      toast({\r\n        title: \"Error\",\r\n        description: \"Failed to update notifications\",\r\n        variant: \"destructive\"\r\n      });\r\n    }\r\n  }, [entityType, entityId, dealerId, user?.id, fetchFollowers]);\r\n\r\n  useEffect(() => {\r\n    fetchFollowers();\r\n  }, [fetchFollowers]);\r\n\r\n  // Real-time subscription to followers changes\r\n  useEffect(() => {\r\n    if (!entityId || !dealerId) return;\r\n\r\n    const channel = supabase\r\n      .channel(`entity_followers_${entityType}_${entityId}`)\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'entity_followers',\r\n          filter: `entity_type=eq.${entityType},entity_id=eq.${entityId}`\r\n        },\r\n        () => {\r\n          fetchFollowers();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [entityType, entityId, dealerId, fetchFollowers]);\r\n\r\n  const isFollowing = followers.some(f => f.user_id === user?.id);\r\n  const followerCount = followers.length;\r\n\r\n  return {\r\n    followers,\r\n    loading,\r\n    error,\r\n    followerCount,\r\n    isFollowing,\r\n    followEntity,\r\n    unfollowEntity,\r\n    updateNotificationLevel,\r\n    refreshFollowers: fetchFollowers\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useGetReadySteps.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useGetReadyStore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useGetReadyVehicles.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useInstantPersistedState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useNFCManagement.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[864,867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[864,867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[901,904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[901,904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[939,942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[939,942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4555,4558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4555,4558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":156,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4626,4629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4626,4629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4699,4702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4699,4702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":393,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":393,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12390,12393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12390,12393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":394,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":394,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12430,12433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12430,12433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":395,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12471,12474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12471,12474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport interface NFCTag {\r\n  id: string;\r\n  name: string;\r\n  tag_uid: string;\r\n  tag_type: string;\r\n  description?: string;\r\n  vehicle_vin?: string;\r\n  location_name?: string;\r\n  location_coordinates?: [number, number];\r\n  is_active: boolean;\r\n  is_permanent: boolean;\r\n  scan_count: number;\r\n  last_scanned_at?: string;\r\n  created_at: string;\r\n  dealer_id: number;\r\n  order_id?: string;\r\n  created_by?: string;\r\n}\r\n\r\ninterface NFCScan {\r\n  id: string;\r\n  tag_id: string;\r\n  scanned_by: string;\r\n  scanned_at: string;\r\n  scan_location?: [number, number];\r\n  scan_address?: string;\r\n  action_type: string;\r\n  session_id?: string;\r\n  device_info: Record<string, any>;\r\n  action_data: Record<string, any>;\r\n  context_data: Record<string, any>;\r\n  is_unique_scan: boolean;\r\n  order_id?: string;\r\n  user_agent?: string;\r\n}\r\n\r\ninterface NFCStats {\r\n  total_tags: number;\r\n  active_tags: number;\r\n  total_scans: number;\r\n  unique_scans: number;\r\n  vehicles_tracked: number;\r\n  locations_count: number;\r\n  avg_stay_time: number;\r\n  recent_scans: NFCScan[];\r\n}\r\n\r\n  // Utility function to parse location coordinates\r\n  const parseLocationCoordinates = (coords: unknown): [number, number] | undefined => {\r\n    if (typeof coords === 'string') {\r\n      // Parse PostGIS point format: \"(x,y)\" \r\n      const match = coords.match(/\\(([^,]+),([^)]+)\\)/);\r\n      if (match) {\r\n        const x = parseFloat(match[1]);\r\n        const y = parseFloat(match[2]);\r\n        if (!isNaN(x) && !isNaN(y)) {\r\n          return [x, y];\r\n        }\r\n      }\r\n    }\r\n    return undefined;\r\n  };\r\n\r\nexport function useNFCManagement() {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [tags, setTags] = useState<NFCTag[]>([]);\r\n  const [scans, setScans] = useState<NFCScan[]>([]);\r\n  const [stats, setStats] = useState<NFCStats | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Load NFC tags\r\n  const loadTags = async (dealerId?: number) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      let query = supabase\r\n        .from('nfc_tags')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (dealerId) {\r\n        query = query.eq('dealer_id', dealerId);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      // Transform the data to match our interface\r\n      const transformedData = (data || []).map(tag => ({\r\n        ...tag,\r\n        description: tag.description || undefined,\r\n        vehicle_vin: tag.vehicle_vin || undefined,\r\n        location_name: tag.location_name || undefined,\r\n        location_coordinates: tag.location_coordinates ? \r\n          parseLocationCoordinates(tag.location_coordinates) : undefined,\r\n        last_scanned_at: tag.last_scanned_at || undefined,\r\n        order_id: tag.order_id || undefined,\r\n        created_by: tag.created_by || undefined\r\n      }));\r\n\r\n      setTags(transformedData);\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to load NFC tags';\r\n      setError(message);\r\n      toast({\r\n        title: t('nfc_tracking.errors.load_failed'),\r\n        description: message,\r\n        variant: 'destructive'\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Load NFC scans\r\n  const loadScans = async (tagId?: string, limit = 100) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      let query = supabase\r\n        .from('nfc_scans')\r\n        .select(`\r\n          *,\r\n          nfc_tags:tag_id(name, tag_type, vehicle_vin)\r\n        `)\r\n        .order('scanned_at', { ascending: false })\r\n        .limit(limit);\r\n\r\n      if (tagId) {\r\n        query = query.eq('tag_id', tagId);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      // Transform the data to match our interface\r\n      const transformedData = (data || []).map(scan => ({\r\n        ...scan,\r\n        scan_location: scan.scan_location ? \r\n          parseLocationCoordinates(scan.scan_location) : undefined,\r\n        scan_address: scan.scan_address || undefined,\r\n        session_id: scan.session_id || undefined,\r\n        order_id: scan.order_id || undefined,\r\n        user_agent: scan.user_agent || undefined,\r\n        device_info: (scan.device_info as Record<string, any>) || {},\r\n        action_data: (scan.action_data as Record<string, any>) || {},\r\n        context_data: (scan.context_data as Record<string, any>) || {}\r\n      }));\r\n\r\n      setScans(transformedData);\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to load NFC scans';\r\n      setError(message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Load NFC statistics\r\n  const loadStats = async (dealerId?: number) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // Get basic tag stats\r\n      let tagQuery = supabase\r\n        .from('nfc_tags')\r\n        .select('id, is_active, vehicle_vin, scan_count, last_scanned_at');\r\n      \r\n      if (dealerId) {\r\n        tagQuery = tagQuery.eq('dealer_id', dealerId);\r\n      }\r\n\r\n      const { data: tagData, error: tagError } = await tagQuery;\r\n      if (tagError) throw tagError;\r\n\r\n      // Get scan stats\r\n      const scanQuery = supabase\r\n        .from('nfc_scans')\r\n        .select('id, is_unique_scan, scanned_at')\r\n        .gte('scanned_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString());\r\n\r\n      const { data: scanData, error: scanError } = await scanQuery;\r\n      if (scanError) throw scanError;\r\n\r\n      // Calculate stats\r\n      const totalTags = tagData?.length || 0;\r\n      const activeTags = tagData?.filter(t => t.is_active)?.length || 0;\r\n      const vehiclesTracked = new Set(tagData?.filter(t => t.vehicle_vin).map(t => t.vehicle_vin)).size;\r\n      const totalScans = scanData?.length || 0;\r\n      const uniqueScans = scanData?.filter(s => s.is_unique_scan)?.length || 0;\r\n\r\n      // Transform recent scans to match interface\r\n      const recentScans = (scanData || []).slice(0, 10).map(scan => ({\r\n        id: scan.id,\r\n        tag_id: '', // This would need to be fetched from a join\r\n        scanned_by: '', // This would need to be fetched\r\n        scanned_at: scan.scanned_at,\r\n        action_type: 'read',\r\n        device_info: {},\r\n        action_data: {},\r\n        context_data: {},\r\n        is_unique_scan: scan.is_unique_scan\r\n      }));\r\n\r\n      // Mock some additional stats for now\r\n      const mockStats: NFCStats = {\r\n        total_tags: totalTags,\r\n        active_tags: activeTags,\r\n        total_scans: totalScans,\r\n        unique_scans: uniqueScans,\r\n        vehicles_tracked: vehiclesTracked,\r\n        locations_count: 8, // Could be calculated from unique location_names\r\n        avg_stay_time: 45, // Minutes - would need more complex calculation\r\n        recent_scans: recentScans\r\n      };\r\n\r\n      setStats(mockStats);\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to load NFC statistics';\r\n      setError(message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Create new NFC tag\r\n  const createTag = async (tagData: Partial<NFCTag>) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const { data, error } = await supabase\r\n        .from('nfc_tags')\r\n        .insert({\r\n          name: tagData.name,\r\n          tag_uid: tagData.tag_uid,\r\n          tag_type: tagData.tag_type || 'vehicle',\r\n          description: tagData.description,\r\n          vehicle_vin: tagData.vehicle_vin,\r\n          location_name: tagData.location_name,\r\n          location_coordinates: tagData.location_coordinates ? \r\n            `(${tagData.location_coordinates[0]}, ${tagData.location_coordinates[1]})` : null,\r\n          dealer_id: tagData.dealer_id,\r\n          order_id: tagData.order_id,\r\n          created_by: (await supabase.auth.getUser()).data.user?.id\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Transform the data to match our interface\r\n      const transformedData = {\r\n        ...data,\r\n        description: data.description || undefined,\r\n        vehicle_vin: data.vehicle_vin || undefined,\r\n        location_name: data.location_name || undefined,\r\n        location_coordinates: data.location_coordinates ? \r\n          parseLocationCoordinates(data.location_coordinates) : undefined,\r\n        last_scanned_at: data.last_scanned_at || undefined,\r\n        order_id: data.order_id || undefined,\r\n        created_by: data.created_by || undefined\r\n      };\r\n\r\n      setTags(prev => [transformedData, ...prev]);\r\n      \r\n      toast({\r\n        title: t('nfc_tracking.tag_created'),\r\n        description: t('nfc_tracking.tag_created_desc', { name: data.name })\r\n      });\r\n\r\n      return data;\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to create NFC tag';\r\n      setError(message);\r\n      toast({\r\n        title: t('nfc_tracking.errors.create_failed'),\r\n        description: message,\r\n        variant: 'destructive'\r\n      });\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update NFC tag\r\n  const updateTag = async (tagId: string, updates: Partial<NFCTag>) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const { data, error } = await supabase\r\n        .from('nfc_tags')\r\n        .update({\r\n          name: updates.name,\r\n          description: updates.description,\r\n          vehicle_vin: updates.vehicle_vin,\r\n          location_name: updates.location_name,\r\n          location_coordinates: updates.location_coordinates ? \r\n            `(${updates.location_coordinates[0]}, ${updates.location_coordinates[1]})` : null,\r\n          is_active: updates.is_active,\r\n          is_permanent: updates.is_permanent,\r\n          tag_type: updates.tag_type\r\n        })\r\n        .eq('id', tagId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Transform the data to match our interface\r\n      const transformedData = {\r\n        ...data,\r\n        description: data.description || undefined,\r\n        vehicle_vin: data.vehicle_vin || undefined,\r\n        location_name: data.location_name || undefined,\r\n        location_coordinates: data.location_coordinates ? \r\n          parseLocationCoordinates(data.location_coordinates) : undefined,\r\n        last_scanned_at: data.last_scanned_at || undefined,\r\n        order_id: data.order_id || undefined,\r\n        created_by: data.created_by || undefined\r\n      };\r\n\r\n      setTags(prev => prev.map(tag => tag.id === tagId ? { ...tag, ...transformedData } : tag));\r\n      \r\n      toast({\r\n        title: t('nfc_tracking.tag_updated'),\r\n        description: t('nfc_tracking.tag_updated_desc', { name: data.name })\r\n      });\r\n\r\n      return data;\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to update NFC tag';\r\n      setError(message);\r\n      toast({\r\n        title: t('nfc_tracking.errors.update_failed'),\r\n        description: message,\r\n        variant: 'destructive'\r\n      });\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Delete NFC tag\r\n  const deleteTag = async (tagId: string) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const { error } = await supabase\r\n        .from('nfc_tags')\r\n        .delete()\r\n        .eq('id', tagId);\r\n\r\n      if (error) throw error;\r\n\r\n      setTags(prev => prev.filter(tag => tag.id !== tagId));\r\n      \r\n      toast({\r\n        title: t('nfc_tracking.tag_deleted'),\r\n        description: t('nfc_tracking.tag_deleted_desc')\r\n      });\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to delete NFC tag';\r\n      setError(message);\r\n      toast({\r\n        title: t('nfc_tracking.errors.delete_failed'),\r\n        description: message,\r\n        variant: 'destructive'\r\n      });\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Record NFC scan\r\n  const recordScan = async (scanData: {\r\n    tag_id: string;\r\n    action_type?: string;\r\n    scan_location?: [number, number];\r\n    scan_address?: string;\r\n    device_info?: Record<string, any>;\r\n    action_data?: Record<string, any>;\r\n    context_data?: Record<string, any>;\r\n    session_id?: string;\r\n    order_id?: string;\r\n  }) => {\r\n    try {\r\n      const user = await supabase.auth.getUser();\r\n      if (!user.data.user) throw new Error('User not authenticated');\r\n\r\n      const { data, error } = await supabase\r\n        .from('nfc_scans')\r\n        .insert({\r\n          tag_id: scanData.tag_id,\r\n          scanned_by: user.data.user.id,\r\n          action_type: scanData.action_type || 'read',\r\n          scan_location: scanData.scan_location ? \r\n            `(${scanData.scan_location[0]}, ${scanData.scan_location[1]})` : null,\r\n          scan_address: scanData.scan_address,\r\n          device_info: scanData.device_info || {},\r\n          action_data: scanData.action_data || {},\r\n          context_data: scanData.context_data || {},\r\n          session_id: scanData.session_id,\r\n          order_id: scanData.order_id,\r\n          is_unique_scan: true // Logic would be more complex in real implementation\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      // Update tag scan count and last scanned time\r\n      await supabase\r\n        .from('nfc_tags')\r\n        .update({\r\n          scan_count: 1, // This would need proper increment logic\r\n          last_scanned_at: new Date().toISOString()\r\n        })\r\n        .eq('id', scanData.tag_id);\r\n\r\n      return data;\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to record NFC scan';\r\n      throw new Error(message);\r\n    }\r\n  };\r\n\r\n  return {\r\n    // State\r\n    tags,\r\n    scans,\r\n    stats,\r\n    loading,\r\n    error,\r\n\r\n    // Actions\r\n    loadTags,\r\n    loadScans,\r\n    loadStats,\r\n    createTag,\r\n    updateTag,\r\n    deleteTag,\r\n    recordScan,\r\n\r\n    // Computed values\r\n    activeTags: tags.filter(tag => tag.is_active),\r\n    vehicleTags: tags.filter(tag => tag.tag_type === 'vehicle'),\r\n    locationTags: tags.filter(tag => tag.tag_type === 'location'),\r\n    recentScans: scans.slice(0, 10)\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useNFCWorkflows.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":18,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[645,648],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[645,648],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[856,859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[856,859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1588,1591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1588,1591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":315,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10361,10364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10361,10364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from 'sonner';\r\n\r\nexport interface NFCWorkflowAction {\r\n  type: 'send_email' | 'send_sms' | 'send_notification' | 'update_order_status' | 'create_task' | 'webhook';\r\n  config: {\r\n    recipient?: string;\r\n    subject?: string;\r\n    message?: string;\r\n    status?: string;\r\n    task_title?: string;\r\n    task_description?: string;\r\n    webhook_url?: string;\r\n    webhook_method?: string;\r\n    webhook_headers?: Record<string, string>;\r\n    webhook_payload?: Record<string, any>;\r\n  };\r\n}\r\n\r\nexport interface NFCWorkflow {\r\n  id: string;\r\n  name: string;\r\n  description?: string;\r\n  trigger_type: 'tag_scan' | 'location_entry' | 'time_based' | 'status_change';\r\n  trigger_conditions?: any;\r\n  actions: NFCWorkflowAction[];\r\n  is_active: boolean;\r\n  dealer_id?: number;\r\n  execution_count: number;\r\n  success_count?: number;\r\n  last_executed?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface UseNFCWorkflowsReturn {\r\n  workflows: NFCWorkflow[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  loadWorkflows: (dealerId?: number) => Promise<void>;\r\n  createWorkflow: (workflowData: Partial<NFCWorkflow>) => Promise<void>;\r\n  updateWorkflow: (workflowId: string, updates: Partial<NFCWorkflow>) => Promise<void>;\r\n  deleteWorkflow: (workflowId: string) => Promise<void>;\r\n  toggleWorkflow: (workflowId: string, isActive: boolean) => Promise<void>;\r\n  executeWorkflow: (workflowId: string, context?: any) => Promise<void>;\r\n}\r\n\r\nexport function useNFCWorkflows(): UseNFCWorkflowsReturn {\r\n  const { t } = useTranslation();\r\n  const [workflows, setWorkflows] = useState<NFCWorkflow[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Load NFC workflows\r\n  const loadWorkflows = useCallback(async (dealerId?: number) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      let query = supabase\r\n        .from('nfc_workflows')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (dealerId) {\r\n        query = query.eq('dealer_id', dealerId);\r\n      }\r\n\r\n      const { data, error: supabaseError } = await query;\r\n\r\n      if (supabaseError) {\r\n        throw supabaseError;\r\n      }\r\n\r\n      // Use mock data for now since the real database structure doesn't match our interface yet\r\n      const mockWorkflows: NFCWorkflow[] = [\r\n        {\r\n          id: '1',\r\n          name: 'Vehicle Delivery Notification',\r\n          description: 'Send notification when vehicle reaches delivery area',\r\n          trigger_type: 'tag_scan',\r\n          trigger_conditions: {\r\n            tag_type: 'vehicle_delivery',\r\n            location: 'Delivery Area'\r\n          },\r\n          actions: [\r\n            {\r\n              type: 'send_email',\r\n              config: {\r\n                recipient: 'sales@dealership.com',\r\n                subject: 'Vehicle Ready for Delivery',\r\n                message: 'Vehicle {{vin}} is now ready for customer pickup.'\r\n              }\r\n            },\r\n            {\r\n              type: 'send_sms',\r\n              config: {\r\n                recipient: '{{customer_phone}}',\r\n                message: 'Your vehicle is ready for pickup! Please come to the dealership at your convenience.'\r\n              }\r\n            }\r\n          ],\r\n          is_active: true,\r\n          execution_count: 15,\r\n          success_count: 14,\r\n          last_executed: '2024-01-15T10:30:00Z',\r\n          created_at: '2024-01-10T08:00:00Z',\r\n          updated_at: '2024-01-15T10:30:00Z'\r\n        },\r\n        {\r\n          id: '2',\r\n          name: 'Service Bay Status Update',\r\n          description: 'Update order status when vehicle enters service bay',\r\n          trigger_type: 'location_entry',\r\n          trigger_conditions: {\r\n            location: 'Service Bay'\r\n          },\r\n          actions: [\r\n            {\r\n              type: 'update_order_status',\r\n              config: {\r\n                status: 'In Progress'\r\n              }\r\n            },\r\n            {\r\n              type: 'send_notification',\r\n              config: {\r\n                recipient: 'service_advisor',\r\n                message: 'Vehicle {{vin}} has entered {{location}}'\r\n              }\r\n            }\r\n          ],\r\n          is_active: true,\r\n          execution_count: 32,\r\n          success_count: 30,\r\n          last_executed: '2024-01-15T14:15:00Z',\r\n          created_at: '2024-01-08T10:00:00Z',\r\n          updated_at: '2024-01-15T14:15:00Z'\r\n        },\r\n        {\r\n          id: '3',\r\n          name: 'Quality Control Task Creation',\r\n          description: 'Create QC task when vehicle reaches quality control station',\r\n          trigger_type: 'tag_scan',\r\n          trigger_conditions: {\r\n            tag_type: 'quality_control'\r\n          },\r\n          actions: [\r\n            {\r\n              type: 'create_task',\r\n              config: {\r\n                task_title: 'Quality Control Inspection',\r\n                task_description: 'Perform complete quality control inspection for vehicle {{vin}}'\r\n              }\r\n            }\r\n          ],\r\n          is_active: false,\r\n          execution_count: 8,\r\n          success_count: 8,\r\n          last_executed: '2024-01-14T16:20:00Z',\r\n          created_at: '2024-01-05T12:00:00Z',\r\n          updated_at: '2024-01-14T16:20:00Z'\r\n        }\r\n      ];\r\n      \r\n      setWorkflows(mockWorkflows);\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to load NFC workflows';\r\n      setError(message);\r\n      toast.error(t('nfc_tracking.workflows.errors.load_failed'), {\r\n        description: message\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [t]);\r\n\r\n  // Create new NFC workflow\r\n  const createWorkflow = async (workflowData: Partial<NFCWorkflow>) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Use mock data for now since we're working with mock workflows\r\n      const newWorkflow: NFCWorkflow = {\r\n        id: Date.now().toString(),\r\n        name: workflowData.name || '',\r\n        description: workflowData.description || '',\r\n        trigger_type: workflowData.trigger_type || 'tag_scan',\r\n        trigger_conditions: workflowData.trigger_conditions,\r\n        actions: workflowData.actions || [],\r\n        is_active: true,\r\n        execution_count: 0,\r\n        success_count: 0,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      setWorkflows(prev => [newWorkflow, ...prev]);\r\n      \r\n      toast.success(t('nfc_tracking.workflows.workflow_created'), {\r\n        description: t('nfc_tracking.workflows.workflow_created_desc', { name: newWorkflow.name })\r\n      });\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to create NFC workflow';\r\n      setError(message);\r\n      toast.error(t('nfc_tracking.workflows.errors.create_failed'), {\r\n        description: message\r\n      });\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update NFC workflow\r\n  const updateWorkflow = async (workflowId: string, updates: Partial<NFCWorkflow>) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Use mock update for now\r\n      const updatedWorkflow = workflows.find(w => w.id === workflowId);\r\n      if (!updatedWorkflow) {\r\n        throw new Error('Workflow not found');\r\n      }\r\n      \r\n      const newWorkflow = {\r\n        ...updatedWorkflow,\r\n        ...updates,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      setWorkflows(prev => prev.map(workflow => \r\n        workflow.id === workflowId ? newWorkflow : workflow\r\n      ));\r\n      \r\n      toast.success(t('nfc_tracking.workflows.workflow_updated'), {\r\n        description: t('nfc_tracking.workflows.workflow_updated_desc', { name: newWorkflow.name })\r\n      });\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to update NFC workflow';\r\n      setError(message);\r\n      toast.error(t('nfc_tracking.workflows.errors.update_failed'), {\r\n        description: message\r\n      });\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Delete NFC workflow\r\n  const deleteWorkflow = async (workflowId: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Use mock delete for now\r\n      setWorkflows(prev => prev.filter(workflow => workflow.id !== workflowId));\r\n      \r\n      toast.success(t('nfc_tracking.workflows.workflow_deleted'), {\r\n        description: t('nfc_tracking.workflows.workflow_deleted_desc')\r\n      });\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to delete NFC workflow';\r\n      setError(message);\r\n      toast.error(t('nfc_tracking.workflows.errors.delete_failed'), {\r\n        description: message\r\n      });\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Toggle workflow active status\r\n  const toggleWorkflow = async (workflowId: string, isActive: boolean) => {\r\n    try {\r\n      // Use mock toggle for now\r\n      const updatedWorkflow = workflows.find(w => w.id === workflowId);\r\n      if (!updatedWorkflow) {\r\n        throw new Error('Workflow not found');\r\n      }\r\n\r\n      const newWorkflow = {\r\n        ...updatedWorkflow,\r\n        is_active: isActive,\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      setWorkflows(prev => prev.map(workflow => \r\n        workflow.id === workflowId ? newWorkflow : workflow\r\n      ));\r\n      \r\n      toast.success(\r\n        isActive ? t('nfc_tracking.workflows.workflow_enabled') : t('nfc_tracking.workflows.workflow_disabled'),\r\n        {\r\n          description: t('nfc_tracking.workflows.status_changed', { name: newWorkflow.name })\r\n        }\r\n      );\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to toggle NFC workflow';\r\n      setError(message);\r\n      toast.error(t('nfc_tracking.workflows.errors.toggle_failed'), {\r\n        description: message\r\n      });\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Execute workflow manually or via trigger\r\n  const executeWorkflow = async (workflowId: string, context?: any) => {\r\n    try {\r\n      const workflow = workflows.find(w => w.id === workflowId);\r\n      if (!workflow || !workflow.is_active) {\r\n        throw new Error('Workflow not found or inactive');\r\n      }\r\n\r\n      // Call the edge function to execute the workflow\r\n      const { data, error } = await supabase.functions.invoke('execute-nfc-workflow', {\r\n        body: {\r\n          workflow_id: workflowId,\r\n          context: context || {}\r\n        }\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Update execution count\r\n      const { error: updateError } = await supabase\r\n        .from('nfc_workflows')\r\n        .update({\r\n          execution_count: workflow.execution_count + 1,\r\n          success_count: data.success ? workflow.success_count + 1 : workflow.success_count,\r\n          last_executed: new Date().toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', workflowId);\r\n\r\n      if (updateError) {\r\n        console.error('Failed to update workflow stats:', updateError);\r\n      }\r\n\r\n      // Refresh workflows to get updated stats\r\n      loadWorkflows();\r\n\r\n      if (data.success) {\r\n        toast.success(t('nfc_tracking.workflows.workflow_executed'), {\r\n          description: t('nfc_tracking.workflows.workflow_executed_desc', { name: workflow.name })\r\n        });\r\n      } else {\r\n        throw new Error(data.error || 'Workflow execution failed');\r\n      }\r\n    } catch (err) {\r\n      const message = err instanceof Error ? err.message : 'Failed to execute NFC workflow';\r\n      setError(message);\r\n      toast.error(t('nfc_tracking.workflows.errors.execute_failed'), {\r\n        description: message\r\n      });\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  return {\r\n    workflows,\r\n    loading,\r\n    error,\r\n    loadWorkflows,\r\n    createWorkflow,\r\n    updateWorkflow,\r\n    deleteWorkflow,\r\n    toggleWorkflow,\r\n    executeWorkflow\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useOrderActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":101,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":104,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[789,792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[789,792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3395,3398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3395,3398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from 'sonner';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { shortLinkService } from '@/services/shortLinkService';\r\n\r\ninterface OrderActionsResult {\r\n  generateQR: (orderId: string, orderNumber: string, dealerId: number, regenerate?: boolean) => Promise<{ \r\n    qrCodeUrl?: string; \r\n    shortLink?: string;\r\n    linkId?: string;\r\n    slug?: string;\r\n    analytics?: {\r\n      totalClicks: number;\r\n      uniqueClicks: number;\r\n      lastClickedAt: string | null;\r\n    };\r\n  }>;\r\n  sendSMS: (to: string, message: string, orderNumber: string) => Promise<boolean>;\r\n  sendEmail: (to: string, subject: string, orderNumber: string, customerName: string, orderDetails: any) => Promise<boolean>;\r\n  loading: boolean;\r\n}\r\n\r\nexport function useOrderActions(): OrderActionsResult {\r\n  const { t } = useTranslation();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const generateQR = async (orderId: string, orderNumber: string, dealerId: number, regenerate = false) => {\r\n    setLoading(true);\r\n    try {\r\n      console.log(`🔗 ${regenerate ? 'Regenerating' : 'Generating'} QR for order:`, orderNumber);\r\n      \r\n      // Use our enhanced shortLinkService\r\n      const linkData = regenerate \r\n        ? await shortLinkService.regenerateShortLink(orderId)\r\n        : await shortLinkService.createShortLink(orderId, orderNumber);\r\n\r\n      // Update order with QR data\r\n      const { error } = await supabase\r\n        .from('orders')\r\n        .update({\r\n          short_link: linkData.shortUrl,\r\n          qr_code_url: linkData.qrCodeUrl,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', orderId);\r\n\r\n      if (error) throw error;\r\n\r\n      const message = regenerate \r\n        ? t('order_detail.regenerate_qr')\r\n        : t('order_detail.short_link_created');\r\n      toast.success(message);\r\n      \r\n      return {\r\n        qrCodeUrl: linkData.qrCodeUrl,\r\n        shortLink: linkData.shortUrl,\r\n        linkId: orderId,\r\n        slug: linkData.slug,\r\n        analytics: {\r\n          totalClicks: linkData.analytics?.totalClicks || 0,\r\n          uniqueClicks: linkData.analytics?.uniqueVisitors || 0,\r\n          lastClickedAt: linkData.analytics?.lastClicked || null\r\n        }\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('Error generating QR:', error);\r\n      toast.error(t('orders.error_generating_qr'));\r\n      return {};\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const sendSMS = async (to: string, message: string, orderNumber: string): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase.functions.invoke('send-sms', {\r\n        body: { to, message, orderNumber },\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      if (data.success) {\r\n        toast.success(t('orders.sms_sent_successfully'));\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Failed to send SMS');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending SMS:', error);\r\n      toast.error(t('orders.error_sending_sms'));\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const sendEmail = async (\r\n    to: string, \r\n    subject: string, \r\n    orderNumber: string, \r\n    customerName: string, \r\n    orderDetails: any\r\n  ): Promise<boolean> => {\r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase.functions.invoke('send-order-email', {\r\n        body: { to, subject, orderNumber, customerName, orderDetails },\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      if (data.success) {\r\n        toast.success(t('orders.email_sent_successfully'));\r\n        return true;\r\n      } else {\r\n        throw new Error(data.error || 'Failed to send email');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending email:', error);\r\n      toast.error(t('orders.error_sending_email'));\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return {\r\n    generateQR,\r\n    sendSMS,\r\n    sendEmail,\r\n    loading,\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useOrderActivity.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[401,404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[401,404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":48,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1374,1377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1374,1377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from 'sonner';\r\n\r\ninterface OrderActivity {\r\n  id: string;\r\n  order_id: string;\r\n  user_id: string | null;\r\n  activity_type: string;\r\n  field_name: string | null;\r\n  old_value: string | null;\r\n  new_value: string | null;\r\n  description: string | null;\r\n  metadata: any;\r\n  created_at: string;\r\n  profiles?: {\r\n    first_name: string | null;\r\n    last_name: string | null;\r\n    email: string;\r\n  } | null;\r\n}\r\n\r\nexport function useOrderActivity(orderId: string) {\r\n  const [activities, setActivities] = useState<OrderActivity[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchActivities = useCallback(async () => {\r\n    if (!orderId) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const { data, error: fetchError } = await supabase\r\n        .from('order_activity_log')\r\n        .select('*')\r\n        .eq('order_id', orderId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(50);\r\n\r\n      if (fetchError) {\r\n        throw fetchError;\r\n      }\r\n\r\n      // Get unique user IDs to fetch profiles\r\n      const userIds = [...new Set(data?.filter(a => a.user_id).map(a => a.user_id) || [])];\r\n      let profiles: any[] = [];\r\n\r\n      if (userIds.length > 0) {\r\n        const { data: profilesData } = await supabase\r\n          .from('profiles')\r\n          .select('id, first_name, last_name, email')\r\n          .in('id', userIds);\r\n        profiles = profilesData || [];\r\n      }\r\n\r\n      // Combine activities with profile data\r\n      const activitiesWithProfiles = data?.map(activity => ({\r\n        ...activity,\r\n        profiles: activity.user_id\r\n          ? profiles.find(p => p.id === activity.user_id) || null\r\n          : null\r\n      })) || [];\r\n\r\n      setActivities(activitiesWithProfiles);\r\n    } catch (error) {\r\n      console.error('Error fetching order activities:', error);\r\n      setError('Failed to load activity history');\r\n      toast.error('Failed to load activity history');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [orderId]);\r\n\r\n  useEffect(() => {\r\n    fetchActivities();\r\n  }, [fetchActivities]);\r\n\r\n  // Set up real-time subscription for activity updates\r\n  useEffect(() => {\r\n    if (!orderId) return;\r\n\r\n    const channel = supabase\r\n      .channel('order-activity-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: 'INSERT',\r\n          schema: 'public',\r\n          table: 'order_activity_log',\r\n          filter: `order_id=eq.${orderId}`\r\n        },\r\n        (payload) => {\r\n          // Simply fetch the new activity and add it to the list\r\n          supabase\r\n            .from('order_activity_log')\r\n            .select('*')\r\n            .eq('id', payload.new.id)\r\n            .single()\r\n            .then(async ({ data }) => {\r\n              if (data) {\r\n                // Fetch user profile if needed\r\n                let userProfile = null;\r\n                if (data.user_id) {\r\n                  const { data: profile } = await supabase\r\n                    .from('profiles')\r\n                    .select('id, first_name, last_name, email')\r\n                    .eq('id', data.user_id)\r\n                    .single();\r\n                  userProfile = profile;\r\n                }\r\n                \r\n                setActivities(prev => [{\r\n                  ...data,\r\n                  profiles: userProfile\r\n                }, ...prev]);\r\n              }\r\n            });\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [orderId]);\r\n\r\n  return {\r\n    activities,\r\n    loading,\r\n    error,\r\n    refetch: fetchActivities\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useOrderManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1032,1035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1032,1035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1374,1377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1374,1377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1473,1476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1473,1476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1493,1496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1493,1496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6170,6173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6170,6173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":344,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13174,13177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13174,13177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":348,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13279,13282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13279,13282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":404,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15209,15212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15209,15212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'refreshData'. Either include it or remove the dependency array.","line":500,"column":6,"nodeType":"ArrayExpression","endLine":500,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [refreshData, user]","fix":{"range":[18517,18523],"text":"[refreshData, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":527,"column":125,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":527,"endColumn":128,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19496,19499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19496,19499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":527,"column":153,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":527,"endColumn":156,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19524,19527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19524,19527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":532,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":532,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19730,19733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19730,19733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":544,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":544,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20294,20297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20294,20297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'enrichOrderData' and 'refreshData'. Either include them or remove the dependency array.","line":575,"column":6,"nodeType":"ArrayExpression","endLine":575,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [enrichOrderData, refreshData, user]","fix":{"range":[21375,21381],"text":"[enrichOrderData, refreshData, user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":578,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":578,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21507,21510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21507,21510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":589,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":589,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22097,22100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22097,22100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":593,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":593,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22278,22281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22278,22281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useMemo, useState, useRef } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useOrderActions } from '@/hooks/useOrderActions';\r\nimport { orderNumberService, OrderType } from '@/services/orderNumberService';\r\nimport type { Database } from '@/integrations/supabase/types';\r\n\r\n// Use Supabase types but create a unified interface for components\r\ntype SupabaseOrder = Database['public']['Tables']['orders']['Row'];\r\n\r\n// Unified Order type for components\r\nexport interface Order {\r\n  id: string;\r\n  customerName: string;\r\n  customerEmail?: string;\r\n  customerPhone?: string;\r\n  vehicleYear?: number;\r\n  vehicleMake?: string;\r\n  vehicleModel?: string;\r\n  vehicleInfo?: string;\r\n  vehicleVin?: string;\r\n  stockNumber?: string;\r\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\r\n  priority?: string;\r\n  dueDate?: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  totalAmount?: number;\r\n  services?: any[];\r\n  orderType?: string;\r\n  assignedTo?: string;\r\n  notes?: string;\r\n  customOrderNumber?: string;\r\n  // Enhanced fields from JOINs\r\n  dealershipName?: string;\r\n  assignedGroupName?: string;\r\n  createdByGroupName?: string;\r\n  dueTime?: string;\r\n}\r\n\r\n// Transform Supabase order to component order\r\nconst transformOrder = (supabaseOrder: any): Order => {\r\n  // Helper function to safely get field values\r\n  const getFieldValue = (value: any, defaultValue?: any) => {\r\n    if (value === null || value === undefined) return defaultValue;\r\n    return value;\r\n  };\r\n\r\n  // Primary date source is due_date, fallback to sla_deadline for compatibility\r\n  const primaryDate = getFieldValue(supabaseOrder.due_date) || getFieldValue(supabaseOrder.sla_deadline);\r\n\r\n  return {\r\n    // Core identifiers\r\n    id: supabaseOrder.id,\r\n    customOrderNumber: getFieldValue(supabaseOrder.order_number) || getFieldValue(supabaseOrder.custom_order_number) || supabaseOrder.id,\r\n    \r\n    // Customer information\r\n    customerName: getFieldValue(supabaseOrder.customer_name, ''),\r\n    customerEmail: getFieldValue(supabaseOrder.customer_email),\r\n    customerPhone: getFieldValue(supabaseOrder.customer_phone),\r\n    \r\n    // Vehicle information - prioritize consolidated field but keep individual fields for compatibility\r\n    vehicleInfo: getFieldValue(supabaseOrder.vehicle_info),\r\n    vehicleYear: getFieldValue(supabaseOrder.vehicle_year),\r\n    vehicleMake: getFieldValue(supabaseOrder.vehicle_make),\r\n    vehicleModel: getFieldValue(supabaseOrder.vehicle_model),\r\n    vehicleVin: getFieldValue(supabaseOrder.vehicle_vin),\r\n    stockNumber: getFieldValue(supabaseOrder.stock_number),\r\n    \r\n    // Order management\r\n    status: (supabaseOrder.status as 'pending' | 'in_progress' | 'completed' | 'cancelled') || 'pending',\r\n    priority: getFieldValue(supabaseOrder.priority, 'normal'),\r\n    orderType: getFieldValue(supabaseOrder.order_type, 'sales'),\r\n    \r\n    // Date handling - due_date is primary\r\n    dueDate: primaryDate,\r\n    \r\n    // System fields\r\n    createdAt: supabaseOrder.created_at,\r\n    updatedAt: supabaseOrder.updated_at,\r\n    \r\n    // Financial and services\r\n    totalAmount: getFieldValue(supabaseOrder.total_amount),\r\n    services: Array.isArray(supabaseOrder.services) ? supabaseOrder.services : [],\r\n    \r\n    // Assignment - will be populated by refreshData with proper names\r\n    assignedTo: 'Unassigned', // Will be overwritten in refreshData\r\n    \r\n    // Notes\r\n    notes: getFieldValue(supabaseOrder.notes),\r\n    \r\n    // Enhanced fields from manual JOINs (will be set in refreshData)\r\n    dealershipName: 'Unknown Dealer',\r\n    assignedGroupName: undefined,\r\n    createdByGroupName: undefined,\r\n    dueTime: primaryDate ? new Date(primaryDate).toLocaleTimeString('en-US', { \r\n      hour: '2-digit', \r\n      minute: '2-digit',\r\n      hour12: true \r\n    }) : undefined,\r\n  };\r\n};\r\n\r\nexport const useOrderManagement = (activeTab: string) => {\r\n  const [orders, setOrders] = useState<Order[]>([]);\r\n  const [allOrders, setAllOrders] = useState<Order[]>([]); // Keep full dataset\r\n  const [tabCounts, setTabCounts] = useState({\r\n    today: 0,\r\n    tomorrow: 0,\r\n    pending: 0,\r\n    in_process: 0,\r\n    complete: 0,\r\n    cancelled: 0,\r\n    week: 0,\r\n    services: 0,\r\n  });\r\n  const [filters, setFilters] = useState({\r\n    search: '',\r\n    status: '',\r\n    make: '',\r\n    model: '',\r\n    dateRange: { from: null, to: null },\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const { user } = useAuth();\r\n  const { generateQR } = useOrderActions();\r\n  \r\n  // Debug and call counting refs\r\n  const refreshCallCountRef = useRef(0);\r\n  const lastRefreshTimeRef = useRef(0);\r\n  const realtimeUpdateCountRef = useRef(0);\r\n\r\n  const calculateTabCounts = useMemo(() => (allOrders: Order[]) => {\r\n    const today = new Date();\r\n    const tomorrow = new Date(today);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n    const nextWeek = new Date(today);\r\n    nextWeek.setDate(nextWeek.getDate() + 7);\r\n\r\n    return {\r\n      today: allOrders.filter(order => {\r\n        const orderDate = new Date(order.dueDate || order.createdAt);\r\n        return orderDate.toDateString() === today.toDateString();\r\n      }).length,\r\n      tomorrow: allOrders.filter(order => {\r\n        const orderDate = new Date(order.dueDate || order.createdAt);\r\n        return orderDate.toDateString() === tomorrow.toDateString();\r\n      }).length,\r\n      pending: allOrders.filter(order => order.status === 'pending').length,\r\n      in_process: allOrders.filter(order => order.status === 'in_progress').length,\r\n      complete: allOrders.filter(order => order.status === 'completed').length,\r\n      cancelled: allOrders.filter(order => order.status === 'cancelled').length,\r\n      week: allOrders.filter(order => {\r\n        const orderDate = new Date(order.dueDate || order.createdAt);\r\n        return orderDate >= today && orderDate <= nextWeek;\r\n      }).length,\r\n      services: allOrders.filter(order => order.orderType === 'service').length,\r\n    };\r\n  }, []);\r\n\r\n  const filterOrders = useMemo(() => (allOrders: Order[], tab: string, currentFilters: any) => {\r\n    let filtered = [...allOrders];\r\n\r\n    // Apply tab-specific filtering\r\n    if (tab !== 'dashboard' && tab !== 'all') {\r\n      const today = new Date();\r\n      const tomorrow = new Date(today);\r\n      tomorrow.setDate(tomorrow.getDate() + 1);\r\n      const nextWeek = new Date(today);\r\n      nextWeek.setDate(nextWeek.getDate() + 7);\r\n\r\n      switch (tab) {\r\n        case 'today':\r\n          filtered = filtered.filter(order => {\r\n            const orderDate = new Date(order.dueDate || order.createdAt);\r\n            return orderDate.toDateString() === today.toDateString();\r\n          });\r\n          break;\r\n        case 'tomorrow':\r\n          filtered = filtered.filter(order => {\r\n            const orderDate = new Date(order.dueDate || order.createdAt);\r\n            return orderDate.toDateString() === tomorrow.toDateString();\r\n          });\r\n          break;\r\n        case 'pending':\r\n          filtered = filtered.filter(order => order.status === 'pending');\r\n          break;\r\n        case 'in_process':\r\n          filtered = filtered.filter(order => order.status === 'in_progress');\r\n          break;\r\n        case 'complete':\r\n          filtered = filtered.filter(order => order.status === 'completed');\r\n          break;\r\n        case 'cancelled':\r\n          filtered = filtered.filter(order => order.status === 'cancelled');\r\n          break;\r\n        case 'week':\r\n          filtered = filtered.filter(order => {\r\n            const orderDate = new Date(order.dueDate || order.createdAt);\r\n            return orderDate >= today && orderDate <= nextWeek;\r\n          });\r\n          break;\r\n        case 'services':\r\n          filtered = filtered.filter(order => order.orderType === 'service');\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Apply global filters\r\n    if (currentFilters.search) {\r\n      const searchLower = currentFilters.search.toLowerCase();\r\n      filtered = filtered.filter(order =>\r\n        order.id?.toLowerCase().includes(searchLower) ||\r\n        order.vehicleVin?.toLowerCase().includes(searchLower) ||\r\n        order.stockNumber?.toLowerCase().includes(searchLower) ||\r\n        order.customerName?.toLowerCase().includes(searchLower) ||\r\n        `${order.vehicleYear} ${order.vehicleMake} ${order.vehicleModel}`.toLowerCase().includes(searchLower)\r\n      );\r\n    }\r\n\r\n    if (currentFilters.status) {\r\n      filtered = filtered.filter(order => order.status === currentFilters.status);\r\n    }\r\n\r\n    if (currentFilters.make) {\r\n      filtered = filtered.filter(order => order.vehicleMake === currentFilters.make);\r\n    }\r\n\r\n    if (currentFilters.model) {\r\n      filtered = filtered.filter(order => order.vehicleModel === currentFilters.model);\r\n    }\r\n\r\n    if (currentFilters.dateRange?.from) {\r\n      const fromDate = new Date(currentFilters.dateRange.from);\r\n      filtered = filtered.filter(order => new Date(order.createdAt) >= fromDate);\r\n    }\r\n\r\n    if (currentFilters.dateRange?.to) {\r\n      const toDate = new Date(currentFilters.dateRange.to);\r\n      toDate.setHours(23, 59, 59, 999);\r\n      filtered = filtered.filter(order => new Date(order.createdAt) <= toDate);\r\n    }\r\n\r\n    return filtered;\r\n  }, []);\r\n\r\n  const refreshData = useCallback(async (skipFiltering = false) => {\r\n    if (!user) return;\r\n    \r\n    // Debug logging and call counting\r\n    refreshCallCountRef.current += 1;\r\n    const now = Date.now();\r\n    const timeSinceLastRefresh = now - lastRefreshTimeRef.current;\r\n    \r\n    console.log(`🔄 refreshData called (${refreshCallCountRef.current}) - skipFiltering: ${skipFiltering}, timeSince: ${timeSinceLastRefresh}ms`);\r\n    \r\n    // Prevent excessive calls (less than 1 second apart) - more aggressive throttling\r\n    if (timeSinceLastRefresh < 1000 && refreshCallCountRef.current > 1) {\r\n      console.warn('⚠️ refreshData called too frequently, skipping to prevent loop');\r\n      return;\r\n    }\r\n    \r\n    lastRefreshTimeRef.current = now;\r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Fetch orders from Supabase (basic query first)\r\n      const { data: orders, error } = await supabase\r\n        .from('orders')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('Error fetching orders:', error);\r\n        return;\r\n      }\r\n\r\n      // Fetch dealerships data separately\r\n      const { data: dealerships, error: dealershipsError } = await supabase\r\n        .from('dealerships')\r\n        .select('id, name');\r\n\r\n      if (dealershipsError) {\r\n        console.error('Error fetching dealerships:', dealershipsError);\r\n      }\r\n\r\n      // Fetch user profiles data separately for assignments\r\n      const { data: userProfiles, error: profilesError } = await supabase\r\n        .from('profiles')\r\n        .select('id, first_name, last_name, email');\r\n\r\n      if (profilesError) {\r\n        console.error('Error fetching user profiles:', profilesError);\r\n      }\r\n\r\n      // Fetch dealer groups data separately\r\n      const { data: dealerGroups, error: groupsError } = await supabase\r\n        .from('dealer_groups')\r\n        .select('id, name');\r\n\r\n      if (groupsError) {\r\n        console.error('Error fetching dealer groups:', groupsError);\r\n      }\r\n\r\n      // Create lookup maps for better performance\r\n      const dealershipMap = new Map(dealerships?.map(d => [d.id, d.name]) || []);\r\n      const groupMap = new Map(dealerGroups?.map(g => [g.id, g.name]) || []);\r\n      const userMap = new Map(userProfiles?.map(u => [\r\n        u.id, \r\n        `${u.first_name || ''} ${u.last_name || ''}`.trim() || u.email\r\n      ]) || []);\r\n\r\n      // Transform orders with joined data\r\n      const allOrders = (orders || []).map(order => {\r\n        const transformedOrder = transformOrder(order);\r\n        // Add joined data manually\r\n        transformedOrder.dealershipName = dealershipMap.get(order.dealer_id) || 'Unknown Dealer';\r\n        transformedOrder.assignedGroupName = order.assigned_group_id ? groupMap.get(order.assigned_group_id) : undefined;\r\n        transformedOrder.createdByGroupName = order.created_by_group_id ? groupMap.get(order.created_by_group_id) : undefined;\r\n        \r\n        // Fix assignment mapping - assigned_group_id actually contains user IDs, not group IDs\r\n        transformedOrder.assignedTo = order.assigned_group_id ? \r\n          userMap.get(order.assigned_group_id) || 'Unknown User' : 'Unassigned';\r\n        \r\n        return transformedOrder;\r\n      });\r\n\r\n      // Store full dataset and calculate tab counts\r\n      setAllOrders(allOrders);\r\n      setTabCounts(calculateTabCounts(allOrders));\r\n      \r\n      // Apply filtering unless skipped\r\n      if (!skipFiltering) {\r\n        const filtered = filterOrders(allOrders, activeTab, filters);\r\n        setOrders(filtered);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error in refreshData:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [filterOrders, calculateTabCounts, user, activeTab, filters]);\r\n\r\n  const updateFilters = useCallback((newFilters: any) => {\r\n    setFilters(newFilters);\r\n  }, []);\r\n\r\n  const createOrder = useCallback(async (orderData: any) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      console.log('Creating order with data:', orderData);\r\n      \r\n      // Determine order type from data or default to sales\r\n      const orderType = (orderData.order_type || 'sales') as OrderType;\r\n      \r\n      // Generate order number using new service\r\n      const orderNumber = await orderNumberService.generateOrderNumber(orderType, orderData.dealer_id);\r\n\r\n      // orderData is already in snake_case format from transformToDbFormat in the modal\r\n      const newOrder = {\r\n        ...orderData,\r\n        order_number: orderNumber, // Override with generated number\r\n        order_type: orderType, // Use determined order type\r\n        status: 'pending', // Default status\r\n        dealer_id: orderData.dealer_id || 5, // Ensure dealer_id is set\r\n      };\r\n\r\n      console.log('Inserting order to DB:', newOrder);\r\n\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .insert(newOrder)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error creating order:', error);\r\n        throw error;\r\n      }\r\n\r\n      console.log('Order created successfully:', data);\r\n      \r\n      // Auto-generate QR code and shortlink\r\n      try {\r\n        await generateQR(data.id, data.order_number, data.dealer_id);\r\n        console.log('QR code and shortlink generated for order:', data.order_number);\r\n      } catch (qrError) {\r\n        console.error('Failed to generate QR code:', qrError);\r\n        // Don't fail the order creation if QR generation fails\r\n      }\r\n      \r\n      // Real-time subscription will handle the data update automatically\r\n    } catch (error) {\r\n      console.error('Error in createOrder:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, generateQR]);\r\n\r\n  const updateOrder = useCallback(async (orderId: string, orderData: any) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      // orderData may come in snake_case format, so use it directly\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .update(orderData)\r\n        .eq('id', orderId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error updating order:', error);\r\n        throw error;\r\n      }\r\n\r\n      // Transform data back to camelCase for local state update\r\n      const transformedData = {\r\n        customerName: orderData.customer_name || orderData.customerName,\r\n        customerEmail: orderData.customer_email || orderData.customerEmail,\r\n        customerPhone: orderData.customer_phone || orderData.customerPhone,\r\n        vehicleYear: orderData.vehicle_year || orderData.vehicleYear,\r\n        vehicleMake: orderData.vehicle_make || orderData.vehicleMake,\r\n        vehicleModel: orderData.vehicle_model || orderData.vehicleModel,\r\n        vehicleVin: orderData.vehicle_vin || orderData.vehicleVin,\r\n        vehicleInfo: orderData.vehicle_info || orderData.vehicleInfo,\r\n        stockNumber: orderData.stock_number || orderData.stockNumber,\r\n        assignedGroupId: orderData.assigned_group_id || orderData.assignedGroupId,\r\n        assignedContactId: orderData.assigned_contact_id || orderData.assignedContactId,\r\n        salesperson: orderData.salesperson,\r\n        notes: orderData.notes,\r\n        internalNotes: orderData.internal_notes || orderData.internalNotes,\r\n        priority: orderData.priority,\r\n        dueDate: orderData.due_date || orderData.dueDate,\r\n        slaDeadline: orderData.sla_deadline || orderData.slaDeadline,\r\n        scheduledDate: orderData.scheduled_date || orderData.scheduledDate,\r\n        scheduledTime: orderData.scheduled_time || orderData.scheduledTime,\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      // Update local state immediately for better UX\r\n      setOrders(prevOrders => \r\n        prevOrders.map(order => \r\n          order.id === orderId \r\n            ? { ...order, ...transformedData }\r\n            : order\r\n        )\r\n      );\r\n      \r\n      console.log('Order updated successfully:', data);\r\n    } catch (error) {\r\n      console.error('Error in updateOrder:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  const deleteOrder = useCallback(async (orderId: string) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      const { error } = await supabase\r\n        .from('orders')\r\n        .delete()\r\n        .eq('id', orderId);\r\n\r\n      if (error) {\r\n        console.error('Error deleting order:', error);\r\n        throw error;\r\n      }\r\n\r\n      console.log('Order deleted successfully');\r\n      // Real-time subscription will handle the data update automatically\r\n    } catch (error) {\r\n      console.error('Error in deleteOrder:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  // Initialize data on mount with debouncing to prevent multiple calls\r\n  useEffect(() => {\r\n    if (user) {\r\n      const timer = setTimeout(() => {\r\n        refreshData();\r\n      }, 100); // Small delay to batch multiple rapid effect calls\r\n\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [user]); // Only depend on user, not refreshData to avoid infinite loops\r\n\r\n  // Handle filtering when tab or filters change (without full refresh)\r\n  useEffect(() => {\r\n    if (allOrders.length > 0) {\r\n      // Apply filtering to full dataset\r\n      const filtered = filterOrders(allOrders, activeTab, filters);\r\n      setOrders(filtered);\r\n    }\r\n  }, [activeTab, filters, allOrders, filterOrders]);\r\n\r\n  // Real-time subscription for all orders (not just sales)\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const channel = supabase\r\n      .channel('all_orders_realtime')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'orders'\r\n          // No filter - listen to all order types\r\n        },\r\n        async (payload) => {\r\n          realtimeUpdateCountRef.current += 1;\r\n          console.log(`📡 Real-time update ${realtimeUpdateCountRef.current} received:`, payload.eventType, (payload.new as any)?.id || (payload.old as any)?.id);\r\n          \r\n          try {\r\n            if (payload.eventType === 'INSERT') {\r\n              // Enrich the new order data just like refreshData does\r\n              const order = payload.new as any;\r\n              const newOrder = await enrichOrderData(order);\r\n              \r\n              // Update allOrders state\r\n              setAllOrders(prevAllOrders => {\r\n                const exists = prevAllOrders.some(existingOrder => existingOrder.id === newOrder.id);\r\n                if (exists) return prevAllOrders;\r\n                return [newOrder, ...prevAllOrders];\r\n              });\r\n              \r\n            } else if (payload.eventType === 'UPDATE') {\r\n              // Enrich the updated order data\r\n              const order = payload.new as any;\r\n              const updatedOrder = await enrichOrderData(order);\r\n              \r\n              // Update allOrders state\r\n              setAllOrders(prevAllOrders => \r\n                prevAllOrders.map(existingOrder => \r\n                  existingOrder.id === updatedOrder.id ? updatedOrder : existingOrder\r\n                )\r\n              );\r\n              \r\n            } else if (payload.eventType === 'DELETE') {\r\n              const deletedId = payload.old?.id;\r\n              if (deletedId) {\r\n                // Update allOrders state\r\n                setAllOrders(prevAllOrders => \r\n                  prevAllOrders.filter(order => order.id !== deletedId)\r\n                );\r\n              }\r\n            }\r\n          } catch (error) {\r\n            console.error('Error handling real-time update:', error);\r\n            // Fallback to full refresh only on error, but with debouncing\r\n            setTimeout(() => refreshData(), 1000);\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [user]);\r\n\r\n  // Helper function to enrich order data with related information\r\n  const enrichOrderData = useCallback(async (order: any): Promise<Order> => {\r\n    try {\r\n      // Fetch related data in parallel\r\n      const [dealershipsResult, userProfilesResult, dealerGroupsResult] = await Promise.all([\r\n        supabase.from('dealerships').select('id, name').eq('id', order.dealer_id).single(),\r\n        supabase.from('profiles').select('id, first_name, last_name, email'),\r\n        supabase.from('dealer_groups').select('id, name')\r\n      ]);\r\n\r\n      // Create lookup maps\r\n      const dealershipName = dealershipsResult.data?.name || 'Unknown Dealer';\r\n      const userMap = new Map(userProfilesResult.data?.map((u: any) => [\r\n        u.id, \r\n        `${u.first_name || ''} ${u.last_name || ''}`.trim() || u.email\r\n      ]) || []);\r\n      const groupMap = new Map(dealerGroupsResult.data?.map((g: any) => [g.id, g.name]) || []);\r\n\r\n      // Transform and enrich the order\r\n      const transformedOrder = transformOrder(order);\r\n      transformedOrder.dealershipName = dealershipName;\r\n      transformedOrder.assignedGroupName = order.assigned_group_id ? groupMap.get(order.assigned_group_id) : undefined;\r\n      transformedOrder.createdByGroupName = order.created_by_group_id ? groupMap.get(order.created_by_group_id) : undefined;\r\n      transformedOrder.assignedTo = order.assigned_group_id ? \r\n        userMap.get(order.assigned_group_id) || 'Unknown User' : 'Unassigned';\r\n      \r\n      return transformedOrder;\r\n    } catch (error) {\r\n      console.error('Error enriching order data:', error);\r\n      // Fallback to basic transformation\r\n      return transformOrder(order);\r\n    }\r\n  }, []);\r\n\r\n  // Recalculate tab counts whenever allOrders changes\r\n  useEffect(() => {\r\n    if (allOrders.length > 0) {\r\n      setTabCounts(calculateTabCounts(allOrders));\r\n    }\r\n  }, [allOrders, calculateTabCounts]);\r\n\r\n  return {\r\n    orders,\r\n    tabCounts,\r\n    filters,\r\n    loading,\r\n    updateFilters,\r\n    refreshData,\r\n    createOrder,\r\n    updateOrder,\r\n    deleteOrder,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useOrderModalData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1239,1242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1239,1242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":67,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1590,1593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1590,1593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1787,1790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1787,1790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2200,2203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2200,2203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2710,2713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2710,2713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":190,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5625,5628],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5625,5628],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":262,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7843,7846],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7843,7846],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useMemo, useRef } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { shortLinkService } from '@/services/shortLinkService';\r\nimport { usePerformanceMonitor } from './usePerformanceMonitor';\r\n\r\ninterface OrderAttachment {\r\n  id: string;\r\n  order_id: string;\r\n  file_name: string;\r\n  file_path: string;\r\n  file_size: number;\r\n  mime_type: string;\r\n  uploaded_by: string;\r\n  upload_context: string;\r\n  description: string | null;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface OrderActivity {\r\n  id: string;\r\n  order_id: string;\r\n  action: string;\r\n  description: string;\r\n  user_id: string;\r\n  created_at: string;\r\n  user_name?: string;\r\n}\r\n\r\ninterface OrderComment {\r\n  id: string;\r\n  order_id: string;\r\n  comment: string;\r\n  is_internal: boolean;\r\n  created_by: string;\r\n  created_at: string;\r\n  user_name?: string;\r\n}\r\n\r\ninterface OrderFollower {\r\n  id: string;\r\n  order_id: string;\r\n  user_id: string;\r\n  created_at: string;\r\n  user_name?: string;\r\n  user_email?: string;\r\n}\r\n\r\ninterface OrderModalData {\r\n  attachments: OrderAttachment[];\r\n  activities: OrderActivity[];\r\n  comments: OrderComment[];\r\n  followers: OrderFollower[];\r\n  analytics: any;\r\n  userType: 'detail' | 'regular' | null;\r\n}\r\n\r\ninterface UseOrderModalDataProps {\r\n  orderId: string | null;\r\n  qrCodeUrl?: string;\r\n  qrSlug?: string;\r\n  enabled?: boolean; // Only fetch when modal is open\r\n}\r\n\r\n// Enhanced cache implementation with TTL and memory management\r\nclass OrderModalCache {\r\n  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();\r\n  private readonly DEFAULT_TTL = 5 * 60 * 1000; // 5 minutes\r\n  private readonly MAX_CACHE_SIZE = 50; // Prevent memory leaks\r\n\r\n  set(key: string, data: any, ttl = this.DEFAULT_TTL) {\r\n    // Implement LRU-style eviction\r\n    if (this.cache.size >= this.MAX_CACHE_SIZE) {\r\n      const oldestKey = this.cache.keys().next().value;\r\n      this.cache.delete(oldestKey);\r\n    }\r\n    \r\n    this.cache.set(key, {\r\n      data: JSON.parse(JSON.stringify(data)), // Deep clone to prevent mutations\r\n      timestamp: Date.now(),\r\n      ttl\r\n    });\r\n  }\r\n\r\n  get(key: string): any | null {\r\n    const entry = this.cache.get(key);\r\n    if (!entry) return null;\r\n    \r\n    // Check if expired\r\n    if (Date.now() - entry.timestamp > entry.ttl) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return entry.data;\r\n  }\r\n\r\n  clear() {\r\n    this.cache.clear();\r\n  }\r\n\r\n  getSize() {\r\n    return this.cache.size;\r\n  }\r\n}\r\n\r\n// Global cache instance\r\nconst modalDataCache = new OrderModalCache();\r\n\r\n// Request deduplication\r\nconst activeRequests = new Map<string, Promise<any>>();\r\n\r\nexport function useOrderModalData({ orderId, qrCodeUrl, enabled = true }: UseOrderModalDataProps) {\r\n  const [data, setData] = useState<OrderModalData>({\r\n    attachments: [],\r\n    activities: [],\r\n    comments: [],\r\n    followers: [],\r\n    analytics: null,\r\n    userType: null\r\n  });\r\n  \r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { startMeasure, endMeasure, recordMetric } = usePerformanceMonitor();\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n\r\n  // Parallel data fetching function\r\n  const fetchModalData = useCallback(async () => {\r\n    if (!orderId || !enabled) return;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Fetch all data in parallel for maximum performance\r\n      // Note: Only fetch from tables that actually exist in the database\r\n      const [\r\n        attachmentsResult,\r\n        commentsResult,\r\n        userResult,\r\n        analyticsResult\r\n      ] = await Promise.allSettled([\r\n        // Fetch attachments\r\n        supabase\r\n          .from('order_attachments')\r\n          .select('*')\r\n          .eq('order_id', orderId)\r\n          .order('created_at', { ascending: false })\r\n          .then(result => result.error ? { data: [], error: null } : result), // Graceful fallback\r\n        \r\n        // Fetch comments with user names - fetch separately to avoid join issues\r\n        supabase\r\n          .from('order_comments')\r\n          .select('*')\r\n          .eq('order_id', orderId)\r\n          .order('created_at', { ascending: false })\r\n          .then(result => result.error ? { data: [], error: null } : result), // Graceful fallback\r\n        \r\n        // Check user type\r\n        supabase.auth.getUser().then(async ({ data: user }) => {\r\n          if (!user.user) return null;\r\n          \r\n          const { data: profile } = await supabase\r\n            .from('profiles')\r\n            .select('user_type')\r\n            .eq('id', user.user.id)\r\n            .single();\r\n          \r\n          return profile?.user_type || 'regular';\r\n        }),\r\n        \r\n        // Fetch QR analytics if qrCodeUrl exists\r\n        qrCodeUrl ? (() => {\r\n          const slug = qrCodeUrl.split('/').pop();\r\n          return slug ? shortLinkService.getAnalytics(slug).catch(() => null) : null;\r\n        })() : Promise.resolve(null)\r\n      ]);\r\n\r\n      // Process results, handling any failures gracefully\r\n      const newData: OrderModalData = {\r\n        attachments: attachmentsResult.status === 'fulfilled' && !attachmentsResult.value.error \r\n          ? attachmentsResult.value.data || [] \r\n          : [],\r\n        \r\n        // Set empty arrays for non-existent tables for now\r\n        activities: [],\r\n        \r\n        comments: commentsResult.status === 'fulfilled' && !commentsResult.value.error\r\n          ? (commentsResult.value.data || []).map((comment: any) => ({\r\n              ...comment,\r\n              user_name: 'System User' // We'll fetch user names separately later\r\n            }))\r\n          : [],\r\n        \r\n        // Set empty array for non-existent followers table for now\r\n        followers: [],\r\n        \r\n        userType: userResult.status === 'fulfilled' \r\n          ? userResult.value as 'detail' | 'regular' | null\r\n          : null,\r\n        \r\n        analytics: analyticsResult.status === 'fulfilled' \r\n          ? analyticsResult.value \r\n          : null\r\n      };\r\n\r\n      setData(newData);\r\n      \r\n      // Log any failed requests for debugging\r\n      const failures = [attachmentsResult, commentsResult, userResult, analyticsResult]\r\n        .filter(result => result.status === 'rejected')\r\n        .map(result => (result as PromiseRejectedResult).reason);\r\n      \r\n      if (failures.length > 0) {\r\n        console.warn('Some modal data requests failed:', failures);\r\n      }\r\n      \r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch modal data';\r\n      setError(errorMessage);\r\n      console.error('Modal data fetch error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [orderId, qrCodeUrl, enabled]);\r\n\r\n  // Fetch data when dependencies change\r\n  useEffect(() => {\r\n    fetchModalData();\r\n  }, [fetchModalData]);\r\n\r\n  // Individual update functions for optimistic updates\r\n  const addAttachment = useCallback((attachment: OrderAttachment) => {\r\n    setData(prev => ({\r\n      ...prev,\r\n      attachments: [attachment, ...prev.attachments]\r\n    }));\r\n  }, []);\r\n\r\n  const removeAttachment = useCallback((attachmentId: string) => {\r\n    setData(prev => ({\r\n      ...prev,\r\n      attachments: prev.attachments.filter(att => att.id !== attachmentId)\r\n    }));\r\n  }, []);\r\n\r\n  const addComment = useCallback((comment: OrderComment) => {\r\n    setData(prev => ({\r\n      ...prev,\r\n      comments: [comment, ...prev.comments]\r\n    }));\r\n  }, []);\r\n\r\n  const addActivity = useCallback((activity: OrderActivity) => {\r\n    setData(prev => ({\r\n      ...prev,\r\n      activities: [activity, ...prev.activities]\r\n    }));\r\n  }, []);\r\n\r\n  const updateAnalytics = useCallback((analytics: any) => {\r\n    setData(prev => ({\r\n      ...prev,\r\n      analytics\r\n    }));\r\n  }, []);\r\n\r\n  // Additional cache management functions\r\n  const forceRefresh = useCallback(async () => {\r\n    if (orderId) {\r\n      modalDataCache.clear();\r\n      await fetchModalData();\r\n    }\r\n  }, [orderId, fetchModalData]);\r\n\r\n  const clearCache = useCallback(() => {\r\n    modalDataCache.clear();\r\n  }, []);\r\n\r\n  const getCacheSize = useCallback(() => {\r\n    return modalDataCache.getSize();\r\n  }, []);\r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error,\r\n    refetch: fetchModalData,\r\n    forceRefresh,\r\n    clearCache,\r\n    getCacheSize,\r\n    // Optimistic update functions\r\n    addAttachment,\r\n    removeAttachment,\r\n    addComment,\r\n    addActivity,\r\n    updateAnalytics\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\usePasswordManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[554,557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[554,557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[811,814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[811,814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":35,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1076,1079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1076,1079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":84,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2249,2252],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2249,2252],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":100,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2726,2729],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2726,2729],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2746,2749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2746,2749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":124,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3258,3261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3258,3261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4062,4065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4062,4065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":157,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4211,4214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4211,4214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4855,4858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4855,4858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":202,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5500,5503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5500,5503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":230,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6263,6266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6263,6266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from './use-toast';\r\n\r\nexport interface PasswordResetRequest {\r\n  id: string;\r\n  user_id: string;\r\n  admin_id: string;\r\n  token: string;\r\n  status: 'pending' | 'completed' | 'expired' | 'cancelled';\r\n  request_type: 'email_reset' | 'temp_password' | 'force_change';\r\n  expires_at: string;\r\n  completed_at?: string;\r\n  temp_password?: string;\r\n  force_change_on_login: boolean;\r\n  metadata: any;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface BulkPasswordOperation {\r\n  id: string;\r\n  operation_type: 'bulk_reset' | 'bulk_force_change' | 'bulk_temp_password';\r\n  initiated_by: string;\r\n  dealer_id: number;\r\n  target_filters: any;\r\n  total_users: number;\r\n  processed_users: number;\r\n  successful_operations: number;\r\n  failed_operations: number;\r\n  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled';\r\n  started_at?: string;\r\n  completed_at?: string;\r\n  error_details: any[];\r\n  created_at: string;\r\n}\r\n\r\nexport interface PasswordHistory {\r\n  id: string;\r\n  user_id: string;\r\n  password_hash: string;\r\n  created_at: string;\r\n  created_by?: string;\r\n  change_reason: string;\r\n}\r\n\r\nexport const usePasswordManagement = () => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const resetUserPassword = async (\r\n    userId: string,\r\n    resetType: 'email_reset' | 'temp_password' | 'force_change',\r\n    dealerId: number,\r\n    options?: {\r\n      tempPassword?: string;\r\n      forceChange?: boolean;\r\n    }\r\n  ) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const { data, error } = await supabase.functions.invoke('reset-user-password', {\r\n        body: {\r\n          userId,\r\n          resetType,\r\n          dealerId,\r\n          tempPassword: options?.tempPassword,\r\n          forceChange: options?.forceChange || false\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: data.message || t('password_management.reset_success'),\r\n      });\r\n\r\n      return data;\r\n\r\n    } catch (error: any) {\r\n      console.error('Error resetting password:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.reset_error'),\r\n        variant: 'destructive',\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const bulkPasswordOperation = async (\r\n    operationType: 'bulk_reset' | 'bulk_force_change' | 'bulk_temp_password',\r\n    dealerId: number,\r\n    targetFilters: any,\r\n    options?: any\r\n  ) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const { data, error } = await supabase.functions.invoke('bulk-password-operations', {\r\n        body: {\r\n          operationType,\r\n          dealerId,\r\n          targetFilters,\r\n          options\r\n        }\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: data.message || t('password_management.bulk_operation_success'),\r\n      });\r\n\r\n      return data;\r\n\r\n    } catch (error: any) {\r\n      console.error('Error in bulk operation:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.bulk_operation_error'),\r\n        variant: 'destructive',\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const getPasswordResetRequests = async (dealerId?: number) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('password_reset_requests')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      \r\n      // Filter by dealer_id if provided\r\n      let filteredData = data || [];\r\n      if (dealerId) {\r\n        filteredData = filteredData.filter(req => {\r\n          const metadata = req.metadata as any;\r\n          return metadata && metadata.dealer_id === dealerId;\r\n        });\r\n      }\r\n      \r\n      return filteredData;\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching password reset requests:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.fetch_requests_error'),\r\n        variant: 'destructive',\r\n      });\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getBulkOperations = async (dealerId: number) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('bulk_password_operations')\r\n        .select('*')\r\n        .eq('dealer_id', dealerId)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching bulk operations:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.fetch_operations_error'),\r\n        variant: 'destructive',\r\n      });\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const getPasswordHistory = async (userId: string) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('password_history')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(10);\r\n\r\n      if (error) throw error;\r\n      return data || [];\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching password history:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.fetch_history_error'),\r\n        variant: 'destructive',\r\n      });\r\n      return [];\r\n    }\r\n  };\r\n\r\n  const cancelPasswordReset = async (resetId: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('password_reset_requests')\r\n        .update({ \r\n          status: 'cancelled',\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', resetId);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('password_management.reset_cancelled'),\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error cancelling reset:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.cancel_error'),\r\n        variant: 'destructive',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    loading,\r\n    resetUserPassword,\r\n    bulkPasswordOperation,\r\n    getPasswordResetRequests,\r\n    getBulkOperations,\r\n    getPasswordHistory,\r\n    cancelPasswordReset\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\usePasswordPolicies.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[361,364],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[361,364],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2089,2092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2089,2092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":117,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3353,3356],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3353,3356],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":132,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3764,3767],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3764,3767],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":159,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4440,4443],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4440,4443],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":188,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5193,5196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5193,5196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPolicies'. Either include it or remove the dependency array.","line":275,"column":6,"nodeType":"ArrayExpression","endLine":275,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [dealerId, fetchPolicies]","fix":{"range":[7887,7897],"text":"[dealerId, fetchPolicies]"}}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from './use-toast';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\n\r\nexport interface SecurityPolicy {\r\n  id: string;\r\n  dealer_id: number;\r\n  policy_name: string;\r\n  policy_value: any;\r\n  is_active: boolean;\r\n  created_by: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface PasswordPolicy {\r\n  min_length: number;\r\n  require_uppercase: boolean;\r\n  require_lowercase: boolean;\r\n  require_numbers: boolean;\r\n  require_special: boolean;\r\n  max_age_days: number;\r\n  history_count: number;\r\n  max_attempts: number;\r\n  lockout_duration_minutes: number;\r\n}\r\n\r\nexport const defaultPasswordPolicy: PasswordPolicy = {\r\n  min_length: 8,\r\n  require_uppercase: true,\r\n  require_lowercase: true,\r\n  require_numbers: true,\r\n  require_special: false,\r\n  max_age_days: 90,\r\n  history_count: 5,\r\n  max_attempts: 5,\r\n  lockout_duration_minutes: 30\r\n};\r\n\r\nexport const usePasswordPolicies = (dealerId: number) => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [loading, setLoading] = useState(false);\r\n  const [policies, setPolicies] = useState<SecurityPolicy[]>([]);\r\n  const [passwordPolicy, setPasswordPolicy] = useState<PasswordPolicy>(defaultPasswordPolicy);\r\n\r\n  const fetchPolicies = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const { data, error } = await supabase\r\n        .from('security_policies')\r\n        .select('*')\r\n        .eq('dealer_id', dealerId)\r\n        .eq('is_active', true);\r\n\r\n      if (error) throw error;\r\n\r\n      setPolicies(data || []);\r\n      \r\n      // Find password policy\r\n      const passwordPolicyData = data?.find(p => p.policy_name === 'password_policy');\r\n      if (passwordPolicyData && passwordPolicyData.policy_value) {\r\n        setPasswordPolicy({\r\n          ...defaultPasswordPolicy,\r\n          ...(passwordPolicyData.policy_value as Partial<PasswordPolicy>)\r\n        });\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching policies:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.fetch_policies_error'),\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updatePasswordPolicy = async (newPolicy: Partial<PasswordPolicy>) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const updatedPolicy = { ...passwordPolicy, ...newPolicy };\r\n      \r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) throw new Error('Not authenticated');\r\n      \r\n      const { error } = await supabase\r\n        .from('security_policies')\r\n        .upsert({\r\n          dealer_id: dealerId,\r\n          policy_name: 'password_policy',\r\n          policy_value: updatedPolicy,\r\n          is_active: true,\r\n          created_by: user.id\r\n        }, {\r\n          onConflict: 'dealer_id,policy_name'\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      setPasswordPolicy(updatedPolicy);\r\n      \r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('password_management.policy_updated'),\r\n      });\r\n\r\n      // Refresh policies\r\n      await fetchPolicies();\r\n\r\n    } catch (error: any) {\r\n      console.error('Error updating password policy:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.policy_update_error'),\r\n        variant: 'destructive',\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const createSecurityPolicy = async (\r\n    policyName: string,\r\n    policyValue: any\r\n  ) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (!user) throw new Error('Not authenticated');\r\n      \r\n      const { error } = await supabase\r\n        .from('security_policies')\r\n        .insert({\r\n          dealer_id: dealerId,\r\n          policy_name: policyName,\r\n          policy_value: policyValue,\r\n          is_active: true,\r\n          created_by: user.id\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('password_management.policy_created'),\r\n      });\r\n\r\n      await fetchPolicies();\r\n\r\n    } catch (error: any) {\r\n      console.error('Error creating policy:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.policy_create_error'),\r\n        variant: 'destructive',\r\n      });\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const deleteSecurityPolicy = async (policyId: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('security_policies')\r\n        .update({ is_active: false })\r\n        .eq('id', policyId);\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('password_management.policy_deleted'),\r\n      });\r\n\r\n      await fetchPolicies();\r\n\r\n    } catch (error: any) {\r\n      console.error('Error deleting policy:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || t('password_management.policy_delete_error'),\r\n        variant: 'destructive',\r\n      });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const validatePassword = (password: string): { isValid: boolean; errors: string[] } => {\r\n    const errors: string[] = [];\r\n    \r\n    if (password.length < passwordPolicy.min_length) {\r\n      errors.push(t('password_management.validation.min_length', { length: passwordPolicy.min_length }));\r\n    }\r\n\r\n    if (passwordPolicy.require_uppercase && !/[A-Z]/.test(password)) {\r\n      errors.push(t('password_management.validation.uppercase'));\r\n    }\r\n\r\n    if (passwordPolicy.require_lowercase && !/[a-z]/.test(password)) {\r\n      errors.push(t('password_management.validation.lowercase'));\r\n    }\r\n\r\n    if (passwordPolicy.require_numbers && !/\\d/.test(password)) {\r\n      errors.push(t('password_management.validation.numbers'));\r\n    }\r\n\r\n    if (passwordPolicy.require_special && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n      errors.push(t('password_management.validation.special'));\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors\r\n    };\r\n  };\r\n\r\n  const generateSecurePassword = (): string => {\r\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\r\n    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    const numbers = '0123456789';\r\n    const special = '!@#$%^&*()';\r\n    \r\n    let charset = '';\r\n    let password = '';\r\n    \r\n    // Ensure required character types are included\r\n    if (passwordPolicy.require_lowercase) {\r\n      charset += lowercase;\r\n      password += lowercase[Math.floor(Math.random() * lowercase.length)];\r\n    }\r\n    \r\n    if (passwordPolicy.require_uppercase) {\r\n      charset += uppercase;\r\n      password += uppercase[Math.floor(Math.random() * uppercase.length)];\r\n    }\r\n    \r\n    if (passwordPolicy.require_numbers) {\r\n      charset += numbers;\r\n      password += numbers[Math.floor(Math.random() * numbers.length)];\r\n    }\r\n    \r\n    if (passwordPolicy.require_special) {\r\n      charset += special;\r\n      password += special[Math.floor(Math.random() * special.length)];\r\n    }\r\n    \r\n    if (!charset) {\r\n      charset = lowercase + uppercase + numbers;\r\n    }\r\n    \r\n    // Fill remaining length\r\n    for (let i = password.length; i < passwordPolicy.min_length; i++) {\r\n      password += charset[Math.floor(Math.random() * charset.length)];\r\n    }\r\n    \r\n    // Shuffle the password\r\n    return password.split('').sort(() => Math.random() - 0.5).join('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (dealerId) {\r\n      fetchPolicies();\r\n    }\r\n  }, [dealerId]);\r\n\r\n  return {\r\n    loading,\r\n    policies,\r\n    passwordPolicy,\r\n    fetchPolicies,\r\n    updatePasswordPolicy,\r\n    createSecurityPolicy,\r\n    deleteSecurityPolicy,\r\n    validatePassword,\r\n    generateSecurePassword\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\usePerformanceMonitor.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'measureStartTimes.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'measureStartTimes.current' to a variable inside the effect, and use that variable in the cleanup function.","line":131,"column":25,"nodeType":"Identifier","endLine":131,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":161,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5097,5100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5097,5100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5144,5147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5144,5147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":163,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5204,5207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5204,5207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":164,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5265,5268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5265,5268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useRef, useEffect } from 'react';\r\n\r\ninterface PerformanceMetric {\r\n  name: string;\r\n  value: number;\r\n  timestamp: number;\r\n  type: 'measure' | 'counter' | 'gauge';\r\n}\r\n\r\ninterface PerformanceData {\r\n  measures: Map<string, number>;\r\n  counters: Map<string, number>;\r\n  gauges: Map<string, number>;\r\n}\r\n\r\n// Global performance store for the modal system\r\nconst performanceStore: PerformanceData = {\r\n  measures: new Map(),\r\n  counters: new Map(),\r\n  gauges: new Map()\r\n};\r\n\r\nexport function usePerformanceMonitor() {\r\n  const measureStartTimes = useRef<Map<string, number>>(new Map());\r\n\r\n  // Start measuring a performance metric\r\n  const startMeasure = useCallback((name: string): string => {\r\n    const measureId = `${name}-${Date.now()}-${Math.random()}`;\r\n    measureStartTimes.current.set(measureId, performance.now());\r\n    \r\n    // Use Performance API if available\r\n    if (window.performance?.mark) {\r\n      window.performance.mark(`${name}-start`);\r\n    }\r\n    \r\n    return measureId;\r\n  }, []);\r\n\r\n  // End measuring and record the duration\r\n  const endMeasure = useCallback((measureId: string, name?: string): number => {\r\n    const startTime = measureStartTimes.current.get(measureId);\r\n    if (!startTime) {\r\n      console.warn(`No start time found for measure: ${measureId}`);\r\n      return 0;\r\n    }\r\n\r\n    const duration = performance.now() - startTime;\r\n    measureStartTimes.current.delete(measureId);\r\n\r\n    const metricName = name || measureId.split('-')[0];\r\n    performanceStore.measures.set(metricName, duration);\r\n\r\n    // Use Performance API if available\r\n    if (window.performance?.mark && window.performance?.measure) {\r\n      try {\r\n        window.performance.mark(`${metricName}-end`);\r\n        window.performance.measure(metricName, `${metricName}-start`, `${metricName}-end`);\r\n      } catch (error) {\r\n        // Silently handle performance API errors\r\n        console.debug('Performance API error:', error);\r\n      }\r\n    }\r\n\r\n    // Log slow operations in development\r\n    if (process.env.NODE_ENV === 'development' && duration > 100) {\r\n      console.warn(`Slow operation detected: ${metricName} took ${duration.toFixed(2)}ms`);\r\n    }\r\n\r\n    return duration;\r\n  }, []);\r\n\r\n  // Record a simple metric value\r\n  const recordMetric = useCallback((name: string, value: number, type: 'counter' | 'gauge' = 'counter') => {\r\n    if (type === 'counter') {\r\n      const current = performanceStore.counters.get(name) || 0;\r\n      performanceStore.counters.set(name, current + value);\r\n    } else {\r\n      performanceStore.gauges.set(name, value);\r\n    }\r\n\r\n    // Custom event for performance monitoring tools\r\n    if (typeof window !== 'undefined') {\r\n      window.dispatchEvent(new CustomEvent('modal-performance-metric', {\r\n        detail: { name, value, type, timestamp: Date.now() }\r\n      }));\r\n    }\r\n  }, []);\r\n\r\n  // Get all performance metrics\r\n  const getMetrics = useCallback((): PerformanceData => {\r\n    return {\r\n      measures: new Map(performanceStore.measures),\r\n      counters: new Map(performanceStore.counters),\r\n      gauges: new Map(performanceStore.gauges)\r\n    };\r\n  }, []);\r\n\r\n  // Clear all metrics\r\n  const clearMetrics = useCallback(() => {\r\n    performanceStore.measures.clear();\r\n    performanceStore.counters.clear();\r\n    performanceStore.gauges.clear();\r\n    measureStartTimes.current.clear();\r\n  }, []);\r\n\r\n  // Export metrics for external monitoring\r\n  const exportMetrics = useCallback(() => {\r\n    const metrics = getMetrics();\r\n    return {\r\n      measures: Object.fromEntries(metrics.measures),\r\n      counters: Object.fromEntries(metrics.counters),\r\n      gauges: Object.fromEntries(metrics.gauges),\r\n      timestamp: Date.now(),\r\n      userAgent: navigator.userAgent,\r\n      url: window.location.href\r\n    };\r\n  }, [getMetrics]);\r\n\r\n  // Monitor React render performance\r\n  const measureRender = useCallback((componentName: string) => {\r\n    const measureId = startMeasure(`render-${componentName}`);\r\n    \r\n    return () => {\r\n      endMeasure(measureId, `render-${componentName}`);\r\n    };\r\n  }, [startMeasure, endMeasure]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      measureStartTimes.current.clear();\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    startMeasure,\r\n    endMeasure,\r\n    recordMetric,\r\n    getMetrics,\r\n    clearMetrics,\r\n    exportMetrics,\r\n    measureRender\r\n  };\r\n}\r\n\r\n// Hook for getting performance insights\r\nexport function usePerformanceInsights() {\r\n  const getInsights = useCallback(() => {\r\n    const metrics = {\r\n      measures: Object.fromEntries(performanceStore.measures),\r\n      counters: Object.fromEntries(performanceStore.counters),\r\n      gauges: Object.fromEntries(performanceStore.gauges)\r\n    };\r\n\r\n    // Calculate insights\r\n    const insights = {\r\n      averageRenderTime: calculateAverage(metrics.measures, 'render-'),\r\n      slowestOperation: findSlowest(metrics.measures),\r\n      totalErrorCount: metrics.counters['modal-error'] || 0,\r\n      totalSuccessCount: metrics.counters['modal-success'] || 0,\r\n      memoryUsage: (performance as any).memory ? {\r\n        used: (performance as any).memory.usedJSHeapSize,\r\n        total: (performance as any).memory.totalJSHeapSize,\r\n        limit: (performance as any).memory.jsHeapSizeLimit\r\n      } : null\r\n    };\r\n\r\n    return insights;\r\n  }, []);\r\n\r\n  return { getInsights };\r\n}\r\n\r\n// Utility functions for performance analysis\r\nfunction calculateAverage(measures: Record<string, number>, prefix: string): number {\r\n  const relevantMeasures = Object.entries(measures)\r\n    .filter(([name]) => name.startsWith(prefix))\r\n    .map(([, value]) => value);\r\n\r\n  if (relevantMeasures.length === 0) return 0;\r\n  return relevantMeasures.reduce((sum, value) => sum + value, 0) / relevantMeasures.length;\r\n}\r\n\r\nfunction findSlowest(measures: Record<string, number>): { name: string; duration: number } | null {\r\n  const entries = Object.entries(measures);\r\n  if (entries.length === 0) return null;\r\n\r\n  const [slowestName, slowestDuration] = entries.reduce(\r\n    (max, [name, duration]) => duration > max[1] ? [name, duration] : max,\r\n    ['', 0]\r\n  );\r\n\r\n  return { name: slowestName, duration: slowestDuration };\r\n}\r\n\r\n// Performance monitoring component for debugging\r\nexport function PerformanceMonitor({ enabled = false }: { enabled?: boolean }) {\r\n  const { getInsights } = usePerformanceInsights();\r\n\r\n  useEffect(() => {\r\n    if (!enabled || process.env.NODE_ENV !== 'development') return;\r\n\r\n    const interval = setInterval(() => {\r\n      const insights = getInsights();\r\n      console.group('🚀 Modal Performance Insights');\r\n      console.log('Average Render Time:', `${insights.averageRenderTime.toFixed(2)}ms`);\r\n      console.log('Slowest Operation:', insights.slowestOperation);\r\n      console.log('Total Errors:', insights.totalErrorCount);\r\n      console.log('Memory Usage:', insights.memoryUsage);\r\n      console.groupEnd();\r\n    }, 10000); // Every 10 seconds\r\n\r\n    return () => clearInterval(interval);\r\n  }, [enabled, getInsights]);\r\n\r\n  return null;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\usePermissions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\usePersistedState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useProductivityCalendars.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1368,1371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1368,1371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1915,1918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1915,1918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2686,2689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2686,2689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":101,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3399,3402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3399,3402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":120,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3997,4000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3997,4000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":139,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4589,4592],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4589,4592],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5051,5054],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5051,5054],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5488,5491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5488,5491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'fetchCalendars' and 'fetchEvents'. Either include them or remove the dependency array.","line":180,"column":6,"nodeType":"ArrayExpression","endLine":180,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [user, currentDealership, fetchCalendars, fetchEvents]","fix":{"range":[5644,5669],"text":"[user, currentDealership, fetchCalendars, fetchEvents]"}}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\nimport { toast } from 'sonner';\r\nimport type { Database } from '@/integrations/supabase/types';\r\n\r\nexport type ProductivityCalendar = Database['public']['Tables']['productivity_calendars']['Row'];\r\nexport type ProductivityEvent = Database['public']['Tables']['productivity_events']['Row'];\r\n\r\nexport const useProductivityCalendars = () => {\r\n  const [calendars, setCalendars] = useState<ProductivityCalendar[]>([]);\r\n  const [events, setEvents] = useState<ProductivityEvent[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { user } = useAuth();\r\n  const { currentDealership } = useAccessibleDealerships();\r\n\r\n  const fetchCalendars = useCallback(async () => {\r\n    if (!user || !currentDealership) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('productivity_calendars')\r\n        .select('*')\r\n        .eq('dealer_id', currentDealership.id)\r\n        .eq('is_active', true)\r\n        .order('name');\r\n\r\n      if (error) throw error;\r\n      setCalendars(data || []);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n      toast.error('Failed to fetch calendars');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, currentDealership]);\r\n\r\n  const fetchEvents = useCallback(async () => {\r\n    if (!user || !currentDealership) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('productivity_events')\r\n        .select('*')\r\n        .eq('dealer_id', currentDealership.id)\r\n        .order('start_time');\r\n\r\n      if (error) throw error;\r\n      setEvents(data || []);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n      toast.error('Failed to fetch events');\r\n    }\r\n  }, [user, currentDealership]);\r\n\r\n  const createCalendar = async (calendarData: Omit<Database['public']['Tables']['productivity_calendars']['Insert'], 'dealer_id' | 'created_by'>) => {\r\n    if (!user || !currentDealership) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('productivity_calendars')\r\n        .insert({\r\n          ...calendarData,\r\n          dealer_id: currentDealership.id,\r\n          created_by: user.id,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setCalendars(prev => [...prev, data]);\r\n      toast.success('Calendar created successfully');\r\n      return data;\r\n    } catch (err: any) {\r\n      toast.error('Failed to create calendar');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const createEvent = async (eventData: Omit<Database['public']['Tables']['productivity_events']['Insert'], 'dealer_id' | 'created_by'>) => {\r\n    if (!user || !currentDealership) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('productivity_events')\r\n        .insert({\r\n          ...eventData,\r\n          dealer_id: currentDealership.id,\r\n          created_by: user.id,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setEvents(prev => [...prev, data]);\r\n      toast.success('Event created successfully');\r\n      return data;\r\n    } catch (err: any) {\r\n      toast.error('Failed to create event');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const updateCalendar = async (id: string, updates: Database['public']['Tables']['productivity_calendars']['Update']) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('productivity_calendars')\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setCalendars(prev => prev.map(cal => cal.id === id ? data : cal));\r\n      toast.success('Calendar updated successfully');\r\n      return data;\r\n    } catch (err: any) {\r\n      toast.error('Failed to update calendar');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const updateEvent = async (id: string, updates: Database['public']['Tables']['productivity_events']['Update']) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('productivity_events')\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setEvents(prev => prev.map(event => event.id === id ? data : event));\r\n      toast.success('Event updated successfully');\r\n      return data;\r\n    } catch (err: any) {\r\n      toast.error('Failed to update event');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const deleteCalendar = async (id: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('productivity_calendars')\r\n        .update({ is_active: false })\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n      setCalendars(prev => prev.filter(cal => cal.id !== id));\r\n      toast.success('Calendar deleted successfully');\r\n    } catch (err: any) {\r\n      toast.error('Failed to delete calendar');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const deleteEvent = async (id: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('productivity_events')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n      setEvents(prev => prev.filter(event => event.id !== id));\r\n      toast.success('Event deleted successfully');\r\n    } catch (err: any) {\r\n      toast.error('Failed to delete event');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCalendars();\r\n    fetchEvents();\r\n  }, [user, currentDealership]);\r\n\r\n  return {\r\n    calendars,\r\n    events,\r\n    loading,\r\n    error,\r\n    createCalendar,\r\n    createEvent,\r\n    updateCalendar,\r\n    updateEvent,\r\n    deleteCalendar,\r\n    deleteEvent,\r\n    refetchCalendars: fetchCalendars,\r\n    refetchEvents: fetchEvents,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useProductivityTodos.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":30,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1169,1172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1169,1172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1954,1957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1954,1957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2534,2537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2534,2537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":91,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2961,2964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2961,2964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\nimport { toast } from 'sonner';\r\nimport type { Database } from '@/integrations/supabase/types';\r\n\r\nexport type ProductivityTodo = Database['public']['Tables']['productivity_todos']['Row'];\r\n\r\nexport const useProductivityTodos = () => {\r\n  const [todos, setTodos] = useState<ProductivityTodo[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const { user } = useAuth();\r\n  const { currentDealership } = useAccessibleDealerships();\r\n\r\n  const fetchTodos = useCallback(async () => {\r\n    if (!user || !currentDealership) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data, error } = await supabase\r\n        .from('productivity_todos')\r\n        .select('*')\r\n        .eq('dealer_id', currentDealership.id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n      setTodos(data || []);\r\n    } catch (err: any) {\r\n      setError(err.message);\r\n      toast.error('Failed to fetch todos');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, currentDealership]);\r\n\r\n  const createTodo = async (todoData: Omit<Database['public']['Tables']['productivity_todos']['Insert'], 'dealer_id' | 'created_by'>) => {\r\n    if (!user || !currentDealership) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('productivity_todos')\r\n        .insert({\r\n          ...todoData,\r\n          dealer_id: currentDealership.id,\r\n          created_by: user.id,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setTodos(prev => [data, ...prev]);\r\n      toast.success('Todo created successfully');\r\n      return data;\r\n    } catch (err: any) {\r\n      toast.error('Failed to create todo');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const updateTodo = async (id: string, updates: Database['public']['Tables']['productivity_todos']['Update']) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('productivity_todos')\r\n        .update(updates)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setTodos(prev => prev.map(todo => todo.id === id ? data : todo));\r\n      toast.success('Todo updated successfully');\r\n      return data;\r\n    } catch (err: any) {\r\n      toast.error('Failed to update todo');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const deleteTodo = async (id: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('productivity_todos')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) throw error;\r\n      setTodos(prev => prev.filter(todo => todo.id !== id));\r\n      toast.success('Todo deleted successfully');\r\n    } catch (err: any) {\r\n      toast.error('Failed to delete todo');\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const toggleTodoStatus = async (id: string) => {\r\n    const todo = todos.find(t => t.id === id);\r\n    if (!todo) return;\r\n\r\n    const newStatus = todo.status === 'completed' ? 'pending' : 'completed';\r\n    const updates: Database['public']['Tables']['productivity_todos']['Update'] = {\r\n      status: newStatus,\r\n      completed_at: newStatus === 'completed' ? new Date().toISOString() : null,\r\n    };\r\n\r\n    await updateTodo(id, updates);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTodos();\r\n  }, [fetchTodos]);\r\n\r\n  return {\r\n    todos,\r\n    loading,\r\n    error,\r\n    createTodo,\r\n    updateTodo,\r\n    deleteTodo,\r\n    toggleTodoStatus,\r\n    refetch: fetchTodos,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useReconAlerts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useReconHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useReconOrderManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[702,705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[702,705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":76,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2061,2064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2061,2064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3378,3381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3378,3381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3472,3475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3472,3475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3568,3571],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3568,3571],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":107,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3683,3686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3683,3686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3790,3793],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3790,3793],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'refreshData' function makes the dependencies of useEffect Hook (at line 532) change on every render. To fix this, wrap the definition of 'refreshData' in its own useCallback() Hook.","line":256,"column":9,"nodeType":"VariableDeclarator","endLine":321,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'refreshData' in its own useCallback() Hook.","fix":{"range":[9192,11599],"text":"useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch recon orders from Supabase (basic query first)\r\n      const { data: orders, error } = await supabase\r\n        .from('orders')\r\n        .select('*')\r\n        .eq('order_type', 'recon')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('Error fetching recon orders:', error);\r\n        toast({\r\n          title: t('common.error'),\r\n          description: t('recon.error_fetching_orders'),\r\n          variant: 'destructive',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Fetch dealerships data separately\r\n      const { data: dealerships, error: dealershipsError } = await supabase\r\n        .from('dealerships')\r\n        .select('id, name');\r\n\r\n      if (dealershipsError) {\r\n        console.error('Error fetching dealerships:', dealershipsError);\r\n      }\r\n\r\n      // Fetch dealer groups data separately\r\n      const { data: dealerGroups, error: groupsError } = await supabase\r\n        .from('dealer_groups')\r\n        .select('id, name');\r\n\r\n      if (groupsError) {\r\n        console.error('Error fetching dealer groups:', groupsError);\r\n      }\r\n\r\n      // Create lookup maps for better performance\r\n      const dealershipMap = new Map(dealerships?.map(d => [d.id, d.name]) || []);\r\n      const groupMap = new Map(dealerGroups?.map(g => [g.id, g.name]) || []);\r\n\r\n      // Transform orders with joined data\r\n      const transformedOrders = (orders || []).map(order => {\r\n        const transformedOrder = transformReconOrder(order);\r\n        // Add joined data manually\r\n        transformedOrder.dealershipName = dealershipMap.get(order.dealer_id) || 'Unknown Dealer';\r\n        transformedOrder.assignedGroupName = order.assigned_group_id ? groupMap.get(order.assigned_group_id) : undefined;\r\n        transformedOrder.createdByGroupName = order.created_by_group_id ? groupMap.get(order.created_by_group_id) : undefined;\r\n        transformedOrder.assignedTo = transformedOrder.assignedGroupName || 'Unassigned';\r\n        return transformedOrder;\r\n      });\r\n\r\n      setOrders(transformedOrders);\r\n    } catch (error) {\r\n      console.error('Error fetching recon orders:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('recon.error_fetching_orders'),\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  })"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":329,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11828,11831],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11828,11831],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":426,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":426,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15642,15645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15642,15645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":550,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":550,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19557,19560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19557,19560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":553,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":553,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19753,19756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19753,19756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useMemo } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useOrderActions } from '@/hooks/useOrderActions';\r\nimport { orderNumberService } from '@/services/orderNumberService';\r\n\r\n// Recon Order interface - specific for reconditioning workflow\r\nexport interface ReconOrder {\r\n  id: string;\r\n  orderNumber: string;\r\n  stockNumber?: string;\r\n  vehicleYear?: number;\r\n  vehicleMake?: string;\r\n  vehicleModel?: string;\r\n  vehicleVin?: string;\r\n  vehicleInfo?: string;\r\n  orderType: string;\r\n  status: string;\r\n  priority?: string;\r\n  services: any[];\r\n  totalAmount?: number;\r\n  notes?: string;\r\n  internalNotes?: string;\r\n  dueDate?: string;\r\n  slaDeadline?: string;\r\n  dealerId: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  completedAt?: string;\r\n  assignedContactId?: string;\r\n  statusChangedAt?: string;\r\n  statusChangedBy?: string;\r\n  createdByGroupId?: string;\r\n  assignedGroupId?: string;\r\n  // Recon-specific fields\r\n  acquisitionCost?: number;\r\n  reconCost?: number;\r\n  acquisitionSource?: string; // trade-in, auction, dealer-swap, etc.\r\n  conditionGrade?: string; // excellent, good, fair, poor\r\n  reconCategory?: string; // mechanical, cosmetic, full-recon, detail-only\r\n  // Enhanced fields from JOINs\r\n  dealershipName?: string;\r\n  assignedGroupName?: string;\r\n  createdByGroupName?: string;\r\n  assignedTo?: string;\r\n  dueTime?: string;\r\n}\r\n\r\ninterface ReconOrderFilters {\r\n  search: string;\r\n  status: string;\r\n  make: string;\r\n  model: string;\r\n  reconCategory: string;\r\n  conditionGrade: string;\r\n  dateRange: {\r\n    from?: Date;\r\n    to?: Date;\r\n  };\r\n}\r\n\r\ninterface TabCounts {\r\n  all: number;\r\n  today: number;\r\n  tomorrow: number;\r\n  pending: number;\r\n  inProgress: number;\r\n  completed: number;\r\n  cancelled: number;\r\n  needsApproval: number;\r\n  readyForSale: number;\r\n}\r\n\r\n// Transform Supabase order to ReconOrder interface\r\nconst transformReconOrder = (supabaseOrder: any): ReconOrder => ({\r\n  id: supabaseOrder.id,\r\n  orderNumber: supabaseOrder.order_number || supabaseOrder.custom_order_number,\r\n  stockNumber: supabaseOrder.stock_number,\r\n  vehicleYear: supabaseOrder.vehicle_year,\r\n  vehicleMake: supabaseOrder.vehicle_make,\r\n  vehicleModel: supabaseOrder.vehicle_model,\r\n  vehicleVin: supabaseOrder.vehicle_vin,\r\n  vehicleInfo: supabaseOrder.vehicle_info,\r\n  orderType: supabaseOrder.order_type || 'recon',\r\n  status: supabaseOrder.status,\r\n  priority: supabaseOrder.priority,\r\n  services: supabaseOrder.services || [],\r\n  totalAmount: supabaseOrder.total_amount,\r\n  notes: supabaseOrder.notes,\r\n  internalNotes: supabaseOrder.internal_notes,\r\n  dueDate: supabaseOrder.due_date,\r\n  slaDeadline: supabaseOrder.sla_deadline,\r\n  dealerId: supabaseOrder.dealer_id,\r\n  createdAt: supabaseOrder.created_at,\r\n  updatedAt: supabaseOrder.updated_at,\r\n  completedAt: supabaseOrder.completed_at,\r\n  assignedContactId: supabaseOrder.assigned_contact_id,\r\n  statusChangedAt: supabaseOrder.status_changed_at,\r\n  statusChangedBy: supabaseOrder.status_changed_by,\r\n  createdByGroupId: supabaseOrder.created_by_group_id,\r\n  assignedGroupId: supabaseOrder.assigned_group_id,\r\n  // Extract recon-specific data from services/metadata if available\r\n  acquisitionCost: supabaseOrder.services?.find((s: any) => s.type === 'acquisition_cost')?.value,\r\n  reconCost: supabaseOrder.services?.find((s: any) => s.type === 'recon_cost')?.value,\r\n  acquisitionSource: supabaseOrder.services?.find((s: any) => s.type === 'acquisition_source')?.value || 'trade-in',\r\n  conditionGrade: supabaseOrder.services?.find((s: any) => s.type === 'condition_grade')?.value || 'good',\r\n  reconCategory: supabaseOrder.services?.find((s: any) => s.type === 'recon_category')?.value || 'full-recon',\r\n  // Enhanced fields from manual JOINs (will be set in refreshData)\r\n  dealershipName: 'Unknown Dealer',\r\n  assignedGroupName: undefined,\r\n  createdByGroupName: undefined,\r\n  assignedTo: 'Unassigned',\r\n  dueTime: supabaseOrder.sla_deadline ? new Date(supabaseOrder.sla_deadline).toLocaleTimeString('en-US', { \r\n    hour: '2-digit', \r\n    minute: '2-digit',\r\n    hour12: true \r\n  }) : undefined,\r\n});\r\n\r\nexport const useReconOrderManagement = (activeTab: string = 'all') => {\r\n  const [orders, setOrders] = useState<ReconOrder[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [filters, setFilters] = useState<ReconOrderFilters>({\r\n    search: '',\r\n    status: 'all',\r\n    make: 'all',\r\n    model: 'all',\r\n    reconCategory: 'all',\r\n    conditionGrade: 'all',\r\n    dateRange: {}\r\n  });\r\n\r\n  const { toast } = useToast();\r\n  const { t } = useTranslation();\r\n  const { generateQR } = useOrderActions();\r\n\r\n  // Calculate tab counts with recon-specific tabs\r\n  const tabCounts = useMemo((): TabCounts => {\r\n    const today = new Date().toDateString();\r\n    const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000).toDateString();\r\n\r\n    return {\r\n      all: orders.length,\r\n      today: orders.filter(order => \r\n        order.dueDate && new Date(order.dueDate).toDateString() === today\r\n      ).length,\r\n      tomorrow: orders.filter(order => \r\n        order.dueDate && new Date(order.dueDate).toDateString() === tomorrow\r\n      ).length,\r\n      pending: orders.filter(order => order.status === 'pending').length,\r\n      inProgress: orders.filter(order => order.status === 'in_progress').length,\r\n      completed: orders.filter(order => order.status === 'completed').length,\r\n      cancelled: orders.filter(order => order.status === 'cancelled').length,\r\n      needsApproval: orders.filter(order => order.status === 'needs_approval').length,\r\n      readyForSale: orders.filter(order => order.status === 'ready_for_sale').length,\r\n    };\r\n  }, [orders]);\r\n\r\n  // Filter orders based on active tab and additional filters\r\n  const filteredOrders = useMemo(() => {\r\n    let filtered = [...orders];\r\n\r\n    // Apply tab filter\r\n    const today = new Date().toDateString();\r\n    const tomorrow = new Date(Date.now() + 24 * 60 * 60 * 1000).toDateString();\r\n\r\n    switch (activeTab) {\r\n      case 'today':\r\n        filtered = filtered.filter(order => \r\n          order.dueDate && new Date(order.dueDate).toDateString() === today\r\n        );\r\n        break;\r\n      case 'tomorrow':\r\n        filtered = filtered.filter(order => \r\n          order.dueDate && new Date(order.dueDate).toDateString() === tomorrow\r\n        );\r\n        break;\r\n      case 'pending':\r\n        filtered = filtered.filter(order => order.status === 'pending');\r\n        break;\r\n      case 'in_progress':\r\n        filtered = filtered.filter(order => order.status === 'in_progress');\r\n        break;\r\n      case 'completed':\r\n        filtered = filtered.filter(order => order.status === 'completed');\r\n        break;\r\n      case 'cancelled':\r\n        filtered = filtered.filter(order => order.status === 'cancelled');\r\n        break;\r\n      case 'needsApproval':\r\n        filtered = filtered.filter(order => order.status === 'needs_approval');\r\n        break;\r\n      case 'readyForSale':\r\n        filtered = filtered.filter(order => order.status === 'ready_for_sale');\r\n        break;\r\n      default:\r\n        // 'all' - no additional filtering\r\n        break;\r\n    }\r\n\r\n    // Apply search filter\r\n    if (filters.search) {\r\n      const searchLower = filters.search.toLowerCase();\r\n      filtered = filtered.filter(order =>\r\n        order.orderNumber.toLowerCase().includes(searchLower) ||\r\n        order.stockNumber?.toLowerCase().includes(searchLower) ||\r\n        order.vehicleVin?.toLowerCase().includes(searchLower) ||\r\n        order.vehicleMake?.toLowerCase().includes(searchLower) ||\r\n        order.vehicleModel?.toLowerCase().includes(searchLower)\r\n      );\r\n    }\r\n\r\n    // Apply status filter\r\n    if (filters.status !== 'all') {\r\n      filtered = filtered.filter(order => order.status === filters.status);\r\n    }\r\n\r\n    // Apply make filter\r\n    if (filters.make !== 'all') {\r\n      filtered = filtered.filter(order => order.vehicleMake === filters.make);\r\n    }\r\n\r\n    // Apply model filter\r\n    if (filters.model !== 'all') {\r\n      filtered = filtered.filter(order => order.vehicleModel === filters.model);\r\n    }\r\n\r\n    // Apply recon category filter\r\n    if (filters.reconCategory !== 'all') {\r\n      filtered = filtered.filter(order => order.reconCategory === filters.reconCategory);\r\n    }\r\n\r\n    // Apply condition grade filter\r\n    if (filters.conditionGrade !== 'all') {\r\n      filtered = filtered.filter(order => order.conditionGrade === filters.conditionGrade);\r\n    }\r\n\r\n    // Apply date range filter\r\n    if (filters.dateRange.from || filters.dateRange.to) {\r\n      filtered = filtered.filter(order => {\r\n        const orderDate = new Date(order.createdAt);\r\n        const fromDate = filters.dateRange.from;\r\n        const toDate = filters.dateRange.to;\r\n\r\n        if (fromDate && orderDate < fromDate) return false;\r\n        if (toDate && orderDate > toDate) return false;\r\n        return true;\r\n      });\r\n    }\r\n\r\n    return filtered;\r\n  }, [orders, activeTab, filters]);\r\n\r\n  // Fetch recon orders from Supabase\r\n  const refreshData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Fetch recon orders from Supabase (basic query first)\r\n      const { data: orders, error } = await supabase\r\n        .from('orders')\r\n        .select('*')\r\n        .eq('order_type', 'recon')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('Error fetching recon orders:', error);\r\n        toast({\r\n          title: t('common.error'),\r\n          description: t('recon.error_fetching_orders'),\r\n          variant: 'destructive',\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Fetch dealerships data separately\r\n      const { data: dealerships, error: dealershipsError } = await supabase\r\n        .from('dealerships')\r\n        .select('id, name');\r\n\r\n      if (dealershipsError) {\r\n        console.error('Error fetching dealerships:', dealershipsError);\r\n      }\r\n\r\n      // Fetch dealer groups data separately\r\n      const { data: dealerGroups, error: groupsError } = await supabase\r\n        .from('dealer_groups')\r\n        .select('id, name');\r\n\r\n      if (groupsError) {\r\n        console.error('Error fetching dealer groups:', groupsError);\r\n      }\r\n\r\n      // Create lookup maps for better performance\r\n      const dealershipMap = new Map(dealerships?.map(d => [d.id, d.name]) || []);\r\n      const groupMap = new Map(dealerGroups?.map(g => [g.id, g.name]) || []);\r\n\r\n      // Transform orders with joined data\r\n      const transformedOrders = (orders || []).map(order => {\r\n        const transformedOrder = transformReconOrder(order);\r\n        // Add joined data manually\r\n        transformedOrder.dealershipName = dealershipMap.get(order.dealer_id) || 'Unknown Dealer';\r\n        transformedOrder.assignedGroupName = order.assigned_group_id ? groupMap.get(order.assigned_group_id) : undefined;\r\n        transformedOrder.createdByGroupName = order.created_by_group_id ? groupMap.get(order.created_by_group_id) : undefined;\r\n        transformedOrder.assignedTo = transformedOrder.assignedGroupName || 'Unassigned';\r\n        return transformedOrder;\r\n      });\r\n\r\n      setOrders(transformedOrders);\r\n    } catch (error) {\r\n      console.error('Error fetching recon orders:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('recon.error_fetching_orders'),\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update filters\r\n  const updateFilters = (newFilters: Partial<ReconOrderFilters>) => {\r\n    setFilters(prev => ({ ...prev, ...newFilters }));\r\n  };\r\n\r\n  // Create new recon order\r\n  const createOrder = async (orderData: any) => {\r\n    try {\r\n      console.log('Creating recon order with data:', orderData);\r\n\r\n      // Validate dealerId before conversion\r\n      if (!orderData.dealerId) {\r\n        throw new Error('Dealership ID is required');\r\n      }\r\n\r\n      const dealerIdNumber = parseInt(orderData.dealerId.toString());\r\n      if (isNaN(dealerIdNumber)) {\r\n        throw new Error('Invalid dealership ID');\r\n      }\r\n\r\n      // Use database function to generate sequential order number  \r\n      const { data: orderNumberData, error: numberError } = await supabase\r\n        .rpc('generate_service_order_number'); // Reusing service order number for now\r\n\r\n      if (numberError || !orderNumberData) {\r\n        console.error('Error generating recon order number:', numberError);\r\n        throw new Error('Failed to generate recon order number');\r\n      }\r\n\r\n      // Prepare services array with recon-specific data\r\n      const services = [\r\n        ...(orderData.services || []),\r\n        { type: 'acquisition_cost', value: orderData.acquisitionCost },\r\n        { type: 'recon_cost', value: orderData.reconCost },\r\n        { type: 'acquisition_source', value: orderData.acquisitionSource },\r\n        { type: 'condition_grade', value: orderData.conditionGrade },\r\n        { type: 'recon_category', value: orderData.reconCategory },\r\n      ].filter(service => service.value !== undefined && service.value !== null);\r\n\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .insert({\r\n          customer_name: orderData.stockNumber || 'Recon Vehicle',\r\n          stock_number: orderData.stockNumber,\r\n          vehicle_year: orderData.vehicleYear ? parseInt(orderData.vehicleYear.toString()) : null,\r\n          vehicle_make: orderData.vehicleMake,\r\n          vehicle_model: orderData.vehicleModel,\r\n          vehicle_vin: orderData.vehicleVin,\r\n          vehicle_info: orderData.vehicleInfo,\r\n          order_type: 'recon',\r\n          order_number: orderNumberData,\r\n          status: orderData.status || 'pending',\r\n          priority: orderData.priority || 'normal',\r\n          services: services,\r\n          total_amount: orderData.totalAmount || orderData.reconCost,\r\n          notes: orderData.notes,\r\n          internal_notes: orderData.internalNotes,\r\n          dealer_id: dealerIdNumber,\r\n          assigned_contact_id: orderData.assignedContactId && orderData.assignedContactId !== \"1\" && orderData.assignedContactId !== 1 ? orderData.assignedContactId : null\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error creating recon order:', error);\r\n        toast({\r\n          title: t('common.error'),\r\n          description: t('recon.error_creating_order'),\r\n          variant: 'destructive',\r\n        });\r\n        return null;\r\n      }\r\n\r\n      const newOrder = transformReconOrder(data);\r\n      setOrders(prev => [newOrder, ...prev]);\r\n      \r\n      // Auto-generate QR code and shortlink\r\n      try {\r\n        await generateQR(data.id, data.order_number, data.dealer_id);\r\n        console.log('QR code and shortlink generated for recon order:', data.order_number);\r\n      } catch (qrError) {\r\n        console.error('Failed to generate QR code:', qrError);\r\n        // Don't fail the order creation if QR generation fails\r\n      }\r\n      \r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('recon.order_created_successfully'),\r\n      });\r\n\r\n      return newOrder;\r\n    } catch (error) {\r\n      console.error('Error creating recon order:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('recon.error_creating_order'),\r\n        variant: 'destructive',\r\n      });\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Update existing recon order\r\n  const updateOrder = async (orderId: string, orderData: any) => {\r\n    try {\r\n      // Prepare services array with recon-specific data\r\n      const services = [\r\n        ...(orderData.services || []),\r\n        { type: 'acquisition_cost', value: orderData.acquisitionCost },\r\n        { type: 'recon_cost', value: orderData.reconCost },\r\n        { type: 'acquisition_source', value: orderData.acquisitionSource },\r\n        { type: 'condition_grade', value: orderData.conditionGrade },\r\n        { type: 'recon_category', value: orderData.reconCategory },\r\n      ].filter(service => service.value !== undefined && service.value !== null);\r\n\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .update({\r\n          customer_name: orderData.stockNumber || 'Recon Vehicle',\r\n          stock_number: orderData.stockNumber,\r\n          vehicle_year: orderData.vehicleYear,\r\n          vehicle_make: orderData.vehicleMake,\r\n          vehicle_model: orderData.vehicleModel,\r\n          vehicle_vin: orderData.vehicleVin,\r\n          vehicle_info: orderData.vehicleInfo,\r\n          status: orderData.status,\r\n          priority: orderData.priority,\r\n          services: services,\r\n          total_amount: orderData.totalAmount || orderData.reconCost,\r\n          notes: orderData.notes,\r\n          internal_notes: orderData.internalNotes,\r\n          assigned_contact_id: orderData.assignedContactId\r\n        })\r\n        .eq('id', orderId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error updating recon order:', error);\r\n        toast({\r\n          title: t('common.error'),\r\n          description: t('recon.error_updating_order'),\r\n          variant: 'destructive',\r\n        });\r\n        return null;\r\n      }\r\n\r\n      const updatedOrder = transformReconOrder(data);\r\n      setOrders(prev => prev.map(order => \r\n        order.id === orderId ? updatedOrder : order\r\n      ));\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('recon.order_updated_successfully'),\r\n      });\r\n\r\n      return updatedOrder;\r\n    } catch (error) {\r\n      console.error('Error updating recon order:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('recon.error_updating_order'),\r\n        variant: 'destructive',\r\n      });\r\n      return null;\r\n    }\r\n  };\r\n\r\n  // Delete recon order\r\n  const deleteOrder = async (orderId: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('orders')\r\n        .delete()\r\n        .eq('id', orderId);\r\n\r\n      if (error) {\r\n        console.error('Error deleting recon order:', error);\r\n        toast({\r\n          title: t('common.error'),\r\n          description: t('recon.error_deleting_order'),\r\n          variant: 'destructive',\r\n        });\r\n        return false;\r\n      }\r\n\r\n      setOrders(prev => prev.filter(order => order.id !== orderId));\r\n      \r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('recon.order_deleted_successfully'),\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting recon order:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: t('recon.error_deleting_order'),\r\n        variant: 'destructive',\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Load data on mount and tab change\r\n  useEffect(() => {\r\n    refreshData();\r\n  }, [refreshData]);\r\n\r\n  // Real-time subscription for recon orders\r\n  useEffect(() => {\r\n    const channel = supabase\r\n      .channel('recon_orders_realtime')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'orders',\r\n          filter: 'order_type=eq.recon'\r\n        },\r\n        async (payload) => {\r\n          console.log('Recon order real-time update:', payload);\r\n          \r\n          if (payload.eventType === 'INSERT') {\r\n            const newOrder = transformReconOrder(payload.new as any);\r\n            setOrders(prevOrders => [newOrder, ...prevOrders]);\r\n          } else if (payload.eventType === 'UPDATE') {\r\n            const updatedOrder = transformReconOrder(payload.new as any);\r\n            setOrders(prevOrders => \r\n              prevOrders.map(order => \r\n                order.id === updatedOrder.id ? updatedOrder : order\r\n              )\r\n            );\r\n          } else if (payload.eventType === 'DELETE') {\r\n            setOrders(prevOrders => \r\n              prevOrders.filter(order => order.id !== payload.old.id)\r\n            );\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    // Also listen for T2L metrics changes\r\n    const t2lChannel = supabase\r\n      .channel('recon_t2l_realtime')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'recon_t2l_metrics'\r\n        },\r\n        () => {\r\n          console.log('T2L metrics updated, data will refresh automatically via main subscription');\r\n          // Let the main useOrderManagement hook handle the refresh to avoid conflicts\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n      supabase.removeChannel(t2lChannel);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    orders: filteredOrders,\r\n    tabCounts,\r\n    filters,\r\n    loading,\r\n    refreshData,\r\n    updateFilters,\r\n    createOrder,\r\n    updateOrder,\r\n    deleteOrder\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useReconWorkflows.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useReportsData.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useServiceOrderManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":27,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[954,957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[954,957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1410,1413],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1410,1413],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1419,1422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1419,1422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1523,1526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1523,1526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2315,2318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2315,2318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9496,9499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9496,9499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'refreshData'. Either exclude it or remove the dependency array.","line":328,"column":6,"nodeType":"ArrayExpression","endLine":328,"endColumn":37,"suggestions":[{"desc":"Update the dependencies array to be: [user, generateQR]","fix":{"range":[12013,12044],"text":"[user, generateQR]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":330,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12119,12122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12119,12122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'refreshData'. Either exclude it or remove the dependency array.","line":390,"column":6,"nodeType":"ArrayExpression","endLine":390,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [user]","fix":{"range":[13648,13667],"text":"[user]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":415,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":415,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14378,14381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14378,14381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":418,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14576,14579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14576,14579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useOrderActions } from '@/hooks/useOrderActions';\r\nimport { orderNumberService } from '@/services/orderNumberService';\r\nimport type { Database } from '@/integrations/supabase/types';\r\n\r\n// Use Supabase types but create a unified interface for components\r\ntype SupabaseOrder = Database['public']['Tables']['orders']['Row'];\r\n\r\n// Service Order specific interface\r\nexport interface ServiceOrder {\r\n  id: string;\r\n  orderNumber: string;\r\n  customerName: string;\r\n  customerEmail?: string;\r\n  customerPhone?: string;\r\n  vehicleYear?: number;\r\n  vehicleMake?: string;\r\n  vehicleModel?: string;\r\n  vehicleInfo?: string;\r\n  vehicleVin?: string;\r\n  po?: string;\r\n  ro?: string;\r\n  tag?: string;\r\n  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';\r\n  services: any[];\r\n  totalAmount?: number;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  dueDate?: string;\r\n  assignedTo?: string;\r\n  notes?: string;\r\n  customOrderNumber?: string;\r\n  // Enhanced fields from JOINs\r\n  dealershipName?: string;\r\n  assignedGroupName?: string;\r\n  createdByGroupName?: string;\r\n  dueTime?: string;\r\n}\r\n\r\nexport interface ServiceOrderFilters {\r\n  search: string;\r\n  status: string;\r\n  make: string;\r\n  model: string;\r\n  dateRange: { from: any; to: any };\r\n}\r\n\r\n// Transform Supabase order to ServiceOrder\r\nconst transformServiceOrder = (supabaseOrder: any): ServiceOrder => ({\r\n  id: supabaseOrder.id,\r\n  orderNumber: supabaseOrder.order_number,\r\n  customerName: supabaseOrder.customer_name,\r\n  customerEmail: supabaseOrder.customer_email || undefined,\r\n  customerPhone: supabaseOrder.customer_phone || undefined,\r\n  vehicleYear: supabaseOrder.vehicle_year || undefined,\r\n  vehicleMake: supabaseOrder.vehicle_make || undefined,\r\n  vehicleModel: supabaseOrder.vehicle_model || undefined,\r\n  vehicleInfo: supabaseOrder.vehicle_info || undefined,\r\n  vehicleVin: supabaseOrder.vehicle_vin || undefined,\r\n  po: supabaseOrder.po || undefined,\r\n  ro: supabaseOrder.ro || undefined,\r\n  tag: supabaseOrder.tag || undefined,\r\n  status: supabaseOrder.status as 'pending' | 'in_progress' | 'completed' | 'cancelled',\r\n  services: supabaseOrder.services as any[] || [],\r\n  totalAmount: supabaseOrder.total_amount || undefined,\r\n  createdAt: supabaseOrder.created_at,\r\n  updatedAt: supabaseOrder.updated_at,\r\n  dueDate: supabaseOrder.sla_deadline || undefined,\r\n  assignedTo: 'Unassigned', // Will be overwritten in refreshData\r\n  notes: supabaseOrder.notes || undefined,\r\n  customOrderNumber: supabaseOrder.custom_order_number || undefined,\r\n  // Enhanced fields from manual JOINs (will be set in refreshData)\r\n  dealershipName: 'Unknown Dealer',\r\n  assignedGroupName: undefined,\r\n  createdByGroupName: undefined,\r\n  dueTime: supabaseOrder.sla_deadline ? new Date(supabaseOrder.sla_deadline).toLocaleTimeString('en-US', { \r\n    hour: '2-digit', \r\n    minute: '2-digit',\r\n    hour12: true \r\n  }) : undefined,\r\n});\r\n\r\nexport const useServiceOrderManagement = (activeTab: string) => {\r\n  const [orders, setOrders] = useState<ServiceOrder[]>([]);\r\n  const [filters, setFilters] = useState<ServiceOrderFilters>({\r\n    search: '',\r\n    status: '',\r\n    make: '',\r\n    model: '',\r\n    dateRange: { from: null, to: null },\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const { user } = useAuth();\r\n  const { generateQR } = useOrderActions();\r\n\r\n  const tabCounts = useMemo(() => {\r\n    const today = new Date();\r\n    const tomorrow = new Date(today);\r\n    tomorrow.setDate(tomorrow.getDate() + 1);\r\n\r\n    return {\r\n      all: orders.length,\r\n      today: orders.filter(order => {\r\n        const orderDate = new Date(order.dueDate || order.createdAt);\r\n        return orderDate.toDateString() === today.toDateString();\r\n      }).length,\r\n      tomorrow: orders.filter(order => {\r\n        const orderDate = new Date(order.dueDate || order.createdAt);\r\n        return orderDate.toDateString() === tomorrow.toDateString();\r\n      }).length,\r\n      pending: orders.filter(order => order.status === 'pending').length,\r\n      inProgress: orders.filter(order => order.status === 'in_progress').length,\r\n      completed: orders.filter(order => order.status === 'completed').length,\r\n      cancelled: orders.filter(order => order.status === 'cancelled').length,\r\n    };\r\n  }, [orders]);\r\n\r\n  const filteredOrders = useMemo(() => {\r\n    let filtered = [...orders];\r\n\r\n    // Apply tab-specific filtering\r\n    if (activeTab !== 'dashboard' && activeTab !== 'all') {\r\n      const today = new Date();\r\n      const tomorrow = new Date(today);\r\n      tomorrow.setDate(tomorrow.getDate() + 1);\r\n\r\n      switch (activeTab) {\r\n        case 'today':\r\n          filtered = filtered.filter(order => {\r\n            const orderDate = new Date(order.dueDate || order.createdAt);\r\n            return orderDate.toDateString() === today.toDateString();\r\n          });\r\n          break;\r\n        case 'tomorrow':\r\n          filtered = filtered.filter(order => {\r\n            const orderDate = new Date(order.dueDate || order.createdAt);\r\n            return orderDate.toDateString() === tomorrow.toDateString();\r\n          });\r\n          break;\r\n        case 'pending':\r\n          filtered = filtered.filter(order => order.status === 'pending');\r\n          break;\r\n        case 'inProgress':\r\n          filtered = filtered.filter(order => order.status === 'in_progress');\r\n          break;\r\n        case 'completed':\r\n          filtered = filtered.filter(order => order.status === 'completed');\r\n          break;\r\n        case 'cancelled':\r\n          filtered = filtered.filter(order => order.status === 'cancelled');\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Apply global filters\r\n    if (filters.search) {\r\n      const searchLower = filters.search.toLowerCase();\r\n      filtered = filtered.filter(order =>\r\n        order.id?.toLowerCase().includes(searchLower) ||\r\n        order.customerName?.toLowerCase().includes(searchLower) ||\r\n        order.po?.toLowerCase().includes(searchLower) ||\r\n        order.ro?.toLowerCase().includes(searchLower) ||\r\n        `${order.vehicleYear} ${order.vehicleMake} ${order.vehicleModel}`.toLowerCase().includes(searchLower)\r\n      );\r\n    }\r\n\r\n    if (filters.status) {\r\n      filtered = filtered.filter(order => order.status === filters.status);\r\n    }\r\n\r\n    if (filters.make) {\r\n      filtered = filtered.filter(order => order.vehicleMake === filters.make);\r\n    }\r\n\r\n    if (filters.model) {\r\n      filtered = filtered.filter(order => order.vehicleModel === filters.model);\r\n    }\r\n\r\n    if (filters.dateRange?.from) {\r\n      const fromDate = new Date(filters.dateRange.from);\r\n      filtered = filtered.filter(order => new Date(order.createdAt) >= fromDate);\r\n    }\r\n\r\n    if (filters.dateRange?.to) {\r\n      const toDate = new Date(filters.dateRange.to);\r\n      toDate.setHours(23, 59, 59, 999);\r\n      filtered = filtered.filter(order => new Date(order.createdAt) <= toDate);\r\n    }\r\n\r\n    return filtered;\r\n  }, [orders, activeTab, filters]);\r\n\r\n  const refreshData = useCallback(async () => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      // Fetch service orders from Supabase (basic query first)\r\n      const { data: orders, error } = await supabase\r\n        .from('orders')\r\n        .select('*')\r\n        .eq('order_type', 'service')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        console.error('Error fetching service orders:', error);\r\n        return;\r\n      }\r\n\r\n      // Fetch dealerships data separately\r\n      const { data: dealerships, error: dealershipsError } = await supabase\r\n        .from('dealerships')\r\n        .select('id, name');\r\n\r\n      if (dealershipsError) {\r\n        console.error('Error fetching dealerships:', dealershipsError);\r\n      }\r\n\r\n      // Fetch dealer groups data separately\r\n      const { data: dealerGroups, error: groupsError } = await supabase\r\n        .from('dealer_groups')\r\n        .select('id, name');\r\n\r\n      if (groupsError) {\r\n        console.error('Error fetching dealer groups:', groupsError);\r\n      }\r\n\r\n      // Create lookup maps for better performance\r\n      const dealershipMap = new Map(dealerships?.map(d => [d.id, d.name]) || []);\r\n      const groupMap = new Map(dealerGroups?.map(g => [g.id, g.name]) || []);\r\n\r\n      // Transform orders with joined data\r\n      const serviceOrders = (orders || []).map(order => {\r\n        const transformedOrder = transformServiceOrder(order);\r\n        // Add joined data manually\r\n        transformedOrder.dealershipName = dealershipMap.get(order.dealer_id) || 'Unknown Dealer';\r\n        transformedOrder.assignedGroupName = order.assigned_group_id ? groupMap.get(order.assigned_group_id) : undefined;\r\n        transformedOrder.createdByGroupName = order.created_by_group_id ? groupMap.get(order.created_by_group_id) : undefined;\r\n        transformedOrder.assignedTo = transformedOrder.assignedGroupName || 'Unassigned';\r\n        return transformedOrder;\r\n      });\r\n\r\n      setOrders(serviceOrders);\r\n    } catch (error) {\r\n      console.error('Error in refreshData:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  const updateFilters = useCallback((newFilters: Partial<ServiceOrderFilters>) => {\r\n    setFilters(prev => ({ ...prev, ...newFilters }));\r\n  }, []);\r\n\r\n  const createOrder = useCallback(async (orderData: any) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      console.log('Creating service order with data:', orderData);\r\n      \r\n      // Use database function to generate sequential order number\r\n      const { data: orderNumberData, error: numberError } = await supabase\r\n        .rpc('generate_service_order_number');\r\n\r\n      if (numberError || !orderNumberData) {\r\n        console.error('Error generating order number:', numberError);\r\n        throw new Error('Failed to generate service order number');\r\n      }\r\n\r\n      const newOrder = {\r\n        order_number: orderNumberData, // Use sequential SV-1001, SV-1002, etc.\r\n        customer_name: orderData.customerName,\r\n        customer_email: orderData.customerEmail,\r\n        customer_phone: orderData.customerPhone,\r\n        vehicle_year: orderData.vehicleYear ? parseInt(orderData.vehicleYear.toString()) : null,\r\n        vehicle_make: orderData.vehicleMake,\r\n        vehicle_model: orderData.vehicleModel,\r\n        vehicle_vin: orderData.vehicleVin,\r\n        vehicle_info: orderData.vehicleInfo,\r\n        po: orderData.po,\r\n        ro: orderData.ro,\r\n        tag: orderData.tag,\r\n        order_type: 'service',\r\n        status: 'pending',\r\n        services: orderData.services || [],\r\n        total_amount: orderData.totalAmount || 0,\r\n        sla_deadline: orderData.dueDate,\r\n        dealer_id: orderData.dealerId ? parseInt(orderData.dealerId.toString()) : 5,\r\n        notes: orderData.notes,\r\n      };\r\n\r\n      console.log('Inserting service order to DB:', newOrder);\r\n\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .insert(newOrder)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error creating service order:', error);\r\n        throw error;\r\n      }\r\n\r\n      console.log('Service order created successfully:', data);\r\n      \r\n      // Auto-generate QR code and shortlink\r\n      try {\r\n        await generateQR(data.id, data.order_number, data.dealer_id);\r\n        console.log('QR code and shortlink generated for service order:', data.order_number);\r\n      } catch (qrError) {\r\n        console.error('Failed to generate QR code:', qrError);\r\n        // Don't fail the order creation if QR generation fails\r\n      }\r\n      \r\n      // Real-time subscription will handle the data update automatically\r\n    } catch (error) {\r\n      console.error('Error in createOrder:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, refreshData, generateQR]);\r\n\r\n  const updateOrder = useCallback(async (orderId: string, orderData: any) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .update(orderData)\r\n        .eq('id', orderId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        console.error('Error updating service order:', error);\r\n        throw error;\r\n      }\r\n\r\n      // Update local state immediately for better UX\r\n      setOrders(prevOrders => \r\n        prevOrders.map(order => \r\n          order.id === orderId \r\n            ? { ...order, ...orderData, updatedAt: new Date().toISOString() }\r\n            : order\r\n        )\r\n      );\r\n      \r\n      console.log('Service order updated successfully:', data);\r\n    } catch (error) {\r\n      console.error('Error in updateOrder:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user]);\r\n\r\n  const deleteOrder = useCallback(async (orderId: string) => {\r\n    if (!user) return;\r\n    \r\n    setLoading(true);\r\n    \r\n    try {\r\n      const { error } = await supabase\r\n        .from('orders')\r\n        .delete()\r\n        .eq('id', orderId);\r\n\r\n      if (error) {\r\n        console.error('Error deleting service order:', error);\r\n        throw error;\r\n      }\r\n\r\n      console.log('Service order deleted successfully');\r\n      // Real-time subscription will handle the data update automatically\r\n    } catch (error) {\r\n      console.error('Error in deleteOrder:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user, refreshData]);\r\n\r\n  // Initialize data on mount and when dependencies change\r\n  useEffect(() => {\r\n    refreshData();\r\n  }, [refreshData]);\r\n\r\n  // Real-time subscription for service orders\r\n  useEffect(() => {\r\n    if (!user) return;\r\n\r\n    const channel = supabase\r\n      .channel('service_orders_realtime')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'orders',\r\n          filter: 'order_type=eq.service'\r\n        },\r\n        async (payload) => {\r\n          console.log('Service order real-time update:', payload);\r\n          \r\n          if (payload.eventType === 'INSERT') {\r\n            const newOrder = transformServiceOrder(payload.new as any);\r\n            setOrders(prevOrders => [newOrder, ...prevOrders]);\r\n          } else if (payload.eventType === 'UPDATE') {\r\n            const updatedOrder = transformServiceOrder(payload.new as any);\r\n            setOrders(prevOrders => \r\n              prevOrders.map(order => \r\n                order.id === updatedOrder.id ? updatedOrder : order\r\n              )\r\n            );\r\n          } else if (payload.eventType === 'DELETE') {\r\n            setOrders(prevOrders => \r\n              prevOrders.filter(order => order.id !== payload.old.id)\r\n            );\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [user]);\r\n\r\n  return {\r\n    orders: filteredOrders,\r\n    tabCounts,\r\n    filters,\r\n    loading,\r\n    updateFilters,\r\n    refreshData,\r\n    createOrder,\r\n    updateOrder,\r\n    deleteOrder,\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useSmartNotifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":15,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[420,423],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[420,423],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\n\r\nexport interface SmartNotification {\r\n  id: string;\r\n  user_id: string;\r\n  dealer_id: number;\r\n  entity_type?: string;\r\n  entity_id?: string;\r\n  notification_type: string;\r\n  channel: string;\r\n  title: string;\r\n  message: string;\r\n  data: any;\r\n  status: 'pending' | 'sent' | 'delivered' | 'failed' | 'read';\r\n  priority: 'low' | 'normal' | 'high' | 'urgent';\r\n  created_at: string;\r\n  read_at?: string;\r\n}\r\n\r\nexport interface NotificationGroup {\r\n  entity_type: string;\r\n  entity_id: string;\r\n  notifications: SmartNotification[];\r\n  unreadCount: number;\r\n  latestNotification: SmartNotification;\r\n}\r\n\r\nexport interface UseSmartNotificationsReturn {\r\n  notifications: SmartNotification[];\r\n  groupedNotifications: NotificationGroup[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  unreadCount: number;\r\n  markAsRead: (notificationId: string) => Promise<void>;\r\n  markAllAsRead: () => Promise<void>;\r\n  markEntityAsRead: (entityType: string, entityId: string) => Promise<void>;\r\n  deleteNotification: (notificationId: string) => Promise<void>;\r\n  refreshNotifications: () => Promise<void>;\r\n}\r\n\r\nexport function useSmartNotifications(dealerId?: number): UseSmartNotificationsReturn {\r\n  const { user } = useAuth();\r\n  const [notifications, setNotifications] = useState<SmartNotification[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchNotifications = useCallback(async () => {\r\n    if (!user?.id || !dealerId) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const { data, error: fetchError } = await supabase\r\n        .from('notification_log')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', dealerId)\r\n        .order('created_at', { ascending: false })\r\n        .limit(100);\r\n\r\n      if (fetchError) throw fetchError;\r\n\r\n      setNotifications(data || []);\r\n    } catch (err) {\r\n      console.error('Error fetching notifications:', err);\r\n      setError(err instanceof Error ? err.message : 'Error fetching notifications');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user?.id, dealerId]);\r\n\r\n  const markAsRead = useCallback(async (notificationId: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('notification_log')\r\n        .update({ \r\n          status: 'read',\r\n          read_at: new Date().toISOString()\r\n        })\r\n        .eq('id', notificationId);\r\n\r\n      if (error) throw error;\r\n\r\n      setNotifications(prev => \r\n        prev.map(n => \r\n          n.id === notificationId \r\n            ? { ...n, status: 'read' as const, read_at: new Date().toISOString() }\r\n            : n\r\n        )\r\n      );\r\n    } catch (err) {\r\n      console.error('Error marking notification as read:', err);\r\n    }\r\n  }, []);\r\n\r\n  const markAllAsRead = useCallback(async () => {\r\n    if (!user?.id || !dealerId) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('notification_log')\r\n        .update({ \r\n          status: 'read',\r\n          read_at: new Date().toISOString()\r\n        })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', dealerId)\r\n        .neq('status', 'read');\r\n\r\n      if (error) throw error;\r\n\r\n      await fetchNotifications();\r\n    } catch (err) {\r\n      console.error('Error marking all notifications as read:', err);\r\n    }\r\n  }, [user?.id, dealerId, fetchNotifications]);\r\n\r\n  const markEntityAsRead = useCallback(async (entityType: string, entityId: string) => {\r\n    if (!user?.id || !dealerId) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('notification_log')\r\n        .update({ \r\n          status: 'read',\r\n          read_at: new Date().toISOString()\r\n        })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', dealerId)\r\n        .eq('entity_type', entityType)\r\n        .eq('entity_id', entityId)\r\n        .neq('status', 'read');\r\n\r\n      if (error) throw error;\r\n\r\n      setNotifications(prev => \r\n        prev.map(n => \r\n          n.entity_type === entityType && n.entity_id === entityId && n.status !== 'read'\r\n            ? { ...n, status: 'read' as const, read_at: new Date().toISOString() }\r\n            : n\r\n        )\r\n      );\r\n    } catch (err) {\r\n      console.error('Error marking entity notifications as read:', err);\r\n    }\r\n  }, [user?.id, dealerId]);\r\n\r\n  const deleteNotification = useCallback(async (notificationId: string) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('notification_log')\r\n        .delete()\r\n        .eq('id', notificationId);\r\n\r\n      if (error) throw error;\r\n\r\n      setNotifications(prev => prev.filter(n => n.id !== notificationId));\r\n    } catch (err) {\r\n      console.error('Error deleting notification:', err);\r\n    }\r\n  }, []);\r\n\r\n  // Group notifications by entity\r\n  const groupedNotifications = useMemo(() => {\r\n    const groups: { [key: string]: NotificationGroup } = {};\r\n\r\n    notifications.forEach(notification => {\r\n      if (!notification.entity_type || !notification.entity_id) return;\r\n\r\n      const key = `${notification.entity_type}_${notification.entity_id}`;\r\n      \r\n      if (!groups[key]) {\r\n        groups[key] = {\r\n          entity_type: notification.entity_type,\r\n          entity_id: notification.entity_id,\r\n          notifications: [],\r\n          unreadCount: 0,\r\n          latestNotification: notification\r\n        };\r\n      }\r\n\r\n      groups[key].notifications.push(notification);\r\n      if (notification.status !== 'read') {\r\n        groups[key].unreadCount++;\r\n      }\r\n\r\n      // Update latest notification if this one is newer\r\n      if (new Date(notification.created_at) > new Date(groups[key].latestNotification.created_at)) {\r\n        groups[key].latestNotification = notification;\r\n      }\r\n    });\r\n\r\n    return Object.values(groups).sort((a, b) => \r\n      new Date(b.latestNotification.created_at).getTime() - \r\n      new Date(a.latestNotification.created_at).getTime()\r\n    );\r\n  }, [notifications]);\r\n\r\n  const unreadCount = useMemo(() => \r\n    notifications.filter(n => n.status !== 'read').length, \r\n    [notifications]\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchNotifications();\r\n  }, [fetchNotifications]);\r\n\r\n  // Real-time subscription\r\n  useEffect(() => {\r\n    if (!user?.id || !dealerId) return;\r\n\r\n    const channel = supabase\r\n      .channel(`notifications_${user.id}_${dealerId}`)\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: 'INSERT',\r\n          schema: 'public',\r\n          table: 'notification_log',\r\n          filter: `user_id=eq.${user.id}`\r\n        },\r\n        () => {\r\n          fetchNotifications();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, [user?.id, dealerId, fetchNotifications]);\r\n\r\n  return {\r\n    notifications,\r\n    groupedNotifications,\r\n    loading,\r\n    error,\r\n    unreadCount,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    markEntityAsRead,\r\n    deleteNotification,\r\n    refreshNotifications: fetchNotifications\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useStatusPermissions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[798,801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[798,801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":20,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[814,817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[814,817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { usePermissionContext } from '@/contexts/PermissionContext';\r\n\r\ninterface UseStatusPermissionsReturn {\r\n  canUpdateStatus: (dealerId: string, currentStatus: string, newStatus: string) => Promise<boolean>;\r\n  updateOrderStatus: (orderId: string, newStatus: string, dealerId: string) => Promise<boolean>;\r\n}\r\n\r\nexport function useStatusPermissions(): UseStatusPermissionsReturn {\r\n  const { hasPermission } = usePermissionContext();\r\n\r\n  const canUpdateStatus = useCallback(async (\r\n    dealerId: string, \r\n    currentStatus: string, \r\n    newStatus: string\r\n  ): Promise<boolean> => {\r\n    try {\r\n      // Check if user has global order update permissions\r\n      if (hasPermission('orders' as any, 'write' as any)) {\r\n        return true;\r\n      }\r\n\r\n      // Check specific status update permissions via database function\r\n      const { data: user } = await supabase.auth.getUser();\r\n      if (!user.user) return false;\r\n\r\n      const { data, error } = await supabase.rpc('user_can_update_order_status', {\r\n        user_uuid: user.user.id,\r\n        target_dealer_id: parseInt(dealerId),\r\n        current_status: currentStatus,\r\n        new_status: newStatus\r\n      });\r\n\r\n      if (error) {\r\n        console.error('Error checking status permissions:', error);\r\n        return false;\r\n      }\r\n\r\n      return data === true;\r\n    } catch (error) {\r\n      console.error('Error in canUpdateStatus:', error);\r\n      return false;\r\n    }\r\n  }, [hasPermission]);\r\n\r\n  const updateOrderStatus = useCallback(async (\r\n    orderId: string, \r\n    newStatus: string,\r\n    dealerId: string\r\n  ): Promise<boolean> => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('orders')\r\n        .update({ \r\n          status: newStatus,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', orderId);\r\n\r\n      if (error) {\r\n        console.error('Error updating order status:', error);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error in updateOrderStatus:', error);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    canUpdateStatus,\r\n    updateOrderStatus\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useStockDealerSelection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useStockManagement.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":59,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1627,1630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1627,1630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2103,2106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2103,2106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":138,"column":108,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":111,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4424,4427],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4424,4427],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\n\r\nexport interface VehicleInventory {\r\n  id: string;\r\n  dealer_id: number;\r\n  stock_number: string;\r\n  vin: string;\r\n  year?: number;\r\n  make?: string;\r\n  model?: string;\r\n  trim?: string;\r\n  drivetrain?: string;\r\n  segment?: string;\r\n  color?: string;\r\n  mileage?: number;\r\n  is_certified?: boolean;\r\n  certified_program?: string;\r\n  dms_status?: string;\r\n  lot_location?: string;\r\n  age_days?: number;\r\n  price?: number;\r\n  msrp?: number;\r\n  unit_cost?: number;\r\n  estimated_profit?: number;\r\n  acv_wholesale?: number;\r\n  acv_max_retail?: number;\r\n  last_reprice_date?: string;\r\n  market_rank_matching?: number;\r\n  market_listings_matching?: number;\r\n  market_rank_overall?: number;\r\n  market_listings_overall?: number;\r\n  percent_to_market?: number;\r\n  cost_to_market?: number;\r\n  mds_overall?: number;\r\n  mds_matching?: number;\r\n  photo_count?: number;\r\n  key_photo_url?: string;\r\n  leads_last_7_days?: number;\r\n  leads_daily_avg_last_7_days?: number;\r\n  leads_since_last_reprice?: number;\r\n  leads_total?: number;\r\n  cargurus_ctr?: number;\r\n  cargurus_srp_views?: number;\r\n  cargurus_vdp_views?: number;\r\n  mmr_value?: number;\r\n  mmr_vs_cost?: number;\r\n  galves_value?: number;\r\n  water_damage?: boolean;\r\n  risk_light?: string;\r\n  key_information?: string;\r\n  objective?: string;\r\n  syndication_status?: string;\r\n  proof_point_msrp?: string;\r\n  proof_point_jd_power?: string;\r\n  proof_point_kbb?: string;\r\n  proof_point_market?: string;\r\n  raw_data?: any;\r\n  is_active?: boolean;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface UseStockManagementReturn {\r\n  inventory: VehicleInventory[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  searchInventory: (query: string) => VehicleInventory[];\r\n  getVehicleByStock: (stockNumber: string) => VehicleInventory | null;\r\n  getVehicleByVin: (vin: string) => VehicleInventory | null;\r\n  uploadCSV: (file: File) => Promise<{ success: boolean; message: string; details?: any }>;\r\n  refreshInventory: () => Promise<void>;\r\n}\r\n\r\nexport const useStockManagement = (dealerId?: number): UseStockManagementReturn => {\r\n  const { user } = useAuth();\r\n  const [inventory, setInventory] = useState<VehicleInventory[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const refreshInventory = useCallback(async () => {\r\n    if (!dealerId) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const { data, error: fetchError } = await supabase\r\n        .from('dealer_vehicle_inventory')\r\n        .select('*')\r\n        .eq('dealer_id', dealerId)\r\n        .eq('is_active', true)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (fetchError) throw fetchError;\r\n\r\n      setInventory(data || []);\r\n    } catch (err) {\r\n      console.error('Error fetching inventory:', err);\r\n      setError(err instanceof Error ? err.message : 'Failed to fetch inventory');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [dealerId]);\r\n\r\n  useEffect(() => {\r\n    if (dealerId) {\r\n      refreshInventory();\r\n    }\r\n  }, [dealerId, refreshInventory]);\r\n\r\n  const searchInventory = useCallback((query: string): VehicleInventory[] => {\r\n    if (!query.trim()) return inventory;\r\n    \r\n    const searchTerm = query.toLowerCase();\r\n    return inventory.filter(vehicle => \r\n      vehicle.stock_number?.toLowerCase().includes(searchTerm) ||\r\n      vehicle.vin?.toLowerCase().includes(searchTerm) ||\r\n      vehicle.make?.toLowerCase().includes(searchTerm) ||\r\n      vehicle.model?.toLowerCase().includes(searchTerm) ||\r\n      `${vehicle.year} ${vehicle.make} ${vehicle.model}`.toLowerCase().includes(searchTerm)\r\n    );\r\n  }, [inventory]);\r\n\r\n  const getVehicleByStock = useCallback((stockNumber: string): VehicleInventory | null => {\r\n    return inventory.find(vehicle => \r\n      vehicle.stock_number?.toLowerCase() === stockNumber.toLowerCase()\r\n    ) || null;\r\n  }, [inventory]);\r\n\r\n  const getVehicleByVin = useCallback((vin: string): VehicleInventory | null => {\r\n    return inventory.find(vehicle => \r\n      vehicle.vin?.toLowerCase() === vin.toLowerCase()\r\n    ) || null;\r\n  }, [inventory]);\r\n\r\n  const uploadCSV = useCallback(async (file: File): Promise<{ success: boolean; message: string; details?: any }> => {\r\n    if (!dealerId || !user) {\r\n      return { success: false, message: 'Missing dealer ID or user authentication' };\r\n    }\r\n\r\n    try {\r\n      console.log(`🔄 Starting CSV upload: ${file.name} (${file.size} bytes)`);\r\n      \r\n      const text = await file.text();\r\n      \r\n      if (!text.trim()) {\r\n        return { success: false, message: 'CSV file is empty' };\r\n      }\r\n\r\n      // Parse CSV with intelligent detection\r\n      const { parseCSV, processVehicleData, extractFileTimestamp } = await import('@/utils/csvUtils');\r\n      \r\n      // Extract timestamp from filename\r\n      const fileTimestamp = extractFileTimestamp(file.name);\r\n      console.log('📅 File timestamp:', fileTimestamp);\r\n\r\n      // Parse CSV content\r\n      const parseResult = parseCSV(text);\r\n      console.log('📊 Parse results:', {\r\n        separator: parseResult.separator,\r\n        headers: parseResult.headers.length,\r\n        rows: parseResult.rows.length,\r\n        detectedColumns: Object.keys(parseResult.detectedColumns)\r\n      });\r\n\r\n      // Process vehicle data with detailed logging\r\n      const processingResult = processVehicleData(parseResult, dealerId);\r\n      \r\n      // Log detailed processing information\r\n      console.log('🚗 Processing results:', processingResult.stats);\r\n      processingResult.logs.forEach(log => {\r\n        console.log(`[${log.step}] ${log.message}`, log.data || '');\r\n      });\r\n\r\n      if (processingResult.vehicles.length > 0) {\r\n        console.log(`📤 Uploading ${processingResult.vehicles.length} vehicles to database...`);\r\n        \r\n        const { error: upsertError } = await supabase\r\n          .from('dealer_vehicle_inventory')\r\n          .upsert(processingResult.vehicles, {\r\n            onConflict: 'dealer_id,stock_number'\r\n          });\r\n\r\n        if (upsertError) throw upsertError;\r\n\r\n        // Enhanced sync logging with processing details\r\n        const syncLogData = {\r\n          dealer_id: dealerId,\r\n          sync_type: 'csv_upload',\r\n          sync_status: 'completed',\r\n          records_processed: processingResult.stats.processed,\r\n          records_added: processingResult.vehicles.length,\r\n          records_invalid: processingResult.stats.invalid,\r\n          file_name: file.name,\r\n          file_size: file.size,\r\n          file_timestamp: fileTimestamp?.toISOString(),\r\n          separator_detected: parseResult.separator,\r\n          columns_mapped: Object.keys(parseResult.detectedColumns),\r\n          processing_logs: processingResult.logs,\r\n          processed_by: user.id\r\n        };\r\n\r\n        await supabase\r\n          .from('dealer_inventory_sync_log')\r\n          .insert(syncLogData);\r\n\r\n        await refreshInventory();\r\n        \r\n        console.log('✅ CSV upload completed successfully');\r\n        \r\n        return { \r\n          success: true, \r\n          message: `Successfully processed ${processingResult.vehicles.length} of ${processingResult.stats.processed} vehicles`,\r\n          details: {\r\n            processed: processingResult.stats.processed,\r\n            valid: processingResult.vehicles.length,\r\n            invalid: processingResult.stats.invalid,\r\n            separator: parseResult.separator,\r\n            mappedColumns: parseResult.detectedColumns,\r\n            fileTimestamp,\r\n            logs: processingResult.logs.slice(-10) // Last 10 log entries\r\n          }\r\n        };\r\n      } else {\r\n        const errorMessage = `No valid vehicles found. Processed ${processingResult.stats.processed} rows but none had required fields (stock_number AND vin).`;\r\n        \r\n        console.error('❌ No valid vehicles:', {\r\n          stats: processingResult.stats,\r\n          detectedColumns: parseResult.detectedColumns,\r\n          recentLogs: processingResult.logs.slice(-5)\r\n        });\r\n\r\n        return { \r\n          success: false, \r\n          message: errorMessage,\r\n          details: {\r\n            stats: processingResult.stats,\r\n            detectedColumns: parseResult.detectedColumns,\r\n            separator: parseResult.separator,\r\n            logs: processingResult.logs,\r\n            suggestions: [\r\n              'Verify your CSV has Stock Number and VIN columns',\r\n              `Detected separator: \"${parseResult.separator}\"`,\r\n              `Mapped columns: ${Object.keys(parseResult.detectedColumns).join(', ') || 'None'}`\r\n            ]\r\n          }\r\n        };\r\n      }\r\n\r\n    } catch (err) {\r\n      console.error('💥 Error uploading CSV:', err);\r\n      return { \r\n        success: false, \r\n        message: err instanceof Error ? err.message : 'Failed to upload CSV'\r\n      };\r\n    }\r\n  }, [dealerId, user, refreshInventory]);\r\n\r\n  return {\r\n    inventory,\r\n    loading,\r\n    error,\r\n    searchInventory,\r\n    getVehicleByStock,\r\n    getVehicleByVin,\r\n    uploadCSV,\r\n    refreshInventory\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useSweetAlert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useSystemStats.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1372,1375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1372,1375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":83,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2256,2259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2256,2259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":115,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3208,3211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3208,3211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\ninterface SystemStats {\r\n  total_dealerships: number;\r\n  active_dealerships: number;\r\n  total_users: number;\r\n  active_users: number;\r\n  total_orders: number;\r\n  orders_this_month: number;\r\n  orders_this_week: number;\r\n  pending_invitations: number;\r\n  system_health_score: number;\r\n}\r\n\r\ninterface SystemActivity {\r\n  activity_type: string;\r\n  activity_description: string;\r\n  entity_type: string;\r\n  entity_id: string;\r\n  created_at: string;\r\n  user_email: string;\r\n}\r\n\r\ninterface DealershipPerformance {\r\n  dealership_id: number;\r\n  dealership_name: string;\r\n  total_users: number;\r\n  active_users: number;\r\n  total_orders: number;\r\n  orders_this_month: number;\r\n  avg_orders_per_user: number;\r\n  user_growth_rate: number;\r\n  last_activity: string;\r\n  status: string;\r\n}\r\n\r\nexport const useSystemStats = () => {\r\n  const [stats, setStats] = useState<SystemStats | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchStats = async () => {\r\n    try {\r\n      setError(null);\r\n      const { data, error } = await supabase.rpc('get_system_stats');\r\n      \r\n      if (error) throw error;\r\n      if (data && data.length > 0) {\r\n        setStats(data[0]);\r\n      }\r\n    } catch (err: any) {\r\n      console.error('Error fetching system stats:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchStats();\r\n    \r\n    // Refresh every 5 minutes\r\n    const interval = setInterval(fetchStats, 5 * 60 * 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return { stats, loading, error, refetch: fetchStats };\r\n};\r\n\r\nexport const useSystemActivity = () => {\r\n  const [activities, setActivities] = useState<SystemActivity[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchActivity = async () => {\r\n    try {\r\n      setError(null);\r\n      const { data, error } = await supabase.rpc('get_recent_system_activity');\r\n      \r\n      if (error) throw error;\r\n      setActivities(data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching system activity:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchActivity();\r\n    \r\n    // Refresh every 2 minutes\r\n    const interval = setInterval(fetchActivity, 2 * 60 * 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return { activities, loading, error, refetch: fetchActivity };\r\n};\r\n\r\nexport const useDealershipPerformance = () => {\r\n  const [performance, setPerformance] = useState<DealershipPerformance[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchPerformance = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const { data, error } = await supabase.rpc('get_dealership_performance_stats');\r\n      \r\n      if (error) throw error;\r\n      setPerformance(data || []);\r\n    } catch (err: any) {\r\n      console.error('Error fetching performance stats:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPerformance();\r\n  }, []);\r\n\r\n  return { performance, loading, error, refetch: fetchPerformance };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useT2LAnalytics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useTabPersistence.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2835,2838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2835,2838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback, useState } from 'react';\r\nimport { usePersistedState } from './usePersistedState';\r\nimport { useInstantTabPersistence, useInstantPersistedState } from './useInstantPersistedState';\r\nimport { useCloudSyncedTabPersistence, useCloudSyncedState } from './useCloudSync';\r\n\r\n/**\r\n * Tab persistence configurations for different pages\r\n */\r\nexport const TAB_CONFIGS = {\r\n  sales_orders: {\r\n    key: 'sales',\r\n    defaultTab: 'dashboard',\r\n    validTabs: ['dashboard', 'today', 'tomorrow', 'pending', 'in_process', 'week', 'all', 'services', 'deleted']\r\n  },\r\n  service_orders: {\r\n    key: 'service', \r\n    defaultTab: 'dashboard',\r\n    validTabs: ['dashboard', 'today', 'tomorrow', 'pending', 'in_process', 'week', 'all', 'services', 'deleted']\r\n  },\r\n  recon_orders: {\r\n    key: 'recon',\r\n    defaultTab: 'dashboard', \r\n    validTabs: ['dashboard', 'today', 'tomorrow', 'pending', 'in_process', 'week', 'all', 'services', 'deleted']\r\n  },\r\n  car_wash: {\r\n    key: 'carwash',\r\n    defaultTab: 'today',\r\n    validTabs: ['dashboard', 'today', 'tomorrow', 'pending', 'in_process', 'week', 'all', 'services', 'deleted']  \r\n  },\r\n  reports: {\r\n    key: 'reports',\r\n    defaultTab: 'operational',\r\n    validTabs: ['operational', 'financial', 'performance', 'custom']\r\n  },\r\n  management: {\r\n    key: 'management',\r\n    defaultTab: 'overview',\r\n    validTabs: ['overview', 'users', 'dealerships', 'permissions', 'theme', 'migration']\r\n  },\r\n  dealer_view: {\r\n    key: 'dealer',\r\n    defaultTab: 'overview', \r\n    validTabs: ['overview', 'groups', 'users', 'services', 'categories', 'modules']\r\n  }\r\n} as const;\r\n\r\nexport type PageKey = keyof typeof TAB_CONFIGS;\r\n\r\n/**\r\n * Hook for tab persistence - SIMPLIFIED VERSION TO FIX HOOKS VIOLATION\r\n */\r\nexport function useTabPersistence(pageKey: PageKey, dealerId?: string, enableCloudSync = false) {\r\n  const config = TAB_CONFIGS[pageKey];\r\n\r\n  // Always use basic state without complex persistence to avoid hooks violations\r\n  const [activeTab, setActiveTab] = useState(config.defaultTab);\r\n\r\n  const setValidatedTab = useCallback((tab: string) => {\r\n    if (config.validTabs.includes(tab)) {\r\n      setActiveTab(tab);\r\n    } else {\r\n      console.warn(`⚠️ Invalid tab ${tab}, ignoring`);\r\n    }\r\n  }, [config.validTabs]);\r\n\r\n  return [activeTab, setValidatedTab] as const;\r\n}\r\n\r\n/**\r\n * Hook for view mode persistence - SIMPLIFIED VERSION TO FIX HOOKS VIOLATION\r\n */\r\nexport function useViewModePersistence(pageKey: PageKey, enableCloudSync = false) {\r\n  // Always use basic state without complex persistence to avoid hooks violations\r\n  const [viewMode, setViewMode] = useState<'kanban' | 'table' | 'calendar'>('kanban');\r\n\r\n  return [viewMode, setViewMode] as const;\r\n}\r\n\r\n/**\r\n * Hook for filter persistence\r\n */\r\nexport function useFilterPersistence<T extends Record<string, any>>(\r\n  pageKey: PageKey, \r\n  defaultFilters: T\r\n) {\r\n  const [filters, setFilters] = usePersistedState(\r\n    `pages.${TAB_CONFIGS[pageKey].key}.filters`,\r\n    defaultFilters,\r\n    {\r\n      expiration: 24 * 60 * 60 * 1000, // 24 hours\r\n      onError: (error) => console.warn(`Filter persistence error for ${pageKey}:`, error)\r\n    }\r\n  );\r\n\r\n  return [filters, setFilters] as const;\r\n}\r\n\r\n/**\r\n * Hook for search term persistence - SIMPLIFIED VERSION TO FIX HOOKS VIOLATION\r\n */\r\nexport function useSearchPersistence(pageKey: PageKey) {\r\n  // Always use basic state without complex persistence to avoid hooks violations\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  return [searchTerm, setSearchTerm] as const;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useTypingIndicators.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useUserAudit.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[521,524],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[521,524],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":82,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2362,2365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2362,2365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":102,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2975,2978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2975,2978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":134,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3993,3996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3993,3996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":182,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":182,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5303,5306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5303,5306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6164,6167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6164,6167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchAuditEvents'. Either include it or remove the dependency array.","line":218,"column":6,"nodeType":"ArrayExpression","endLine":218,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [pagination.page, dealerId, fetchAuditEvents]","fix":{"range":[6400,6427],"text":"[pagination.page, dealerId, fetchAuditEvents]"}}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport interface AuditEvent {\r\n  id: string;\r\n  event_type: 'user_created' | 'user_updated' | 'user_deleted' | 'role_assigned' | 'invitation_sent' | 'membership_created';\r\n  entity_type: 'user' | 'invitation' | 'membership' | 'role';\r\n  entity_id: string;\r\n  user_id: string;\r\n  metadata: Record<string, any>;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  created_at: string;\r\n  user_email?: string;\r\n  affected_user_email?: string;\r\n}\r\n\r\nexport const useUserAudit = (dealerId?: number) => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [auditEvents, setAuditEvents] = useState<AuditEvent[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [pagination, setPagination] = useState({\r\n    page: 1,\r\n    limit: 50,\r\n    total: 0\r\n  });\r\n\r\n  const fetchAuditEvents = useCallback(async (filters?: {\r\n    eventType?: string;\r\n    entityType?: string;\r\n    userId?: string;\r\n    dateFrom?: string;\r\n    dateTo?: string;\r\n  }) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      let query = supabase\r\n        .from('user_audit_log')\r\n        .select(`\r\n          *,\r\n          profiles!user_id(email),\r\n          affected_profiles:profiles!entity_id(email)\r\n        `)\r\n        .order('created_at', { ascending: false })\r\n        .range(\r\n          (pagination.page - 1) * pagination.limit,\r\n          pagination.page * pagination.limit - 1\r\n        );\r\n\r\n      if (dealerId) {\r\n        query = query.eq('dealer_id', dealerId);\r\n      }\r\n\r\n      if (filters?.eventType) {\r\n        query = query.eq('event_type', filters.eventType);\r\n      }\r\n\r\n      if (filters?.entityType) {\r\n        query = query.eq('entity_type', filters.entityType);\r\n      }\r\n\r\n      if (filters?.userId) {\r\n        query = query.eq('user_id', filters.userId);\r\n      }\r\n\r\n      if (filters?.dateFrom) {\r\n        query = query.gte('created_at', filters.dateFrom);\r\n      }\r\n\r\n      if (filters?.dateTo) {\r\n        query = query.lte('created_at', filters.dateTo);\r\n      }\r\n\r\n      const { data, error, count } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      const formattedEvents: AuditEvent[] = (data || []).map((event: any) => ({\r\n        id: event.id,\r\n        event_type: event.event_type,\r\n        entity_type: event.entity_type,\r\n        entity_id: event.entity_id,\r\n        user_id: event.user_id,\r\n        metadata: event.metadata || {},\r\n        ip_address: event.ip_address,\r\n        user_agent: event.user_agent,\r\n        created_at: event.created_at,\r\n        user_email: event.profiles?.email,\r\n        affected_user_email: event.affected_profiles?.email\r\n      }));\r\n\r\n      setAuditEvents(formattedEvents);\r\n      setPagination(prev => ({\r\n        ...prev,\r\n        total: count || 0\r\n      }));\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching audit events:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error loading audit events',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [pagination, dealerId, toast, t]);\r\n\r\n  const logAuditEvent = async (event: Omit<AuditEvent, 'id' | 'created_at' | 'user_email' | 'affected_user_email'>) => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('user_audit_log')\r\n        .insert({\r\n          event_type: event.event_type,\r\n          entity_type: event.entity_type,\r\n          entity_id: event.entity_id,\r\n          user_id: event.user_id,\r\n          metadata: event.metadata,\r\n          ip_address: event.ip_address,\r\n          user_agent: event.user_agent,\r\n          dealer_id: dealerId\r\n        });\r\n\r\n      if (error) throw error;\r\n      \r\n      // Refresh audit events after logging\r\n      await fetchAuditEvents();\r\n      \r\n    } catch (error: any) {\r\n      console.error('Error logging audit event:', error);\r\n    }\r\n  };\r\n\r\n  const exportAuditLog = async (filters?: {\r\n    eventType?: string;\r\n    entityType?: string;\r\n    dateFrom?: string;\r\n    dateTo?: string;\r\n  }) => {\r\n    try {\r\n      let query = supabase\r\n        .from('user_audit_log')\r\n        .select(`\r\n          *,\r\n          profiles!user_id(email, first_name, last_name),\r\n          affected_profiles:profiles!entity_id(email, first_name, last_name)\r\n        `)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (dealerId) {\r\n        query = query.eq('dealer_id', dealerId);\r\n      }\r\n\r\n      if (filters?.eventType) {\r\n        query = query.eq('event_type', filters.eventType);\r\n      }\r\n\r\n      if (filters?.entityType) {\r\n        query = query.eq('entity_type', filters.entityType);\r\n      }\r\n\r\n      if (filters?.dateFrom) {\r\n        query = query.gte('created_at', filters.dateFrom);\r\n      }\r\n\r\n      if (filters?.dateTo) {\r\n        query = query.lte('created_at', filters.dateTo);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      // Convert to CSV\r\n      const csvContent = [\r\n        ['Date', 'Event Type', 'Entity Type', 'User', 'Entity', 'Details', 'IP Address'].join(','),\r\n        ...(data || []).map((event: any) => [\r\n          new Date(event.created_at).toLocaleString(),\r\n          event.event_type,\r\n          event.entity_type,\r\n          event.profiles?.email || 'Unknown',\r\n          event.affected_profiles?.email || event.entity_id,\r\n          JSON.stringify(event.metadata || {}),\r\n          event.ip_address || 'N/A'\r\n        ].join(','))\r\n      ].join('\\n');\r\n\r\n      // Download CSV\r\n      const blob = new Blob([csvContent], { type: 'text/csv' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `user-audit-log-${new Date().toISOString().split('T')[0]}.csv`;\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: 'Audit log exported successfully',\r\n      });\r\n\r\n    } catch (error: any) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error exporting audit log',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAuditEvents();\r\n  }, [pagination.page, dealerId]);\r\n\r\n  return {\r\n    auditEvents,\r\n    loading,\r\n    pagination,\r\n    fetchAuditEvents,\r\n    logAuditEvent,\r\n    exportAuditLog,\r\n    setPagination\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useUserNotifications.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[418,421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[418,421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3624,3627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3624,3627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":131,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4592,4595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4592,4595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":154,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5219,5222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5219,5222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":175,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5699,5702],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5699,5702],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6363,6366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6363,6366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6989,6992],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6989,6992],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":249,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7898,7901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7898,7901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport interface UserNotification {\r\n  id: string;\r\n  type: 'user_invitation' | 'user_joined' | 'role_changed' | 'membership_updated' | 'system_alert';\r\n  title: string;\r\n  message: string;\r\n  data: Record<string, any>;\r\n  read: boolean;\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  created_at: string;\r\n  expires_at?: string;\r\n  action_url?: string;\r\n  action_label?: string;\r\n}\r\n\r\nexport interface NotificationSettings {\r\n  email_notifications: boolean;\r\n  push_notifications: boolean;\r\n  in_app_notifications: boolean;\r\n  notification_frequency: 'immediate' | 'hourly' | 'daily' | 'weekly';\r\n  quiet_hours_start?: string;\r\n  quiet_hours_end?: string;\r\n  notification_types: {\r\n    user_invitations: boolean;\r\n    user_activity: boolean;\r\n    role_changes: boolean;\r\n    system_alerts: boolean;\r\n  };\r\n}\r\n\r\nexport const useUserNotifications = (dealerId?: number) => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [notifications, setNotifications] = useState<UserNotification[]>([]);\r\n  const [settings, setSettings] = useState<NotificationSettings | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  const fetchNotifications = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // In a real implementation, this would fetch from a notifications table\r\n      const mockNotifications: UserNotification[] = [\r\n        {\r\n          id: '1',\r\n          type: 'user_invitation',\r\n          title: 'New User Invitation',\r\n          message: 'john.doe@example.com has been invited to join the team',\r\n          data: { email: 'john.doe@example.com', role: 'Sales Manager' },\r\n          read: false,\r\n          priority: 'medium',\r\n          created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\r\n          action_url: '/users/invitations',\r\n          action_label: 'View Invitations'\r\n        },\r\n        {\r\n          id: '2',\r\n          type: 'user_joined',\r\n          title: 'New Team Member',\r\n          message: 'Sarah Smith has joined your dealership',\r\n          data: { user_id: 'user-123', name: 'Sarah Smith' },\r\n          read: false,\r\n          priority: 'low',\r\n          created_at: new Date(Date.now() - 4 * 60 * 60 * 1000).toISOString(),\r\n          action_url: '/users',\r\n          action_label: 'View Users'\r\n        },\r\n        {\r\n          id: '3',\r\n          type: 'role_changed',\r\n          title: 'Role Updated',\r\n          message: 'Mike Johnson\\'s role has been changed to Detail Manager',\r\n          data: { user_id: 'user-456', old_role: 'Detail Staff', new_role: 'Detail Manager' },\r\n          read: true,\r\n          priority: 'medium',\r\n          created_at: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString()\r\n        },\r\n        {\r\n          id: '4',\r\n          type: 'system_alert',\r\n          title: 'System Maintenance',\r\n          message: 'Scheduled maintenance will occur tonight from 2-4 AM',\r\n          data: { maintenance_window: '2024-01-15T02:00:00Z' },\r\n          read: false,\r\n          priority: 'high',\r\n          created_at: new Date(Date.now() - 8 * 60 * 60 * 1000).toISOString(),\r\n          expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()\r\n        }\r\n      ];\r\n\r\n      setNotifications(mockNotifications);\r\n      setUnreadCount(mockNotifications.filter(n => !n.read).length);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching notifications:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error loading notifications',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [toast, t]);\r\n\r\n  const fetchNotificationSettings = useCallback(async () => {\r\n    try {\r\n      // In a real implementation, this would fetch from user settings\r\n      const mockSettings: NotificationSettings = {\r\n        email_notifications: true,\r\n        push_notifications: true,\r\n        in_app_notifications: true,\r\n        notification_frequency: 'immediate',\r\n        quiet_hours_start: '22:00',\r\n        quiet_hours_end: '08:00',\r\n        notification_types: {\r\n          user_invitations: true,\r\n          user_activity: true,\r\n          role_changes: true,\r\n          system_alerts: true\r\n        }\r\n      };\r\n\r\n      setSettings(mockSettings);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching notification settings:', error);\r\n    }\r\n  }, []);\r\n\r\n  const markAsRead = async (notificationId: string) => {\r\n    try {\r\n      // Update notification in state\r\n      setNotifications(prev => \r\n        prev.map(n => \r\n          n.id === notificationId ? { ...n, read: true } : n\r\n        )\r\n      );\r\n      \r\n      // Update unread count\r\n      setUnreadCount(prev => Math.max(0, prev - 1));\r\n\r\n      // In a real implementation, this would update the database\r\n      toast({\r\n        title: 'Notification marked as read',\r\n        duration: 2000,\r\n      });\r\n\r\n    } catch (error: any) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error updating notification',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const markAllAsRead = async () => {\r\n    try {\r\n      setNotifications(prev => \r\n        prev.map(n => ({ ...n, read: true }))\r\n      );\r\n      setUnreadCount(0);\r\n\r\n      toast({\r\n        title: 'All notifications marked as read',\r\n        duration: 2000,\r\n      });\r\n\r\n    } catch (error: any) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error updating notifications',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteNotification = async (notificationId: string) => {\r\n    try {\r\n      const notification = notifications.find(n => n.id === notificationId);\r\n      \r\n      setNotifications(prev => prev.filter(n => n.id !== notificationId));\r\n      \r\n      if (notification && !notification.read) {\r\n        setUnreadCount(prev => Math.max(0, prev - 1));\r\n      }\r\n\r\n      toast({\r\n        title: 'Notification deleted',\r\n        duration: 2000,\r\n      });\r\n\r\n    } catch (error: any) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error deleting notification',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateNotificationSettings = async (newSettings: Partial<NotificationSettings>) => {\r\n    try {\r\n      const updatedSettings = { ...settings, ...newSettings } as NotificationSettings;\r\n      setSettings(updatedSettings);\r\n\r\n      // In a real implementation, this would update the database\r\n      toast({\r\n        title: t('common.success'),\r\n        description: 'Notification settings updated',\r\n      });\r\n\r\n    } catch (error: any) {\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error updating settings',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendNotification = async (notification: Omit<UserNotification, 'id' | 'created_at' | 'read'>) => {\r\n    try {\r\n      const newNotification: UserNotification = {\r\n        ...notification,\r\n        id: `notif_${Date.now()}`,\r\n        created_at: new Date().toISOString(),\r\n        read: false\r\n      };\r\n\r\n      setNotifications(prev => [newNotification, ...prev]);\r\n      setUnreadCount(prev => prev + 1);\r\n\r\n      // Show toast for high priority notifications\r\n      if (notification.priority === 'high' || notification.priority === 'urgent') {\r\n        toast({\r\n          title: notification.title,\r\n          description: notification.message,\r\n          duration: 5000,\r\n        });\r\n      }\r\n\r\n    } catch (error: any) {\r\n      console.error('Error sending notification:', error);\r\n    }\r\n  };\r\n\r\n  const getNotificationsByType = (type: UserNotification['type']) => {\r\n    return notifications.filter(n => n.type === type);\r\n  };\r\n\r\n  const getNotificationsByPriority = (priority: UserNotification['priority']) => {\r\n    return notifications.filter(n => n.priority === priority);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchNotifications();\r\n    fetchNotificationSettings();\r\n\r\n    // Set up real-time notification subscription\r\n    const subscription = supabase\r\n      .channel('user-notifications')\r\n      .on('postgres_changes', \r\n        { \r\n          event: '*', \r\n          schema: 'public', \r\n          table: 'user_notifications',\r\n          filter: dealerId ? `dealer_id=eq.${dealerId}` : undefined\r\n        }, \r\n        (payload) => {\r\n          console.log('Notification update:', payload);\r\n          fetchNotifications();\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      subscription.unsubscribe();\r\n    };\r\n  }, [dealerId, fetchNotifications, fetchNotificationSettings]);\r\n\r\n  return {\r\n    notifications,\r\n    settings,\r\n    loading,\r\n    unreadCount,\r\n    fetchNotifications,\r\n    markAsRead,\r\n    markAllAsRead,\r\n    deleteNotification,\r\n    updateNotificationSettings,\r\n    sendNotification,\r\n    getNotificationsByType,\r\n    getNotificationsByPriority\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useUserPresence.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":402,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13123,13126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13123,13126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\n\r\nexport type PresenceStatus = 'online' | 'away' | 'busy' | 'offline' | 'invisible';\r\n\r\nexport interface UserPresence {\r\n  user_id: string;\r\n  dealer_id: number;\r\n  status: PresenceStatus;\r\n  custom_status?: string;\r\n  status_emoji?: string;\r\n  last_seen_at: string;\r\n  last_activity_at: string;\r\n  is_mobile: boolean;\r\n  auto_away_minutes: number;\r\n  \r\n  // Computed fields\r\n  user_name?: string;\r\n  user_avatar?: string;\r\n  is_online?: boolean;\r\n  last_seen_formatted?: string;\r\n}\r\n\r\ninterface UseUserPresenceReturn {\r\n  // Current user presence\r\n  myPresence: UserPresence | null;\r\n  \r\n  // Other users presence in the dealer\r\n  usersPresence: UserPresence[];\r\n  \r\n  // Actions for current user\r\n  setStatus: (status: PresenceStatus) => Promise<void>;\r\n  setCustomStatus: (message: string, emoji?: string) => Promise<void>;\r\n  clearCustomStatus: () => Promise<void>;\r\n  setAutoAwayMinutes: (minutes: number) => Promise<void>;\r\n  \r\n  // Utilities\r\n  getUserPresence: (userId: string) => UserPresence | undefined;\r\n  getOnlineUsers: () => UserPresence[];\r\n  isUserOnline: (userId: string) => boolean;\r\n  \r\n  // Real-time heartbeat\r\n  updateActivity: () => void;\r\n  \r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport const useUserPresence = (dealerId?: number): UseUserPresenceReturn => {\r\n  const { t } = useTranslation();\r\n  const { user } = useAuth();\r\n  const { dealerships } = useAccessibleDealerships();\r\n  \r\n  const [myPresence, setMyPresence] = useState<UserPresence | null>(null);\r\n  const [usersPresence, setUsersPresence] = useState<UserPresence[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const heartbeatIntervalRef = useRef<NodeJS.Timeout>();\r\n  const awayTimeoutRef = useRef<NodeJS.Timeout>();\r\n  const lastActivityRef = useRef<Date>(new Date());\r\n  \r\n  const activeDealerId = dealerId || dealerships[0]?.id;\r\n\r\n  // Start heartbeat to maintain online status\r\n  const startHeartbeat = useCallback(() => {\r\n    if (heartbeatIntervalRef.current) {\r\n      clearInterval(heartbeatIntervalRef.current);\r\n    }\r\n\r\n    heartbeatIntervalRef.current = setInterval(async () => {\r\n      if (!user?.id || !activeDealerId) return;\r\n\r\n      try {\r\n        await supabase\r\n          .from('user_presence')\r\n          .update({\r\n            last_activity_at: new Date().toISOString()\r\n          })\r\n          .eq('user_id', user.id)\r\n          .eq('dealer_id', activeDealerId);\r\n      } catch (err) {\r\n        console.error('Heartbeat error:', err);\r\n      }\r\n    }, 30000); // Update every 30 seconds\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Stop heartbeat\r\n  const stopHeartbeat = useCallback(() => {\r\n    if (heartbeatIntervalRef.current) {\r\n      clearInterval(heartbeatIntervalRef.current);\r\n      heartbeatIntervalRef.current = undefined;\r\n    }\r\n  }, []);\r\n\r\n  // Initialize user presence\r\n  const initializePresence = useCallback(async () => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      setError(null);\r\n\r\n      // Get or create user presence record\r\n      const { data: existingPresence, error: fetchError } = await supabase\r\n        .from('user_presence')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId)\r\n        .single();\r\n\r\n      let presence: UserPresence;\r\n\r\n      if (fetchError && fetchError.code === 'PGRST116') {\r\n        // Create new presence record\r\n        const { data: newPresence, error: createError } = await supabase\r\n          .from('user_presence')\r\n          .insert({\r\n            user_id: user.id,\r\n            dealer_id: activeDealerId,\r\n            status: 'online',\r\n            last_seen_at: new Date().toISOString(),\r\n            last_activity_at: new Date().toISOString(),\r\n            is_mobile: /Mobile|Android|iPhone|iPad/.test(navigator.userAgent),\r\n            user_agent: navigator.userAgent,\r\n            ip_address: null, // Will be set by database trigger if needed\r\n            auto_away_minutes: 15\r\n          })\r\n          .select()\r\n          .single();\r\n\r\n        if (createError) throw createError;\r\n        presence = newPresence;\r\n      } else if (fetchError) {\r\n        throw fetchError;\r\n      } else {\r\n        // Update existing presence to online\r\n        const { data: updatedPresence, error: updateError } = await supabase\r\n          .from('user_presence')\r\n          .update({\r\n            status: 'online',\r\n            last_seen_at: new Date().toISOString(),\r\n            last_activity_at: new Date().toISOString(),\r\n            is_mobile: /Mobile|Android|iPhone|iPad/.test(navigator.userAgent),\r\n            user_agent: navigator.userAgent\r\n          })\r\n          .eq('user_id', user.id)\r\n          .eq('dealer_id', activeDealerId)\r\n          .select()\r\n          .single();\r\n\r\n        if (updateError) throw updateError;\r\n        presence = updatedPresence;\r\n      }\r\n\r\n      setMyPresence(presence);\r\n      \r\n      // Start heartbeat\r\n      startHeartbeat();\r\n      \r\n    } catch (err) {\r\n      console.error('Error initializing presence:', err);\r\n      setError(err instanceof Error ? err.message : t('user_presence.error_initializing'));\r\n    }\r\n  }, [user?.id, activeDealerId, startHeartbeat, t]);\r\n\r\n  // Fetch all users presence in the dealer\r\n  const fetchUsersPresence = useCallback(async () => {\r\n    if (!activeDealerId) return;\r\n\r\n    try {\r\n      // Simplified presence data query for now\r\n      const { data, error: fetchError } = await supabase\r\n        .from('user_presence')\r\n        .select('*')\r\n        .eq('dealer_id', activeDealerId)\r\n        .neq('user_id', user?.id || '');\r\n\r\n      if (fetchError) throw fetchError;\r\n\r\n      // Simplified user presence data for now\r\n      const processedPresence: UserPresence[] = data?.map(presence => ({\r\n        ...presence,\r\n        user_name: t('user_presence.default_user_name'),\r\n        user_avatar: undefined,\r\n        is_online: ['online', 'busy'].includes(presence.status),\r\n        last_seen_formatted: formatLastSeen(presence.last_seen_at)\r\n      })) || [];\r\n\r\n      setUsersPresence(processedPresence);\r\n    } catch (err) {\r\n      console.error('Error fetching users presence:', err);\r\n      setError(err instanceof Error ? err.message : t('user_presence.error_fetching_users'));\r\n    }\r\n  }, [activeDealerId, user?.id, t]);\r\n\r\n  // Set user status\r\n  const setStatus = useCallback(async (status: PresenceStatus) => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_presence')\r\n        .update({\r\n          status,\r\n          last_activity_at: new Date().toISOString()\r\n        })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setMyPresence(data);\r\n    } catch (err) {\r\n      console.error('Error setting status:', err);\r\n      setError(err instanceof Error ? err.message : t('user_presence.error_setting_status'));\r\n    }\r\n  }, [user?.id, activeDealerId, t]);\r\n\r\n  // Set custom status message\r\n  const setCustomStatus = useCallback(async (message: string, emoji?: string) => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_presence')\r\n        .update({\r\n          custom_status: message,\r\n          status_emoji: emoji,\r\n          last_activity_at: new Date().toISOString()\r\n        })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setMyPresence(data);\r\n    } catch (err) {\r\n      console.error('Error setting custom status:', err);\r\n      setError(err instanceof Error ? err.message : t('user_presence.error_custom_status'));\r\n    }\r\n  }, [user?.id, activeDealerId, t]);\r\n\r\n  // Clear custom status\r\n  const clearCustomStatus = useCallback(async () => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_presence')\r\n        .update({\r\n          custom_status: null,\r\n          status_emoji: null,\r\n          last_activity_at: new Date().toISOString()\r\n        })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setMyPresence(data);\r\n    } catch (err) {\r\n      console.error('Error clearing custom status:', err);\r\n      setError(err instanceof Error ? err.message : 'Error clearing custom status');\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Set auto-away minutes\r\n  const setAutoAwayMinutes = useCallback(async (minutes: number) => {\r\n    if (!user?.id || !activeDealerId) return;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_presence')\r\n        .update({ auto_away_minutes: minutes })\r\n        .eq('user_id', user.id)\r\n        .eq('dealer_id', activeDealerId)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      setMyPresence(data);\r\n    } catch (err) {\r\n      console.error('Error setting auto-away minutes:', err);\r\n      setError(err instanceof Error ? err.message : 'Error setting auto-away minutes');\r\n    }\r\n  }, [user?.id, activeDealerId]);\r\n\r\n  // Update activity timestamp\r\n  const updateActivity = useCallback(() => {\r\n    lastActivityRef.current = new Date();\r\n    \r\n    // Clear existing away timeout\r\n    if (awayTimeoutRef.current) {\r\n      clearTimeout(awayTimeoutRef.current);\r\n    }\r\n\r\n    // Set new away timeout based on user's auto_away_minutes\r\n    if (myPresence?.status === 'online' && myPresence.auto_away_minutes > 0) {\r\n      awayTimeoutRef.current = setTimeout(() => {\r\n        setStatus('away');\r\n      }, myPresence.auto_away_minutes * 60 * 1000);\r\n    }\r\n  }, [myPresence?.status, myPresence?.auto_away_minutes, setStatus]);\r\n\r\n  // Utility functions\r\n  const getUserPresence = useCallback((userId: string) => {\r\n    return usersPresence.find(p => p.user_id === userId);\r\n  }, [usersPresence]);\r\n\r\n  const getOnlineUsers = useCallback(() => {\r\n    return usersPresence.filter(p => p.is_online);\r\n  }, [usersPresence]);\r\n\r\n  const isUserOnline = useCallback((userId: string) => {\r\n    const presence = getUserPresence(userId);\r\n    return presence?.is_online || false;\r\n  }, [getUserPresence]);\r\n\r\n  // Format last seen time\r\n  const formatLastSeen = (lastSeenAt: string): string => {\r\n    const now = new Date();\r\n    const lastSeen = new Date(lastSeenAt);\r\n    const diffInMinutes = Math.floor((now.getTime() - lastSeen.getTime()) / (1000 * 60));\r\n\r\n    if (diffInMinutes < 1) return 'Just now';\r\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\r\n    \r\n    const diffInHours = Math.floor(diffInMinutes / 60);\r\n    if (diffInHours < 24) return `${diffInHours}h ago`;\r\n    \r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}d ago`;\r\n    \r\n    return lastSeen.toLocaleDateString();\r\n  };\r\n\r\n  // Handle page visibility changes\r\n  useEffect(() => {\r\n    const handleVisibilityChange = () => {\r\n      if (document.hidden) {\r\n        // Page is hidden, set to away after delay\r\n        setTimeout(() => {\r\n          if (document.hidden && myPresence?.status === 'online') {\r\n            setStatus('away');\r\n          }\r\n        }, 5000);\r\n      } else {\r\n        // Page is visible, set back to online if was away\r\n        if (myPresence?.status === 'away') {\r\n          setStatus('online');\r\n        }\r\n        updateActivity();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('visibilitychange', handleVisibilityChange);\r\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\r\n  }, [myPresence?.status, setStatus, updateActivity]);\r\n\r\n  // Handle user activity events\r\n  useEffect(() => {\r\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\r\n    \r\n    const handleActivity = () => {\r\n      updateActivity();\r\n    };\r\n\r\n    events.forEach(event => {\r\n      document.addEventListener(event, handleActivity, true);\r\n    });\r\n\r\n    return () => {\r\n      events.forEach(event => {\r\n        document.removeEventListener(event, handleActivity, true);\r\n      });\r\n    };\r\n  }, [updateActivity]);\r\n\r\n  // Real-time subscriptions\r\n  useEffect(() => {\r\n    if (!activeDealerId) return;\r\n\r\n    // Subscribe to presence changes in the dealer\r\n    const presenceChannel = supabase\r\n      .channel(`presence:${activeDealerId}`)\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'user_presence',\r\n          filter: `dealer_id=eq.${activeDealerId}`\r\n        },\r\n        (payload) => {\r\n          if (payload.new) {\r\n            const newData = payload.new as any;\r\n            if (newData.user_id === user?.id) {\r\n              setMyPresence(newData as UserPresence);\r\n            } else {\r\n              fetchUsersPresence();\r\n            }\r\n          }\r\n        }\r\n      )\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(presenceChannel);\r\n    };\r\n  }, [activeDealerId, user?.id, fetchUsersPresence]);\r\n\r\n  // Cleanup on page unload\r\n  useEffect(() => {\r\n    const handleBeforeUnload = async () => {\r\n      if (user?.id && activeDealerId) {\r\n        await supabase\r\n          .from('user_presence')\r\n          .update({\r\n            status: 'offline',\r\n            last_seen_at: new Date().toISOString()\r\n          })\r\n          .eq('user_id', user.id)\r\n          .eq('dealer_id', activeDealerId);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('beforeunload', handleBeforeUnload);\r\n    return () => {\r\n      window.removeEventListener('beforeunload', handleBeforeUnload);\r\n      stopHeartbeat();\r\n      if (awayTimeoutRef.current) {\r\n        clearTimeout(awayTimeoutRef.current);\r\n      }\r\n    };\r\n  }, [user?.id, activeDealerId, stopHeartbeat]);\r\n\r\n  // Initialize presence on mount\r\n  useEffect(() => {\r\n    if (user?.id && activeDealerId) {\r\n      setLoading(true);\r\n      Promise.all([\r\n        initializePresence(),\r\n        fetchUsersPresence()\r\n      ]).finally(() => setLoading(false));\r\n    }\r\n  }, [user?.id, activeDealerId, initializePresence, fetchUsersPresence]);\r\n\r\n  return {\r\n    myPresence,\r\n    usersPresence,\r\n    setStatus,\r\n    setCustomStatus,\r\n    clearCustomStatus,\r\n    setAutoAwayMinutes,\r\n    getUserPresence,\r\n    getOnlineUsers,\r\n    isUserOnline,\r\n    updateActivity,\r\n    loading,\r\n    error\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useUserProfile.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":90,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2569,2572],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2569,2572],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3773,3776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3773,3776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5050,5053],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5050,5053],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":219,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6118,6121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6118,6121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport interface UserPreferences {\r\n  id?: string;\r\n  user_id: string;\r\n  timezone: string;\r\n  phone?: string;\r\n  bio?: string;\r\n  avatar_url?: string;\r\n  job_title?: string;\r\n  department?: string;\r\n  notification_email: boolean;\r\n  notification_sms: boolean;\r\n  notification_push: boolean;\r\n  notification_in_app: boolean;\r\n  notification_frequency: string;\r\n  quiet_hours_start?: string;\r\n  quiet_hours_end?: string;\r\n  language_preference: string;\r\n  date_format: string;\r\n  time_format: string;\r\n}\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  email: string;\r\n  first_name?: string;\r\n  last_name?: string;\r\n  role?: string;\r\n  dealership_id?: number;\r\n  preferences?: UserPreferences;\r\n}\r\n\r\nexport const useUserProfile = () => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [profile, setProfile] = useState<UserProfile | null>(null);\r\n  const [preferences, setPreferences] = useState<UserPreferences | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchProfile = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) throw new Error('No authenticated user');\r\n\r\n      // Get profile data\r\n      const { data: profileData, error: profileError } = await supabase\r\n        .from('profiles')\r\n        .select('*')\r\n        .eq('id', user.id)\r\n        .single();\r\n\r\n      if (profileError) throw profileError;\r\n\r\n      // Get preferences\r\n      const { data: preferencesData, error: preferencesError } = await supabase\r\n        .from('user_preferences')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .single();\r\n\r\n      if (preferencesError && preferencesError.code !== 'PGRST116') {\r\n        throw preferencesError;\r\n      }\r\n\r\n      setProfile({\r\n        id: user.id,\r\n        email: user.email || '',\r\n        ...profileData\r\n      });\r\n\r\n      setPreferences(preferencesData || {\r\n        user_id: user.id,\r\n        timezone: 'America/New_York',\r\n        notification_email: true,\r\n        notification_sms: false,\r\n        notification_push: true,\r\n        notification_in_app: true,\r\n        notification_frequency: 'immediate',\r\n        language_preference: 'en',\r\n        date_format: 'MM/dd/yyyy',\r\n        time_format: '12h'\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching profile:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error loading profile',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [t, toast]);\r\n\r\n  const updateProfile = async (updates: Partial<UserProfile>) => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) throw new Error('No authenticated user');\r\n\r\n      const { error } = await supabase\r\n        .from('profiles')\r\n        .update(updates)\r\n        .eq('id', user.id);\r\n\r\n      if (error) throw error;\r\n\r\n      setProfile(prev => prev ? { ...prev, ...updates } : null);\r\n\r\n      // Log activity\r\n      await supabase\r\n        .from('user_activity_log')\r\n        .insert({\r\n          user_id: user.id,\r\n          action_type: 'profile_updated',\r\n          action_description: 'Profile information updated',\r\n          details: { updated_fields: Object.keys(updates) }\r\n        });\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('profile.profile_updated'),\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error updating profile:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error updating profile',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const updatePreferences = async (updates: Partial<UserPreferences>) => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) throw new Error('No authenticated user');\r\n\r\n      const { error } = await supabase\r\n        .from('user_preferences')\r\n        .upsert({\r\n          user_id: user.id,\r\n          ...preferences,\r\n          ...updates\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      setPreferences(prev => prev ? { ...prev, ...updates } : null);\r\n\r\n      // Log activity\r\n      await supabase\r\n        .from('user_activity_log')\r\n        .insert({\r\n          user_id: user.id,\r\n          action_type: 'preferences_updated',\r\n          action_description: 'User preferences updated',\r\n          details: { updated_preferences: Object.keys(updates) }\r\n        });\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('profile.preferences_updated'),\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error updating preferences:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error updating preferences',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const changePassword = async (currentPassword: string, newPassword: string) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const { error } = await supabase.auth.updateUser({\r\n        password: newPassword\r\n      });\r\n\r\n      if (error) throw error;\r\n\r\n      // Log activity\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      if (user) {\r\n        await supabase\r\n          .from('user_activity_log')\r\n          .insert({\r\n            user_id: user.id,\r\n            action_type: 'password_changed',\r\n            action_description: 'Password changed successfully'\r\n          });\r\n      }\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('profile.password_changed'),\r\n      });\r\n\r\n      return true;\r\n    } catch (error: any) {\r\n      console.error('Error changing password:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error changing password',\r\n        variant: 'destructive',\r\n      });\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchProfile();\r\n  }, [fetchProfile]);\r\n\r\n  return {\r\n    profile,\r\n    preferences,\r\n    loading,\r\n    updateProfile,\r\n    updatePreferences,\r\n    changePassword,\r\n    refetch: fetchProfile\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useUserSessions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[377,380],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[377,380],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":42,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1203,1206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1203,1206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2436,2439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2436,2439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":129,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3616,3619],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3616,3619],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useToast } from '@/hooks/use-toast';\r\n\r\nexport interface UserSession {\r\n  id: string;\r\n  user_id: string;\r\n  session_token: string;\r\n  ip_address?: unknown;\r\n  user_agent?: string;\r\n  location_info?: any;\r\n  last_activity: string;\r\n  expires_at?: string;\r\n  is_current: boolean;\r\n  created_at: string;\r\n}\r\n\r\nexport const useUserSessions = () => {\r\n  const { t } = useTranslation();\r\n  const { toast } = useToast();\r\n  const [sessions, setSessions] = useState<UserSession[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const fetchSessions = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n\r\n      if (!user) throw new Error('No authenticated user');\r\n\r\n      const { data, error } = await supabase\r\n        .from('user_sessions')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .order('last_activity', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      setSessions(data || []);\r\n\r\n    } catch (error: any) {\r\n      console.error('Error fetching sessions:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error loading sessions',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [t, toast]);\r\n\r\n  const terminateSession = async (sessionId: string) => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) throw new Error('No authenticated user');\r\n\r\n      const { error } = await supabase\r\n        .from('user_sessions')\r\n        .delete()\r\n        .eq('id', sessionId)\r\n        .eq('user_id', user.id);\r\n\r\n      if (error) throw error;\r\n\r\n      setSessions(prev => prev.filter(session => session.id !== sessionId));\r\n\r\n      // Log activity\r\n      await supabase\r\n        .from('user_activity_log')\r\n        .insert({\r\n          user_id: user.id,\r\n          action_type: 'session_terminated',\r\n          action_description: 'Session terminated manually',\r\n          details: { session_id: sessionId }\r\n        });\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('profile.session_terminated'),\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error terminating session:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error terminating session',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const terminateAllOtherSessions = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data: { user } } = await supabase.auth.getUser();\r\n      \r\n      if (!user) throw new Error('No authenticated user');\r\n\r\n      const { error } = await supabase\r\n        .from('user_sessions')\r\n        .delete()\r\n        .eq('user_id', user.id)\r\n        .neq('is_current', true);\r\n\r\n      if (error) throw error;\r\n\r\n      setSessions(prev => prev.filter(session => session.is_current));\r\n\r\n      // Log activity\r\n      await supabase\r\n        .from('user_activity_log')\r\n        .insert({\r\n          user_id: user.id,\r\n          action_type: 'all_sessions_terminated',\r\n          action_description: 'All other sessions terminated'\r\n        });\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('profile.all_sessions_terminated'),\r\n      });\r\n\r\n    } catch (error: any) {\r\n      console.error('Error terminating sessions:', error);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: error.message || 'Error terminating sessions',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, [fetchSessions]);\r\n\r\n  return {\r\n    sessions,\r\n    loading,\r\n    terminateSession,\r\n    terminateAllOtherSessions,\r\n    refetch: fetchSessions\r\n  };\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useVehicleAutoPopulation.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1807,1810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1807,1810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3287,3290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3287,3290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react';\r\nimport { useStockManagement } from '@/hooks/useStockManagement';\r\nimport { useVinDecoding } from '@/hooks/useVinDecoding';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\n\r\nexport interface VehicleSearchResult {\r\n  source: 'inventory' | 'vin_api' | 'manual';\r\n  confidence: 'high' | 'medium' | 'low';\r\n  data: {\r\n    stockNumber?: string;\r\n    vin?: string;\r\n    year?: string | number;\r\n    make?: string;\r\n    model?: string;\r\n    trim?: string;\r\n    vehicleInfo?: string;\r\n    price?: number;\r\n    mileage?: number;\r\n    color?: string;\r\n    // Inventory-specific enrichment\r\n    age_days?: number;\r\n    leads_total?: number;\r\n    market_rank_overall?: number;\r\n    acv_wholesale?: number;\r\n    estimated_profit?: number;\r\n  };\r\n  preview?: {\r\n    title: string;\r\n    subtitle?: string;\r\n    badge?: string;\r\n    badgeVariant?: 'default' | 'secondary' | 'outline' | 'destructive';\r\n  };\r\n}\r\n\r\ninterface UseVehicleAutoPopulationReturn {\r\n  searchVehicle: (query: string) => Promise<VehicleSearchResult[]>;\r\n  searchByStock: (stockNumber: string) => Promise<VehicleSearchResult | null>;\r\n  searchByVin: (vin: string) => Promise<VehicleSearchResult | null>;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nexport function useVehicleAutoPopulation(dealerId?: number): UseVehicleAutoPopulationReturn {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const { dealerships } = useAccessibleDealerships();\r\n  const currentDealerId = dealerId || dealerships[0]?.id;\r\n  \r\n  const { searchInventory, getVehicleByStock, getVehicleByVin } = useStockManagement(currentDealerId);\r\n  const { decodeVin } = useVinDecoding();\r\n\r\n  const createInventoryResult = (vehicle: any): VehicleSearchResult => {\r\n    const title = `${vehicle.year || ''} ${vehicle.make || ''} ${vehicle.model || ''}`.trim();\r\n    const subtitle = vehicle.trim ? `${vehicle.trim} - Stock: ${vehicle.stock_number}` : `Stock: ${vehicle.stock_number}`;\r\n    \r\n    let badge = 'In Stock';\r\n    let badgeVariant: 'default' | 'secondary' | 'outline' | 'destructive' = 'secondary';\r\n    \r\n    if (vehicle.age_days > 60) {\r\n      badge = `${vehicle.age_days} days old`;\r\n      badgeVariant = 'outline';\r\n    } else if (vehicle.leads_total > 5) {\r\n      badge = `${vehicle.leads_total} leads`;\r\n      badgeVariant = 'default';\r\n    }\r\n\r\n    return {\r\n      source: 'inventory',\r\n      confidence: 'high',\r\n      data: {\r\n        stockNumber: vehicle.stock_number,\r\n        vin: vehicle.vin,\r\n        year: vehicle.year,\r\n        make: vehicle.make,\r\n        model: vehicle.model,\r\n        trim: vehicle.trim,\r\n        vehicleInfo: `${title}${vehicle.trim ? ` (${vehicle.trim})` : ''}`,\r\n        price: vehicle.price,\r\n        mileage: vehicle.mileage,\r\n        color: vehicle.color,\r\n        age_days: vehicle.age_days,\r\n        leads_total: vehicle.leads_total,\r\n        market_rank_overall: vehicle.market_rank_overall,\r\n        acv_wholesale: vehicle.acv_wholesale,\r\n        estimated_profit: vehicle.estimated_profit\r\n      },\r\n      preview: {\r\n        title,\r\n        subtitle,\r\n        badge,\r\n        badgeVariant\r\n      }\r\n    };\r\n  };\r\n\r\n  const createVinResult = (vehicleData: any): VehicleSearchResult => {\r\n    const title = `${vehicleData.year} ${vehicleData.make} ${vehicleData.model}`;\r\n    return {\r\n      source: 'vin_api',\r\n      confidence: 'medium',\r\n      data: {\r\n        vin: vehicleData.vin,\r\n        year: vehicleData.year,\r\n        make: vehicleData.make,\r\n        model: vehicleData.model,\r\n        trim: vehicleData.trim,\r\n        vehicleInfo: vehicleData.vehicleInfo\r\n      },\r\n      preview: {\r\n        title,\r\n        subtitle: 'From VIN Decode',\r\n        badge: 'API Data',\r\n        badgeVariant: 'secondary'\r\n      }\r\n    };\r\n  };\r\n\r\n  const searchByStock = useCallback(async (stockNumber: string): Promise<VehicleSearchResult | null> => {\r\n    if (!stockNumber || !currentDealerId) return null;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const vehicle = getVehicleByStock(stockNumber);\r\n      if (vehicle) {\r\n        return createInventoryResult(vehicle);\r\n      }\r\n      return null;\r\n    } catch (err) {\r\n      setError('Error searching by stock number');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentDealerId, getVehicleByStock]);\r\n\r\n  const searchByVin = useCallback(async (vin: string): Promise<VehicleSearchResult | null> => {\r\n    if (!vin || vin.length !== 17) return null;\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // First check local inventory\r\n      if (currentDealerId) {\r\n        const localVehicle = getVehicleByVin(vin);\r\n        if (localVehicle) {\r\n          return createInventoryResult(localVehicle);\r\n        }\r\n      }\r\n      \r\n      // Fallback to VIN API\r\n      const vehicleData = await decodeVin(vin);\r\n      if (vehicleData) {\r\n        return createVinResult({ ...vehicleData, vin });\r\n      }\r\n      \r\n      return null;\r\n    } catch (err) {\r\n      setError('Error searching by VIN');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentDealerId, getVehicleByVin, decodeVin]);\r\n\r\n  const searchVehicle = useCallback(async (query: string): Promise<VehicleSearchResult[]> => {\r\n    if (!query || query.length < 2) return [];\r\n    \r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const results: VehicleSearchResult[] = [];\r\n      \r\n      // Check if it's a VIN (17 characters)\r\n      if (query.length === 17) {\r\n        const vinResult = await searchByVin(query);\r\n        if (vinResult) results.push(vinResult);\r\n        return results;\r\n      }\r\n      \r\n      // Check if it's a stock number first\r\n      if (currentDealerId) {\r\n        const stockResult = await searchByStock(query);\r\n        if (stockResult) {\r\n          results.push(stockResult);\r\n        }\r\n        \r\n        // Search inventory by general query\r\n        const inventoryResults = searchInventory(query);\r\n        inventoryResults.forEach(vehicle => {\r\n          // Avoid duplicates from stock search\r\n          if (!results.some(r => r.data.stockNumber === vehicle.stock_number)) {\r\n            results.push(createInventoryResult(vehicle));\r\n          }\r\n        });\r\n      }\r\n      \r\n      return results.slice(0, 5); // Limit to 5 results\r\n    } catch (err) {\r\n      setError('Error searching vehicles');\r\n      return [];\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentDealerId, searchInventory, searchByStock, searchByVin]);\r\n\r\n  return {\r\n    searchVehicle,\r\n    searchByStock,\r\n    searchByVin,\r\n    loading,\r\n    error\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useVinDecoding.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useVinScanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\hooks\\useWebNFC.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[688,691],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[688,691],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[742,745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[742,745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1173,1176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1173,1176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1894,1897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1894,1897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":130,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3483,3486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3483,3486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":165,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4577,4580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4577,4580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5665,5668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5665,5668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":223,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6384,6387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6384,6387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":247,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7131,7134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7131,7134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\ninterface NFCData {\r\n  tagId: string;\r\n  name?: string;\r\n  type?: string;\r\n  dealerId?: number;\r\n  vehicleVin?: string;\r\n  locationName?: string;\r\n  url?: string;\r\n}\r\n\r\ninterface UseWebNFCReturn {\r\n  isSupported: boolean;\r\n  isWriting: boolean;\r\n  isReading: boolean;\r\n  error: string | null;\r\n  lastRead: NFCData | null;\r\n  writeTag: (data: NFCData) => Promise<boolean>;\r\n  readTag: () => Promise<NFCData | null>;\r\n  startReading: () => void;\r\n  stopReading: () => void;\r\n  requestPermissions: () => Promise<boolean>;\r\n}\r\n\r\ndeclare global {\r\n  interface Navigator {\r\n    nfc?: any;\r\n  }\r\n  \r\n  interface Window {\r\n    NDEFReader?: any;\r\n  }\r\n}\r\n\r\nexport function useWebNFC(): UseWebNFCReturn {\r\n  const { t } = useTranslation();\r\n  const [isSupported, setIsSupported] = useState(false);\r\n  const [isWriting, setIsWriting] = useState(false);\r\n  const [isReading, setIsReading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [lastRead, setLastRead] = useState<NFCData | null>(null);\r\n  const [reader, setReader] = useState<any>(null);\r\n\r\n  // Check NFC support on mount\r\n  useEffect(() => {\r\n    const checkSupport = async () => {\r\n      if ('NDEFReader' in window) {\r\n        try {\r\n          setIsSupported(true);\r\n        } catch (err) {\r\n          console.error('NFC not supported:', err);\r\n          setIsSupported(false);\r\n        }\r\n      } else {\r\n        setIsSupported(false);\r\n      }\r\n    };\r\n\r\n    checkSupport();\r\n  }, []);\r\n\r\n  const requestPermissions = useCallback(async (): Promise<boolean> => {\r\n    if (!isSupported) {\r\n      setError(t('nfc.errors.not_supported'));\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // Request permissions if needed\r\n      const result = await navigator.permissions?.query?.({ name: 'nfc' as any });\r\n      if (result?.state === 'denied') {\r\n        setError(t('nfc.errors.permission_denied'));\r\n        return false;\r\n      }\r\n      \r\n      setError(null);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Permission request failed:', err);\r\n      setError(t('nfc.errors.permission_failed'));\r\n      return false;\r\n    }\r\n  }, [isSupported, t]);\r\n\r\n  const writeTag = useCallback(async (data: NFCData): Promise<boolean> => {\r\n    if (!isSupported) {\r\n      setError(t('nfc.errors.not_supported'));\r\n      return false;\r\n    }\r\n\r\n    const hasPermissions = await requestPermissions();\r\n    if (!hasPermissions) return false;\r\n\r\n    setIsWriting(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const ndef = new window.NDEFReader();\r\n      \r\n      // Create the app URL with tag data\r\n      const appUrl = `${window.location.origin}/qr/${data.tagId}?source=nfc`;\r\n      \r\n      // Prepare NDEF message with multiple records\r\n      const message = {\r\n        records: [\r\n          {\r\n            recordType: \"url\",\r\n            data: appUrl\r\n          },\r\n          {\r\n            recordType: \"text\",\r\n            data: JSON.stringify({\r\n              tagId: data.tagId,\r\n              name: data.name || 'MDA NFC Tag',\r\n              type: data.type || 'general',\r\n              dealerId: data.dealerId,\r\n              timestamp: new Date().toISOString()\r\n            })\r\n          }\r\n        ]\r\n      };\r\n\r\n      await ndef.write(message);\r\n      console.log('NFC tag written successfully:', data);\r\n      setIsWriting(false);\r\n      return true;\r\n\r\n    } catch (err: any) {\r\n      console.error('NFC write failed:', err);\r\n      setError(err.message || t('nfc.errors.write_failed'));\r\n      setIsWriting(false);\r\n      return false;\r\n    }\r\n  }, [isSupported, requestPermissions, t]);\r\n\r\n  const readTag = useCallback(async (): Promise<NFCData | null> => {\r\n    if (!isSupported) {\r\n      setError(t('nfc.errors.not_supported'));\r\n      return null;\r\n    }\r\n\r\n    const hasPermissions = await requestPermissions();\r\n    if (!hasPermissions) return null;\r\n\r\n    setIsReading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const ndef = new window.NDEFReader();\r\n      \r\n      return new Promise((resolve, reject) => {\r\n        const timeout = setTimeout(() => {\r\n          setIsReading(false);\r\n          reject(new Error(t('nfc.errors.read_timeout')));\r\n        }, 10000); // 10 second timeout\r\n\r\n        ndef.addEventListener('readingerror', () => {\r\n          clearTimeout(timeout);\r\n          setIsReading(false);\r\n          reject(new Error(t('nfc.errors.read_failed')));\r\n        });\r\n\r\n        ndef.addEventListener('reading', ({ message, serialNumber }: any) => {\r\n          clearTimeout(timeout);\r\n          setIsReading(false);\r\n\r\n          try {\r\n            let nfcData: NFCData = { tagId: serialNumber };\r\n\r\n            for (const record of message.records) {\r\n              if (record.recordType === 'text') {\r\n                const textDecoder = new TextDecoder(record.encoding);\r\n                const text = textDecoder.decode(record.data);\r\n                try {\r\n                  const parsedData = JSON.parse(text);\r\n                  nfcData = { ...nfcData, ...parsedData };\r\n                } catch {\r\n                  // If not JSON, treat as plain text\r\n                  nfcData.name = text;\r\n                }\r\n              } else if (record.recordType === 'url') {\r\n                const textDecoder = new TextDecoder();\r\n                nfcData.url = textDecoder.decode(record.data);\r\n              }\r\n            }\r\n\r\n            setLastRead(nfcData);\r\n            resolve(nfcData);\r\n          } catch (err) {\r\n            reject(err);\r\n          }\r\n        });\r\n\r\n        ndef.scan();\r\n      });\r\n\r\n    } catch (err: any) {\r\n      console.error('NFC read failed:', err);\r\n      setError(err.message || t('nfc.errors.read_failed'));\r\n      setIsReading(false);\r\n      return null;\r\n    }\r\n  }, [isSupported, requestPermissions, t]);\r\n\r\n  const startReading = useCallback(async () => {\r\n    if (!isSupported) return;\r\n\r\n    const hasPermissions = await requestPermissions();\r\n    if (!hasPermissions) return;\r\n\r\n    try {\r\n      const ndef = new window.NDEFReader();\r\n      setReader(ndef);\r\n      setIsReading(true);\r\n      \r\n      ndef.addEventListener('readingerror', () => {\r\n        setError(t('nfc.errors.read_failed'));\r\n        setIsReading(false);\r\n      });\r\n\r\n      ndef.addEventListener('reading', ({ message, serialNumber }: any) => {\r\n        try {\r\n          let nfcData: NFCData = { tagId: serialNumber };\r\n\r\n          for (const record of message.records) {\r\n            if (record.recordType === 'text') {\r\n              const textDecoder = new TextDecoder(record.encoding);\r\n              const text = textDecoder.decode(record.data);\r\n              try {\r\n                const parsedData = JSON.parse(text);\r\n                nfcData = { ...nfcData, ...parsedData };\r\n              } catch {\r\n                nfcData.name = text;\r\n              }\r\n            }\r\n          }\r\n\r\n          setLastRead(nfcData);\r\n        } catch (err) {\r\n          console.error('Error processing NFC data:', err);\r\n        }\r\n      });\r\n\r\n      await ndef.scan();\r\n    } catch (err: any) {\r\n      console.error('Failed to start NFC reading:', err);\r\n      setError(err.message || t('nfc.errors.scan_failed'));\r\n      setIsReading(false);\r\n    }\r\n  }, [isSupported, requestPermissions, t]);\r\n\r\n  const stopReading = useCallback(() => {\r\n    if (reader) {\r\n      try {\r\n        reader.stop?.();\r\n      } catch (err) {\r\n        console.error('Error stopping NFC reader:', err);\r\n      }\r\n    }\r\n    setReader(null);\r\n    setIsReading(false);\r\n  }, [reader]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      stopReading();\r\n    };\r\n  }, [stopReading]);\r\n\r\n  return {\r\n    isSupported,\r\n    isWriting,\r\n    isReading,\r\n    error,\r\n    lastRead,\r\n    writeTag,\r\n    readTag,\r\n    startReading,\r\n    stopReading,\r\n    requestPermissions\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\integrations\\supabase\\client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\integrations\\supabase\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\lib\\cloudSync.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[483,486],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[483,486],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[976,979],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[976,979],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1345,1348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1345,1348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6978,6981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6978,6981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7389,7392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7389,7392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Enterprise Cloud Sync Service for My Detail Area\r\n * Integrates with Railway memory sync API for cross-device persistence\r\n */\r\nimport { developmentConfig, shouldEnableCloudSync } from '@/config/development';\r\n\r\nexport interface CloudSyncOptions {\r\n  namespace?: string;\r\n  priority?: 'critical' | 'important' | 'normal' | 'low';\r\n  autoSync?: boolean;\r\n  retryAttempts?: number;\r\n  timeout?: number;\r\n}\r\n\r\nexport interface CloudSyncResponse {\r\n  success: boolean;\r\n  data?: any;\r\n  error?: string;\r\n  timestamp?: number;\r\n}\r\n\r\nexport interface SyncStatus {\r\n  lastSync: number;\r\n  lastAttempt: number;\r\n  status: 'synced' | 'pending' | 'error' | 'offline';\r\n  errorCount: number;\r\n  nextRetry?: number;\r\n}\r\n\r\nclass CloudSyncService {\r\n  private baseUrl = developmentConfig.api.baseUrl;\r\n  private defaultNamespace = developmentConfig.storage.namespace;\r\n  private retryDelays = [1000, 3000, 5000, 10000]; // Progressive retry delays\r\n  private syncQueue: Map<string, any> = new Map();\r\n  private syncStatus: Map<string, SyncStatus> = new Map();\r\n  private isOnline = navigator.onLine;\r\n  private cloudSyncEnabled = shouldEnableCloudSync();\r\n\r\n  constructor() {\r\n    this.setupNetworkListeners();\r\n    this.startBackgroundSync();\r\n  }\r\n\r\n  /**\r\n   * Sync critical data to cloud immediately\r\n   */\r\n  async syncToCloud(key: string, data: any, options: CloudSyncOptions = {}): Promise<CloudSyncResponse> {\r\n    // Skip cloud sync - disabled globally for stability\r\n    if (!this.cloudSyncEnabled) {\r\n      // Silently fail without console noise\r\n      return { success: false, error: 'Cloud sync disabled' };\r\n    }\r\n\r\n    const {\r\n      namespace = this.defaultNamespace,\r\n      priority = 'normal',\r\n      autoSync = true,\r\n      retryAttempts = developmentConfig.cloudSync.retryAttempts,\r\n      timeout = developmentConfig.api.timeout\r\n    } = options;\r\n\r\n    if (!this.isOnline) {\r\n      this.queueForLaterSync(key, data, options);\r\n      return { success: false, error: 'Offline - queued for sync' };\r\n    }\r\n\r\n    try {\r\n      const response = await Promise.race([\r\n        fetch(`${this.baseUrl}/api/memory/store`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            memory_key: key,\r\n            memory_value: JSON.stringify(data),\r\n            namespace: namespace,\r\n            priority: priority,\r\n            timestamp: Date.now()\r\n          })\r\n        }),\r\n        new Promise<never>((_, reject) => \r\n          setTimeout(() => reject(new Error('Request timeout')), timeout)\r\n        )\r\n      ]);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      this.updateSyncStatus(key, 'synced');\r\n      console.log(`☁️ Synced to cloud: ${key} (${priority})`);\r\n      \r\n      return { \r\n        success: true, \r\n        data: result,\r\n        timestamp: Date.now()\r\n      };\r\n\r\n    } catch (error) {\r\n      if (developmentConfig.cloudSync.showWarnings) {\r\n        console.error(`❌ Cloud sync failed for ${key}:`, error);\r\n      }\r\n      \r\n      if (retryAttempts > 0) {\r\n        return this.retrySync(key, data, { ...options, retryAttempts: retryAttempts - 1 });\r\n      }\r\n\r\n      this.updateSyncStatus(key, 'error');\r\n      this.queueForLaterSync(key, data, options);\r\n      \r\n      return { \r\n        success: false, \r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore data from cloud\r\n   */\r\n  async restoreFromCloud(key: string, options: CloudSyncOptions = {}): Promise<CloudSyncResponse> {\r\n    // Skip cloud sync - disabled globally for stability\r\n    if (!this.cloudSyncEnabled) {\r\n      // Silently fail without console noise\r\n      return { success: false, error: 'Cloud restore disabled' };\r\n    }\r\n\r\n    const {\r\n      namespace = this.defaultNamespace,\r\n      timeout = developmentConfig.api.timeout\r\n    } = options;\r\n\r\n    if (!this.isOnline) {\r\n      return { success: false, error: 'Offline - cannot restore from cloud' };\r\n    }\r\n\r\n    try {\r\n      const response = await Promise.race([\r\n        fetch(`${this.baseUrl}/api/memory/retrieve/${encodeURIComponent(key)}?namespace=${encodeURIComponent(namespace)}`),\r\n        new Promise<never>((_, reject) => \r\n          setTimeout(() => reject(new Error('Request timeout')), timeout)\r\n        )\r\n      ]);\r\n\r\n      if (!response.ok) {\r\n        if (response.status === 404) {\r\n          return { success: false, error: 'Data not found in cloud' };\r\n        }\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      if (result.memory_value) {\r\n        const data = JSON.parse(result.memory_value);\r\n        console.log(`☁️ Restored from cloud: ${key}`);\r\n        \r\n        return { \r\n          success: true, \r\n          data: data,\r\n          timestamp: result.timestamp || Date.now()\r\n        };\r\n      }\r\n\r\n      return { success: false, error: 'No data found' };\r\n\r\n    } catch (error) {\r\n      console.error(`❌ Cloud restore failed for ${key}:`, error);\r\n      return { \r\n        success: false, \r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup cloud sync for enterprise features\r\n   */\r\n  async setupCloudSync(): Promise<boolean> {\r\n    try {\r\n      // Health check\r\n      const response = await fetch(`${this.baseUrl}/api/health`);\r\n      if (!response.ok) {\r\n        throw new Error('Cloud sync service unavailable');\r\n      }\r\n\r\n      console.log('☁️ Cloud sync service connected');\r\n      \r\n      // Sync any queued items\r\n      await this.processQueuedSyncs();\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Cloud sync setup failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get sync status for a key\r\n   */\r\n  getSyncStatus(key: string): SyncStatus | null {\r\n    return this.syncStatus.get(key) || null;\r\n  }\r\n\r\n  /**\r\n   * Get all sync statuses\r\n   */\r\n  getAllSyncStatuses(): Map<string, SyncStatus> {\r\n    return new Map(this.syncStatus);\r\n  }\r\n\r\n  /**\r\n   * Force sync all queued items\r\n   */\r\n  async forceSyncAll(): Promise<void> {\r\n    if (!this.isOnline) {\r\n      console.warn('Cannot force sync - offline');\r\n      return;\r\n    }\r\n\r\n    const syncPromises = Array.from(this.syncQueue.entries()).map(([key, item]) =>\r\n      this.syncToCloud(key, item.data, item.options)\r\n    );\r\n\r\n    await Promise.allSettled(syncPromises);\r\n    this.syncQueue.clear();\r\n  }\r\n\r\n  /**\r\n   * Clear sync queue\r\n   */\r\n  clearSyncQueue(): void {\r\n    this.syncQueue.clear();\r\n    console.log('🧹 Sync queue cleared');\r\n  }\r\n\r\n  /**\r\n   * Get network status\r\n   */\r\n  isNetworkOnline(): boolean {\r\n    return this.isOnline;\r\n  }\r\n\r\n  // Private methods\r\n\r\n  private async retrySync(key: string, data: any, options: CloudSyncOptions): Promise<CloudSyncResponse> {\r\n    const delay = this.retryDelays[3 - (options.retryAttempts || 0)] || 1000;\r\n    \r\n    await new Promise(resolve => setTimeout(resolve, delay));\r\n    \r\n    console.log(`🔄 Retrying sync for ${key} (${options.retryAttempts} attempts left)`);\r\n    return this.syncToCloud(key, data, options);\r\n  }\r\n\r\n  private queueForLaterSync(key: string, data: any, options: CloudSyncOptions): void {\r\n    this.syncQueue.set(key, { data, options, timestamp: Date.now() });\r\n    this.updateSyncStatus(key, 'pending');\r\n    console.log(`📋 Queued for sync: ${key}`);\r\n  }\r\n\r\n  private updateSyncStatus(key: string, status: SyncStatus['status']): void {\r\n    const current = this.syncStatus.get(key) || {\r\n      lastSync: 0,\r\n      lastAttempt: 0,\r\n      status: 'pending',\r\n      errorCount: 0\r\n    };\r\n\r\n    this.syncStatus.set(key, {\r\n      ...current,\r\n      status,\r\n      lastAttempt: Date.now(),\r\n      ...(status === 'synced' && { lastSync: Date.now(), errorCount: 0 }),\r\n      ...(status === 'error' && { errorCount: current.errorCount + 1 })\r\n    });\r\n  }\r\n\r\n  private setupNetworkListeners(): void {\r\n    window.addEventListener('online', () => {\r\n      this.isOnline = true;\r\n      console.log('🌐 Back online - processing queued syncs');\r\n      this.processQueuedSyncs();\r\n    });\r\n\r\n    window.addEventListener('offline', () => {\r\n      this.isOnline = false;\r\n      console.log('📴 Gone offline - queueing syncs');\r\n    });\r\n  }\r\n\r\n  private async processQueuedSyncs(): Promise<void> {\r\n    if (!this.isOnline || this.syncQueue.size === 0) return;\r\n\r\n    console.log(`📤 Processing ${this.syncQueue.size} queued syncs`);\r\n    \r\n    // Process critical items first\r\n    const sortedEntries = Array.from(this.syncQueue.entries()).sort(([, a], [, b]) => {\r\n      const priorityOrder = { critical: 0, important: 1, normal: 2, low: 3 };\r\n      const aPriority = priorityOrder[a.options.priority || 'normal'];\r\n      const bPriority = priorityOrder[b.options.priority || 'normal'];\r\n      return aPriority - bPriority;\r\n    });\r\n\r\n    for (const [key, item] of sortedEntries) {\r\n      try {\r\n        await this.syncToCloud(key, item.data, item.options);\r\n        this.syncQueue.delete(key);\r\n      } catch (error) {\r\n        console.error(`Failed to sync queued item ${key}:`, error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private startBackgroundSync(): void {\r\n    // Periodic sync every 5 minutes for queued items\r\n    setInterval(() => {\r\n      if (this.isOnline && this.syncQueue.size > 0) {\r\n        this.processQueuedSyncs();\r\n      }\r\n    }, 5 * 60 * 1000);\r\n\r\n    // Cleanup old sync statuses every hour\r\n    setInterval(() => {\r\n      const cutoff = Date.now() - 24 * 60 * 60 * 1000; // 24 hours\r\n      for (const [key, status] of this.syncStatus.entries()) {\r\n        if (status.lastAttempt < cutoff) {\r\n          this.syncStatus.delete(key);\r\n        }\r\n      }\r\n    }, 60 * 60 * 1000);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const cloudSync = new CloudSyncService();\r\n\r\n/**\r\n * Selective sync configuration for different data types\r\n */\r\nexport const SYNC_CONFIG = {\r\n  // Critical user workflow state - always sync\r\n  critical: {\r\n    tabPersistence: {\r\n      priority: 'critical' as const,\r\n      autoSync: true,\r\n      namespace: 'mda-tabs'\r\n    },\r\n    userPreferences: {\r\n      priority: 'critical' as const,\r\n      autoSync: true,\r\n      namespace: 'mda-preferences'\r\n    },\r\n    themeSettings: {\r\n      priority: 'important' as const,\r\n      autoSync: true,\r\n      namespace: 'mda-themes'\r\n    }\r\n  },\r\n  // Important but not critical\r\n  important: {\r\n    searchHistory: {\r\n      priority: 'important' as const,\r\n      autoSync: true,\r\n      namespace: 'mda-search'\r\n    },\r\n    viewModes: {\r\n      priority: 'important' as const,\r\n      autoSync: true,\r\n      namespace: 'mda-views'\r\n    }\r\n  },\r\n  // Optional user data\r\n  optional: {\r\n    scannerHistory: {\r\n      priority: 'normal' as const,\r\n      autoSync: false, // User controlled\r\n      namespace: 'mda-scanner'\r\n    },\r\n    temporaryFilters: {\r\n      priority: 'low' as const,\r\n      autoSync: false,\r\n      namespace: 'mda-temp'\r\n    }\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Helper function to get sync config for a data type\r\n */\r\nexport function getSyncConfig(dataType: string): CloudSyncOptions {\r\n  // Flatten config and find matching data type\r\n  for (const category of Object.values(SYNC_CONFIG)) {\r\n    for (const [key, config] of Object.entries(category)) {\r\n      if (key === dataType) {\r\n        return config;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Default config for unknown data types\r\n  return {\r\n    priority: 'normal',\r\n    autoSync: false,\r\n    namespace: 'mda-default'\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\lib\\errorHandling.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":412,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":412,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11482,11485],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11482,11485],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":427,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":427,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11789,11792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11789,11792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-catch","severity":2,"message":"Unnecessary try/catch wrapper.","line":435,"column":5,"nodeType":"TryStatement","messageId":"unnecessaryCatch","endLine":440,"endColumn":6}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Enterprise Error Handling and Fallback Mechanisms for Cloud Sync\r\n */\r\n\r\nimport { toast } from 'sonner';\r\n\r\nexport interface ErrorContext {\r\n  operation: string;\r\n  key?: string;\r\n  timestamp: number;\r\n  userAgent: string;\r\n  url: string;\r\n  userId?: string;\r\n}\r\n\r\nexport interface FallbackStrategy {\r\n  retryAttempts: number;\r\n  retryDelay: number;\r\n  useLocalStorage: boolean;\r\n  showUserNotification: boolean;\r\n  gracefulDegradation: boolean;\r\n}\r\n\r\nexport interface ErrorRecoveryOptions {\r\n  maxRetries?: number;\r\n  baseDelay?: number;\r\n  maxDelay?: number;\r\n  exponentialBackoff?: boolean;\r\n  showToast?: boolean;\r\n  fallbackToLocal?: boolean;\r\n}\r\n\r\nclass ErrorHandlingService {\r\n  private errorLog: Array<{\r\n    error: Error;\r\n    context: ErrorContext;\r\n    timestamp: number;\r\n    recovered: boolean;\r\n  }> = [];\r\n  \r\n  private readonly MAX_ERROR_LOG_SIZE = 100;\r\n  private readonly DEFAULT_RETRY_DELAY = 1000;\r\n  private readonly MAX_RETRY_DELAY = 30000;\r\n\r\n  /**\r\n   * Enhanced error handler with context and recovery strategies\r\n   */\r\n  async handleError(\r\n    error: Error,\r\n    context: ErrorContext,\r\n    recoveryOptions: ErrorRecoveryOptions = {}\r\n  ): Promise<boolean> {\r\n    const {\r\n      maxRetries = 3,\r\n      baseDelay = this.DEFAULT_RETRY_DELAY,\r\n      maxDelay = this.MAX_RETRY_DELAY,\r\n      exponentialBackoff = true,\r\n      showToast = true,\r\n      fallbackToLocal = true\r\n    } = recoveryOptions;\r\n\r\n    // Log the error\r\n    this.logError(error, context);\r\n\r\n    // Analyze error type and determine recovery strategy\r\n    const strategy = this.determineRecoveryStrategy(error, context);\r\n    \r\n    console.error(`❌ Error in ${context.operation}:`, {\r\n      error: error.message,\r\n      context,\r\n      strategy\r\n    });\r\n\r\n    // Show user notification if appropriate\r\n    if (showToast && strategy.showUserNotification) {\r\n      this.showErrorToast(error, context, strategy);\r\n    }\r\n\r\n    // Attempt recovery\r\n    let recovered = false;\r\n    \r\n    if (strategy.retryAttempts > 0) {\r\n      recovered = await this.attemptRecovery(\r\n        error,\r\n        context,\r\n        maxRetries,\r\n        baseDelay,\r\n        exponentialBackoff\r\n      );\r\n    }\r\n\r\n    // Fallback to localStorage if cloud sync failed\r\n    if (!recovered && strategy.useLocalStorage && fallbackToLocal) {\r\n      recovered = this.fallbackToLocalStorage(context);\r\n    }\r\n\r\n    // Apply graceful degradation if needed\r\n    if (!recovered && strategy.gracefulDegradation) {\r\n      this.applyGracefulDegradation(context);\r\n      recovered = true; // Consider degraded mode as \"recovered\"\r\n    }\r\n\r\n    // Update error log with recovery status\r\n    this.updateErrorRecoveryStatus(error, context, recovered);\r\n\r\n    return recovered;\r\n  }\r\n\r\n  /**\r\n   * Retry mechanism with exponential backoff\r\n   */\r\n  async withRetry<T>(\r\n    operation: () => Promise<T>,\r\n    context: ErrorContext,\r\n    options: ErrorRecoveryOptions = {}\r\n  ): Promise<T> {\r\n    const {\r\n      maxRetries = 3,\r\n      baseDelay = this.DEFAULT_RETRY_DELAY,\r\n      exponentialBackoff = true,\r\n      showToast = false\r\n    } = options;\r\n\r\n    let lastError: Error;\r\n    \r\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        return await operation();\r\n      } catch (error) {\r\n        lastError = error as Error;\r\n        \r\n        if (attempt === maxRetries) {\r\n          // Final attempt failed, handle the error\r\n          await this.handleError(lastError, context, options);\r\n          throw lastError;\r\n        }\r\n\r\n        // Calculate delay for next retry\r\n        const delay = exponentialBackoff\r\n          ? Math.min(baseDelay * Math.pow(2, attempt), this.MAX_RETRY_DELAY)\r\n          : baseDelay;\r\n\r\n        console.warn(`⚠️ Attempt ${attempt + 1} failed for ${context.operation}, retrying in ${delay}ms`);\r\n        \r\n        if (showToast && attempt === 0) {\r\n          toast.loading(`Retrying ${context.operation}...`, {\r\n            id: `retry-${context.operation}-${context.key}`\r\n          });\r\n        }\r\n\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      }\r\n    }\r\n\r\n    throw lastError!;\r\n  }\r\n\r\n  /**\r\n   * Circuit breaker pattern for failing operations\r\n   */\r\n  createCircuitBreaker(\r\n    operation: string,\r\n    failureThreshold = 5,\r\n    resetTimeout = 30000\r\n  ) {\r\n    let failureCount = 0;\r\n    let lastFailureTime = 0;\r\n    let state: 'closed' | 'open' | 'half-open' = 'closed';\r\n\r\n    return async <T>(fn: () => Promise<T>): Promise<T> => {\r\n      const now = Date.now();\r\n\r\n      // Reset circuit breaker if enough time has passed\r\n      if (state === 'open' && now - lastFailureTime > resetTimeout) {\r\n        state = 'half-open';\r\n        failureCount = 0;\r\n      }\r\n\r\n      // Reject immediately if circuit is open\r\n      if (state === 'open') {\r\n        throw new Error(`Circuit breaker is open for ${operation}`);\r\n      }\r\n\r\n      try {\r\n        const result = await fn();\r\n        \r\n        // Success - reset failure count and close circuit\r\n        if (state === 'half-open') {\r\n          state = 'closed';\r\n          failureCount = 0;\r\n        }\r\n        \r\n        return result;\r\n      } catch (error) {\r\n        failureCount++;\r\n        lastFailureTime = now;\r\n\r\n        // Open circuit if failure threshold reached\r\n        if (failureCount >= failureThreshold) {\r\n          state = 'open';\r\n          console.warn(`🔴 Circuit breaker opened for ${operation}`);\r\n          \r\n          toast.warning(`${operation} temporarily unavailable`, {\r\n            description: 'Service will retry automatically'\r\n          });\r\n        }\r\n\r\n        throw error;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get error statistics\r\n   */\r\n  getErrorStatistics() {\r\n    const now = Date.now();\r\n    const last24Hours = this.errorLog.filter(\r\n      log => now - log.timestamp < 24 * 60 * 60 * 1000\r\n    );\r\n\r\n    const byOperation = last24Hours.reduce((acc, log) => {\r\n      const op = log.context.operation;\r\n      acc[op] = (acc[op] || 0) + 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n\r\n    const recoveryRate = last24Hours.length > 0\r\n      ? last24Hours.filter(log => log.recovered).length / last24Hours.length\r\n      : 1;\r\n\r\n    return {\r\n      totalErrors: last24Hours.length,\r\n      errorsByOperation: byOperation,\r\n      recoveryRate: Math.round(recoveryRate * 100),\r\n      mostCommonError: Object.entries(byOperation)\r\n        .sort(([,a], [,b]) => b - a)[0]?.[0] || 'None'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear error log\r\n   */\r\n  clearErrorLog(): void {\r\n    this.errorLog = [];\r\n    console.log('🧹 Error log cleared');\r\n  }\r\n\r\n  // Private methods\r\n\r\n  private logError(error: Error, context: ErrorContext): void {\r\n    this.errorLog.push({\r\n      error,\r\n      context,\r\n      timestamp: Date.now(),\r\n      recovered: false\r\n    });\r\n\r\n    // Limit log size\r\n    if (this.errorLog.length > this.MAX_ERROR_LOG_SIZE) {\r\n      this.errorLog = this.errorLog.slice(-this.MAX_ERROR_LOG_SIZE);\r\n    }\r\n  }\r\n\r\n  private determineRecoveryStrategy(error: Error, context: ErrorContext): FallbackStrategy {\r\n    const errorMessage = error.message.toLowerCase();\r\n    \r\n    // Network-related errors\r\n    if (errorMessage.includes('network') || errorMessage.includes('fetch')) {\r\n      return {\r\n        retryAttempts: 3,\r\n        retryDelay: 2000,\r\n        useLocalStorage: true,\r\n        showUserNotification: true,\r\n        gracefulDegradation: true\r\n      };\r\n    }\r\n\r\n    // Storage quota errors\r\n    if (errorMessage.includes('quota') || errorMessage.includes('storage')) {\r\n      return {\r\n        retryAttempts: 1,\r\n        retryDelay: 1000,\r\n        useLocalStorage: false,\r\n        showUserNotification: true,\r\n        gracefulDegradation: true\r\n      };\r\n    }\r\n\r\n    // Timeout errors\r\n    if (errorMessage.includes('timeout')) {\r\n      return {\r\n        retryAttempts: 2,\r\n        retryDelay: 3000,\r\n        useLocalStorage: true,\r\n        showUserNotification: false,\r\n        gracefulDegradation: true\r\n      };\r\n    }\r\n\r\n    // Authentication/authorization errors\r\n    if (errorMessage.includes('unauthorized') || errorMessage.includes('forbidden')) {\r\n      return {\r\n        retryAttempts: 0,\r\n        retryDelay: 0,\r\n        useLocalStorage: true,\r\n        showUserNotification: true,\r\n        gracefulDegradation: true\r\n      };\r\n    }\r\n\r\n    // Default strategy\r\n    return {\r\n      retryAttempts: 2,\r\n      retryDelay: 1000,\r\n      useLocalStorage: true,\r\n      showUserNotification: false,\r\n      gracefulDegradation: true\r\n    };\r\n  }\r\n\r\n  private async attemptRecovery(\r\n    error: Error,\r\n    context: ErrorContext,\r\n    maxRetries: number,\r\n    baseDelay: number,\r\n    exponentialBackoff: boolean\r\n  ): Promise<boolean> {\r\n    // This is a placeholder for operation-specific recovery logic\r\n    // In a real implementation, you would re-attempt the original operation\r\n    console.log(`🔄 Attempting recovery for ${context.operation} (${maxRetries} retries)`);\r\n    return false; // For now, assume recovery attempts fail\r\n  }\r\n\r\n  private fallbackToLocalStorage(context: ErrorContext): boolean {\r\n    try {\r\n      console.log(`💾 Falling back to localStorage for ${context.operation}`);\r\n      \r\n      // Show user that we're in offline mode\r\n      toast.info('Working offline', {\r\n        description: 'Changes will sync when connection is restored',\r\n        duration: 3000\r\n      });\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ localStorage fallback failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private applyGracefulDegradation(context: ErrorContext): void {\r\n    console.log(`⚡ Applying graceful degradation for ${context.operation}`);\r\n    \r\n    // Disable non-essential features temporarily\r\n    const degradedFeatures = [\r\n      'Real-time sync',\r\n      'Cloud backups',\r\n      'Cross-device sync'\r\n    ];\r\n\r\n    toast.warning('Limited functionality', {\r\n      description: `Some features temporarily disabled: ${degradedFeatures.join(', ')}`,\r\n      duration: 5000\r\n    });\r\n  }\r\n\r\n  private showErrorToast(error: Error, context: ErrorContext, strategy: FallbackStrategy): void {\r\n    const isNetworkError = error.message.toLowerCase().includes('network') ||\r\n                          error.message.toLowerCase().includes('fetch');\r\n\r\n    if (isNetworkError) {\r\n      toast.error('Connection issue', {\r\n        description: 'Working offline. Changes will sync when connection is restored.',\r\n        duration: 4000\r\n      });\r\n    } else if (error.message.toLowerCase().includes('quota')) {\r\n      toast.error('Storage limit reached', {\r\n        description: 'Please clear some data to continue.',\r\n        duration: 6000\r\n      });\r\n    } else {\r\n      toast.error(`Error in ${context.operation}`, {\r\n        description: strategy.gracefulDegradation \r\n          ? 'Switching to offline mode'\r\n          : error.message,\r\n        duration: 3000\r\n      });\r\n    }\r\n  }\r\n\r\n  private updateErrorRecoveryStatus(error: Error, context: ErrorContext, recovered: boolean): void {\r\n    const logEntry = this.errorLog.find(\r\n      log => log.error === error && log.context.operation === context.operation\r\n    );\r\n    \r\n    if (logEntry) {\r\n      logEntry.recovered = recovered;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const errorHandler = new ErrorHandlingService();\r\n\r\n/**\r\n * Utility function for creating error context\r\n */\r\nexport function createErrorContext(\r\n  operation: string,\r\n  key?: string,\r\n  additionalData?: Record<string, any>\r\n): ErrorContext {\r\n  return {\r\n    operation,\r\n    key,\r\n    timestamp: Date.now(),\r\n    userAgent: navigator.userAgent,\r\n    url: window.location.href,\r\n    ...additionalData\r\n  };\r\n}\r\n\r\n/**\r\n * Decorator for adding error handling to async functions\r\n */\r\nexport function withErrorHandling<T extends any[], R>(\r\n  fn: (...args: T) => Promise<R>,\r\n  operation: string,\r\n  options?: ErrorRecoveryOptions\r\n) {\r\n  return async (...args: T): Promise<R> => {\r\n    const context = createErrorContext(operation);\r\n    \r\n    try {\r\n      return await errorHandler.withRetry(() => fn(...args), context, options);\r\n    } catch (error) {\r\n      // Error was already handled by withRetry\r\n      throw error;\r\n    }\r\n  };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\lib\\i18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\lib\\localStorage.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":396,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":396,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11338,11341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11338,11341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Enterprise-grade localStorage service for My Detail Area\r\n * Handles JSON serialization, error recovery, namespacing, and cloud sync\r\n */\r\nimport { cloudSync, getSyncConfig, type CloudSyncOptions } from './cloudSync';\r\n\r\nexport interface StorageOptions {\r\n  expiration?: number; // milliseconds\r\n  compress?: boolean;\r\n  namespace?: string;\r\n  cloudSync?: boolean | CloudSyncOptions; // Enable cloud sync\r\n  syncPriority?: 'critical' | 'important' | 'normal' | 'low';\r\n}\r\n\r\nexport interface StorageItem<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  expiration?: number;\r\n  version?: string;\r\n  cloudSynced?: boolean;\r\n  lastCloudSync?: number;\r\n}\r\n\r\nclass LocalStorageService {\r\n  private namespace = 'mda';\r\n  private version = '1.0.0';\r\n\r\n  /**\r\n   * Set item in localStorage with enterprise features and cloud sync\r\n   */\r\n  set<T>(key: string, value: T, options: StorageOptions = {}): boolean {\r\n    try {\r\n      const namespacedKey = this.getKey(key, options.namespace);\r\n      \r\n      const item: StorageItem<T> = {\r\n        data: value,\r\n        timestamp: Date.now(),\r\n        version: this.version,\r\n        cloudSynced: false,\r\n        ...(options.expiration && { expiration: Date.now() + options.expiration })\r\n      };\r\n\r\n      const serialized = JSON.stringify(item);\r\n      localStorage.setItem(namespacedKey, serialized);\r\n      \r\n      // Stored successfully\r\n      \r\n      // Handle cloud sync if enabled\r\n      this.handleCloudSync(key, value, options);\r\n      \r\n      return true;\r\n      \r\n    } catch (error) {\r\n      console.error(`❌ localStorage.set failed for ${key}:`, error);\r\n      \r\n      // Try to free space by removing expired items\r\n      this.cleanup();\r\n      \r\n      // Try again\r\n      try {\r\n        const namespacedKey = this.getKey(key, options.namespace);\r\n        const item: StorageItem<T> = {\r\n          data: value,\r\n          timestamp: Date.now(),\r\n          version: this.version\r\n        };\r\n        localStorage.setItem(namespacedKey, JSON.stringify(item));\r\n        return true;\r\n      } catch (retryError) {\r\n        console.error(`❌ localStorage.set retry failed for ${key}:`, retryError);\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get item from localStorage with validation\r\n   */\r\n  get<T>(key: string, defaultValue: T, options: StorageOptions = {}): T {\r\n    try {\r\n      const namespacedKey = this.getKey(key, options.namespace);\r\n      const stored = localStorage.getItem(namespacedKey);\r\n      \r\n      if (!stored) {\r\n        console.log(`📭 No stored value for: ${namespacedKey}, using default`);\r\n        return defaultValue;\r\n      }\r\n\r\n      const item: StorageItem<T> = JSON.parse(stored);\r\n      \r\n      // Check expiration\r\n      if (item.expiration && Date.now() > item.expiration) {\r\n        console.log(`⏰ Expired value for: ${namespacedKey}, removing`);\r\n        this.remove(key, options);\r\n        return defaultValue;\r\n      }\r\n\r\n      // Check version compatibility\r\n      if (item.version && item.version !== this.version) {\r\n        console.log(`🔄 Version mismatch for: ${namespacedKey}, using default`);\r\n        this.remove(key, options);\r\n        return defaultValue;\r\n      }\r\n\r\n      // Retrieved successfully\r\n      return item.data;\r\n      \r\n    } catch (error) {\r\n      console.error(`❌ localStorage.get failed for ${key}:`, error);\r\n      // Remove corrupted data\r\n      this.remove(key, options);\r\n      return defaultValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove item from localStorage\r\n   */\r\n  remove(key: string, options: StorageOptions = {}): boolean {\r\n    try {\r\n      const namespacedKey = this.getKey(key, options.namespace);\r\n      localStorage.removeItem(namespacedKey);\r\n      console.log(`🗑️ Removed: ${namespacedKey}`);\r\n      return true;\r\n    } catch (error) {\r\n      console.error(`❌ localStorage.remove failed for ${key}:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all namespaced data\r\n   */\r\n  clear(namespace?: string): boolean {\r\n    try {\r\n      const targetNamespace = namespace || this.namespace;\r\n      const keysToRemove: string[] = [];\r\n      \r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key?.startsWith(`${targetNamespace}.`)) {\r\n          keysToRemove.push(key);\r\n        }\r\n      }\r\n      \r\n      keysToRemove.forEach(key => localStorage.removeItem(key));\r\n      console.log(`🧹 Cleared ${keysToRemove.length} items from namespace: ${targetNamespace}`);\r\n      return true;\r\n      \r\n    } catch (error) {\r\n      console.error('❌ localStorage.clear failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all keys in namespace\r\n   */\r\n  getKeys(namespace?: string): string[] {\r\n    const targetNamespace = namespace || this.namespace;\r\n    const keys: string[] = [];\r\n    \r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key?.startsWith(`${targetNamespace}.`)) {\r\n        keys.push(key.replace(`${targetNamespace}.`, ''));\r\n      }\r\n    }\r\n    \r\n    return keys;\r\n  }\r\n\r\n  /**\r\n   * Clean up expired items\r\n   */\r\n  cleanup(): number {\r\n    let cleaned = 0;\r\n    const now = Date.now();\r\n    \r\n    try {\r\n      for (let i = localStorage.length - 1; i >= 0; i--) {\r\n        const key = localStorage.key(i);\r\n        if (!key?.startsWith(`${this.namespace}.`)) continue;\r\n        \r\n        try {\r\n          const item = JSON.parse(localStorage.getItem(key) || '{}');\r\n          if (item.expiration && now > item.expiration) {\r\n            localStorage.removeItem(key);\r\n            cleaned++;\r\n          }\r\n        } catch {\r\n          // Remove corrupted items\r\n          localStorage.removeItem(key);\r\n          cleaned++;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ localStorage.cleanup failed:', error);\r\n    }\r\n    \r\n    if (cleaned > 0) {\r\n      console.log(`🧹 Cleaned ${cleaned} expired/corrupted localStorage items`);\r\n    }\r\n    \r\n    return cleaned;\r\n  }\r\n\r\n  /**\r\n   * Get storage usage info\r\n   */\r\n  getStorageInfo() {\r\n    const keys = this.getKeys();\r\n    let totalSize = 0;\r\n    \r\n    keys.forEach(key => {\r\n      const value = localStorage.getItem(this.getKey(key));\r\n      if (value) {\r\n        totalSize += value.length;\r\n      }\r\n    });\r\n    \r\n    return {\r\n      keys: keys.length,\r\n      totalSize,\r\n      totalSizeKB: Math.round(totalSize / 1024 * 100) / 100,\r\n      available: this.isStorageAvailable()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if localStorage is available\r\n   */\r\n  isStorageAvailable(): boolean {\r\n    try {\r\n      const test = '__storage_test__';\r\n      localStorage.setItem(test, test);\r\n      localStorage.removeItem(test);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create namespaced key\r\n   */\r\n  private getKey(key: string, namespace?: string): string {\r\n    const ns = namespace || this.namespace;\r\n    return `${ns}.${key}`;\r\n  }\r\n\r\n  // Cloud Sync Methods\r\n\r\n  /**\r\n   * Handle cloud sync for stored items\r\n   */\r\n  private async handleCloudSync<T>(key: string, value: T, options: StorageOptions): Promise<void> {\r\n    if (!options.cloudSync) return;\r\n\r\n    try {\r\n      const syncOptions = typeof options.cloudSync === 'boolean' \r\n        ? getSyncConfig(key) \r\n        : options.cloudSync;\r\n\r\n      const result = await cloudSync.syncToCloud(key, value, {\r\n        ...syncOptions,\r\n        priority: options.syncPriority || syncOptions.priority\r\n      });\r\n\r\n      if (result.success) {\r\n        this.markCloudSynced(key, options.namespace);\r\n      }\r\n    } catch (error) {\r\n      console.warn(`⚠️ Cloud sync failed for ${key}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark item as cloud synced\r\n   */\r\n  private markCloudSynced(key: string, namespace?: string): void {\r\n    try {\r\n      const namespacedKey = this.getKey(key, namespace);\r\n      const stored = localStorage.getItem(namespacedKey);\r\n      \r\n      if (stored) {\r\n        const item = JSON.parse(stored);\r\n        item.cloudSynced = true;\r\n        item.lastCloudSync = Date.now();\r\n        localStorage.setItem(namespacedKey, JSON.stringify(item));\r\n      }\r\n    } catch (error) {\r\n      console.warn(`⚠️ Failed to mark ${key} as cloud synced:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sync item to cloud manually\r\n   */\r\n  async syncToCloud<T>(key: string, options: StorageOptions = {}): Promise<boolean> {\r\n    try {\r\n      const namespacedKey = this.getKey(key, options.namespace);\r\n      const stored = localStorage.getItem(namespacedKey);\r\n      \r\n      if (!stored) {\r\n        console.warn(`⚠️ No data found for ${key} to sync`);\r\n        return false;\r\n      }\r\n\r\n      const item: StorageItem<T> = JSON.parse(stored);\r\n      const syncOptions = getSyncConfig(key);\r\n\r\n      const result = await cloudSync.syncToCloud(key, item.data, {\r\n        ...syncOptions,\r\n        priority: options.syncPriority || syncOptions.priority\r\n      });\r\n\r\n      if (result.success) {\r\n        this.markCloudSynced(key, options.namespace);\r\n        console.log(`☁️ Successfully synced ${key} to cloud`);\r\n        return true;\r\n      } else {\r\n        console.error(`❌ Failed to sync ${key} to cloud:`, result.error);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error(`❌ Cloud sync error for ${key}:`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore item from cloud\r\n   */\r\n  async restoreFromCloud<T>(key: string, defaultValue: T, options: StorageOptions = {}): Promise<T> {\r\n    try {\r\n      const syncOptions = getSyncConfig(key);\r\n      const result = await cloudSync.restoreFromCloud(key, syncOptions);\r\n\r\n      if (result.success && result.data !== undefined) {\r\n        // Store restored data locally\r\n        this.set(key, result.data, options);\r\n        console.log(`☁️ Successfully restored ${key} from cloud`);\r\n        return result.data;\r\n      } else {\r\n        console.warn(`⚠️ Failed to restore ${key} from cloud:`, result.error);\r\n        return this.get(key, defaultValue, options);\r\n      }\r\n    } catch (error) {\r\n      console.error(`❌ Cloud restore error for ${key}:`, error);\r\n      return this.get(key, defaultValue, options);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Setup cloud sync for the application\r\n   */\r\n  async setupCloudSync(): Promise<boolean> {\r\n    try {\r\n      const success = await cloudSync.setupCloudSync();\r\n      if (success) {\r\n        console.log('☁️ Cloud sync initialized successfully');\r\n        \r\n        // Sync critical data on startup\r\n        await this.syncCriticalData();\r\n      }\r\n      return success;\r\n    } catch (error) {\r\n      console.error('❌ Cloud sync setup failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sync all critical data to cloud\r\n   */\r\n  async syncCriticalData(): Promise<void> {\r\n    const keys = this.getKeys();\r\n    const criticalKeys = keys.filter(key => \r\n      key.includes('activeTab') || \r\n      key.includes('theme') || \r\n      key.includes('preferences')\r\n    );\r\n\r\n    const syncPromises = criticalKeys.map(key => \r\n      this.syncToCloud(key, { cloudSync: true, syncPriority: 'critical' })\r\n    );\r\n\r\n    await Promise.allSettled(syncPromises);\r\n    console.log(`☁️ Synced ${criticalKeys.length} critical items to cloud`);\r\n  }\r\n\r\n  /**\r\n   * Get cloud sync status for a key\r\n   */\r\n  getCloudSyncStatus(key: string): { synced: boolean; lastSync?: number; status?: any } {\r\n    try {\r\n      const namespacedKey = this.getKey(key);\r\n      const stored = localStorage.getItem(namespacedKey);\r\n      \r\n      if (stored) {\r\n        const item = JSON.parse(stored);\r\n        const cloudStatus = cloudSync.getSyncStatus(key);\r\n        \r\n        return {\r\n          synced: item.cloudSynced || false,\r\n          lastSync: item.lastCloudSync,\r\n          status: cloudStatus\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.warn(`⚠️ Failed to get sync status for ${key}:`, error);\r\n    }\r\n    \r\n    return { synced: false };\r\n  }\r\n\r\n  /**\r\n   * Force sync all data to cloud\r\n   */\r\n  async forceSyncAll(): Promise<void> {\r\n    await cloudSync.forceSyncAll();\r\n  }\r\n\r\n  /**\r\n   * Get network status\r\n   */\r\n  isOnline(): boolean {\r\n    return cloudSync.isNetworkOnline();\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const storage = new LocalStorageService();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\lib\\mockData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\lib\\sessionRecovery.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":12,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[366,369],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[366,369],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[405,408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[405,408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6925,6928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6925,6928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6971,6974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6971,6974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":258,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7350,7353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7350,7353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":259,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7398,7401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7398,7401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":324,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8980,8983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8980,8983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":342,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9441,9444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9441,9444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Enterprise Session Recovery Service for My Detail Area\r\n * Handles automatic session restoration from cloud sync\r\n */\r\n\r\nimport { storage } from './localStorage';\r\nimport { cloudSync, SYNC_CONFIG } from './cloudSync';\r\nimport { toast } from 'sonner';\r\n\r\nexport interface SessionData {\r\n  tabStates: Record<string, string>;\r\n  userPreferences: Record<string, any>;\r\n  themeSettings: Record<string, any>;\r\n  viewModes: Record<string, string>;\r\n  searchTerms: Record<string, string>;\r\n  timestamp: number;\r\n  version: string;\r\n}\r\n\r\nexport interface RecoveryOptions {\r\n  showNotifications?: boolean;\r\n  restoreAll?: boolean;\r\n  skipExpired?: boolean;\r\n  maxAge?: number; // milliseconds\r\n}\r\n\r\nclass SessionRecoveryService {\r\n  private readonly SESSION_KEY = 'session.recovery';\r\n  private readonly MAX_SESSION_AGE = 7 * 24 * 60 * 60 * 1000; // 7 days\r\n\r\n  /**\r\n   * Create session snapshot for recovery\r\n   */\r\n  async createSessionSnapshot(): Promise<boolean> {\r\n    try {\r\n      const sessionData: SessionData = {\r\n        tabStates: this.extractTabStates(),\r\n        userPreferences: this.extractUserPreferences(),\r\n        themeSettings: this.extractThemeSettings(),\r\n        viewModes: this.extractViewModes(),\r\n        searchTerms: this.extractSearchTerms(),\r\n        timestamp: Date.now(),\r\n        version: '1.0.0'\r\n      };\r\n\r\n      // Save to localStorage and cloud\r\n      const success = storage.set(this.SESSION_KEY, sessionData, {\r\n        cloudSync: true,\r\n        syncPriority: 'critical',\r\n        expiration: this.MAX_SESSION_AGE\r\n      });\r\n\r\n      if (success) {\r\n        console.log('📸 Session snapshot created successfully');\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    } catch (error) {\r\n      console.error('❌ Failed to create session snapshot:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore session from cloud or localStorage\r\n   */\r\n  async restoreSession(options: RecoveryOptions = {}): Promise<boolean> {\r\n    const {\r\n      showNotifications = true,\r\n      restoreAll = true,\r\n      skipExpired = true,\r\n      maxAge = this.MAX_SESSION_AGE\r\n    } = options;\r\n\r\n    try {\r\n      if (showNotifications) {\r\n        toast.loading('Restoring your workspace...', { id: 'session-restore' });\r\n      }\r\n\r\n      // Try to restore from cloud first\r\n      let sessionData: SessionData | null = null;\r\n      \r\n      if (cloudSync.isNetworkOnline()) {\r\n        try {\r\n          sessionData = await storage.restoreFromCloud(this.SESSION_KEY, null, {\r\n            cloudSync: true,\r\n            syncPriority: 'critical'\r\n          });\r\n        } catch (error) {\r\n          console.warn('⚠️ Failed to restore session from cloud:', error);\r\n        }\r\n      }\r\n\r\n      // Fallback to localStorage\r\n      if (!sessionData) {\r\n        sessionData = storage.get(this.SESSION_KEY, null, {\r\n          cloudSync: true,\r\n          syncPriority: 'critical'\r\n        });\r\n      }\r\n\r\n      if (!sessionData) {\r\n        if (showNotifications) {\r\n          toast.dismiss('session-restore');\r\n          toast.info('No session to restore');\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Check if session is expired\r\n      const sessionAge = Date.now() - sessionData.timestamp;\r\n      if (skipExpired && sessionAge > maxAge) {\r\n        if (showNotifications) {\r\n          toast.dismiss('session-restore');\r\n          toast.warning('Session expired', {\r\n            description: 'Previous session is too old to restore'\r\n          });\r\n        }\r\n        return false;\r\n      }\r\n\r\n      // Restore session data\r\n      let restoredCount = 0;\r\n\r\n      if (restoreAll || options.showNotifications) {\r\n        restoredCount += this.restoreTabStates(sessionData.tabStates);\r\n        restoredCount += this.restoreUserPreferences(sessionData.userPreferences);\r\n        restoredCount += this.restoreThemeSettings(sessionData.themeSettings);\r\n        restoredCount += this.restoreViewModes(sessionData.viewModes);\r\n        restoredCount += this.restoreSearchTerms(sessionData.searchTerms);\r\n      }\r\n\r\n      if (showNotifications) {\r\n        toast.dismiss('session-restore');\r\n        if (restoredCount > 0) {\r\n          toast.success(`Session restored`, {\r\n            description: `Restored ${restoredCount} workspace settings`\r\n          });\r\n        } else {\r\n          toast.info('No changes to restore');\r\n        }\r\n      }\r\n\r\n      console.log(`🔄 Session restored: ${restoredCount} items`);\r\n      return restoredCount > 0;\r\n\r\n    } catch (error) {\r\n      console.error('❌ Session restore failed:', error);\r\n      \r\n      if (showNotifications) {\r\n        toast.dismiss('session-restore');\r\n        toast.error('Failed to restore session', {\r\n          description: error instanceof Error ? error.message : 'Unknown error'\r\n        });\r\n      }\r\n      \r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if session recovery is available\r\n   */\r\n  async isRecoveryAvailable(): Promise<boolean> {\r\n    try {\r\n      // Check localStorage first\r\n      const localData = storage.get(this.SESSION_KEY, null);\r\n      if (localData) return true;\r\n\r\n      // Check cloud if online\r\n      if (cloudSync.isNetworkOnline()) {\r\n        const cloudData = await storage.restoreFromCloud(this.SESSION_KEY, null);\r\n        return cloudData !== null;\r\n      }\r\n\r\n      return false;\r\n    } catch (error) {\r\n      console.warn('⚠️ Recovery availability check failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear session recovery data\r\n   */\r\n  clearRecoveryData(): boolean {\r\n    try {\r\n      storage.remove(this.SESSION_KEY);\r\n      console.log('🧹 Session recovery data cleared');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Failed to clear recovery data:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get session info\r\n   */\r\n  getSessionInfo(): { age?: number; hasData: boolean; cloudSynced: boolean } {\r\n    try {\r\n      const sessionData = storage.get(this.SESSION_KEY, null);\r\n      const syncStatus = storage.getCloudSyncStatus(this.SESSION_KEY);\r\n      \r\n      if (sessionData) {\r\n        return {\r\n          age: Date.now() - sessionData.timestamp,\r\n          hasData: true,\r\n          cloudSynced: syncStatus.synced\r\n        };\r\n      }\r\n\r\n      return {\r\n        hasData: false,\r\n        cloudSynced: false\r\n      };\r\n    } catch (error) {\r\n      console.warn('⚠️ Failed to get session info:', error);\r\n      return { hasData: false, cloudSynced: false };\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n\r\n  private extractTabStates(): Record<string, string> {\r\n    const tabStates: Record<string, string> = {};\r\n    const keys = storage.getKeys();\r\n    \r\n    keys.forEach(key => {\r\n      if (key.includes('activeTab')) {\r\n        const value = storage.get(key, '');\r\n        if (value) {\r\n          tabStates[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return tabStates;\r\n  }\r\n\r\n  private extractUserPreferences(): Record<string, any> {\r\n    const preferences: Record<string, any> = {};\r\n    const keys = storage.getKeys();\r\n    \r\n    keys.forEach(key => {\r\n      if (key.includes('preferences') || key.includes('settings')) {\r\n        const value = storage.get(key, null);\r\n        if (value !== null) {\r\n          preferences[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return preferences;\r\n  }\r\n\r\n  private extractThemeSettings(): Record<string, any> {\r\n    const themeSettings: Record<string, any> = {};\r\n    const keys = storage.getKeys();\r\n    \r\n    keys.forEach(key => {\r\n      if (key.includes('theme')) {\r\n        const value = storage.get(key, null);\r\n        if (value !== null) {\r\n          themeSettings[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return themeSettings;\r\n  }\r\n\r\n  private extractViewModes(): Record<string, string> {\r\n    const viewModes: Record<string, string> = {};\r\n    const keys = storage.getKeys();\r\n    \r\n    keys.forEach(key => {\r\n      if (key.includes('viewMode')) {\r\n        const value = storage.get(key, '');\r\n        if (value) {\r\n          viewModes[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return viewModes;\r\n  }\r\n\r\n  private extractSearchTerms(): Record<string, string> {\r\n    const searchTerms: Record<string, string> = {};\r\n    const keys = storage.getKeys();\r\n    \r\n    keys.forEach(key => {\r\n      if (key.includes('searchTerm')) {\r\n        const value = storage.get(key, '');\r\n        if (value) {\r\n          searchTerms[key] = value;\r\n        }\r\n      }\r\n    });\r\n\r\n    return searchTerms;\r\n  }\r\n\r\n  private restoreTabStates(tabStates: Record<string, string>): number {\r\n    let restored = 0;\r\n    \r\n    Object.entries(tabStates).forEach(([key, value]) => {\r\n      try {\r\n        storage.set(key, value, {\r\n          cloudSync: true,\r\n          syncPriority: 'critical'\r\n        });\r\n        restored++;\r\n      } catch (error) {\r\n        console.warn(`⚠️ Failed to restore tab state ${key}:`, error);\r\n      }\r\n    });\r\n\r\n    return restored;\r\n  }\r\n\r\n  private restoreUserPreferences(preferences: Record<string, any>): number {\r\n    let restored = 0;\r\n    \r\n    Object.entries(preferences).forEach(([key, value]) => {\r\n      try {\r\n        storage.set(key, value, {\r\n          cloudSync: true,\r\n          syncPriority: 'critical'\r\n        });\r\n        restored++;\r\n      } catch (error) {\r\n        console.warn(`⚠️ Failed to restore preference ${key}:`, error);\r\n      }\r\n    });\r\n\r\n    return restored;\r\n  }\r\n\r\n  private restoreThemeSettings(themeSettings: Record<string, any>): number {\r\n    let restored = 0;\r\n    \r\n    Object.entries(themeSettings).forEach(([key, value]) => {\r\n      try {\r\n        storage.set(key, value, {\r\n          cloudSync: true,\r\n          syncPriority: 'important'\r\n        });\r\n        restored++;\r\n      } catch (error) {\r\n        console.warn(`⚠️ Failed to restore theme setting ${key}:`, error);\r\n      }\r\n    });\r\n\r\n    return restored;\r\n  }\r\n\r\n  private restoreViewModes(viewModes: Record<string, string>): number {\r\n    let restored = 0;\r\n    \r\n    Object.entries(viewModes).forEach(([key, value]) => {\r\n      try {\r\n        storage.set(key, value, {\r\n          cloudSync: true,\r\n          syncPriority: 'important'\r\n        });\r\n        restored++;\r\n      } catch (error) {\r\n        console.warn(`⚠️ Failed to restore view mode ${key}:`, error);\r\n      }\r\n    });\r\n\r\n    return restored;\r\n  }\r\n\r\n  private restoreSearchTerms(searchTerms: Record<string, string>): number {\r\n    let restored = 0;\r\n    \r\n    Object.entries(searchTerms).forEach(([key, value]) => {\r\n      try {\r\n        storage.set(key, value, {\r\n          cloudSync: false, // Search terms are usually temporary\r\n          syncPriority: 'low'\r\n        });\r\n        restored++;\r\n      } catch (error) {\r\n        console.warn(`⚠️ Failed to restore search term ${key}:`, error);\r\n      }\r\n    });\r\n\r\n    return restored;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const sessionRecovery = new SessionRecoveryService();\r\n\r\n/**\r\n * Auto-setup session recovery on app start\r\n */\r\nexport async function setupSessionRecovery(): Promise<void> {\r\n  try {\r\n    // Setup cloud sync first\r\n    await storage.setupCloudSync();\r\n    \r\n    // Check if recovery is available\r\n    const isAvailable = await sessionRecovery.isRecoveryAvailable();\r\n    \r\n    if (isAvailable) {\r\n      // Attempt automatic recovery\r\n      await sessionRecovery.restoreSession({\r\n        showNotifications: false,\r\n        restoreAll: true,\r\n        skipExpired: true\r\n      });\r\n    }\r\n\r\n    // Create initial snapshot for future recovery\r\n    await sessionRecovery.createSessionSnapshot();\r\n    \r\n    // Setup periodic snapshots (every 5 minutes)\r\n    setInterval(() => {\r\n      sessionRecovery.createSessionSnapshot();\r\n    }, 5 * 60 * 1000);\r\n\r\n    console.log('🔄 Session recovery system initialized');\r\n  } catch (error) {\r\n    console.error('❌ Session recovery setup failed:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Manual session recovery trigger\r\n */\r\nexport async function recoverSessionManually(): Promise<boolean> {\r\n  return sessionRecovery.restoreSession({\r\n    showNotifications: true,\r\n    restoreAll: true,\r\n    skipExpired: false\r\n  });\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Auth.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\CarWash.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1997,2000],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1997,2000],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":58,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":58,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2158,2161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2158,2161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":68,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2414,2417],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2414,2417],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":94,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3142,3145],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3142,3145],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3628,3631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3628,3631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Plus, RefreshCw, Clock } from 'lucide-react';\r\nimport { OrderDataTable } from '@/components/orders/OrderDataTable';\r\nimport CarWashOrderModal from '@/components/orders/CarWashOrderModal';\r\nimport { useCarWashOrderManagement } from '@/hooks/useCarWashOrderManagement';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useTabPersistence, useViewModePersistence, useSearchPersistence } from '@/hooks/useTabPersistence';\r\nimport { QuickFilterBar } from '@/components/sales/QuickFilterBar';\r\nimport { EnhancedOrderDetailModal } from '@/components/orders/EnhancedOrderDetailModal';\r\nimport { OrderCalendarView } from '@/components/orders/OrderCalendarView';\r\nimport { Badge } from '@/components/ui/badge';\r\n\r\nexport default function CarWash() {\r\n  const { t } = useTranslation();\r\n  // Persistent state\r\n  const [activeFilter, setActiveFilter] = useTabPersistence('car_wash');\r\n  const [viewMode, setViewMode] = useViewModePersistence('car_wash');\r\n  const [searchTerm, setSearchTerm] = useSearchPersistence('car_wash');\r\n  \r\n  // Non-persistent UI state\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n  const [previewOrder, setPreviewOrder] = useState(null);\r\n\r\n  const {\r\n    orders,\r\n    tabCounts,\r\n    filters,\r\n    loading,\r\n    updateFilters,\r\n    refreshData,\r\n    createOrder,\r\n    updateOrder,\r\n    deleteOrder,\r\n  } = useCarWashOrderManagement(activeFilter);\r\n\r\n  // Real-time updates are handled by useCarWashOrderManagement hook\r\n\r\n  const handleCreateOrder = () => {\r\n    setSelectedOrder(null);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCreateOrderWithDate = (selectedDate?: Date) => {\r\n    setSelectedOrder(null);\r\n    // If date is provided from calendar, we could pre-populate the due_date\r\n    // For now, just open the modal\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleEditOrder = (order: any) => {\r\n    setSelectedOrder(order);\r\n    setShowModal(true);\r\n    setPreviewOrder(null); // Close preview if open\r\n  };\r\n\r\n  const handleViewOrder = (order: any) => {\r\n    setPreviewOrder(order);\r\n  };\r\n\r\n  const handleDeleteOrder = async (orderId: string) => {\r\n    if (confirm(t('messages.confirm_delete_order'))) {\r\n      await deleteOrder(orderId);\r\n    }\r\n  };\r\n\r\n  const handleSaveOrder = async (orderData: any) => {\r\n    try {\r\n      if (selectedOrder) {\r\n        await updateOrder(selectedOrder.id, orderData);\r\n      } else {\r\n        await createOrder(orderData);\r\n      }\r\n      setShowModal(false);\r\n      refreshData();\r\n    } catch (error) {\r\n      console.error('Error saving car wash order:', error);\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (orderId: string, newStatus: string) => {\r\n    await updateOrder(orderId, { status: newStatus });\r\n  };\r\n\r\n  // Custom filter options for CarWash\r\n  const carWashTabCounts = {\r\n    ...tabCounts,\r\n    dashboard: tabCounts.all,\r\n    all: tabCounts.all,\r\n  };\r\n\r\n  // Filter orders based on search term and show waiter priority\r\n  const filteredOrders = orders.filter((order: any) => {\r\n    if (!searchTerm) return true;\r\n    const searchLower = searchTerm.toLowerCase();\r\n    return (\r\n      order.id.toLowerCase().includes(searchLower) ||\r\n      order.vehicleVin?.toLowerCase().includes(searchLower) ||\r\n      order.stockNumber?.toLowerCase().includes(searchLower) ||\r\n      order.tag?.toLowerCase().includes(searchLower) ||\r\n      `${order.vehicleYear} ${order.vehicleMake} ${order.vehicleModel}`.toLowerCase().includes(searchLower)\r\n    );\r\n  }).map((order: any) => ({\r\n    ...order,\r\n    // Add waiter badge to display\r\n    waiterBadge: order.isWaiter ? (\r\n      <Badge variant=\"destructive\" className=\"bg-destructive text-destructive-foreground\">\r\n        <Clock className=\"w-3 h-3 mr-1\" />\r\n        {t('car_wash_orders.waiter')}\r\n      </Badge>\r\n    ) : null\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"space-y-6\">\r\n        {/* Header Actions */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <h1 className=\"text-2xl font-bold\">{t('pages.car_wash')}</h1>\r\n            {tabCounts.waiter > 0 && (\r\n              <Badge variant=\"destructive\" className=\"bg-destructive text-destructive-foreground\">\r\n                <Clock className=\"w-3 h-3 mr-1\" />\r\n                {tabCounts.waiter} {t('car_wash_orders.waiting')}\r\n              </Badge>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={refreshData}\r\n              disabled={loading}\r\n            >\r\n              <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\r\n              {t('common.refresh')}\r\n            </Button>\r\n            <Button size=\"sm\" onClick={handleCreateOrder}>\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              {t('car_wash_orders.quick_order')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Filter Bar - Car Wash specific filters */}\r\n        <QuickFilterBar\r\n          activeFilter={activeFilter}\r\n          tabCounts={carWashTabCounts}\r\n          onFilterChange={setActiveFilter}\r\n          searchTerm={searchTerm}\r\n          onSearchChange={setSearchTerm}\r\n          viewMode={viewMode}\r\n          onViewModeChange={setViewMode}\r\n        />\r\n\r\n        {/* Main Content - Orders Table/Calendar */}\r\n        <div className=\"space-y-6\">\r\n          {viewMode === 'calendar' ? (\r\n            <OrderCalendarView\r\n              orders={filteredOrders}\r\n              loading={loading}\r\n              onEdit={handleEditOrder}\r\n              onView={handleViewOrder}\r\n              onDelete={handleDeleteOrder}\r\n              onStatusChange={handleStatusChange}\r\n              onCreateOrder={handleCreateOrderWithDate}\r\n            />\r\n          ) : (\r\n            <OrderDataTable\r\n              orders={filteredOrders}\r\n              loading={loading}\r\n              onEdit={handleEditOrder}\r\n              onDelete={handleDeleteOrder}\r\n              onView={handleViewOrder}\r\n              tabType={activeFilter}\r\n            />\r\n          )}\r\n        </div>\r\n\r\n        {/* Modals */}\r\n        {showModal && (\r\n          <CarWashOrderModal\r\n            order={selectedOrder}\r\n            open={showModal}\r\n            onClose={() => setShowModal(false)}\r\n            onSave={handleSaveOrder}\r\n          />\r\n        )}\r\n\r\n        {/* Detail Modal - Enhanced Full Screen */}\r\n        {previewOrder && (\r\n          <EnhancedOrderDetailModal\r\n            order={previewOrder}\r\n            open={true}\r\n            onClose={() => setPreviewOrder(null)}\r\n            onEdit={handleEditOrder}\r\n            onDelete={handleDeleteOrder}\r\n            onStatusChange={handleStatusChange}\r\n          />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Chat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Contacts.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchDealerships'. Either include it or remove the dependency array.","line":139,"column":6,"nodeType":"ArrayExpression","endLine":139,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDealerships]","fix":{"range":[4199,4201],"text":"[fetchDealerships]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { \r\n  Plus, \r\n  Search, \r\n  Filter, \r\n  MoreHorizontal, \r\n  Users2, \r\n  Phone, \r\n  Mail, \r\n  Edit, \r\n  Trash2,\r\n  Building2,\r\n  Star,\r\n  PhoneCall,\r\n  MessageSquare,\r\n  Eye\r\n} from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { toast } from 'sonner';\r\nimport { ContactModal } from '@/components/contacts/ContactModal';\r\nimport { ContactDetailModal } from '@/components/contacts/ContactDetailModal';\r\nimport { PermissionGuard } from '@/components/permissions/PermissionGuard';\r\nimport { ContactDepartment, DealershipStatus, LanguageCode } from '@/types/dealership';\r\n\r\ninterface Contact {\r\n  id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  phone?: string;\r\n  mobile_phone?: string;\r\n  position?: string;\r\n  department: ContactDepartment;\r\n  is_primary: boolean;\r\n  status: DealershipStatus;\r\n  dealership_id: number;\r\n  avatar_url?: string;\r\n  preferred_language: LanguageCode;\r\n  can_receive_notifications: boolean;\r\n  dealership?: {\r\n    name: string;\r\n  };\r\n}\r\n\r\nexport default function Contacts() {\r\n  const { t } = useTranslation();\r\n  const [contacts, setContacts] = useState<Contact[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [search, setSearch] = useState('');\r\n  const [departmentFilter, setDepartmentFilter] = useState<string>('all');\r\n  const [dealershipFilter, setDealershipFilter] = useState<string>('all');\r\n  const [dealerships, setDealerships] = useState<{ id: number; name: string }[]>([]);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [editingContact, setEditingContact] = useState<Contact | null>(null);\r\n  const [viewingContact, setViewingContact] = useState<Contact | null>(null);\r\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\r\n\r\n  const fetchContacts = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      let query = supabase\r\n        .from('dealership_contacts')\r\n        .select(`\r\n          *,\r\n          dealerships!dealership_contacts_dealership_id_fkey(name)\r\n        `)\r\n        .is('deleted_at', null);\r\n\r\n      if (departmentFilter !== 'all') {\r\n        query = query.eq('department', departmentFilter as 'other' | 'sales' | 'service' | 'parts' | 'management');\r\n      }\r\n\r\n      if (dealershipFilter !== 'all') {\r\n        query = query.eq('dealership_id', parseInt(dealershipFilter));\r\n      }\r\n\r\n      if (search) {\r\n        query = query.or(`first_name.ilike.%${search}%,last_name.ilike.%${search}%,email.ilike.%${search}%,position.ilike.%${search}%`);\r\n      }\r\n\r\n      const { data, error } = await query.order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      setContacts(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching contacts:', error);\r\n      toast.error(t('messages.error'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [departmentFilter, dealershipFilter, search, t]);\r\n\r\n  const fetchDealerships = useCallback(async () => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('dealerships')\r\n        .select('id, name')\r\n        .is('deleted_at', null)\r\n        .order('name');\r\n\r\n      if (error) throw error;\r\n      setDealerships(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching dealerships:', error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchDealerships();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchContacts();\r\n  }, [fetchContacts]);\r\n\r\n  const handleDelete = async (contact: Contact) => {\r\n    if (!confirm(t('messages.confirm_delete'))) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('dealership_contacts')\r\n        .update({ deleted_at: new Date().toISOString() })\r\n        .eq('id', contact.id);\r\n\r\n      if (error) throw error;\r\n\r\n      toast.success(t('messages.deleted'));\r\n      fetchContacts();\r\n    } catch (error) {\r\n      console.error('Error deleting contact:', error);\r\n      toast.error(t('messages.error'));\r\n    }\r\n  };\r\n\r\n  const handleEdit = (contact: Contact) => {\r\n    setEditingContact(contact);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleViewDetails = (contact: Contact) => {\r\n    setViewingContact(contact);\r\n    setIsDetailModalOpen(true);\r\n  };\r\n\r\n  const handleEditFromDetail = (contact: Contact) => {\r\n    setIsDetailModalOpen(false);\r\n    setViewingContact(null);\r\n    setEditingContact(contact);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    setEditingContact(null);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    setIsModalOpen(false);\r\n    setEditingContact(null);\r\n  };\r\n\r\n  const handleModalSuccess = () => {\r\n    fetchContacts();\r\n    handleModalClose();\r\n  };\r\n\r\n  const getDisplayName = (contact: Contact) => {\r\n    return `${contact.first_name} ${contact.last_name}`.trim();\r\n  };\r\n\r\n  const getInitials = (contact: Contact) => {\r\n    return `${contact.first_name?.[0] || ''}${contact.last_name?.[0] || ''}`.toUpperCase();\r\n  };\r\n\r\n  const getDepartmentBadgeVariant = (department: string) => {\r\n    switch (department) {\r\n      case 'sales': return 'default';\r\n      case 'service': return 'secondary';\r\n      case 'management': return 'outline';\r\n      case 'finance': return 'destructive';\r\n      default: return 'secondary';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight flex items-center gap-2\">\r\n              <Users2 className=\"h-8 w-8 text-secondary\" />\r\n              {t('contacts.title')}\r\n            </h1>\r\n            <p className=\"text-muted-foreground mt-2\">\r\n              {t('contacts.manage_description', 'Manage contacts across all dealerships')}\r\n            </p>\r\n            <p className=\"text-xs text-muted-foreground mt-1\">\r\n              Contact information only - these are not system users\r\n            </p>\r\n          </div>\r\n          <PermissionGuard module=\"users\" permission=\"write\">\r\n            <Button className=\"gap-2\" onClick={handleAdd}>\r\n              <Plus className=\"h-4 w-4\" />\r\n              {t('contacts.add_new')}\r\n            </Button>\r\n          </PermissionGuard>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Filter className=\"h-5 w-5\" />\r\n              {t('common.filter')}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-2 lg:grid-cols-4\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder={t('common.search')}\r\n                  value={search}\r\n                  onChange={(e) => setSearch(e.target.value)}\r\n                  className=\"pl-9\"\r\n                />\r\n              </div>\r\n              \r\n              <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder={t('contacts.department')} />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">{t('contacts.all_departments')}</SelectItem>\r\n                  <SelectItem value=\"sales\">{t('contacts.sales')}</SelectItem>\r\n                  <SelectItem value=\"service\">{t('contacts.service')}</SelectItem>\r\n                  <SelectItem value=\"management\">{t('contacts.management')}</SelectItem>\r\n                  <SelectItem value=\"finance\">{t('contacts.finance')}</SelectItem>\r\n                  <SelectItem value=\"parts\">{t('contacts.parts', 'Parts')}</SelectItem>\r\n                  <SelectItem value=\"other\">{t('contacts.other')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n\r\n              <Select value={dealershipFilter} onValueChange={setDealershipFilter}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder={t('dealerships.title')} />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">{t('contacts.all_dealerships')}</SelectItem>\r\n                  {dealerships.map((dealership) => (\r\n                    <SelectItem key={dealership.id} value={dealership.id.toString()}>\r\n                      {dealership.name}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Mobile Cards View */}\r\n        <div className=\"block sm:hidden space-y-4\">\r\n          {loading ? (\r\n            <Card>\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"text-center\">{t('common.loading')}</div>\r\n              </CardContent>\r\n            </Card>\r\n          ) : contacts.length === 0 ? (\r\n            <Card>\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"text-center text-muted-foreground\">{t('common.no_data')}</div>\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            contacts.map((contact) => (\r\n              <Card key={contact.id}>\r\n                <CardContent className=\"p-4\">\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <Avatar className=\"h-12 w-12\">\r\n                          <AvatarImage src={contact.avatar_url} alt={getDisplayName(contact)} />\r\n                          <AvatarFallback>{getInitials(contact)}</AvatarFallback>\r\n                        </Avatar>\r\n                        <div>\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <h3 className=\"font-medium\">{getDisplayName(contact)}</h3>\r\n                            {contact.is_primary && (\r\n                              <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\r\n                            )}\r\n                          </div>\r\n                          <p className=\"text-sm text-muted-foreground\">{contact.position || '-'}</p>\r\n                        </div>\r\n                      </div>\r\n                      \r\n                      <DropdownMenu>\r\n                        <DropdownMenuTrigger asChild>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <MoreHorizontal className=\"h-4 w-4\" />\r\n                          </Button>\r\n                        </DropdownMenuTrigger>\r\n                        <DropdownMenuContent align=\"end\">\r\n                          <DropdownMenuItem onClick={() => handleViewDetails(contact)}>\r\n                            <Eye className=\"mr-2 h-4 w-4\" />\r\n                            {t('common.view')}\r\n                          </DropdownMenuItem>\r\n            <PermissionGuard module=\"management\" permission=\"write\">\r\n                            <DropdownMenuItem onClick={() => handleEdit(contact)}>\r\n                              <Edit className=\"mr-2 h-4 w-4\" />\r\n                              {t('common.edit')}\r\n                            </DropdownMenuItem>\r\n                          </PermissionGuard>\r\n                          <DropdownMenuItem>\r\n                            <PhoneCall className=\"mr-2 h-4 w-4\" />\r\n                            {t('contacts.call')}\r\n                          </DropdownMenuItem>\r\n                          <DropdownMenuItem>\r\n                            <MessageSquare className=\"mr-2 h-4 w-4\" />\r\n                            {t('contacts.send_email')}\r\n                          </DropdownMenuItem>\r\n            <PermissionGuard module=\"management\" permission=\"delete\">\r\n                            <DropdownMenuItem \r\n                              onClick={() => handleDelete(contact)}\r\n                              className=\"text-destructive\"\r\n                            >\r\n                              <Trash2 className=\"mr-2 h-4 w-4\" />\r\n                              {t('common.delete')}\r\n                            </DropdownMenuItem>\r\n                          </PermissionGuard>\r\n                        </DropdownMenuContent>\r\n                      </DropdownMenu>\r\n                    </div>\r\n\r\n                    <div className=\"space-y-2\">\r\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                        <Mail className=\"h-4 w-4\" />\r\n                        {contact.email}\r\n                      </div>\r\n                      {contact.phone && (\r\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                          <Phone className=\"h-4 w-4\" />\r\n                          {contact.phone}\r\n                        </div>\r\n                      )}\r\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\r\n                        <Building2 className=\"h-4 w-4\" />\r\n                        {contact.dealership?.name || '-'}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Badge variant={getDepartmentBadgeVariant(contact.department)}>\r\n                        {t(`contacts.${contact.department}`)}\r\n                      </Badge>\r\n                      {contact.is_primary && (\r\n                        <Badge variant=\"outline\">{t('contacts.primary')}</Badge>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))\r\n          )}\r\n        </div>\r\n\r\n        {/* Desktop Table View */}\r\n        <Card className=\"hidden sm:block\">\r\n          <CardContent className=\"p-0\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead className=\"w-12\"></TableHead>\r\n                  <TableHead>{t('contacts.name')}</TableHead>\r\n                  <TableHead>{t('contacts.contact_info')}</TableHead>\r\n                  <TableHead>{t('contacts.position')}</TableHead>\r\n                  <TableHead>{t('contacts.department')}</TableHead>\r\n                  <TableHead>{t('dealerships.title')}</TableHead>\r\n                  <TableHead className=\"w-12\"></TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {loading ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={7} className=\"h-24 text-center\">\r\n                      {t('common.loading')}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : contacts.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={7} className=\"h-24 text-center\">\r\n                      {t('common.no_data')}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  contacts.map((contact) => (\r\n                    <TableRow \r\n                      key={contact.id} \r\n                      className=\"cursor-pointer hover:bg-muted/50\"\r\n                      onClick={() => handleViewDetails(contact)}\r\n                    >\r\n                      <TableCell>\r\n                        <Avatar className=\"h-10 w-10\">\r\n                          <AvatarImage src={contact.avatar_url} alt={getDisplayName(contact)} />\r\n                          <AvatarFallback>{getInitials(contact)}</AvatarFallback>\r\n                        </Avatar>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <div>\r\n                            <div className=\"font-medium\">{getDisplayName(contact)}</div>\r\n                            <div className=\"text-sm text-muted-foreground\">\r\n                              {contact.preferred_language?.toUpperCase()}\r\n                            </div>\r\n                          </div>\r\n                          {contact.is_primary && (\r\n                            <Star className=\"h-4 w-4 text-yellow-500 fill-current\" />\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"space-y-1\">\r\n                          <div className=\"flex items-center gap-1 text-sm\">\r\n                            <Mail className=\"h-3 w-3 text-muted-foreground\" />\r\n                            {contact.email}\r\n                          </div>\r\n                          {contact.phone && (\r\n                            <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\r\n                              <Phone className=\"h-3 w-3\" />\r\n                              {contact.phone}\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"text-sm\">\r\n                          {contact.position || '-'}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge variant={getDepartmentBadgeVariant(contact.department)}>\r\n                          {t(`contacts.${contact.department}`)}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"text-sm\">\r\n                          {contact.dealership?.name || '-'}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <DropdownMenu>\r\n                          <DropdownMenuTrigger asChild onClick={(e) => e.stopPropagation()}>\r\n                            <Button variant=\"ghost\" size=\"sm\">\r\n                              <MoreHorizontal className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </DropdownMenuTrigger>\r\n                          <DropdownMenuContent align=\"end\">\r\n                            <DropdownMenuItem onClick={() => handleViewDetails(contact)}>\r\n                              <Eye className=\"mr-2 h-4 w-4\" />\r\n                              {t('common.view')}\r\n                            </DropdownMenuItem>\r\n              <PermissionGuard module=\"management\" permission=\"write\">\r\n                              <DropdownMenuItem onClick={() => handleEdit(contact)}>\r\n                                <Edit className=\"mr-2 h-4 w-4\" />\r\n                                {t('common.edit')}\r\n                              </DropdownMenuItem>\r\n                            </PermissionGuard>\r\n                            <DropdownMenuItem>\r\n                              <PhoneCall className=\"mr-2 h-4 w-4\" />\r\n                              {t('contacts.call')}\r\n                            </DropdownMenuItem>\r\n                            <DropdownMenuItem>\r\n                              <MessageSquare className=\"mr-2 h-4 w-4\" />\r\n                              {t('contacts.send_email')}\r\n                            </DropdownMenuItem>\r\n                            <PermissionGuard module=\"management\" permission=\"delete\">\r\n                              <DropdownMenuItem \r\n                                onClick={() => handleDelete(contact)}\r\n                                className=\"text-destructive\"\r\n                              >\r\n                                <Trash2 className=\"mr-2 h-4 w-4\" />\r\n                                {t('common.delete')}\r\n                              </DropdownMenuItem>\r\n                            </PermissionGuard>\r\n                          </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <ContactModal\r\n          isOpen={isModalOpen}\r\n          onClose={handleModalClose}\r\n          onSuccess={handleModalSuccess}\r\n          contact={editingContact}\r\n          dealerships={dealerships}\r\n        />\r\n\r\n        <ContactDetailModal\r\n          contact={viewingContact}\r\n          open={isDetailModalOpen}\r\n          onClose={() => {\r\n            setIsDetailModalOpen(false);\r\n            setViewingContact(null);\r\n          }}\r\n          onEdit={handleEditFromDetail}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\DealerView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Dealerships.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'fetchDealerships' function makes the dependencies of useEffect Hook (at line 129) change on every render. To fix this, wrap the definition of 'fetchDealerships' in its own useCallback() Hook.","line":65,"column":9,"nodeType":"VariableDeclarator","endLine":125,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'fetchDealerships' in its own useCallback() Hook.","fix":{"range":[2290,4043],"text":"useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Build the query with filters\r\n      let query = supabase\r\n        .from('dealerships')\r\n        .select(`\r\n          *,\r\n          dealership_contacts!inner(count)\r\n        `)\r\n        .is('deleted_at', null);\r\n\r\n      if (statusFilter !== 'all') {\r\n        query = query.eq('status', statusFilter);\r\n      }\r\n\r\n      if (planFilter !== 'all') {\r\n        query = query.eq('subscription_plan', planFilter);\r\n      }\r\n\r\n      if (search) {\r\n        query = query.or(`name.ilike.%${search}%,email.ilike.%${search}%,city.ilike.%${search}%`);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      // Get counts for contacts and users\r\n      const dealershipsWithCounts = await Promise.all(\r\n        (data || []).map(async (dealership) => {\r\n          const [contactsResult, usersResult] = await Promise.all([\r\n            supabase\r\n              .from('dealership_contacts')\r\n              .select('id', { count: 'exact' })\r\n              .eq('dealership_id', dealership.id)\r\n              .is('deleted_at', null),\r\n            supabase\r\n              .from('dealer_memberships')\r\n              .select('id', { count: 'exact' })\r\n              .eq('dealer_id', dealership.id)\r\n              .eq('is_active', true)\r\n          ]);\r\n\r\n          return {\r\n            ...dealership,\r\n            contacts_count: contactsResult.count || 0,\r\n            users_count: usersResult.count || 0,\r\n          };\r\n        })\r\n      );\r\n\r\n      setDealerships(dealershipsWithCounts);\r\n    } catch (error) {\r\n      console.error('Error fetching dealerships:', error);\r\n      toast.error(t('messages.error'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  })"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Input } from '@/components/ui/input';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '@/components/ui/select';\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from '@/components/ui/table';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from '@/components/ui/dropdown-menu';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\r\nimport { \r\n  Plus, \r\n  Search, \r\n  Filter, \r\n  MoreHorizontal, \r\n  Building2, \r\n  Users, \r\n  UserPlus, \r\n  Edit, \r\n  Trash2,\r\n  Eye,\r\n  Mail,\r\n  BarChart3\r\n} from 'lucide-react';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { Dealership, DealershipStatus, SubscriptionPlan } from '@/types/dealership';\r\nimport { DealershipModal } from '@/components/dealerships/DealershipModal';\r\nimport { DealerInvitationModal } from '@/components/dealerships/DealerInvitationModal';\r\nimport { DealershipStatsCard } from '@/components/dealerships/DealershipStatsCard';\r\nimport { toast } from 'sonner';\r\n\r\nexport function Dealerships() {\r\n  const { t } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const [dealerships, setDealerships] = useState<Dealership[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [search, setSearch] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<DealershipStatus | 'all'>('all');\r\n  const [planFilter, setPlanFilter] = useState<SubscriptionPlan | 'all'>('all');\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [editingDealership, setEditingDealership] = useState<Dealership | null>(null);\r\n  const [isInviteModalOpen, setIsInviteModalOpen] = useState(false);\r\n  const [selectedDealershipForInvite, setSelectedDealershipForInvite] = useState<number | null>(null);\r\n  const [showStats, setShowStats] = useState(false);\r\n\r\n  const fetchDealerships = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Build the query with filters\r\n      let query = supabase\r\n        .from('dealerships')\r\n        .select(`\r\n          *,\r\n          dealership_contacts!inner(count)\r\n        `)\r\n        .is('deleted_at', null);\r\n\r\n      if (statusFilter !== 'all') {\r\n        query = query.eq('status', statusFilter);\r\n      }\r\n\r\n      if (planFilter !== 'all') {\r\n        query = query.eq('subscription_plan', planFilter);\r\n      }\r\n\r\n      if (search) {\r\n        query = query.or(`name.ilike.%${search}%,email.ilike.%${search}%,city.ilike.%${search}%`);\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n\r\n      // Get counts for contacts and users\r\n      const dealershipsWithCounts = await Promise.all(\r\n        (data || []).map(async (dealership) => {\r\n          const [contactsResult, usersResult] = await Promise.all([\r\n            supabase\r\n              .from('dealership_contacts')\r\n              .select('id', { count: 'exact' })\r\n              .eq('dealership_id', dealership.id)\r\n              .is('deleted_at', null),\r\n            supabase\r\n              .from('dealer_memberships')\r\n              .select('id', { count: 'exact' })\r\n              .eq('dealer_id', dealership.id)\r\n              .eq('is_active', true)\r\n          ]);\r\n\r\n          return {\r\n            ...dealership,\r\n            contacts_count: contactsResult.count || 0,\r\n            users_count: usersResult.count || 0,\r\n          };\r\n        })\r\n      );\r\n\r\n      setDealerships(dealershipsWithCounts);\r\n    } catch (error) {\r\n      console.error('Error fetching dealerships:', error);\r\n      toast.error(t('messages.error'));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchDealerships();\r\n  }, [fetchDealerships]);\r\n\r\n  const handleEdit = (dealership: Dealership) => {\r\n    setEditingDealership(dealership);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleAdd = () => {\r\n    setEditingDealership(null);\r\n    setIsModalOpen(true);\r\n  };\r\n\r\n  const handleDelete = async (dealership: Dealership) => {\r\n    if (!confirm(t('messages.confirm_delete'))) return;\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .from('dealerships')\r\n        .update({ deleted_at: new Date().toISOString() })\r\n        .eq('id', dealership.id);\r\n\r\n      if (error) throw error;\r\n\r\n      toast.success(t('messages.deleted'));\r\n      fetchDealerships();\r\n    } catch (error) {\r\n      console.error('Error deleting dealership:', error);\r\n      toast.error(t('messages.error'));\r\n    }\r\n  };\r\n\r\n  const getStatusBadgeVariant = (status: DealershipStatus) => {\r\n    switch (status) {\r\n      case 'active': return 'default';\r\n      case 'inactive': return 'secondary';\r\n      case 'suspended': return 'destructive';\r\n      default: return 'secondary';\r\n    }\r\n  };\r\n\r\n  const getPlanBadgeVariant = (plan: SubscriptionPlan) => {\r\n    switch (plan) {\r\n      case 'basic': return 'outline';\r\n      case 'premium': return 'secondary';\r\n      case 'enterprise': return 'default';\r\n      default: return 'outline';\r\n    }\r\n  };\r\n\r\n  const handleModalClose = () => {\r\n    setIsModalOpen(false);\r\n    setEditingDealership(null);\r\n  };\r\n\r\n  const handleModalSuccess = () => {\r\n    fetchDealerships();\r\n    handleModalClose();\r\n  };\r\n\r\n  const handleViewDealer = (dealership: Dealership) => {\r\n    navigate(`/dealers/${dealership.id}`);\r\n  };\r\n\r\n  const handleInviteUser = (dealership: Dealership) => {\r\n    setSelectedDealershipForInvite(dealership.id);\r\n    setIsInviteModalOpen(true);\r\n  };\r\n\r\n  const handleInvitationSent = () => {\r\n    toast.success('Invitación enviada exitosamente');\r\n    fetchDealerships(); // Refresh data to show updated stats\r\n  };\r\n\r\n  const handleCloseInviteModal = () => {\r\n    setIsInviteModalOpen(false);\r\n    setSelectedDealershipForInvite(null);\r\n  };\r\n\r\n  const toggleStats = () => {\r\n    setShowStats(!showStats);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold tracking-tight\">{t('dealerships.title')}</h1>\r\n            <p className=\"text-muted-foreground\">\r\n              {t('dealerships.manage_description', 'Manage dealerships, their contacts and users')}\r\n            </p>\r\n          </div>\r\n          <div className=\"flex gap-2\">\r\n            <Button \r\n              variant=\"outline\" \r\n              onClick={toggleStats}\r\n              className=\"gap-2\"\r\n            >\r\n              <BarChart3 className=\"h-4 w-4\" />\r\n              {showStats ? t('dealerships.hide_stats') : t('dealerships.show_stats')}\r\n            </Button>\r\n            <Button onClick={handleAdd} className=\"gap-2\">\r\n              <Plus className=\"h-4 w-4\" />\r\n              {t('dealerships.add_new')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Statistics Cards */}\r\n        {showStats && (\r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n            {dealerships\r\n              .filter(d => d.status === 'active')\r\n              .slice(0, 6)\r\n              .map((dealership) => (\r\n                <DealershipStatsCard\r\n                  key={dealership.id}\r\n                  dealerId={dealership.id}\r\n                />\r\n              ))}\r\n          </div>\r\n        )}\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Filter className=\"h-5 w-5\" />\r\n              {t('common.filter')}\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"grid grid-cols-1 gap-4 sm:grid-cols-3\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\r\n                <Input\r\n                  placeholder={t('common.search')}\r\n                  value={search}\r\n                  onChange={(e) => setSearch(e.target.value)}\r\n                  className=\"pl-9\"\r\n                />\r\n              </div>\r\n              <Select value={statusFilter} onValueChange={(value: DealershipStatus | 'all') => setStatusFilter(value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder={t('dealerships.status')} />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">{t('dealerships.all_statuses', 'All Status')}</SelectItem>\r\n                  <SelectItem value=\"active\">{t('dealerships.active')}</SelectItem>\r\n                  <SelectItem value=\"inactive\">{t('dealerships.inactive')}</SelectItem>\r\n                  <SelectItem value=\"suspended\">{t('dealerships.suspended')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n              <Select value={planFilter} onValueChange={(value: SubscriptionPlan | 'all') => setPlanFilter(value)}>\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder={t('dealerships.subscription_plan')} />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">{t('dealerships.all_plans', 'All Plans')}</SelectItem>\r\n                  <SelectItem value=\"basic\">{t('dealerships.basic_plan')}</SelectItem>\r\n                  <SelectItem value=\"premium\">{t('dealerships.premium_plan')}</SelectItem>\r\n                  <SelectItem value=\"enterprise\">{t('dealerships.enterprise_plan')}</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Table */}\r\n        <Card>\r\n          <CardContent className=\"p-0\">\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead className=\"w-12\"></TableHead>\r\n                  <TableHead>{t('dealerships.name')}</TableHead>\r\n                  <TableHead>{t('dealerships.location', 'Location')}</TableHead>\r\n                  <TableHead className=\"text-center\">{t('dealerships.contacts_count')}</TableHead>\r\n                  <TableHead className=\"text-center\">{t('dealerships.users_count')}</TableHead>\r\n                  <TableHead>{t('dealerships.subscription_plan')}</TableHead>\r\n                  <TableHead>{t('dealerships.status')}</TableHead>\r\n                  <TableHead className=\"w-12\"></TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {loading ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} className=\"h-24 text-center\">\r\n                      {t('common.loading')}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : dealerships.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell colSpan={8} className=\"h-24 text-center\">\r\n                      {t('common.no_data')}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  dealerships.map((dealership) => (\r\n                    <TableRow \r\n                      key={dealership.id} \r\n                      className=\"cursor-pointer hover:bg-muted/50\"\r\n                      onClick={() => handleViewDealer(dealership)}\r\n                    >\r\n                      <TableCell>\r\n                        <Avatar className=\"h-10 w-10\">\r\n                          <AvatarImage src={dealership.logo_url} alt={dealership.name} />\r\n                          <AvatarFallback>\r\n                            <Building2 className=\"h-4 w-4\" />\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <div className=\"font-medium\">{dealership.name}</div>\r\n                          <div className=\"text-sm text-muted-foreground\">{dealership.email}</div>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"text-sm\">\r\n                          {dealership.city && dealership.state ? \r\n                            `${dealership.city}, ${dealership.state}` : \r\n                            dealership.city || dealership.state || '-'\r\n                          }\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell className=\"text-center\">\r\n                        <div className=\"flex items-center justify-center gap-1\">\r\n                          <Users className=\"h-4 w-4 text-muted-foreground\" />\r\n                          {dealership.contacts_count || 0}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell className=\"text-center\">\r\n                        <div className=\"flex items-center justify-center gap-1\">\r\n                          <UserPlus className=\"h-4 w-4 text-muted-foreground\" />\r\n                          {dealership.users_count || 0}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge variant={getPlanBadgeVariant(dealership.subscription_plan)}>\r\n                          {t(`dealerships.${dealership.subscription_plan}_plan`)}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge variant={getStatusBadgeVariant(dealership.status)}>\r\n                          {t(`dealerships.${dealership.status}`)}\r\n                        </Badge>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <DropdownMenu>\r\n                          <DropdownMenuTrigger asChild>\r\n                            <Button \r\n                              variant=\"ghost\" \r\n                              size=\"sm\"\r\n                              onClick={(e) => e.stopPropagation()}\r\n                            >\r\n                              <MoreHorizontal className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </DropdownMenuTrigger>\r\n                          <DropdownMenuContent align=\"end\">\r\n                            <DropdownMenuItem onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleViewDealer(dealership);\r\n                            }}>\r\n                              <Eye className=\"mr-2 h-4 w-4\" />\r\n                              {t('common.view')}\r\n                            </DropdownMenuItem>\r\n                            <DropdownMenuItem onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleInviteUser(dealership);\r\n                            }}>\r\n                              <Mail className=\"mr-2 h-4 w-4\" />\r\n                              Invitar Usuario\r\n                            </DropdownMenuItem>\r\n                            <DropdownMenuItem onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleEdit(dealership);\r\n                            }}>\r\n                              <Edit className=\"mr-2 h-4 w-4\" />\r\n                              {t('common.edit')}\r\n                            </DropdownMenuItem>\r\n                            <DropdownMenuItem onClick={(e) => {\r\n                              e.stopPropagation();\r\n                              handleDelete(dealership);\r\n                            }}>\r\n                              <Trash2 className=\"mr-2 h-4 w-4\" />\r\n                              {t('common.delete')}\r\n                            </DropdownMenuItem>\r\n                          </DropdownMenuContent>\r\n                        </DropdownMenu>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      <DealershipModal\r\n        isOpen={isModalOpen}\r\n        onClose={handleModalClose}\r\n        onSuccess={handleModalSuccess}\r\n        dealership={editingDealership}\r\n      />\r\n\r\n      {selectedDealershipForInvite && (\r\n        <DealerInvitationModal\r\n          isOpen={isInviteModalOpen}\r\n          onClose={handleCloseInviteModal}\r\n          dealerId={selectedDealershipForInvite}\r\n          onInvitationSent={handleInvitationSent}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\DetailHub.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\GetReady.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\InvitationAccept.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3123,3126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3123,3126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":160,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":160,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4371,4374],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4371,4374],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { supabase } from '@/integrations/supabase/client';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  Building2, \r\n  UserPlus, \r\n  CheckCircle, \r\n  XCircle, \r\n  Clock, \r\n  Loader2,\r\n  Mail,\r\n  Shield\r\n} from 'lucide-react';\r\n\r\ninterface InvitationDetails {\r\n  id: string;\r\n  dealer_id: number;\r\n  email: string;\r\n  role_name: string;\r\n  expires_at: string;\r\n  accepted_at?: string;\r\n  dealership_name?: string;\r\n  inviter_email?: string;\r\n}\r\n\r\nexport function InvitationAccept() {\r\n  const { token } = useParams<{ token: string }>();\r\n  const { t } = useTranslation();\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const { toast } = useToast();\r\n\r\n  const [invitation, setInvitation] = useState<InvitationDetails | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [accepting, setAccepting] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      fetchInvitationDetails();\r\n    } else {\r\n      setError('Token de invitación no válido');\r\n      setLoading(false);\r\n    }\r\n  }, [token, fetchInvitationDetails]);\r\n\r\n  const fetchInvitationDetails = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      // Fetch invitation details\r\n      const { data: invitationData, error: invitationError } = await supabase\r\n        .from('dealer_invitations')\r\n        .select(`\r\n          id,\r\n          dealer_id,\r\n          email,\r\n          role_name,\r\n          expires_at,\r\n          accepted_at,\r\n          inviter_id\r\n        `)\r\n        .eq('invitation_token', token)\r\n        .single();\r\n\r\n      if (invitationError) throw invitationError;\r\n\r\n      if (!invitationData) {\r\n        throw new Error(t('invitations.accept.not_found'));\r\n      }\r\n\r\n      // Check if invitation is expired\r\n      const expiresAt = new Date(invitationData.expires_at);\r\n      const now = new Date();\r\n\r\n      if (expiresAt < now) {\r\n        throw new Error(t('invitations.accept.expired'));\r\n      }\r\n\r\n      // Fetch dealership details\r\n      const { data: dealershipData } = await supabase\r\n        .from('dealerships')\r\n        .select('name')\r\n        .eq('id', invitationData.dealer_id)\r\n        .single();\r\n\r\n      // Fetch inviter details\r\n      const { data: inviterData } = await supabase\r\n        .from('profiles')\r\n        .select('email')\r\n        .eq('id', invitationData.inviter_id)\r\n        .single();\r\n\r\n      setInvitation({\r\n        ...invitationData,\r\n        dealership_name: dealershipData?.name || t('dealerships.title'),\r\n        inviter_email: inviterData?.email || t('users.admin'),\r\n      });\r\n    } catch (err: any) {\r\n      console.error('Error fetching invitation:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [token, t]);\r\n\r\n  const handleAcceptInvitation = async () => {\r\n    if (!user) {\r\n      toast({\r\n        title: t('invitations.accept.auth_required'),\r\n        description: t('invitations.accept.auth_required_desc'),\r\n        variant: 'destructive',\r\n      });\r\n      navigate('/auth');\r\n      return;\r\n    }\r\n\r\n    if (!invitation) return;\r\n\r\n    // Verify email matches\r\n    if (invitation.email !== user.email) {\r\n      toast({\r\n        title: t('invitations.accept.email_not_match'),\r\n        description: t('invitations.accept.email_not_match_desc'),\r\n        variant: 'destructive',\r\n      });\r\n      return;\r\n    }\r\n\r\n    setAccepting(true);\r\n\r\n    try {\r\n      const { error } = await supabase\r\n        .rpc('accept_dealer_invitation', {\r\n          p_invitation_token: token!,\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      toast({\r\n        title: t('common.success'),\r\n        description: t('invitations.accept.success_message', { dealership: invitation.dealership_name }),\r\n      });\r\n\r\n      // Redirect to dealership dashboard\r\n      navigate('/dashboard');\r\n    } catch (err: any) {\r\n      console.error('Error accepting invitation:', err);\r\n      toast({\r\n        title: t('common.error'),\r\n        description: err.message || t('messages.error'),\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setAccepting(false);\r\n    }\r\n  };\r\n\r\n  const getRoleDisplayName = (roleName: string) => {\r\n    const roleMap: Record<string, string> = {\r\n      dealer_user: t('invitations.dealer_user'),\r\n      dealer_salesperson: t('invitations.dealer_salesperson'),\r\n      dealer_service_advisor: t('invitations.dealer_service_advisor'),\r\n      dealer_sales_manager: t('invitations.dealer_sales_manager'),\r\n      dealer_service_manager: t('invitations.dealer_service_manager'),\r\n      dealer_manager: t('invitations.dealer_manager'),\r\n      dealer_admin: t('invitations.dealer_admin'),\r\n    };\r\n    return roleMap[roleName] || roleName;\r\n  };\r\n\r\n  const getTimeUntilExpiration = () => {\r\n    if (!invitation) return '';\r\n    \r\n    const expiresAt = new Date(invitation.expires_at);\r\n    const now = new Date();\r\n    const diffInHours = Math.ceil((expiresAt.getTime() - now.getTime()) / (1000 * 60 * 60));\r\n    \r\n    if (diffInHours < 24) {\r\n      return `${diffInHours} horas`;\r\n    }\r\n    return `${Math.ceil(diffInHours / 24)} días`;\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardContent className=\"pt-6\">\r\n            <div className=\"flex flex-col items-center space-y-4\">\r\n              <Loader2 className=\"h-8 w-8 animate-spin\" />\r\n              <p>Verificando invitación...</p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error || !invitation) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardHeader className=\"text-center\">\r\n            <XCircle className=\"h-12 w-12 text-destructive mx-auto mb-4\" />\r\n            <CardTitle>Invitación No Válida</CardTitle>\r\n            <CardDescription>\r\n              {error || 'No se pudo encontrar la invitación'}\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Button \r\n              className=\"w-full\" \r\n              onClick={() => navigate('/auth')}\r\n            >\r\n              Ir al Inicio\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (invitation.accepted_at) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\r\n        <Card className=\"w-full max-w-md\">\r\n          <CardHeader className=\"text-center\">\r\n            <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\r\n            <CardTitle>Invitación Ya Aceptada</CardTitle>\r\n            <CardDescription>\r\n              Esta invitación ya ha sido aceptada anteriormente\r\n            </CardDescription>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Button \r\n              className=\"w-full\" \r\n              onClick={() => navigate('/dashboard')}\r\n            >\r\n              Ir al Dashboard\r\n            </Button>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\r\n      <Card className=\"w-full max-w-lg\">\r\n        <CardHeader className=\"text-center\">\r\n          <UserPlus className=\"h-12 w-12 text-primary mx-auto mb-4\" />\r\n          <CardTitle>Invitación al Concesionario</CardTitle>\r\n          <CardDescription>\r\n            Has sido invitado a unirte a un concesionario\r\n          </CardDescription>\r\n        </CardHeader>\r\n        \r\n        <CardContent className=\"space-y-6\">\r\n          {/* Invitation Details */}\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center gap-3 p-3 bg-muted/50 rounded-lg\">\r\n              <Building2 className=\"h-5 w-5 text-muted-foreground\" />\r\n              <div>\r\n                <p className=\"font-medium\">{invitation.dealership_name}</p>\r\n                <p className=\"text-sm text-muted-foreground\">Concesionario</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-3 p-3 bg-muted/50 rounded-lg\">\r\n              <Shield className=\"h-5 w-5 text-muted-foreground\" />\r\n              <div>\r\n                <p className=\"font-medium\">{getRoleDisplayName(invitation.role_name)}</p>\r\n                <p className=\"text-sm text-muted-foreground\">Rol asignado</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-3 p-3 bg-muted/50 rounded-lg\">\r\n              <Mail className=\"h-5 w-5 text-muted-foreground\" />\r\n              <div>\r\n                <p className=\"font-medium\">{invitation.email}</p>\r\n                <p className=\"text-sm text-muted-foreground\">\r\n                  Invitado por {invitation.inviter_email}\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-3 p-3 bg-orange-50 dark:bg-orange-950/20 rounded-lg\">\r\n              <Clock className=\"h-5 w-5 text-orange-500\" />\r\n              <div>\r\n                <p className=\"font-medium text-orange-700 dark:text-orange-300\">\r\n                  Expira en {getTimeUntilExpiration()}\r\n                </p>\r\n                <p className=\"text-sm text-orange-600 dark:text-orange-400\">\r\n                  Esta invitación tiene fecha límite\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* User Authentication Check */}\r\n          {!user ? (\r\n            <div className=\"space-y-3\">\r\n              <p className=\"text-sm text-muted-foreground text-center\">\r\n                Debes iniciar sesión con el email <strong>{invitation.email}</strong> para aceptar esta invitación\r\n              </p>\r\n              <Button \r\n                className=\"w-full\" \r\n                onClick={() => navigate('/auth')}\r\n              >\r\n                Iniciar Sesión\r\n              </Button>\r\n            </div>\r\n          ) : user.email !== invitation.email ? (\r\n            <div className=\"space-y-3\">\r\n              <div className=\"p-3 bg-destructive/10 border border-destructive/20 rounded-lg\">\r\n                <p className=\"text-sm text-destructive\">\r\n                  Esta invitación fue enviada a <strong>{invitation.email}</strong> pero has iniciado sesión con <strong>{user.email}</strong>\r\n                </p>\r\n              </div>\r\n              <Button \r\n                variant=\"outline\" \r\n                className=\"w-full\" \r\n                onClick={() => navigate('/auth')}\r\n              >\r\n                Cambiar de Cuenta\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-3\">\r\n              <Button \r\n                className=\"w-full\" \r\n                onClick={handleAcceptInvitation}\r\n                disabled={accepting}\r\n              >\r\n                {accepting ? (\r\n                  <>\r\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                    Aceptando...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <CheckCircle className=\"mr-2 h-4 w-4\" />\r\n                    Aceptar Invitación\r\n                  </>\r\n                )}\r\n              </Button>\r\n              \r\n              <Button \r\n                variant=\"outline\" \r\n                className=\"w-full\"\r\n                onClick={() => navigate('/dashboard')}\r\n                disabled={accepting}\r\n              >\r\n                Declinar\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Management.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\NFCTracking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\NotFound.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Phase3Dashboard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2562,2565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2562,2565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2756,2759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2756,2759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { \r\n  BarChart3, \r\n  Bot, \r\n  Workflow, \r\n  MessageSquare, \r\n  Activity,\r\n  Zap,\r\n  Users,\r\n  TrendingUp,\r\n  Settings,\r\n  Sparkles\r\n} from 'lucide-react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { CommunicationAnalyticsDashboard } from '@/components/analytics/CommunicationAnalyticsDashboard';\r\nimport { AIAssistant } from '@/components/ai/AIAssistant';\r\nimport { VisualWorkflowBuilder } from '@/components/workflows/VisualWorkflowBuilder';\r\nimport { EnhancedChatInterface } from '@/components/chat/EnhancedChatInterface';\r\nimport { PerformanceMonitor } from '@/components/performance/PerformanceMonitor';\r\nimport { useTabPersistence } from '@/hooks/useTabPersistence';\r\n\r\n// Mock data\r\nconst mockMessages = [\r\n  {\r\n    id: '1',\r\n    content: 'Hey team, just wanted to update you on the Johnson order progress.',\r\n    user_id: 'user1',\r\n    user_name: 'Mike Johnson',\r\n    user_avatar: undefined,\r\n    created_at: new Date(Date.now() - 3600000).toISOString(),\r\n    message_type: 'text' as const,\r\n    delivery_status: 'read' as const\r\n  },\r\n  {\r\n    id: '2',\r\n    content: 'Thanks for the update! When do we expect completion?',\r\n    user_id: 'user2',\r\n    user_name: 'Sarah Chen',\r\n    created_at: new Date(Date.now() - 3000000).toISOString(),\r\n    message_type: 'text' as const,\r\n    delivery_status: 'read' as const\r\n  },\r\n  {\r\n    id: '3',\r\n    content: 'Should be ready by tomorrow afternoon. I\\'ll send photos once it\\'s complete.',\r\n    user_id: 'user1',\r\n    user_name: 'Mike Johnson',\r\n    created_at: new Date(Date.now() - 1800000).toISOString(),\r\n    message_type: 'text' as const,\r\n    delivery_status: 'delivered' as const\r\n  }\r\n];\r\n\r\nconst mockParticipants = [\r\n  {\r\n    id: 'user1',\r\n    name: 'Mike Johnson',\r\n    status: 'online' as const\r\n  },\r\n  {\r\n    id: 'user2',\r\n    name: 'Sarah Chen',\r\n    status: 'online' as const\r\n  },\r\n  {\r\n    id: 'currentUser',\r\n    name: 'You',\r\n    status: 'online' as const\r\n  }\r\n];\r\n\r\nexport default function Phase3Dashboard() {\r\n  const { t } = useTranslation();\r\n  const [activeTab, setActiveTab] = useState('overview');\r\n  const [selectedWorkflow, setSelectedWorkflow] = useState(null);\r\n\r\n  const handleSendMessage = (content: string, type?: string, metadata?: any) => {\r\n    console.log('Sending message:', { content, type, metadata });\r\n    // In real implementation, this would send the message via API\r\n  };\r\n\r\n  const handleSaveWorkflow = (workflow: any) => {\r\n    console.log('Saving workflow:', workflow);\r\n    // In real implementation, this would save to backend\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold flex items-center gap-3\">\r\n              <Sparkles className=\"h-8 w-8 text-blue-500\" />\r\n              {t('phase3.advanced_dashboard', 'Advanced Communication & AI Dashboard')}\r\n            </h1>\r\n            <p className=\"text-muted-foreground mt-2\">\r\n              {t('phase3.description', 'AI-powered analytics, workflows, and enhanced communication tools')}\r\n            </p>\r\n          </div>\r\n          <Badge variant=\"outline\" className=\"text-sm\">\r\n            Phase 3 Complete\r\n          </Badge>\r\n        </div>\r\n\r\n        {/* Quick Stats */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">AI Insights Generated</p>\r\n                  <p className=\"text-2xl font-bold\">47</p>\r\n                </div>\r\n                <Bot className=\"h-8 w-8 text-blue-500\" />\r\n              </div>\r\n              <div className=\"text-xs text-green-600 flex items-center gap-1 mt-2\">\r\n                <TrendingUp className=\"h-3 w-3\" />\r\n                +23% this week\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Workflows</p>\r\n                  <p className=\"text-2xl font-bold\">12</p>\r\n                </div>\r\n                <Workflow className=\"h-8 w-8 text-purple-500\" />\r\n              </div>\r\n              <div className=\"text-xs text-blue-600 flex items-center gap-1 mt-2\">\r\n                <Zap className=\"h-3 w-3\" />\r\n                89% automation rate\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">Messages Today</p>\r\n                  <p className=\"text-2xl font-bold\">284</p>\r\n                </div>\r\n                <MessageSquare className=\"h-8 w-8 text-green-500\" />\r\n              </div>\r\n              <div className=\"text-xs text-green-600 flex items-center gap-1 mt-2\">\r\n                <TrendingUp className=\"h-3 w-3\" />\r\n                +15% vs yesterday\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <p className=\"text-sm font-medium text-muted-foreground\">System Performance</p>\r\n                  <p className=\"text-2xl font-bold\">98.2%</p>\r\n                </div>\r\n                <Activity className=\"h-8 w-8 text-emerald-500\" />\r\n              </div>\r\n              <div className=\"text-xs text-emerald-600 flex items-center gap-1 mt-2\">\r\n                <TrendingUp className=\"h-3 w-3\" />\r\n                Excellent uptime\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Main Content Tabs */}\r\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\r\n          <TabsList className=\"grid w-full grid-cols-6\">\r\n            <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\r\n              <BarChart3 className=\"h-4 w-4\" />\r\n              {t('phase3.overview', 'Overview')}\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"analytics\" className=\"flex items-center gap-2\">\r\n              <BarChart3 className=\"h-4 w-4\" />\r\n              {t('phase3.analytics', 'Analytics')}\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"ai-assistant\" className=\"flex items-center gap-2\">\r\n              <Bot className=\"h-4 w-4\" />\r\n              {t('phase3.ai_assistant', 'AI Assistant')}\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"workflows\" className=\"flex items-center gap-2\">\r\n              <Workflow className=\"h-4 w-4\" />\r\n              {t('phase3.workflows', 'Workflows')}\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"chat\" className=\"flex items-center gap-2\">\r\n              <MessageSquare className=\"h-4 w-4\" />\r\n              {t('phase3.enhanced_chat', 'Enhanced Chat')}\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"performance\" className=\"flex items-center gap-2\">\r\n              <Activity className=\"h-4 w-4\" />\r\n              {t('phase3.performance', 'Performance')}\r\n            </TabsTrigger>\r\n          </TabsList>\r\n\r\n          <TabsContent value=\"overview\" className=\"space-y-6\">\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n              {/* AI Assistant Preview */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Bot className=\"h-5 w-5 text-blue-500\" />\r\n                    {t('phase3.ai_quick_help', 'AI Quick Help')}\r\n                  </CardTitle>\r\n                  <CardDescription>\r\n                    {t('phase3.ai_description', 'Get instant insights and assistance')}\r\n                  </CardDescription>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <AIAssistant\r\n                    dealerId={1}\r\n                    context=\"dashboard\"\r\n                    isCompact={true}\r\n                  />\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* Recent Activity */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Activity className=\"h-5 w-5 text-green-500\" />\r\n                    {t('phase3.recent_activity', 'Recent Activity')}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center gap-3 text-sm\">\r\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\r\n                      <span>Workflow \"Order Follow-up\" executed</span>\r\n                      <span className=\"text-muted-foreground ml-auto\">2m ago</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3 text-sm\">\r\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\r\n                      <span>AI generated 3 new insights</span>\r\n                      <span className=\"text-muted-foreground ml-auto\">5m ago</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3 text-sm\">\r\n                      <div className=\"w-2 h-2 bg-purple-500 rounded-full\" />\r\n                      <span>New chat message in Order #SO-1234</span>\r\n                      <span className=\"text-muted-foreground ml-auto\">8m ago</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-3 text-sm\">\r\n                      <div className=\"w-2 h-2 bg-yellow-500 rounded-full\" />\r\n                      <span>Performance alert resolved</span>\r\n                      <span className=\"text-muted-foreground ml-auto\">12m ago</span>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n\r\n              {/* System Health */}\r\n              <Card>\r\n                <CardHeader>\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Activity className=\"h-5 w-5 text-emerald-500\" />\r\n                    {t('phase3.system_health', 'System Health')}\r\n                  </CardTitle>\r\n                </CardHeader>\r\n                <CardContent>\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm\">API Response Time</span>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\r\n                        <span className=\"text-sm font-medium\">142ms</span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm\">Database Performance</span>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\r\n                        <span className=\"text-sm font-medium\">Excellent</span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm\">AI Processing</span>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\r\n                        <span className=\"text-sm font-medium\">Active</span>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-sm\">Message Queue</span>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\r\n                        <span className=\"text-sm font-medium\">Healthy</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"analytics\">\r\n            <CommunicationAnalyticsDashboard dealerId={1} />\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"ai-assistant\">\r\n            <div className=\"flex justify-center\">\r\n              <AIAssistant\r\n                dealerId={1}\r\n                context=\"general\"\r\n                className=\"w-full max-w-4xl\"\r\n              />\r\n            </div>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"workflows\">\r\n            <VisualWorkflowBuilder\r\n              dealerId={1}\r\n              onSave={handleSaveWorkflow}\r\n              editingWorkflow={selectedWorkflow}\r\n            />\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"chat\">\r\n            <Card className=\"h-[600px]\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <MessageSquare className=\"h-5 w-5\" />\r\n                  {t('phase3.enhanced_chat_demo', 'Enhanced Chat Demo')}\r\n                </CardTitle>\r\n                <CardDescription>\r\n                  {t('phase3.chat_description', 'Advanced chat interface with threading, reactions, and rich media')}\r\n                </CardDescription>\r\n              </CardHeader>\r\n              <CardContent className=\"p-0 h-full\">\r\n                <EnhancedChatInterface\r\n                  conversationId=\"demo-conversation\"\r\n                  messages={mockMessages}\r\n                  participants={mockParticipants}\r\n                  currentUserId=\"currentUser\"\r\n                  onSendMessage={handleSendMessage}\r\n                  allowVoice={true}\r\n                  allowFiles={true}\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          <TabsContent value=\"performance\">\r\n            <PerformanceMonitor dealerId={1} />\r\n          </TabsContent>\r\n        </Tabs>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Productivity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Profile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\QRRedirect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\ReconOrders.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3443,3446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3443,3446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5751,5754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5751,5754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8344,8347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8344,8347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":225,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8386,8389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8386,8389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8484,8487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8484,8487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":232,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8798,8801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8798,8801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8877,8880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8877,8880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":235,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8975,8978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8975,8978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":242,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9321,9324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9321,9324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":244,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9400,9403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9400,9403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":246,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9546,9549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9546,9549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Plus, RefreshCw } from 'lucide-react';\r\nimport { OrderFilters } from '@/components/orders/OrderFilters';\r\nimport { OrderDataTable } from '@/components/orders/OrderDataTable';\r\nimport { ReconOrderModal } from '@/components/orders/ReconOrderModal';\r\nimport { useReconOrderManagement } from '@/hooks/useReconOrderManagement';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useTabPersistence, useViewModePersistence, useSearchPersistence } from '@/hooks/useTabPersistence';\r\nimport { useAccessibleDealerships } from '@/hooks/useAccessibleDealerships';\r\n\r\n// New improved components\r\nimport { ReconDashboard } from '@/components/recon/ReconDashboard';\r\nimport { ReconCostingSystem } from '@/components/recon/ReconCostingSystem';\r\nimport { ReconApprovalWorkflow } from '@/components/recon/ReconApprovalWorkflow';\r\nimport { OrderKanbanBoard } from '@/components/sales/OrderKanbanBoard';\r\nimport { QuickFilterBar } from '@/components/sales/QuickFilterBar';\r\nimport { OrderCalendarView } from '@/components/orders/OrderCalendarView';\r\n\r\nimport { EnhancedOrderDetailModal } from '@/components/orders/EnhancedOrderDetailModal';\r\nimport type { ReconOrder } from \"@/hooks/useReconOrderManagement\";\r\n\r\nexport default function ReconOrders() {\r\n  const { t } = useTranslation();\r\n  const { dealerships } = useAccessibleDealerships();\r\n  \r\n  // Persistent state\r\n  const [activeFilter, setActiveFilter] = useTabPersistence('recon_orders');\r\n  const [viewMode, setViewMode] = useViewModePersistence('recon_orders');\r\n  const [searchTerm, setSearchTerm] = useSearchPersistence('recon_orders');\r\n  \r\n  // Non-persistent UI state\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [selectedOrder, setSelectedOrder] = useState<ReconOrder | null>(null);\r\n  const [previewOrder, setPreviewOrder] = useState<ReconOrder | null>(null);\r\n  const [lastRefresh, setLastRefresh] = useState(new Date());\r\n\r\n  const {\r\n    orders,\r\n    tabCounts,\r\n    filters,\r\n    loading,\r\n    updateFilters,\r\n    refreshData,\r\n    createOrder,\r\n    updateOrder,\r\n    deleteOrder,\r\n  } = useReconOrderManagement(activeFilter);\r\n\r\n  // Get dealer ID from orders or fallback to first accessible dealership\r\n  const dealerId = orders.length > 0 ? orders[0].dealerId : (dealerships.length > 0 ? dealerships[0].id : 5);\r\n\r\n  // Real-time updates are handled by useReconOrderManagement hook\r\n  // Keep lastRefresh for UI purposes\r\n  useEffect(() => {\r\n    setLastRefresh(new Date());\r\n  }, [orders]);\r\n\r\n  const handleCreateOrder = () => {\r\n    setSelectedOrder(null);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCreateOrderWithDate = (selectedDate?: Date) => {\r\n    setSelectedOrder(null);\r\n    // If date is provided from calendar, we could pre-populate the due_date\r\n    // For now, just open the modal\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleEditOrder = (order: ReconOrder) => {\r\n    setSelectedOrder(order);\r\n    setShowModal(true);\r\n    setPreviewOrder(null); // Close preview if open\r\n  };\r\n\r\n  const handleViewOrder = (order: ReconOrder) => {\r\n    setPreviewOrder(order);\r\n  };\r\n\r\n  const handleDeleteOrder = async (orderId: string) => {\r\n    if (confirm(t('messages.confirm_delete_order'))) {\r\n      await deleteOrder(orderId);\r\n    }\r\n  };\r\n\r\n  const handleSaveOrder = async (orderData: any) => {\r\n    try {\r\n      if (selectedOrder) {\r\n        await updateOrder(selectedOrder.id, orderData);\r\n      } else {\r\n        await createOrder(orderData);\r\n      }\r\n      setShowModal(false);\r\n      refreshData();\r\n    } catch (error) {\r\n      console.error('Error saving order:', error);\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (orderId: string, newStatus: string) => {\r\n    await updateOrder(orderId, { status: newStatus });\r\n    // Real-time updates will handle the refresh automatically\r\n  };\r\n\r\n  const handleCardClick = (filter: string) => {\r\n    setActiveFilter(filter);\r\n    if (filter !== 'dashboard') {\r\n      setViewMode('kanban');\r\n    }\r\n  };\r\n\r\n  // Transform ReconOrder to Order format for compatibility with OrderKanbanBoard/OrderDataTable\r\n  const transformedOrders = orders.map(order => ({\r\n    id: order.id,\r\n    order_number: order.orderNumber,\r\n    customer_name: t('recon_defaults.default_customer'),\r\n    customerName: t('recon_defaults.default_customer'),\r\n    vehicle_year: order.vehicleYear,\r\n    vehicle_make: order.vehicleMake,\r\n    vehicle_model: order.vehicleModel,\r\n    vehicle_vin: order.vehicleVin,\r\n    vin: order.vehicleVin || '',\r\n    stock: order.stockNumber,\r\n    year: order.vehicleYear || 0,\r\n    make: order.vehicleMake || '',\r\n    model: order.vehicleModel || '',\r\n    status: order.status,\r\n    services: order.services || [],\r\n    total_amount: order.reconCost,\r\n    created_at: order.createdAt,\r\n    createdAt: order.createdAt,\r\n    updated_at: order.updatedAt,\r\n    updatedAt: order.updatedAt,\r\n    due_date: order.dueDate,\r\n    priority: order.priority || 'normal',\r\n    // Recon specific fields\r\n    condition_grade: order.conditionGrade,\r\n    recon_category: order.reconCategory,\r\n    // Required fields for Order interface\r\n    service: t('recon_defaults.default_service'),\r\n    description: `${t('recon_defaults.default_service')} - ${order.reconCategory || t('common.general')}`,\r\n    price: order.reconCost || 0,\r\n    advisor: t('recon_defaults.default_advisor'),\r\n    department: t('recon_defaults.default_department')\r\n  }));\r\n\r\n  // Tab counts without ReconHub (now moved to Get Ready module)\r\n  const enhancedTabCounts = tabCounts;\r\n\r\n  // Filter orders based on search term\r\n  const filteredOrders = transformedOrders.filter((order: any) => {\r\n    if (!searchTerm) return true;\r\n    const searchLower = searchTerm.toLowerCase();\r\n    return (\r\n      order.id.toLowerCase().includes(searchLower) ||\r\n      order.vehicle_vin?.toLowerCase().includes(searchLower) ||\r\n      order.stock?.toLowerCase().includes(searchLower) ||\r\n      order.order_number?.toLowerCase().includes(searchLower) ||\r\n      `${order.vehicle_year} ${order.vehicle_make} ${order.vehicle_model}`.toLowerCase().includes(searchLower)\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n        {/* Header Actions */}  \r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <h1 className=\"text-2xl font-bold\">{t('pages.recon_orders')}</h1>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={refreshData}\r\n              disabled={loading}\r\n            >\r\n              <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\r\n              {t('common.refresh')}\r\n            </Button>\r\n            <Button size=\"sm\" onClick={handleCreateOrder}>\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              {t('recon.new_recon_order')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Filter Bar */}\r\n        <QuickFilterBar\r\n          activeFilter={activeFilter}\r\n          tabCounts={enhancedTabCounts as unknown as Record<string, number>}\r\n          onFilterChange={setActiveFilter}\r\n          searchTerm={searchTerm}\r\n          onSearchChange={setSearchTerm}\r\n          viewMode={viewMode}\r\n          onViewModeChange={setViewMode}\r\n          showFilters={showFilters}\r\n          onToggleFilters={() => setShowFilters(!showFilters)}\r\n        />\r\n\r\n        {/* Filters */}\r\n        {showFilters && (\r\n          <OrderFilters\r\n            filters={filters}\r\n            onFiltersChange={updateFilters}\r\n            onClose={() => setShowFilters(false)}\r\n          />\r\n        )}\r\n\r\n        {/* Main Content Area */}\r\n        <div className=\"space-y-6\">\r\n          {activeFilter === 'dashboard' ? (\r\n            <ReconDashboard \r\n              orders={orders}\r\n              tabCounts={tabCounts as unknown as Record<string, number>} \r\n              onCardClick={handleCardClick}\r\n            />\r\n          ) : (\r\n            <>\r\n              {viewMode === 'kanban' ? (\r\n                <OrderKanbanBoard\r\n                  orders={filteredOrders as any[]}\r\n                  onEdit={(order: any) => handleEditOrder(orders.find(o => o.id === order.id)!)}\r\n                  onView={(order: any) => handleViewOrder(orders.find(o => o.id === order.id)!)}\r\n                  onDelete={handleDeleteOrder}\r\n                  onStatusChange={handleStatusChange}\r\n                />\r\n              ) : viewMode === 'calendar' ? (\r\n                <OrderCalendarView\r\n                  orders={filteredOrders as any[]}\r\n                  loading={loading}\r\n                  onEdit={(order: any) => handleEditOrder(orders.find(o => o.id === order.id)!)}\r\n                  onView={(order: any) => handleViewOrder(orders.find(o => o.id === order.id)!)}\r\n                  onDelete={handleDeleteOrder}\r\n                  onStatusChange={handleStatusChange}\r\n                  onCreateOrder={handleCreateOrderWithDate}\r\n                />\r\n              ) : (\r\n                <OrderDataTable\r\n                  orders={filteredOrders as any[]}\r\n                  loading={loading}\r\n                  onEdit={(order: any) => handleEditOrder(orders.find(o => o.id === order.id)!)}\r\n                  onDelete={handleDeleteOrder}\r\n                  onView={(order: any) => handleViewOrder(orders.find(o => o.id === order.id)!)}\r\n                  tabType={activeFilter}\r\n                />\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {/* Modals */}\r\n        {showModal && (\r\n          <ReconOrderModal\r\n            isOpen={showModal}\r\n            onClose={() => setShowModal(false)}\r\n            onSubmit={handleSaveOrder}\r\n            order={selectedOrder}\r\n            mode={selectedOrder ? 'edit' : 'create'}\r\n          />\r\n        )}\r\n\r\n        {/* Detail Modal - Enhanced Full Screen */}\r\n        {previewOrder && (\r\n          <EnhancedOrderDetailModal\r\n            order={previewOrder}\r\n            open={true}\r\n            onClose={() => setPreviewOrder(null)}\r\n            onEdit={handleEditOrder}\r\n            onDelete={handleDeleteOrder}\r\n            onStatusChange={handleStatusChange}\r\n          />\r\n        )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Reports.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\SalesOrders.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":119,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4786,4789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4786,4789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":125,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4947,4950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4947,4950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5203,5206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5203,5206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7049,7052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7049,7052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useRef } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Plus, RefreshCw, Search, Clock } from 'lucide-react';\r\nimport { OrderFilters } from '@/components/orders/OrderFilters';\r\nimport { OrderDataTable } from '@/components/orders/OrderDataTable';\r\nimport { OrderModal } from '@/components/orders/OrderModal';\r\nimport { useOrderManagement } from '@/hooks/useOrderManagement';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useTabPersistence, useViewModePersistence, useSearchPersistence } from '@/hooks/useTabPersistence';\r\n\r\n// New improved components\r\nimport { SmartDashboard } from '@/components/sales/SmartDashboard';\r\nimport { OrderKanbanBoard } from '@/components/sales/OrderKanbanBoard';\r\nimport { QuickFilterBar } from '@/components/sales/QuickFilterBar';\r\nimport { OrderPreviewPanel } from '@/components/sales/OrderPreviewPanel';\r\nimport { EnhancedOrderDetailModal } from '@/components/orders/EnhancedOrderDetailModal';\r\nimport { OrderCalendarView } from '@/components/orders/OrderCalendarView';\r\n\r\n// Removed TABS - now using QuickFilterBar instead\r\n\r\n// Removed mock chart data - now handled by SmartDashboard\r\n\r\nexport default function SalesOrders() {\r\n  const { t } = useTranslation();\r\n  \r\n  useEffect(() => {\r\n    console.log('[RouteMount] SalesOrders mounted');\r\n    return () => console.log('[RouteUnmount] SalesOrders unmounted');\r\n  }, []);\r\n  \r\n  // Persistent state\r\n  const [activeFilter, setActiveFilter] = useTabPersistence('sales_orders');\r\n  const [viewMode, setViewMode] = useViewModePersistence('sales_orders');\r\n  const [searchTerm, setSearchTerm] = useSearchPersistence('sales_orders');\r\n  \r\n  // Non-persistent UI state\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n  const [previewOrder, setPreviewOrder] = useState(null);\r\n  const [lastRefresh, setLastRefresh] = useState(new Date());\r\n  const [nextRefresh, setNextRefresh] = useState<number>(60);\r\n  const lastChangeTimeRef = useRef<number>(0);\r\n  const refreshIntervalRef = useRef<NodeJS.Timeout>();\r\n  const countdownIntervalRef = useRef<NodeJS.Timeout>();\r\n\r\n  const {\r\n    orders,\r\n    tabCounts,\r\n    filters,\r\n    loading,\r\n    updateFilters,\r\n    refreshData,\r\n    createOrder,\r\n    updateOrder,\r\n    deleteOrder,\r\n  } = useOrderManagement(activeFilter);\r\n\r\n  // Auto-refresh with countdown timer - optimized to prevent conflicts\r\n  useEffect(() => {\r\n    // Clear any existing intervals\r\n    if (refreshIntervalRef.current) clearInterval(refreshIntervalRef.current);\r\n    if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\r\n    \r\n    // Countdown timer (updates every second)\r\n    countdownIntervalRef.current = setInterval(() => {\r\n      setNextRefresh(prev => {\r\n        if (prev <= 1) {\r\n          return 60; // Reset to 60 seconds\r\n        }\r\n        return prev - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    // Refresh timer (every 60 seconds) - with conflict prevention\r\n    refreshIntervalRef.current = setInterval(() => {\r\n      const now = Date.now();\r\n      // Only refresh if no recent user activity and not currently loading\r\n      if (now - lastChangeTimeRef.current > 10000 && !loading) {\r\n        console.log('Auto-refresh triggered');\r\n        refreshData();\r\n        setLastRefresh(new Date());\r\n        setNextRefresh(60); // Reset countdown\r\n      }\r\n    }, 60000);\r\n\r\n    // Track when status changes occur\r\n    const handleStatusChangeEvent = () => {\r\n      lastChangeTimeRef.current = Date.now();\r\n      setNextRefresh(60); // Reset countdown when user makes changes\r\n    };\r\n\r\n    // Listen for status changes (both old and new events)\r\n    window.addEventListener('orderStatusChanged', handleStatusChangeEvent);\r\n    window.addEventListener('orderStatusUpdated', handleStatusChangeEvent);\r\n\r\n    return () => {\r\n      if (refreshIntervalRef.current) clearInterval(refreshIntervalRef.current);\r\n      if (countdownIntervalRef.current) clearInterval(countdownIntervalRef.current);\r\n      window.removeEventListener('orderStatusChanged', handleStatusChangeEvent);\r\n      window.removeEventListener('orderStatusUpdated', handleStatusChangeEvent);\r\n    };\r\n  }, [refreshData, loading]);\r\n\r\n  const handleCreateOrder = () => {\r\n    setSelectedOrder(null);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCreateOrderWithDate = (selectedDate?: Date) => {\r\n    setSelectedOrder(null);\r\n    // If date is provided from calendar, we could pre-populate the due_date\r\n    // For now, just open the modal\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleEditOrder = (order: any) => {\r\n    setSelectedOrder(order);\r\n    setShowModal(true);\r\n    setPreviewOrder(null); // Close preview if open\r\n  };\r\n\r\n  const handleViewOrder = (order: any) => {\r\n    setPreviewOrder(order);\r\n  };\r\n\r\n  const handleDeleteOrder = async (orderId: string) => {\r\n    if (confirm(t('messages.confirm_delete_order'))) {\r\n      await deleteOrder(orderId);\r\n    }\r\n  };\r\n\r\n  const handleSaveOrder = async (orderData: any) => {\r\n    try {\r\n      if (selectedOrder) {\r\n        await updateOrder(selectedOrder.id, orderData);\r\n      } else {\r\n        await createOrder(orderData);\r\n      }\r\n      setShowModal(false);\r\n      refreshData();\r\n    } catch (error) {\r\n      console.error('Error saving order:', error);\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (orderId: string, newStatus: string) => {\r\n    lastChangeTimeRef.current = Date.now(); // Update ref to prevent auto-refresh\r\n    \r\n    await updateOrder(orderId, { status: newStatus });\r\n    \r\n    // Note: No need to manually refresh since real-time subscription handles it\r\n    setLastRefresh(new Date());\r\n    setNextRefresh(60); // Reset timer\r\n    \r\n    // Dispatch event to notify other components\r\n    window.dispatchEvent(new CustomEvent('orderStatusChanged'));\r\n    window.dispatchEvent(new CustomEvent('orderStatusUpdated', {\r\n      detail: { orderId, newStatus, timestamp: Date.now() }\r\n    }));\r\n  };\r\n\r\n  const handleCardClick = (filter: string) => {\r\n    setActiveFilter(filter);\r\n    if (filter !== 'dashboard') {\r\n      setViewMode('kanban');\r\n    }\r\n  };\r\n\r\n  // Get dynamic title based on active filter\r\n  const getFilterTitle = (filter: string): string => {\r\n    const titleMap: Record<string, string> = {\r\n      dashboard: t('sales_orders.tabs.dashboard'),\r\n      today: t('sales_orders.tabs.today'),\r\n      tomorrow: t('sales_orders.tabs.tomorrow'), \r\n      pending: t('sales_orders.tabs.pending'),\r\n      in_process: t('sales_orders.in_process_orders'),\r\n      week: t('sales_orders.tabs.week'),\r\n      all: t('sales_orders.tabs.all'),\r\n      services: t('sales_orders.tabs.services'),\r\n      deleted: t('sales_orders.tabs.deleted')\r\n    };\r\n    return titleMap[filter] || filter;\r\n  };\r\n\r\n  // Filter orders based on search term\r\n  const filteredOrders = orders.filter((order: any) => {\r\n    if (!searchTerm) return true;\r\n    const searchLower = searchTerm.toLowerCase();\r\n    return (\r\n      order.id.toLowerCase().includes(searchLower) ||\r\n      order.vin?.toLowerCase().includes(searchLower) ||\r\n      order.stock?.toLowerCase().includes(searchLower) ||\r\n      order.description?.toLowerCase().includes(searchLower) ||\r\n      `${order.year} ${order.make} ${order.model}`.toLowerCase().includes(searchLower)\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n        {/* Header Actions */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <h1 className=\"text-2xl font-bold\">{t('pages.sales_orders')}</h1>\r\n          </div>\r\n          \r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => refreshData()}\r\n              disabled={loading}\r\n            >\r\n              <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\r\n              {t('common.refresh')}\r\n            </Button>\r\n            <Button size=\"sm\" onClick={handleCreateOrder}>\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              {t('common.new_order')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Filter Bar */}\r\n        <QuickFilterBar\r\n          activeFilter={activeFilter}\r\n          tabCounts={tabCounts}\r\n          onFilterChange={setActiveFilter}\r\n          searchTerm={searchTerm}\r\n          onSearchChange={setSearchTerm}\r\n          viewMode={viewMode}\r\n          onViewModeChange={setViewMode}\r\n          showFilters={showFilters}\r\n          onToggleFilters={() => setShowFilters(!showFilters)}\r\n        />\r\n\r\n        {/* Filters */}\r\n        {showFilters && (\r\n          <OrderFilters\r\n            filters={filters}\r\n            onFiltersChange={updateFilters}\r\n            onClose={() => setShowFilters(false)}\r\n          />\r\n        )}\r\n\r\n        {/* Main Content Area */}\r\n        <div className=\"space-y-6\">\r\n          {activeFilter === 'dashboard' ? (\r\n            <SmartDashboard \r\n              tabCounts={tabCounts} \r\n              onCardClick={handleCardClick}\r\n            />\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              {/* Responsive Table Header */}\r\n              <div className=\"space-y-4\">\r\n                {/* Title and Badge - Responsive */}\r\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-center gap-2\">\r\n                  <h2 className=\"text-xl sm:text-2xl font-bold text-center sm:text-left\">\r\n                    {getFilterTitle(activeFilter)}\r\n                  </h2>\r\n                  <Badge variant=\"secondary\" className=\"text-sm self-center sm:self-auto\">\r\n                    {filteredOrders.length}\r\n                  </Badge>\r\n                </div>\r\n                \r\n                {/* Timer and Last Update - Mobile Responsive */}\r\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2\">\r\n                  <div className=\"flex flex-col gap-1 text-xs text-muted-foreground\">\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <Clock className=\"h-3 w-3\" />\r\n                      <span>Next update: {nextRefresh}s</span>\r\n                    </div>\r\n                    <div className=\"text-xs\">\r\n                      Last updated: {lastRefresh.toLocaleTimeString()}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {/* Mobile-friendly info */}\r\n                  <div className=\"text-xs text-muted-foreground sm:hidden\">\r\n                    {searchTerm && `Searching: \"${searchTerm}\"`}\r\n                  </div>\r\n                </div>\r\n                \r\n                {/* Search Context - Desktop */}\r\n                {searchTerm && (\r\n                  <div className=\"text-center hidden sm:block\">\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      Showing results matching \"{searchTerm}\"\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {/* Table/Kanban/Calendar Content */}\r\n              {viewMode === 'kanban' ? (\r\n                <OrderKanbanBoard\r\n                  orders={filteredOrders}\r\n                  onEdit={handleEditOrder}\r\n                  onView={handleViewOrder}\r\n                  onDelete={handleDeleteOrder}\r\n                  onStatusChange={handleStatusChange}\r\n                />\r\n              ) : viewMode === 'calendar' ? (\r\n                <OrderCalendarView\r\n                  orders={filteredOrders}\r\n                  loading={loading}\r\n                  onEdit={handleEditOrder}\r\n                  onView={handleViewOrder}\r\n                  onDelete={handleDeleteOrder}\r\n                  onStatusChange={handleStatusChange}\r\n                  onCreateOrder={handleCreateOrderWithDate}\r\n                />\r\n              ) : (\r\n                <OrderDataTable\r\n                  orders={filteredOrders}\r\n                  loading={loading}\r\n                  onEdit={handleEditOrder}\r\n                  onDelete={handleDeleteOrder}\r\n                  onView={handleViewOrder}\r\n                  onStatusChange={handleStatusChange}\r\n                  tabType={activeFilter}\r\n                />\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Modals */}\r\n        {showModal && (\r\n          <OrderModal\r\n            order={selectedOrder}\r\n            open={showModal}\r\n            onClose={() => setShowModal(false)}\r\n            onSave={handleSaveOrder}\r\n          />\r\n        )}\r\n\r\n        {/* Detail Modal - Enhanced Full Screen */}\r\n        {previewOrder && (\r\n          <EnhancedOrderDetailModal\r\n            order={previewOrder}\r\n            open={true}\r\n            onClose={() => setPreviewOrder(null)}\r\n            onEdit={handleEditOrder}\r\n            onDelete={handleDeleteOrder}\r\n            onStatusChange={handleStatusChange}\r\n          />\r\n        )}\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\ServiceOrders.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":65,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2575,2578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2575,2578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2736,2739],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2736,2739],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":81,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2992,2995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2992,2995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":108,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3756,3759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3756,3759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Plus, RefreshCw } from 'lucide-react';\r\nimport { OrderFilters } from '@/components/orders/OrderFilters';\r\nimport { OrderDataTable } from '@/components/orders/OrderDataTable';\r\nimport { useServiceOrderManagement } from '@/hooks/useServiceOrderManagement';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useTabPersistence, useViewModePersistence, useSearchPersistence } from '@/hooks/useTabPersistence';\r\n\r\n// New improved components\r\nimport { SmartDashboard } from '@/components/sales/SmartDashboard';\r\nimport { OrderKanbanBoard } from '@/components/sales/OrderKanbanBoard';\r\nimport { QuickFilterBar } from '@/components/sales/QuickFilterBar';\r\nimport { OrderPreviewPanel } from '@/components/sales/OrderPreviewPanel';\r\nimport { EnhancedOrderDetailModal } from '@/components/orders/EnhancedOrderDetailModal';\r\nimport { OrderCalendarView } from '@/components/orders/OrderCalendarView';\r\nimport ServiceOrderModal from '@/components/orders/ServiceOrderModal';\r\n\r\nexport default function ServiceOrders() {\r\n  console.log('🔵 ServiceOrders component is RENDERING');\r\n  const { t } = useTranslation();\r\n\r\n  // Persistent state\r\n  const [activeFilter, setActiveFilter] = useTabPersistence('service_orders');\r\n  const [viewMode, setViewMode] = useViewModePersistence('service_orders');\r\n  const [searchTerm, setSearchTerm] = useSearchPersistence('service_orders');\r\n\r\n  // Non-persistent UI state\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n  const [previewOrder, setPreviewOrder] = useState(null);\r\n  const [lastRefresh, setLastRefresh] = useState(new Date());\r\n\r\n  const {\r\n    orders,\r\n    tabCounts,\r\n    filters,\r\n    loading,\r\n    updateFilters,\r\n    refreshData,\r\n    createOrder,\r\n    updateOrder,\r\n    deleteOrder,\r\n  } = useServiceOrderManagement(activeFilter);\r\n\r\n  // Real-time updates are handled by useServiceOrderManagement hook\r\n  // Keep lastRefresh for UI purposes\r\n // useEffect(() => {\r\n   // setLastRefresh(new Date());\r\n  //}, [orders]);\r\n\r\n  const handleCreateOrder = () => {\r\n    setSelectedOrder(null);\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleCreateOrderWithDate = (selectedDate?: Date) => {\r\n    setSelectedOrder(null);\r\n    // If date is provided from calendar, we could pre-populate the due_date\r\n    // For now, just open the modal\r\n    setShowModal(true);\r\n  };\r\n\r\n  const handleEditOrder = (order: any) => {\r\n    setSelectedOrder(order);\r\n    setShowModal(true);\r\n    setPreviewOrder(null); // Close preview if open\r\n  };\r\n\r\n  const handleViewOrder = (order: any) => {\r\n    setPreviewOrder(order);\r\n  };\r\n\r\n  const handleDeleteOrder = async (orderId: string) => {\r\n    if (confirm(t('messages.confirm_delete_order'))) {\r\n      await deleteOrder(orderId);\r\n    }\r\n  };\r\n\r\n  const handleSaveOrder = async (orderData: any) => {\r\n    try {\r\n      if (selectedOrder) {\r\n        await updateOrder(selectedOrder.id, orderData);\r\n      } else {\r\n        await createOrder(orderData);\r\n      }\r\n      setShowModal(false);\r\n      refreshData();\r\n    } catch (error) {\r\n      console.error('Error saving order:', error);\r\n    }\r\n  };\r\n\r\n  const handleStatusChange = async (orderId: string, newStatus: string) => {\r\n    await updateOrder(orderId, { status: newStatus });\r\n    // Real-time updates will handle the refresh automatically\r\n  };\r\n\r\n  const handleCardClick = (filter: string) => {\r\n    setActiveFilter(filter);\r\n    if (filter !== 'dashboard') {\r\n      setViewMode('kanban');\r\n    }\r\n  };\r\n\r\n  // Filter orders based on search term\r\n  const filteredOrders = orders.filter((order: any) => {\r\n    if (!searchTerm) return true;\r\n    const searchLower = searchTerm.toLowerCase();\r\n    return (\r\n      order.id.toLowerCase().includes(searchLower) ||\r\n      order.customerName?.toLowerCase().includes(searchLower) ||\r\n      order.po?.toLowerCase().includes(searchLower) ||\r\n      order.ro?.toLowerCase().includes(searchLower) ||\r\n      `${order.vehicleYear} ${order.vehicleMake} ${order.vehicleModel}`.toLowerCase().includes(searchLower)\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n        {/* Header Actions */}\r\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <h1 className=\"text-2xl font-bold\">{t('pages.service_orders')}</h1>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={refreshData}\r\n              disabled={loading}\r\n            >\r\n              <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\r\n              {t('common.refresh')}\r\n            </Button>\r\n            <Button size=\"sm\" onClick={handleCreateOrder}>\r\n              <Plus className=\"h-4 w-4 mr-2\" />\r\n              {t('common.new_order')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Quick Filter Bar */}\r\n        <QuickFilterBar\r\n          activeFilter={activeFilter}\r\n          tabCounts={tabCounts}\r\n          onFilterChange={setActiveFilter}\r\n          searchTerm={searchTerm}\r\n          onSearchChange={setSearchTerm}\r\n          viewMode={viewMode}\r\n          onViewModeChange={setViewMode}\r\n          showFilters={showFilters}\r\n          onToggleFilters={() => setShowFilters(!showFilters)}\r\n        />\r\n\r\n        {/* Filters */}\r\n        {showFilters && (\r\n          <OrderFilters\r\n            filters={filters}\r\n            onFiltersChange={updateFilters}\r\n            onClose={() => setShowFilters(false)}\r\n          />\r\n        )}\r\n\r\n        {/* Main Content Area */}\r\n        <div className=\"space-y-6\">\r\n          {activeFilter === 'dashboard' ? (\r\n            <SmartDashboard\r\n              tabCounts={tabCounts}\r\n              onCardClick={handleCardClick}\r\n            />\r\n          ) : (\r\n            <>\r\n              {viewMode === 'kanban' ? (\r\n                <OrderKanbanBoard\r\n                  orders={filteredOrders}\r\n                  onEdit={handleEditOrder}\r\n                  onView={handleViewOrder}\r\n                  onDelete={handleDeleteOrder}\r\n                  onStatusChange={handleStatusChange}\r\n                />\r\n              ) : viewMode === 'calendar' ? (\r\n                <OrderCalendarView\r\n                  orders={filteredOrders}\r\n                  loading={loading}\r\n                  onEdit={handleEditOrder}\r\n                  onView={handleViewOrder}\r\n                  onDelete={handleDeleteOrder}\r\n                  onStatusChange={handleStatusChange}\r\n                  onCreateOrder={handleCreateOrderWithDate}\r\n                />\r\n              ) : (\r\n                <OrderDataTable\r\n                  orders={filteredOrders}\r\n                  loading={loading}\r\n                  onEdit={handleEditOrder}\r\n                  onDelete={handleDeleteOrder}\r\n                  onView={handleViewOrder}\r\n                  tabType={activeFilter}\r\n                />\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {/* Modals */}\r\n        {showModal && (\r\n          <ServiceOrderModal\r\n            order={selectedOrder}\r\n            open={showModal}\r\n            onClose={() => setShowModal(false)}\r\n            onSave={handleSaveOrder}\r\n          />\r\n        )}\r\n\r\n        {/* Detail Modal - Enhanced Full Screen */}\r\n        {previewOrder && (\r\n          <EnhancedOrderDetailModal\r\n            order={previewOrder}\r\n            open={true}\r\n            onClose={() => setPreviewOrder(null)}\r\n            onEdit={handleEditOrder}\r\n            onDelete={handleDeleteOrder}\r\n            onStatusChange={handleStatusChange}\r\n          />\r\n        )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Stock.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\Users.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\pages\\VinScanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\scripts\\migrateOrderNumbers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":32,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1169,1172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1169,1172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Order Number Migration Script\r\n * \r\n * This script migrates existing order numbers to the new format:\r\n * SA-000001, SE-000001, CW-000001, RC-000001\r\n * \r\n * Usage:\r\n * 1. From admin panel: Management → System Tools → Run Migration\r\n * 2. From console: import { runOrderNumberMigration } from '@/scripts/migrateOrderNumbers'\r\n * 3. From browser console: window.runOrderNumberMigration()\r\n */\r\n\r\nimport { orderNumberService } from '@/services/orderNumberService';\r\n\r\nexport async function runOrderNumberMigration(): Promise<void> {\r\n  console.log('🚀 Starting Order Number Migration Script...');\r\n  console.log('📝 New format: SA-000001, SE-000001, CW-000001, RC-000001');\r\n  console.log('⚠️  This will update all existing orders with new order numbers');\r\n  \r\n  try {\r\n    await orderNumberService.migrateExistingOrders();\r\n    console.log('✅ Migration completed successfully!');\r\n    console.log('🔄 Please refresh the page to see updated order numbers');\r\n  } catch (error) {\r\n    console.error('❌ Migration failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Make it available in browser console for testing\r\nif (typeof window !== 'undefined') {\r\n  (window as any).runOrderNumberMigration = runOrderNumberMigration;\r\n}\r\n\r\nexport default runOrderNumberMigration;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\services\\notificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[609,612],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[609,612],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":39,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1180,1183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1180,1183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":49,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1536,1539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1536,1539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":50,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1556,1559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1556,1559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1592,1595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1592,1595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":75,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2273,2276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2273,2276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":85,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2588,2591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2588,2591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6025,6028],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6025,6028],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":195,"column":108,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":111,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6068,6071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6068,6071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6358,6361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6358,6361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":213,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6701,6704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6701,6704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":216,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6853,6856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6853,6856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":287,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8859,8862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8859,8862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":318,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9787,9790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9787,9790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":371,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":371,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11406,11409],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11406,11409],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":377,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11613,11616],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11613,11616],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":383,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":383,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11809,11812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11809,11812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":389,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12028,12031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12028,12031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":460,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14304,14307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14304,14307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":460,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14330,14333],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14330,14333],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":460,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14337,14340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14337,14340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":468,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":468,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14590,14593],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14590,14593],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":479,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":479,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14919,14922],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14919,14922],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":496,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":496,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15403,15406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15403,15406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":512,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":512,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15852,15855],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15852,15855],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\r\nimport { toast } from \"@/hooks/use-toast\";\r\n\r\nexport type NotificationChannel = 'sms' | 'email' | 'push' | 'in_app';\r\nexport type NotificationPriority = 'low' | 'normal' | 'high' | 'urgent' | 'critical';\r\nexport type NotificationEventType = 'sent' | 'delivered' | 'read' | 'clicked' | 'failed' | 'bounced';\r\n\r\nexport interface NotificationRequest {\r\n  dealerId: number;\r\n  userId?: string;\r\n  notificationType: string;\r\n  entityType?: string;\r\n  entityId?: string;\r\n  channels: NotificationChannel[];\r\n  templateId?: string;\r\n  data: Record<string, any>;\r\n  priority?: NotificationPriority;\r\n  scheduledFor?: Date;\r\n  batchId?: string;\r\n}\r\n\r\nexport interface NotificationResult {\r\n  success: boolean;\r\n  notificationId?: string;\r\n  errors?: Array<{ channel: NotificationChannel; error: string }>;\r\n  analytics?: {\r\n    sent: number;\r\n    failed: number;\r\n    channels: NotificationChannel[];\r\n  };\r\n}\r\n\r\nexport interface NotificationTemplate {\r\n  id: string;\r\n  name: string;\r\n  dealer_id?: number;\r\n  template_type: 'system' | 'custom' | 'module_specific';\r\n  category: string;\r\n  channels: Record<NotificationChannel, any>;\r\n  variables: Array<{ name: string; type: string; required?: boolean }>;\r\n  is_active: boolean;\r\n}\r\n\r\nexport interface DealerNotificationConfig {\r\n  id: string;\r\n  dealer_id: number;\r\n  channels: Record<NotificationChannel, boolean>;\r\n  rate_limits: Record<NotificationChannel, { per_hour: number; per_day: number }>;\r\n  integrations: Record<string, any>;\r\n  workflows: any[];\r\n  templates: Record<string, any>;\r\n}\r\n\r\nexport interface UserNotificationPreferences {\r\n  id: string;\r\n  user_id: string;\r\n  dealer_id: number;\r\n  channel_preferences: Record<NotificationChannel, { enabled: boolean; frequency: string }>;\r\n  entity_subscriptions: Record<string, { enabled: boolean; events: string[] }>;\r\n  quiet_hours: {\r\n    enabled: boolean;\r\n    start: string;\r\n    end: string;\r\n    timezone: string;\r\n  };\r\n  priority_filters: Record<NotificationPriority, boolean>;\r\n  notification_sound: {\r\n    enabled: boolean;\r\n    soundId: string;\r\n  };\r\n}\r\n\r\nexport class NotificationService {\r\n  private static instance: NotificationService;\r\n  private registeredChannels: Map<NotificationChannel, any> = new Map();\r\n\r\n  static getInstance(): NotificationService {\r\n    if (!NotificationService.instance) {\r\n      NotificationService.instance = new NotificationService();\r\n    }\r\n    return NotificationService.instance;\r\n  }\r\n\r\n  // Channel Registration\r\n  registerChannel(channel: NotificationChannel, handler: any) {\r\n    this.registeredChannels.set(channel, handler);\r\n  }\r\n\r\n  getAvailableChannels(dealerId: number): NotificationChannel[] {\r\n    return Array.from(this.registeredChannels.keys());\r\n  }\r\n\r\n  // Core Sending Methods\r\n  async send(request: NotificationRequest): Promise<NotificationResult> {\r\n    try {\r\n      console.log('NotificationService: Sending notification', { request });\r\n\r\n      // 1. Validate request\r\n      if (!this.validateRequest(request)) {\r\n        throw new Error('Invalid notification request');\r\n      }\r\n\r\n      // 2. Get user preferences and dealer config\r\n      const [userPrefs, dealerConfig] = await Promise.all([\r\n        this.getUserPreferences(request.userId || '', request.dealerId),\r\n        this.getDealerConfig(request.dealerId)\r\n      ]);\r\n\r\n      // 3. Apply filtering logic\r\n      const filteredChannels = this.applyFilters(request, userPrefs, dealerConfig);\r\n      \r\n      if (filteredChannels.length === 0) {\r\n        return { success: true, analytics: { sent: 0, failed: 0, channels: [] } };\r\n      }\r\n\r\n      // 4. Check rate limits\r\n      const rateLimitPassed = await this.checkRateLimits(request.dealerId, request.userId, filteredChannels);\r\n      if (!rateLimitPassed) {\r\n        throw new Error('Rate limit exceeded');\r\n      }\r\n\r\n      // 5. Queue or send immediately\r\n      const result = await this.processNotification({\r\n        ...request,\r\n        channels: filteredChannels\r\n      });\r\n\r\n      // 6. Track analytics\r\n      await this.trackAnalytics({\r\n        dealerId: request.dealerId,\r\n        userId: request.userId,\r\n        notificationId: result.notificationId,\r\n        channels: filteredChannels,\r\n        eventType: 'sent',\r\n        notificationType: request.notificationType,\r\n        entityType: request.entityType,\r\n        entityId: request.entityId,\r\n        metadata: { success: result.success }\r\n      });\r\n\r\n      return result;\r\n\r\n    } catch (error) {\r\n      console.error('NotificationService: Send error', error);\r\n      \r\n      await this.trackAnalytics({\r\n        dealerId: request.dealerId,\r\n        userId: request.userId,\r\n        channels: request.channels,\r\n        eventType: 'failed',\r\n        notificationType: request.notificationType,\r\n        metadata: { error: error.message }\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        errors: request.channels.map(channel => ({ channel, error: error.message }))\r\n      };\r\n    }\r\n  }\r\n\r\n  async sendBatch(requests: NotificationRequest[]): Promise<NotificationResult[]> {\r\n    const batchId = crypto.randomUUID();\r\n    \r\n    return Promise.all(\r\n      requests.map(request => \r\n        this.send({ ...request, batchId })\r\n      )\r\n    );\r\n  }\r\n\r\n  // Template System\r\n  async getTemplates(dealerId: number, category?: string): Promise<NotificationTemplate[]> {\r\n    try {\r\n      let query = supabase\r\n        .from('notification_templates')\r\n        .select('*')\r\n        .or(`dealer_id.eq.${dealerId},dealer_id.is.null`)\r\n        .eq('is_active', true);\r\n\r\n      if (category) {\r\n        query = query.eq('category', category);\r\n      }\r\n\r\n      const { data, error } = await query.order('name');\r\n\r\n      if (error) throw error;\r\n      return (data || []) as unknown as NotificationTemplate[];\r\n    } catch (error) {\r\n      console.error('NotificationService: Get templates error', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async renderTemplate(templateId: string, data: Record<string, any>): Promise<Record<NotificationChannel, any>> {\r\n    try {\r\n      const { data: template, error } = await supabase\r\n        .from('notification_templates')\r\n        .select('channels')\r\n        .eq('id', templateId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n\r\n      const rendered: Partial<Record<NotificationChannel, any>> = {};\r\n      \r\n      if (template.channels && typeof template.channels === 'object') {\r\n        for (const [channel, content] of Object.entries(template.channels)) {\r\n          rendered[channel as NotificationChannel] = this.interpolateTemplate(content, data);\r\n        }\r\n      }\r\n\r\n      return rendered as Record<NotificationChannel, any>;\r\n    } catch (error) {\r\n      console.error('NotificationService: Render template error', error);\r\n      return {} as Record<NotificationChannel, any>;\r\n    }\r\n  }\r\n\r\n  // Configuration Management\r\n  async getDealerConfig(dealerId: number): Promise<DealerNotificationConfig | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('dealer_notification_configs')\r\n        .select('*')\r\n        .eq('dealer_id', dealerId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data as unknown as DealerNotificationConfig;\r\n    } catch (error) {\r\n      console.error('NotificationService: Get dealer config error', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getUserPreferences(userId: string, dealerId: number): Promise<UserNotificationPreferences | null> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('user_notification_preferences')\r\n        .select('*')\r\n        .eq('user_id', userId)\r\n        .eq('dealer_id', dealerId)\r\n        .single();\r\n\r\n      if (error) throw error;\r\n      return data as unknown as UserNotificationPreferences;\r\n    } catch (error) {\r\n      console.error('NotificationService: Get user preferences error', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async updateUserPreferences(\r\n    userId: string, \r\n    dealerId: number, \r\n    preferences: Partial<UserNotificationPreferences>\r\n  ): Promise<boolean> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('user_notification_preferences')\r\n        .upsert({\r\n          user_id: userId,\r\n          dealer_id: dealerId,\r\n          ...preferences\r\n        });\r\n\r\n      if (error) throw error;\r\n      return true;\r\n    } catch (error) {\r\n      console.error('NotificationService: Update user preferences error', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Analytics\r\n  async trackAnalytics(event: {\r\n    dealerId: number;\r\n    userId?: string;\r\n    notificationId?: string;\r\n    batchId?: string;\r\n    channels: NotificationChannel[];\r\n    eventType: NotificationEventType;\r\n    notificationType: string;\r\n    entityType?: string;\r\n    entityId?: string;\r\n    metadata?: Record<string, any>;\r\n  }): Promise<void> {\r\n    try {\r\n      const records = event.channels.map(channel => ({\r\n        dealer_id: event.dealerId,\r\n        user_id: event.userId,\r\n        notification_id: event.notificationId,\r\n        batch_id: event.batchId,\r\n        channel,\r\n        event_type: event.eventType,\r\n        notification_type: event.notificationType,\r\n        entity_type: event.entityType,\r\n        entity_id: event.entityId,\r\n        metadata: event.metadata || {}\r\n      }));\r\n\r\n      const { error } = await supabase\r\n        .from('notification_analytics')\r\n        .insert(records);\r\n\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      console.error('NotificationService: Track analytics error', error);\r\n    }\r\n  }\r\n\r\n  async getAnalytics(dealerId: number, filters: {\r\n    startDate?: Date;\r\n    endDate?: Date;\r\n    channel?: NotificationChannel;\r\n    eventType?: NotificationEventType;\r\n  } = {}): Promise<any> {\r\n    try {\r\n      let query = supabase\r\n        .from('notification_analytics')\r\n        .select('*')\r\n        .eq('dealer_id', dealerId);\r\n\r\n      if (filters.startDate) {\r\n        query = query.gte('created_at', filters.startDate.toISOString());\r\n      }\r\n      if (filters.endDate) {\r\n        query = query.lte('created_at', filters.endDate.toISOString());\r\n      }\r\n      if (filters.channel) {\r\n        query = query.eq('channel', filters.channel);\r\n      }\r\n      if (filters.eventType) {\r\n        query = query.eq('event_type', filters.eventType);\r\n      }\r\n\r\n      const { data, error } = await query.order('created_at', { ascending: false });\r\n      \r\n      if (error) throw error;\r\n      return data || [];\r\n    } catch (error) {\r\n      console.error('NotificationService: Get analytics error', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Private Helper Methods\r\n  private validateRequest(request: NotificationRequest): boolean {\r\n    return !!(\r\n      request.dealerId &&\r\n      request.notificationType &&\r\n      request.channels &&\r\n      request.channels.length > 0 &&\r\n      request.data\r\n    );\r\n  }\r\n\r\n  private applyFilters(\r\n    request: NotificationRequest,\r\n    userPrefs: UserNotificationPreferences | null,\r\n    dealerConfig: DealerNotificationConfig | null\r\n  ): NotificationChannel[] {\r\n    if (!userPrefs || !dealerConfig) {\r\n      return request.channels;\r\n    }\r\n\r\n    // Filter based on user preferences and dealer config\r\n    return request.channels.filter(channel => {\r\n      // Check if channel is enabled in dealer config\r\n      const dealerChannels = dealerConfig.channels as any;\r\n      if (!dealerChannels || !dealerChannels[channel]) {\r\n        return false;\r\n      }\r\n\r\n      // Check if user has enabled this channel\r\n      const userChannels = userPrefs.channel_preferences as any;\r\n      if (!userChannels || !userChannels[channel]?.enabled) {\r\n        return false;\r\n      }\r\n\r\n      // Check priority filters\r\n      const priorityFilters = userPrefs.priority_filters as any;\r\n      if (request.priority && priorityFilters && !priorityFilters[request.priority]) {\r\n        return false;\r\n      }\r\n\r\n      // Check quiet hours (simplified)\r\n      const quietHours = userPrefs.quiet_hours as any;\r\n      if (quietHours?.enabled) {\r\n        const now = new Date();\r\n        const currentHour = now.getHours();\r\n        const quietStart = parseInt(quietHours.start.split(':')[0]);\r\n        const quietEnd = parseInt(quietHours.end.split(':')[0]);\r\n        \r\n        if (currentHour >= quietStart || currentHour <= quietEnd) {\r\n          // Only allow urgent/critical during quiet hours\r\n          if (!request.priority || !['urgent', 'critical'].includes(request.priority)) {\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  private async checkRateLimits(\r\n    dealerId: number,\r\n    userId: string | undefined,\r\n    channels: NotificationChannel[]\r\n  ): Promise<boolean> {\r\n    // Simplified rate limiting check\r\n    // In production, this would check against notification_rate_limits table\r\n    return true;\r\n  }\r\n\r\n  private async processNotification(request: NotificationRequest): Promise<NotificationResult> {\r\n    // Add to queue for processing\r\n    const { data, error } = await supabase\r\n      .from('notification_queue')\r\n      .insert({\r\n        batch_id: request.batchId,\r\n        user_id: request.userId || '',\r\n        dealer_id: request.dealerId,\r\n        notification_type: request.notificationType,\r\n        entity_type: request.entityType,\r\n        entity_id: request.entityId,\r\n        channels: request.channels,\r\n        notification_data: request.data,\r\n        template_id: request.templateId,\r\n        priority: request.priority || 'normal',\r\n        scheduled_for: request.scheduledFor?.toISOString() || new Date().toISOString()\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (error) {\r\n      throw new Error(`Failed to queue notification: ${error.message}`);\r\n    }\r\n\r\n    // For immediate notifications, call the edge function\r\n    if (!request.scheduledFor || request.scheduledFor <= new Date()) {\r\n      await supabase.functions.invoke('enhanced-notification-engine', {\r\n        body: { notificationId: data.id }\r\n      });\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n      notificationId: data.id,\r\n      analytics: {\r\n        sent: request.channels.length,\r\n        failed: 0,\r\n        channels: request.channels\r\n      }\r\n    };\r\n  }\r\n\r\n  private interpolateTemplate(template: any, data: Record<string, any>): any {\r\n    if (typeof template === 'string') {\r\n      return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\r\n        return data[key] || match;\r\n      });\r\n    }\r\n\r\n    if (typeof template === 'object' && template !== null) {\r\n      const result: any = {};\r\n      for (const [key, value] of Object.entries(template)) {\r\n        result[key] = this.interpolateTemplate(value, data);\r\n      }\r\n      return result;\r\n    }\r\n\r\n    return template;\r\n  }\r\n\r\n  // Quick notification methods for easy integration\r\n  async notifyOrderUpdate(dealerId: number, userId: string, orderData: any): Promise<void> {\r\n    await this.send({\r\n      dealerId,\r\n      userId,\r\n      notificationType: 'order_update',\r\n      entityType: 'order',\r\n      entityId: orderData.id,\r\n      channels: ['in_app', 'push'],\r\n      data: {\r\n        order_number: orderData.order_number,\r\n        status: orderData.status,\r\n        customer_name: orderData.customer_name\r\n      },\r\n      priority: 'normal'\r\n    });\r\n  }\r\n\r\n  async notifyNewMessage(dealerId: number, userId: string, messageData: any): Promise<void> {\r\n    await this.send({\r\n      dealerId,\r\n      userId,\r\n      notificationType: 'new_message',\r\n      entityType: 'message',\r\n      entityId: messageData.id,\r\n      channels: ['in_app', 'push'],\r\n      data: {\r\n        sender_name: messageData.sender_name,\r\n        message_preview: messageData.content.substring(0, 100)\r\n      },\r\n      priority: 'high'\r\n    });\r\n  }\r\n\r\n  async notifySystemAlert(dealerId: number, alertData: any): Promise<void> {\r\n    // Get all active users for this dealer\r\n    const { data: users } = await supabase\r\n      .from('dealer_memberships')\r\n      .select('user_id')\r\n      .eq('dealer_id', dealerId)\r\n      .eq('is_active', true);\r\n\r\n    if (users) {\r\n      await this.sendBatch(\r\n        users.map(user => ({\r\n          dealerId,\r\n          userId: user.user_id,\r\n          notificationType: 'system_alert',\r\n          entityType: 'system',\r\n          channels: ['in_app', 'email'],\r\n          data: {\r\n            alert_title: alertData.title,\r\n            alert_message: alertData.message\r\n          },\r\n          priority: 'urgent' as NotificationPriority\r\n        }))\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const notificationService = NotificationService.getInstance();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\services\\orderNumberService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4579,4582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4579,4582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Order Number Service - Consistent formatting across all modules\r\n * Generates standardized order numbers with module-specific prefixes\r\n */\r\n\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\nexport type OrderType = 'sales' | 'service' | 'carwash' | 'recon';\r\n\r\nexport interface OrderNumberFormat {\r\n  prefix: string;\r\n  fullNumber: string;\r\n  sequence: number;\r\n}\r\n\r\nexport class OrderNumberService {\r\n  private readonly prefixes: Record<OrderType, string> = {\r\n    sales: 'SA',\r\n    service: 'SE', \r\n    carwash: 'CW',\r\n    recon: 'RC'\r\n  };\r\n\r\n  /**\r\n   * Generate next order number for specific type\r\n   */\r\n  async generateOrderNumber(orderType: OrderType, dealerId?: number): Promise<string> {\r\n    try {\r\n      const prefix = this.prefixes[orderType];\r\n      \r\n      // Get last order number for this type (global counter, no year)\r\n      const lastSequence = await this.getLastSequenceNumber(orderType);\r\n      const nextSequence = lastSequence + 1;\r\n      \r\n      // Format: SA-000001, SE-000001, CW-000001, RC-000001\r\n      const formattedNumber = `${prefix}-${nextSequence.toString().padStart(6, '0')}`;\r\n      \r\n      console.log(`🔢 Generated order number: ${formattedNumber} (type: ${orderType}, sequence: ${nextSequence})`);\r\n      \r\n      return formattedNumber;\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Error generating order number:', error);\r\n      // Fallback to simple format if generation fails\r\n      const prefix = this.prefixes[orderType];\r\n      const timestamp = Date.now().toString().slice(-6);\r\n      return `${prefix}-${timestamp}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get last sequence number for order type (global counter)\r\n   */\r\n  private async getLastSequenceNumber(orderType: OrderType): Promise<number> {\r\n    try {\r\n      const prefix = this.prefixes[orderType];\r\n      const prefixPattern = `${prefix}-%`;\r\n      \r\n      // Query highest order number for this type in unified orders table\r\n      const { data, error } = await supabase\r\n        .from('orders')\r\n        .select('order_number')\r\n        .ilike('order_number', prefixPattern)\r\n        .order('order_number', { ascending: false })\r\n        .limit(1);\r\n\r\n      if (error) {\r\n        console.warn('Error querying last sequence:', error);\r\n        return 0;\r\n      }\r\n\r\n      if (data && data.length > 0 && data[0].order_number) {\r\n        // Extract sequence from order number: SA-000123 -> 123\r\n        const lastNumber = data[0].order_number;\r\n        const parts = lastNumber.split('-');\r\n        if (parts.length === 2) {\r\n          const sequencePart = parts[1];\r\n          return parseInt(sequencePart) || 0;\r\n        }\r\n      }\r\n\r\n      return 0;\r\n      \r\n    } catch (error) {\r\n      console.error('Error getting last sequence:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate order number format\r\n   */\r\n  validateOrderNumber(orderNumber: string, orderType: OrderType): boolean {\r\n    const prefix = this.prefixes[orderType];\r\n    const regex = new RegExp(`^${prefix}-\\\\d{6}$`);\r\n    return regex.test(orderNumber);\r\n  }\r\n\r\n  /**\r\n   * Parse order number components\r\n   */\r\n  parseOrderNumber(orderNumber: string): OrderNumberFormat | null {\r\n    try {\r\n      const parts = orderNumber.split('-');\r\n      if (parts.length !== 2) return null;\r\n      \r\n      const [prefix, sequence] = parts;\r\n      \r\n      return {\r\n        prefix,\r\n        fullNumber: orderNumber,\r\n        sequence: parseInt(sequence)\r\n      };\r\n      \r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get order type from order number\r\n   */\r\n  getOrderTypeFromNumber(orderNumber: string): OrderType | null {\r\n    for (const [type, prefix] of Object.entries(this.prefixes)) {\r\n      if (orderNumber.startsWith(`${prefix}-`)) {\r\n        return type as OrderType;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Migrate existing order numbers to new format\r\n   */\r\n  async migrateExistingOrders(): Promise<void> {\r\n    console.log('🔄 Starting order number migration...');\r\n    \r\n    try {\r\n      // Get all orders that need migration (orders without proper format)\r\n      const { data: orders, error } = await supabase\r\n        .from('orders')\r\n        .select('id, order_number, order_type, created_at')\r\n        .order('created_at', { ascending: true });\r\n\r\n      if (error) throw error;\r\n\r\n      if (!orders || orders.length === 0) {\r\n        console.log(`✅ No orders to migrate`);\r\n        return;\r\n      }\r\n\r\n      // Group orders by type and migrate each type with sequential numbering\r\n      const ordersByType: Record<string, any[]> = {\r\n        sales: [],\r\n        service: [],\r\n        carwash: [],\r\n        recon: []\r\n      };\r\n\r\n      // Separate orders by type\r\n      for (const order of orders) {\r\n        const orderType = order.order_type || 'sales';\r\n        if (ordersByType[orderType]) {\r\n          ordersByType[orderType].push(order);\r\n        }\r\n      }\r\n\r\n      // Migrate each order type with sequential numbers\r\n      for (const [orderType, typeOrders] of Object.entries(ordersByType)) {\r\n        if (typeOrders.length === 0) continue;\r\n\r\n        console.log(`📋 Migrating ${typeOrders.length} ${orderType} orders...`);\r\n        \r\n        const prefix = this.prefixes[orderType as OrderType];\r\n        let sequenceCounter = 1;\r\n        \r\n        for (const order of typeOrders) {\r\n          // Skip if already has correct format\r\n          if (order.order_number && this.validateOrderNumber(order.order_number, orderType as OrderType)) {\r\n            // If it has correct format, extract the sequence to continue from there\r\n            const parsed = this.parseOrderNumber(order.order_number);\r\n            if (parsed && parsed.sequence >= sequenceCounter) {\r\n              sequenceCounter = parsed.sequence + 1;\r\n            }\r\n            continue;\r\n          }\r\n\r\n          const newOrderNumber = `${prefix}-${sequenceCounter.toString().padStart(6, '0')}`;\r\n          \r\n          const { error: updateError } = await supabase\r\n            .from('orders')\r\n            .update({ \r\n              order_number: newOrderNumber,\r\n              updated_at: new Date().toISOString()\r\n            })\r\n            .eq('id', order.id);\r\n\r\n          if (updateError) {\r\n            console.error(`❌ Error updating order ${order.id}:`, updateError);\r\n          } else {\r\n            console.log(`✅ Updated ${order.id}: ${order.order_number || 'NULL'} → ${newOrderNumber}`);\r\n          }\r\n\r\n          sequenceCounter++;\r\n        }\r\n        \r\n        console.log(`✅ Completed ${orderType} migration (${sequenceCounter - 1} orders processed)`);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error(`❌ Error migrating orders:`, error);\r\n    }\r\n    \r\n    console.log('🎉 Order number migration completed!');\r\n  }\r\n\r\n  /**\r\n   * Display format for UI (with proper spacing)\r\n   */\r\n  formatDisplayNumber(orderNumber: string): string {\r\n    // Format: SA-000001 → SA-000001 (already properly formatted)\r\n    return orderNumber;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const orderNumberService = new OrderNumberService();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\services\\pushNotificationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":17,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[339,342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[339,342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from \"@/integrations/supabase/client\";\r\n\r\nexport interface PushSubscription {\r\n  endpoint: string;\r\n  keys: {\r\n    p256dh: string;\r\n    auth: string;\r\n  };\r\n}\r\n\r\nexport interface PushNotificationPayload {\r\n  title: string;\r\n  body: string;\r\n  icon?: string;\r\n  badge?: string;\r\n  tag?: string;\r\n  data?: Record<string, any>;\r\n  actions?: Array<{\r\n    action: string;\r\n    title: string;\r\n    icon?: string;\r\n  }>;\r\n  requireInteraction?: boolean;\r\n  silent?: boolean;\r\n  vibrate?: number[];\r\n  url?: string;\r\n}\r\n\r\nclass PushNotificationService {\r\n  private registration: ServiceWorkerRegistration | null = null;\r\n  private subscription: PushSubscription | null = null;\r\n\r\n  // Check if push notifications are supported\r\n  isSupported(): boolean {\r\n    return 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window;\r\n  }\r\n\r\n  // Initialize service worker and push notifications\r\n  async initialize(): Promise<boolean> {\r\n    if (!this.isSupported()) {\r\n      console.warn('Push notifications not supported');\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      // Register service worker\r\n      this.registration = await navigator.serviceWorker.register('/sw.js', {\r\n        scope: '/'\r\n      });\r\n\r\n      console.log('Service Worker registered:', this.registration);\r\n\r\n      // Wait for service worker to be ready\r\n      await navigator.serviceWorker.ready;\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Service Worker registration failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Request permission for notifications\r\n  async requestPermission(): Promise<NotificationPermission> {\r\n    if (!this.isSupported()) {\r\n      return 'denied';\r\n    }\r\n\r\n    const permission = await Notification.requestPermission();\r\n    console.log('Notification permission:', permission);\r\n    \r\n    return permission;\r\n  }\r\n\r\n  // Subscribe to push notifications\r\n  async subscribe(userId: string, dealerId: number): Promise<PushSubscription | null> {\r\n    if (!this.registration) {\r\n      await this.initialize();\r\n    }\r\n\r\n    if (!this.registration) {\r\n      throw new Error('Service Worker not registered');\r\n    }\r\n\r\n    try {\r\n      // Check if already subscribed\r\n      let subscription = await this.registration.pushManager.getSubscription();\r\n\r\n      if (!subscription) {\r\n        // Create new subscription\r\n        subscription = await this.registration.pushManager.subscribe({\r\n          userVisibleOnly: true,\r\n          applicationServerKey: this.urlBase64ToUint8Array(\r\n            import.meta.env.VITE_VAPID_PUBLIC_KEY || 'your-vapid-public-key'\r\n          )\r\n        });\r\n      }\r\n\r\n      if (subscription) {\r\n        // Convert to our format\r\n        const pushSubscription: PushSubscription = {\r\n          endpoint: subscription.endpoint,\r\n          keys: {\r\n            p256dh: this.arrayBufferToBase64(subscription.getKey('p256dh')!),\r\n            auth: this.arrayBufferToBase64(subscription.getKey('auth')!)\r\n          }\r\n        };\r\n\r\n        // Save subscription to database\r\n        await this.saveSubscription(userId, dealerId, pushSubscription);\r\n        \r\n        this.subscription = pushSubscription;\r\n        return pushSubscription;\r\n      }\r\n\r\n      return null;\r\n    } catch (error) {\r\n      console.error('Push subscription failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Unsubscribe from push notifications\r\n  async unsubscribe(userId: string, dealerId: number): Promise<boolean> {\r\n    try {\r\n      if (this.registration) {\r\n        const subscription = await this.registration.pushManager.getSubscription();\r\n        if (subscription) {\r\n          await subscription.unsubscribe();\r\n        }\r\n      }\r\n\r\n      // Remove from database\r\n      await this.removeSubscription(userId, dealerId);\r\n      \r\n      this.subscription = null;\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Push unsubscribe failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get current subscription status\r\n  async getSubscription(): Promise<PushSubscription | null> {\r\n    if (!this.registration) {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const subscription = await this.registration.pushManager.getSubscription();\r\n      if (subscription) {\r\n        return {\r\n          endpoint: subscription.endpoint,\r\n          keys: {\r\n            p256dh: this.arrayBufferToBase64(subscription.getKey('p256dh')!),\r\n            auth: this.arrayBufferToBase64(subscription.getKey('auth')!)\r\n          }\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Get subscription failed:', error);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // Send a test notification\r\n  async sendTestNotification(): Promise<boolean> {\r\n    if (!this.isSupported() || Notification.permission !== 'granted') {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const notification = new Notification('Test Notification', {\r\n        body: 'Push notifications are working!',\r\n        icon: '/favicon-mda.svg',\r\n        tag: 'test'\r\n      });\r\n\r\n      // Auto close after 5 seconds\r\n      setTimeout(() => {\r\n        notification.close();\r\n      }, 5000);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Test notification failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Show local notification (fallback when service worker is not available)\r\n  async showLocalNotification(payload: PushNotificationPayload): Promise<boolean> {\r\n    if (!this.isSupported() || Notification.permission !== 'granted') {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      const notification = new Notification(payload.title, {\r\n        body: payload.body,\r\n        icon: payload.icon || '/favicon-mda.svg',\r\n        tag: payload.tag || 'default',\r\n        data: payload.data,\r\n        requireInteraction: payload.requireInteraction,\r\n        silent: payload.silent\r\n      });\r\n\r\n      // Handle click\r\n      notification.onclick = () => {\r\n        if (payload.url) {\r\n          window.open(payload.url, '_blank');\r\n        }\r\n        notification.close();\r\n      };\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Local notification failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n  private async saveSubscription(userId: string, dealerId: number, subscription: PushSubscription): Promise<void> {\r\n    try {\r\n      // TODO: Uncomment when push_subscriptions table is created via migration\r\n      console.log('Would save subscription:', { userId, dealerId, subscription });\r\n      \r\n      /*\r\n      const { error } = await supabase\r\n        .from('push_subscriptions')\r\n        .upsert({\r\n          user_id: userId,\r\n          dealer_id: dealerId,\r\n          endpoint: subscription.endpoint,\r\n          p256dh_key: subscription.keys.p256dh,\r\n          auth_key: subscription.keys.auth,\r\n          is_active: true,\r\n          updated_at: new Date().toISOString()\r\n        });\r\n\r\n      if (error) throw error;\r\n      */\r\n    } catch (error) {\r\n      console.error('Save subscription failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async removeSubscription(userId: string, dealerId: number): Promise<void> {\r\n    try {\r\n      // TODO: Uncomment when push_subscriptions table is created via migration\r\n      console.log('Would remove subscription:', { userId, dealerId });\r\n      \r\n      /*\r\n      const { error } = await supabase\r\n        .from('push_subscriptions')\r\n        .update({ is_active: false })\r\n        .eq('user_id', userId)\r\n        .eq('dealer_id', dealerId);\r\n\r\n      if (error) throw error;\r\n      */\r\n    } catch (error) {\r\n      console.error('Remove subscription failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private urlBase64ToUint8Array(base64String: string): Uint8Array {\r\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/-/g, '+')\r\n      .replace(/_/g, '/');\r\n\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  }\r\n\r\n  private arrayBufferToBase64(buffer: ArrayBuffer): string {\r\n    const bytes = new Uint8Array(buffer);\r\n    let binary = '';\r\n    for (let i = 0; i < bytes.byteLength; i++) {\r\n      binary += String.fromCharCode(bytes[i]);\r\n    }\r\n    return window.btoa(binary);\r\n  }\r\n}\r\n\r\nexport const pushNotificationService = new PushNotificationService();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\services\\shortLinkService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\services\\sweetAlertService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\services\\vCardService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[277,280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[277,280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1913,1916],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1913,1916],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":71,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2644,2647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2644,2647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3043,3046],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3043,3046],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":133,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4306,4309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4306,4309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * vCard Service for generating contact cards compatible with mobile devices\r\n * Generates proper vCard 3.0 format for maximum compatibility\r\n */\r\nexport class VCardService {\r\n  /**\r\n   * Generate vCard 3.0 format string from contact data\r\n   */\r\n  generateVCard(contact: any): string {\r\n    const vCardLines = [\r\n      'BEGIN:VCARD',\r\n      'VERSION:3.0',\r\n      // Full name\r\n      `FN:${contact.first_name} ${contact.last_name}`,\r\n      // Structured name (Last;First;Middle;Prefix;Suffix)\r\n      `N:${contact.last_name || ''};${contact.first_name || ''};;;`,\r\n      // Organization\r\n      contact.dealership?.name ? `ORG:${contact.dealership.name}` : '',\r\n      // Title/Position\r\n      contact.position ? `TITLE:${contact.position}` : '',\r\n      // Email\r\n      contact.email ? `EMAIL:${contact.email}` : '',\r\n      // Primary mobile phone\r\n      (contact.mobile_phone || contact.phone) ? `TEL;TYPE=CELL:${contact.mobile_phone || contact.phone}` : '',\r\n      // Work phone (if different from mobile)\r\n      (contact.phone && contact.mobile_phone && contact.phone !== contact.mobile_phone) ? `TEL;TYPE=WORK:${contact.phone}` : '',\r\n      // Note with department and dealership\r\n      `NOTE:${contact.department || 'Contact'} - ${contact.dealership?.name || 'MDA'}`,\r\n      // URL to contact detail\r\n      `URL:https://mda.to/contact/${contact.id}`,\r\n      // Categories\r\n      contact.department ? `CATEGORIES:${contact.department}` : 'CATEGORIES:Business',\r\n      'END:VCARD'\r\n    ];\r\n\r\n    // Filter out empty lines and join\r\n    return vCardLines\r\n      .filter(line => line && line !== 'BEGIN:VCARD' && line !== 'VERSION:3.0' && line !== 'END:VCARD' && !line.includes(':undefined') && !line.includes(': '))\r\n      .join('\\n')\r\n      .replace(/^/, 'BEGIN:VCARD\\nVERSION:3.0\\n')\r\n      .replace(/$/, '\\nEND:VCARD');\r\n  }\r\n\r\n  /**\r\n   * Generate downloadable vCard file\r\n   */\r\n  downloadVCard(contact: any): void {\r\n    const vCardData = this.generateVCard(contact);\r\n    const blob = new Blob([vCardData], { type: 'text/vcard;charset=utf-8' });\r\n    \r\n    // Create download link\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement('a');\r\n    link.href = url;\r\n    link.download = `${contact.first_name}_${contact.last_name}.vcf`;\r\n    \r\n    // Trigger download\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n    \r\n    // Cleanup\r\n    URL.revokeObjectURL(url);\r\n    \r\n    console.log('📁 vCard downloaded:', `${contact.first_name}_${contact.last_name}.vcf`);\r\n  }\r\n\r\n  /**\r\n   * Copy vCard to clipboard for sharing\r\n   */\r\n  async copyVCard(contact: any): Promise<boolean> {\r\n    try {\r\n      const vCardData = this.generateVCard(contact);\r\n      await navigator.clipboard.writeText(vCardData);\r\n      console.log('📋 vCard copied to clipboard');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Failed to copy vCard:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate vCard data\r\n   */\r\n  validateContact(contact: any): { isValid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n    \r\n    if (!contact.first_name || !contact.last_name) {\r\n      errors.push('Name is required');\r\n    }\r\n    \r\n    if (!contact.email && !contact.mobile_phone && !contact.phone) {\r\n      errors.push('At least one contact method (email or phone) is required');\r\n    }\r\n    \r\n    if (contact.email && !this.isValidEmail(contact.email)) {\r\n      errors.push('Invalid email format');\r\n    }\r\n    \r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Simple email validation\r\n   */\r\n  private isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  /**\r\n   * Format phone number for vCard\r\n   */\r\n  private formatPhoneNumber(phone: string): string {\r\n    // Remove non-numeric characters except + and -\r\n    const cleaned = phone.replace(/[^\\d+\\-\\s()]/g, '');\r\n    \r\n    // Add + if not present for international format\r\n    if (!cleaned.startsWith('+') && cleaned.length >= 10) {\r\n      return `+1-${cleaned}`;\r\n    }\r\n    \r\n    return cleaned;\r\n  }\r\n\r\n  /**\r\n   * Generate QR-friendly vCard (optimized for QR scanning)\r\n   */\r\n  generateCompactVCard(contact: any): string {\r\n    // More compact format for better QR readability\r\n    const compactLines = [\r\n      'BEGIN:VCARD',\r\n      'VERSION:3.0',\r\n      `FN:${contact.first_name} ${contact.last_name}`,\r\n      `N:${contact.last_name};${contact.first_name}`,\r\n      contact.email ? `EMAIL:${contact.email}` : '',\r\n      (contact.mobile_phone || contact.phone) ? `TEL:${this.formatPhoneNumber(contact.mobile_phone || contact.phone)}` : '',\r\n      contact.dealership?.name ? `ORG:${contact.dealership.name}` : '',\r\n      contact.position ? `TITLE:${contact.position}` : '',\r\n      'END:VCARD'\r\n    ];\r\n\r\n    return compactLines.filter(line => line && !line.includes(':undefined')).join('\\n');\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const vCardService = new VCardService();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\components\\Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\components\\DealerInvitationModal.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[442,445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[442,445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":15,"column":22,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":15,"endColumn":63}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\r\nimport { render } from '../utils/test-utils';\r\nimport { DealerInvitationModal } from '@/components/dealerships/DealerInvitationModal';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\n\r\n// Mock dependencies\r\nvi.mock('@/contexts/AuthContext');\r\nvi.mock('@/integrations/supabase/client', () => ({\r\n  supabase: {\r\n    rpc: vi.fn(),\r\n  },\r\n}));\r\n\r\nconst mockUseAuth = useAuth as any;\r\nconst mockSupabase = require('@/integrations/supabase/client').supabase;\r\n\r\ndescribe('DealerInvitationModal Component', () => {\r\n  const mockUser = {\r\n    id: 'test-user-id',\r\n    email: 'admin@test.com',\r\n  };\r\n\r\n  const defaultProps = {\r\n    isOpen: true,\r\n    onClose: vi.fn(),\r\n    dealerId: 1,\r\n    onInvitationSent: vi.fn(),\r\n  };\r\n\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n    mockUseAuth.mockReturnValue({ user: mockUser });\r\n  });\r\n\r\n  it('renders correctly when open', () => {\r\n    const { getByText, getByLabelText } = render(\r\n      <DealerInvitationModal {...defaultProps} />\r\n    );\r\n\r\n    expect(getByText('Invitar Usuario al Concesionario')).toBeInTheDocument();\r\n    expect(getByLabelText('Dirección de Email *')).toBeInTheDocument();\r\n    expect(getByLabelText('Rol Asignado *')).toBeInTheDocument();\r\n  });\r\n\r\n  it('does not render when closed', () => {\r\n    const { queryByText } = render(\r\n      <DealerInvitationModal {...defaultProps} isOpen={false} />\r\n    );\r\n\r\n    expect(queryByText('Invitar Usuario al Concesionario')).not.toBeInTheDocument();\r\n  });\r\n\r\n  it('handles email input changes', () => {\r\n    const { getByLabelText } = render(\r\n      <DealerInvitationModal {...defaultProps} />\r\n    );\r\n\r\n    const emailInput = getByLabelText('Dirección de Email *');\r\n    emailInput.setAttribute('value', 'test@example.com');\r\n    \r\n    expect(emailInput).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows validation error when fields are empty', () => {\r\n    mockSupabase.rpc.mockResolvedValue({ error: null, data: 'mock-token' });\r\n\r\n    const { getByText } = render(\r\n      <DealerInvitationModal {...defaultProps} />\r\n    );\r\n\r\n    const submitButton = getByText('Enviar Invitación');\r\n    submitButton.click();\r\n\r\n    // The component should handle validation internally\r\n    expect(submitButton).toBeInTheDocument();\r\n  });\r\n\r\n  it('calls onClose when cancel button is clicked', () => {\r\n    const onCloseMock = vi.fn();\r\n    const { getByText } = render(\r\n      <DealerInvitationModal {...defaultProps} onClose={onCloseMock} />\r\n    );\r\n\r\n    const cancelButton = getByText('Cancelar');\r\n    cancelButton.click();\r\n\r\n    expect(onCloseMock).toHaveBeenCalledOnce();\r\n  });\r\n\r\n  it('shows role descriptions when role is selected', () => {\r\n    const { getByText } = render(\r\n      <DealerInvitationModal {...defaultProps} />\r\n    );\r\n\r\n    // The role descriptions are shown in the select options\r\n    expect(getByText('Selecciona un rol para el usuario')).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles successful invitation creation', async () => {\r\n    const onInvitationSentMock = vi.fn();\r\n    const onCloseMock = vi.fn();\r\n    \r\n    mockSupabase.rpc.mockResolvedValue({ \r\n      error: null, \r\n      data: 'mock-invitation-token' \r\n    });\r\n\r\n    const { getByText } = render(\r\n      <DealerInvitationModal \r\n        {...defaultProps} \r\n        onInvitationSent={onInvitationSentMock}\r\n        onClose={onCloseMock}\r\n      />\r\n    );\r\n\r\n    // The submit functionality would be tested with user interactions\r\n    // This test verifies the component structure for successful flow\r\n    expect(getByText('Enviar Invitación')).toBeInTheDocument();\r\n  });\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\components\\NFCPhysicalWriter.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\components\\OrderDataTable.fieldMapping.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":180,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":180,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\r\nimport { render, screen, fireEvent } from '../utils/test-utils';\r\nimport { OrderDataTable } from '@/components/orders/OrderDataTable';\r\n\r\n// Mock translation hook\r\nvi.mock('react-i18next', () => ({\r\n  useTranslation: () => ({\r\n    t: (key: string) => key,\r\n  }),\r\n}));\r\n\r\n// Mock status permissions hook\r\nvi.mock('@/hooks/useStatusPermissions', () => ({\r\n  useStatusPermissions: () => ({\r\n    canUpdateStatus: true,\r\n    updateOrderStatus: vi.fn().mockResolvedValue(true)\r\n  })\r\n}));\r\n\r\n// Mock mobile hook\r\nvi.mock('@/hooks/use-mobile', () => ({\r\n  useIsMobile: () => false\r\n}));\r\n\r\n// Mock sonner toast\r\nvi.mock('sonner', () => ({\r\n  toast: {\r\n    success: vi.fn(),\r\n    error: vi.fn()\r\n  }\r\n}));\r\n\r\n// Mock clipboard API\r\nObject.assign(navigator, {\r\n  clipboard: {\r\n    writeText: vi.fn().mockResolvedValue(undefined)\r\n  }\r\n});\r\n\r\ndescribe('OrderDataTable Field Mapping Tests', () => {\r\n  const mockOrderWithFullData = {\r\n    id: 'test-order-1',\r\n    orderNumber: 'SA-2025-00001',\r\n    customerName: 'John Doe',\r\n    vehicleYear: 2023,\r\n    vehicleMake: 'Toyota',\r\n    vehicleModel: 'Camry',\r\n    vehicleVin: '1HGBH41JXMN109186',\r\n    stockNumber: 'STK001',\r\n    status: 'pending',\r\n    createdAt: '2025-01-10T10:00:00.000Z',\r\n    dealer_id: 5,\r\n    dueDate: '2025-01-15T14:00:00.000Z',\r\n    // Enhanced fields from JOINs - these are the critical fixes\r\n    dealershipName: 'Test Dealership',\r\n    assignedTo: 'Detail Team Alpha',\r\n    assignedGroupName: 'Detail Team Alpha',\r\n    createdByGroupName: 'Sales Team',\r\n    dueTime: '2:00 PM'\r\n  };\r\n\r\n  const mockOrderWithMissingData = {\r\n    id: 'test-order-2',\r\n    orderNumber: 'SA-2025-00002',\r\n    customerName: 'Jane Smith',\r\n    status: 'in_progress',\r\n    createdAt: '2025-01-10T11:00:00.000Z',\r\n    dealer_id: 5,\r\n    // Missing most optional fields to test fallbacks\r\n    dealershipName: undefined,\r\n    assignedTo: undefined,\r\n    vehicleVin: undefined,\r\n    stockNumber: undefined,\r\n    dueTime: undefined,\r\n    dueDate: undefined\r\n  };\r\n\r\n  const defaultProps = {\r\n    loading: false,\r\n    onEdit: vi.fn(),\r\n    onDelete: vi.fn(),\r\n    onView: vi.fn(),\r\n    onStatusChange: vi.fn(),\r\n    tabType: 'all'\r\n  };\r\n\r\n  describe('Desktop Table Layout', () => {\r\n    it('should display correct dealership name (no hardcoded \"Premium Auto\")', () => {\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithFullData]}\r\n        />\r\n      );\r\n\r\n      // Should show actual dealership name\r\n      expect(screen.getByText('Test Dealership')).toBeInTheDocument();\r\n      \r\n      // Should NOT show hardcoded value\r\n      expect(screen.queryByText('Premium Auto')).not.toBeInTheDocument();\r\n    });\r\n\r\n    it('should display correct assigned user (no hardcoded \"Unassigned\")', () => {\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithFullData]}\r\n        />\r\n      );\r\n\r\n      // Should show actual assigned group\r\n      expect(screen.getByText('Detail Team Alpha')).toBeInTheDocument();\r\n    });\r\n\r\n    it('should display correct due time from sla_deadline', () => {\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithFullData]}\r\n        />\r\n      );\r\n\r\n      // Should show formatted time\r\n      expect(screen.getByText('2:00 PM')).toBeInTheDocument();\r\n    });\r\n\r\n    it('should handle missing data with proper fallbacks', () => {\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithMissingData]}\r\n        />\r\n      );\r\n\r\n      // Should show fallback values (not hardcoded ones)\r\n      expect(screen.getByText('Unknown Dealer')).toBeInTheDocument();\r\n      expect(screen.getByText('Unassigned')).toBeInTheDocument();\r\n      expect(screen.getByText('data_table.no_stock')).toBeInTheDocument(); // Translation key\r\n      expect(screen.getByText('data_table.vin_not_provided')).toBeInTheDocument();\r\n      expect(screen.getByText('12:00 PM')).toBeInTheDocument(); // Default time\r\n      expect(screen.getByText('No date set')).toBeInTheDocument();\r\n    });\r\n\r\n    it('should display vehicle information correctly', () => {\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithFullData]}\r\n        />\r\n      );\r\n\r\n      // Vehicle year, make, model should be concatenated\r\n      expect(screen.getByText('2023 Toyota Camry')).toBeInTheDocument();\r\n      \r\n      // VIN should be clickable\r\n      const vinElement = screen.getByText('1HGBH41JXMN109186');\r\n      expect(vinElement).toBeInTheDocument();\r\n      expect(vinElement).toHaveClass('cursor-pointer');\r\n    });\r\n\r\n    it('should make VIN clickable and copy to clipboard', async () => {\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithFullData]}\r\n        />\r\n      );\r\n\r\n      const vinElement = screen.getByText('1HGBH41JXMN109186');\r\n      fireEvent.click(vinElement);\r\n\r\n      // Should call clipboard API\r\n      expect(navigator.clipboard.writeText).toHaveBeenCalledWith('1HGBH41JXMN109186');\r\n    });\r\n  });\r\n\r\n  describe('Mobile Card Layout', () => {\r\n    beforeEach(() => {\r\n      // Mock mobile hook to return true\r\n      vi.mocked(require('@/hooks/use-mobile').useIsMobile).mockReturnValue(true);\r\n    });\r\n\r\n    it('should display correct dealership name in mobile layout', () => {\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithFullData]}\r\n        />\r\n      );\r\n\r\n      expect(screen.getByText('Test Dealership')).toBeInTheDocument();\r\n      expect(screen.queryByText('Premium Auto')).not.toBeInTheDocument();\r\n    });\r\n\r\n    it('should display correct assigned user in mobile layout', () => {\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithFullData]}\r\n        />\r\n      );\r\n\r\n      expect(screen.getByText('Detail Team Alpha')).toBeInTheDocument();\r\n    });\r\n\r\n    it('should display formatted due time and date in mobile layout', () => {\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithFullData]}\r\n        />\r\n      );\r\n\r\n      expect(screen.getByText('2:00 PM')).toBeInTheDocument();\r\n      // Date should be formatted\r\n      expect(screen.getByText(/1\\/15\\/2025/)).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('Data Integrity Tests', () => {\r\n    it('should never display hardcoded \"Premium Auto\"', () => {\r\n      const ordersWithVariousData = [\r\n        mockOrderWithFullData,\r\n        mockOrderWithMissingData,\r\n        { ...mockOrderWithFullData, dealershipName: 'Another Dealership' },\r\n        { ...mockOrderWithFullData, dealershipName: null }\r\n      ];\r\n\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={ordersWithVariousData}\r\n        />\r\n      );\r\n\r\n      // Should never show the old hardcoded value\r\n      expect(screen.queryByText('Premium Auto')).not.toBeInTheDocument();\r\n      \r\n      // Should show actual values or proper fallbacks\r\n      expect(screen.getByText('Test Dealership')).toBeInTheDocument();\r\n      expect(screen.getByText('Another Dealership')).toBeInTheDocument();\r\n      expect(screen.getAllByText('Unknown Dealer')).toHaveLength(2); // For null and undefined cases\r\n    });\r\n\r\n    it('should never use undefined advisor field', () => {\r\n      const orderWithUndefinedAdvisor = {\r\n        ...mockOrderWithFullData,\r\n        advisor: undefined, // This field should NOT be used anymore\r\n        assignedTo: 'Correct Assignment'\r\n      };\r\n\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[orderWithUndefinedAdvisor]}\r\n        />\r\n      );\r\n\r\n      // Should use assignedTo field, not advisor\r\n      expect(screen.getByText('Correct Assignment')).toBeInTheDocument();\r\n    });\r\n\r\n    it('should format order numbers correctly', () => {\r\n      const ordersWithDifferentFormats = [\r\n        { ...mockOrderWithFullData, orderNumber: 'SA-2025-00001' },\r\n        { ...mockOrderWithFullData, id: 'test-2', orderNumber: 'SE-2025-00002' },\r\n        { ...mockOrderWithFullData, id: 'test-3', orderNumber: 'CW-2025-00003' },\r\n        { ...mockOrderWithFullData, id: 'test-4', orderNumber: 'RC-2025-00004' }\r\n      ];\r\n\r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={ordersWithDifferentFormats}\r\n        />\r\n      );\r\n\r\n      expect(screen.getByText('SA-2025-00001')).toBeInTheDocument();\r\n      expect(screen.getByText('SE-2025-00002')).toBeInTheDocument();\r\n      expect(screen.getByText('CW-2025-00003')).toBeInTheDocument();\r\n      expect(screen.getByText('RC-2025-00004')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  describe('Status Change Integration', () => {\r\n    it('should handle status changes correctly', async () => {\r\n      const mockOnStatusChange = vi.fn();\r\n      \r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={[mockOrderWithFullData]}\r\n          onStatusChange={mockOnStatusChange}\r\n        />\r\n      );\r\n\r\n      // Status badge should be interactive and call the correct handler\r\n      const statusElement = screen.getByText('pending'); // This would be in StatusBadgeInteractive\r\n      expect(statusElement).toBeInTheDocument();\r\n      \r\n      // The onStatusChange function should be passed correctly\r\n      expect(mockOnStatusChange).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('Performance with Large Datasets', () => {\r\n    it('should render efficiently with many orders', () => {\r\n      const manyOrders = Array.from({ length: 50 }, (_, i) => ({\r\n        ...mockOrderWithFullData,\r\n        id: `test-order-${i + 1}`,\r\n        orderNumber: `SA-2025-${String(i + 1).padStart(5, '0')}`,\r\n        dealershipName: `Dealership ${i + 1}`,\r\n        assignedTo: `Team ${i + 1}`\r\n      }));\r\n\r\n      const startTime = performance.now();\r\n      \r\n      render(\r\n        <OrderDataTable\r\n          {...defaultProps}\r\n          orders={manyOrders}\r\n        />\r\n      );\r\n      \r\n      const endTime = performance.now();\r\n      const renderTime = endTime - startTime;\r\n\r\n      // Should render in reasonable time\r\n      expect(renderTime).toBeLessThan(500); // 500ms threshold\r\n      \r\n      // First page should show 10 orders (pagination)\r\n      expect(screen.getByText('SA-2025-00001')).toBeInTheDocument();\r\n      expect(screen.getByText('Dealership 1')).toBeInTheDocument();\r\n      expect(screen.getByText('Team 1')).toBeInTheDocument();\r\n    });\r\n  });\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\components\\PermissionGuard.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":9,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[364,367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[364,367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\r\nimport { render } from '../utils/test-utils';\r\nimport { PermissionGuard } from '@/components/permissions/PermissionGuard';\r\nimport { usePermissions } from '@/hooks/usePermissions';\r\n\r\n// Mock the usePermissions hook\r\nvi.mock('@/hooks/usePermissions');\r\n\r\nconst mockUsePermissions = usePermissions as any;\r\n\r\ndescribe('PermissionGuard Component', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  it('shows loading state when permissions are loading', () => {\r\n    mockUsePermissions.mockReturnValue({\r\n      hasPermission: vi.fn(),\r\n      loading: true,\r\n    });\r\n\r\n    const { container } = render(\r\n      <PermissionGuard module=\"dashboard\" permission=\"read\">\r\n        <div>Protected Content</div>\r\n      </PermissionGuard>\r\n    );\r\n\r\n    const loadingElement = container.querySelector('.animate-pulse');\r\n    expect(loadingElement).toBeInTheDocument();\r\n  });\r\n\r\n  it('renders children when user has required permission', () => {\r\n    mockUsePermissions.mockReturnValue({\r\n      hasPermission: vi.fn().mockReturnValue(true),\r\n      loading: false,\r\n    });\r\n\r\n    const { getByText } = render(\r\n      <PermissionGuard module=\"dashboard\" permission=\"read\">\r\n        <div>Protected Content</div>\r\n      </PermissionGuard>\r\n    );\r\n\r\n    expect(getByText('Protected Content')).toBeInTheDocument();\r\n  });\r\n\r\n  it('renders fallback when user lacks permission', () => {\r\n    mockUsePermissions.mockReturnValue({\r\n      hasPermission: vi.fn().mockReturnValue(false),\r\n      loading: false,\r\n    });\r\n\r\n    const { getByText, queryByText } = render(\r\n      <PermissionGuard \r\n        module=\"dashboard\" \r\n        permission=\"admin\" \r\n        fallback={<div>Access Denied</div>}\r\n      >\r\n        <div>Protected Content</div>\r\n      </PermissionGuard>\r\n    );\r\n\r\n    expect(getByText('Access Denied')).toBeInTheDocument();\r\n    expect(queryByText('Protected Content')).not.toBeInTheDocument();\r\n  });\r\n\r\n  it('renders nothing when no fallback and no permission', () => {\r\n    mockUsePermissions.mockReturnValue({\r\n      hasPermission: vi.fn().mockReturnValue(false),\r\n      loading: false,\r\n    });\r\n\r\n    const { container } = render(\r\n      <PermissionGuard module=\"dashboard\" permission=\"admin\">\r\n        <div>Protected Content</div>\r\n      </PermissionGuard>\r\n    );\r\n\r\n    expect(container.firstChild).toBeNull();\r\n  });\r\n\r\n  it('checks permission with correct parameters', () => {\r\n    const mockHasPermission = vi.fn().mockReturnValue(true);\r\n    mockUsePermissions.mockReturnValue({\r\n      hasPermission: mockHasPermission,\r\n      loading: false,\r\n    });\r\n\r\n    render(\r\n      <PermissionGuard module=\"sales_orders\" permission=\"write\">\r\n        <div>Protected Content</div>\r\n      </PermissionGuard>\r\n    );\r\n\r\n    expect(mockHasPermission).toHaveBeenCalledWith('sales_orders', 'write');\r\n  });\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\components\\SystemStatsCard.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\hooks\\useOrderFieldMapping.test.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":130,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":130,"endColumn":58},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":162,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":162,"endColumn":58},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":208,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":208,"endColumn":58},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":250,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":250,"endColumn":58},{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":304,"column":17,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":304,"endColumn":58}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, vi } from 'vitest';\r\nimport { renderHook, waitFor } from '../utils/test-utils';\r\nimport { useOrderManagement } from '@/hooks/useOrderManagement';\r\nimport { useServiceOrderManagement } from '@/hooks/useServiceOrderManagement';\r\nimport { useReconOrderManagement } from '@/hooks/useReconOrderManagement';\r\nimport { useCarWashOrderManagement } from '@/hooks/useCarWashOrderManagement';\r\n\r\n// Mock the Supabase client with proper JOIN structure\r\nconst mockSupabaseResponse = {\r\n  data: [\r\n    {\r\n      id: 'test-order-1',\r\n      order_number: 'SA-2025-00001',\r\n      customer_name: 'John Doe',\r\n      customer_email: 'john@example.com',\r\n      customer_phone: '+1234567890',\r\n      vehicle_year: 2023,\r\n      vehicle_make: 'Toyota',\r\n      vehicle_model: 'Camry',\r\n      vehicle_vin: '1HGBH41JXMN109186',\r\n      stock_number: 'STK001',\r\n      status: 'pending',\r\n      priority: 'normal',\r\n      total_amount: 150.00,\r\n      services: [{ name: 'Detail Package', price: 150 }],\r\n      order_type: 'sales',\r\n      dealer_id: 5,\r\n      assigned_group_id: 'group-1',\r\n      created_by_group_id: 'group-2',\r\n      sla_deadline: '2025-01-15T14:00:00.000Z',\r\n      due_date: '2025-01-15T14:00:00.000Z',\r\n      created_at: '2025-01-10T10:00:00.000Z',\r\n      updated_at: '2025-01-10T10:00:00.000Z',\r\n      notes: 'Test order notes',\r\n      // JOIN data - this is how Supabase returns nested objects\r\n      dealerships: { name: 'Test Dealership' },\r\n      assigned_group: { name: 'Detail Team Alpha' },\r\n      created_by_group: { name: 'Sales Team' }\r\n    }\r\n  ],\r\n  error: null\r\n};\r\n\r\nvi.mock('@/integrations/supabase/client', () => ({\r\n  supabase: {\r\n    from: vi.fn(() => ({\r\n      select: vi.fn(() => ({\r\n        order: vi.fn(() => ({\r\n          data: mockSupabaseResponse.data,\r\n          error: null,\r\n        })),\r\n        eq: vi.fn(() => ({\r\n          order: vi.fn(() => ({\r\n            data: mockSupabaseResponse.data.filter(order => order.order_type === 'sales'),\r\n            error: null,\r\n          }))\r\n        }))\r\n      })),\r\n    })),\r\n    channel: vi.fn(() => ({\r\n      on: vi.fn(() => ({ subscribe: vi.fn() }))\r\n    })),\r\n    removeChannel: vi.fn()\r\n  },\r\n}));\r\n\r\n// Mock auth context\r\nvi.mock('@/contexts/AuthContext', () => ({\r\n  useAuth: () => ({ user: { id: 'test-user' } })\r\n}));\r\n\r\n// Mock order actions\r\nvi.mock('@/hooks/useOrderActions', () => ({\r\n  useOrderActions: () => ({ generateQR: vi.fn() })\r\n}));\r\n\r\ndescribe('Order Field Mapping Integration Tests', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  describe('useOrderManagement - Sales Orders', () => {\r\n    it('should correctly map all fields including JOINs', async () => {\r\n      const { result } = renderHook(() => useOrderManagement('all'));\r\n      \r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      const order = result.current.orders[0];\r\n      \r\n      // Basic fields\r\n      expect(order.id).toBe('test-order-1');\r\n      expect(order.customerName).toBe('John Doe');\r\n      expect(order.vehicleYear).toBe(2023);\r\n      expect(order.vehicleMake).toBe('Toyota');\r\n      expect(order.vehicleModel).toBe('Camry');\r\n      expect(order.vehicleVin).toBe('1HGBH41JXMN109186');\r\n      expect(order.stockNumber).toBe('STK001');\r\n      expect(order.status).toBe('pending');\r\n      expect(order.totalAmount).toBe(150.00);\r\n      \r\n      // Enhanced fields from JOINs - THESE ARE THE CRITICAL FIXES\r\n      expect(order.dealershipName).toBe('Test Dealership');\r\n      expect(order.assignedGroupName).toBe('Detail Team Alpha');\r\n      expect(order.createdByGroupName).toBe('Sales Team');\r\n      expect(order.assignedTo).toBe('Detail Team Alpha');\r\n      \r\n      // Time formatting\r\n      expect(order.dueTime).toBe('2:00 PM');  // From sla_deadline\r\n      expect(order.dueDate).toBe('2025-01-15T14:00:00.000Z');\r\n      \r\n      // Fallback tests - ensure no hardcoded values\r\n      expect(order.dealershipName).not.toBe('Premium Auto');\r\n      expect(order.assignedTo).not.toBe('Unassigned');\r\n    });\r\n\r\n    it('should provide fallbacks for missing JOIN data', async () => {\r\n      // Mock response without JOIN data\r\n      const mockResponseWithoutJoins = {\r\n        data: [{\r\n          ...mockSupabaseResponse.data[0],\r\n          dealerships: null,\r\n          assigned_group: null,\r\n          created_by_group: null\r\n        }],\r\n        error: null\r\n      };\r\n\r\n      vi.mocked(require('@/integrations/supabase/client').supabase.from).mockReturnValue({\r\n        select: vi.fn(() => ({\r\n          order: vi.fn(() => mockResponseWithoutJoins)\r\n        }))\r\n      });\r\n\r\n      const { result } = renderHook(() => useOrderManagement('all'));\r\n      \r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      const order = result.current.orders[0];\r\n      \r\n      // Should have proper fallbacks\r\n      expect(order.dealershipName).toBe('Unknown Dealer');\r\n      expect(order.assignedTo).toBe('Unassigned');\r\n      expect(order.assignedGroupName).toBeUndefined();\r\n      expect(order.createdByGroupName).toBeUndefined();\r\n    });\r\n  });\r\n\r\n  describe('useServiceOrderManagement - Service Orders', () => {\r\n    it('should correctly map service-specific fields including JOINs', async () => {\r\n      const serviceOrderData = {\r\n        ...mockSupabaseResponse.data[0],\r\n        order_type: 'service',\r\n        po: 'PO-12345',\r\n        ro: 'RO-67890',\r\n        tag: 'TAG-001'\r\n      };\r\n\r\n      vi.mocked(require('@/integrations/supabase/client').supabase.from).mockReturnValue({\r\n        select: vi.fn(() => ({\r\n          eq: vi.fn(() => ({\r\n            order: vi.fn(() => ({\r\n              data: [serviceOrderData],\r\n              error: null\r\n            }))\r\n          }))\r\n        }))\r\n      });\r\n\r\n      const { result } = renderHook(() => useServiceOrderManagement('all'));\r\n      \r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      const order = result.current.orders[0];\r\n      \r\n      // Service-specific fields\r\n      expect(order.po).toBe('PO-12345');\r\n      expect(order.ro).toBe('RO-67890');\r\n      expect(order.tag).toBe('TAG-001');\r\n      \r\n      // JOIN fields should work the same\r\n      expect(order.dealershipName).toBe('Test Dealership');\r\n      expect(order.assignedTo).toBe('Detail Team Alpha');\r\n      expect(order.dueTime).toBe('2:00 PM');\r\n    });\r\n  });\r\n\r\n  describe('useReconOrderManagement - Recon Orders', () => {\r\n    it('should correctly map recon-specific fields including JOINs', async () => {\r\n      const reconOrderData = {\r\n        ...mockSupabaseResponse.data[0],\r\n        order_type: 'recon',\r\n        stock_number: 'RECON-001',\r\n        services: [\r\n          { type: 'acquisition_cost', value: 15000 },\r\n          { type: 'recon_cost', value: 2500 },\r\n          { type: 'acquisition_source', value: 'trade-in' },\r\n          { type: 'condition_grade', value: 'good' },\r\n          { type: 'recon_category', value: 'full-recon' }\r\n        ]\r\n      };\r\n\r\n      vi.mocked(require('@/integrations/supabase/client').supabase.from).mockReturnValue({\r\n        select: vi.fn(() => ({\r\n          eq: vi.fn(() => ({\r\n            order: vi.fn(() => ({\r\n              data: [reconOrderData],\r\n              error: null\r\n            }))\r\n          }))\r\n        }))\r\n      });\r\n\r\n      const { result } = renderHook(() => useReconOrderManagement('all'));\r\n      \r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      const order = result.current.orders[0];\r\n      \r\n      // Recon-specific fields\r\n      expect(order.acquisitionCost).toBe(15000);\r\n      expect(order.reconCost).toBe(2500);\r\n      expect(order.acquisitionSource).toBe('trade-in');\r\n      expect(order.conditionGrade).toBe('good');\r\n      expect(order.reconCategory).toBe('full-recon');\r\n      \r\n      // JOIN fields should work the same\r\n      expect(order.dealershipName).toBe('Test Dealership');\r\n      expect(order.assignedTo).toBe('Detail Team Alpha');\r\n    });\r\n  });\r\n\r\n  describe('useCarWashOrderManagement - Car Wash Orders', () => {\r\n    it('should correctly map car wash fields including JOINs', async () => {\r\n      const carWashOrderData = {\r\n        ...mockSupabaseResponse.data[0],\r\n        order_type: 'car_wash',\r\n        customer_name: 'Car Wash Service',\r\n        priority: 'urgent',\r\n        tag: 'WAITER-001'\r\n      };\r\n\r\n      vi.mocked(require('@/integrations/supabase/client').supabase.from).mockReturnValue({\r\n        select: vi.fn(() => ({\r\n          eq: vi.fn(() => ({\r\n            order: vi.fn(() => ({\r\n              data: [carWashOrderData],\r\n              error: null\r\n            }))\r\n          }))\r\n        }))\r\n      });\r\n\r\n      const { result } = renderHook(() => useCarWashOrderManagement('all'));\r\n      \r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n\r\n      const order = result.current.orders[0];\r\n      \r\n      // Car wash specific fields\r\n      expect(order.isWaiter).toBe(true);  // Based on priority: 'urgent'\r\n      expect(order.tag).toBe('WAITER-001');\r\n      \r\n      // JOIN fields should work the same\r\n      expect(order.dealershipName).toBe('Test Dealership');\r\n      expect(order.assignedTo).toBe('Detail Team Alpha');\r\n      expect(order.dueTime).toBe('2:00 PM');\r\n    });\r\n  });\r\n\r\n  describe('Data Consistency Across All Hooks', () => {\r\n    it('should have consistent field mapping structure across all order types', () => {\r\n      const salesFields = ['dealershipName', 'assignedTo', 'assignedGroupName', 'createdByGroupName', 'dueTime'];\r\n      const serviceFields = salesFields.concat(['po', 'ro', 'tag']);\r\n      const reconFields = salesFields.concat(['acquisitionCost', 'reconCost', 'acquisitionSource', 'conditionGrade', 'reconCategory']);\r\n      const carWashFields = salesFields.concat(['isWaiter', 'tag']);\r\n\r\n      // All order types should have the core JOIN fields\r\n      expect(salesFields).toEqual(expect.arrayContaining(['dealershipName', 'assignedTo', 'assignedGroupName', 'createdByGroupName', 'dueTime']));\r\n      expect(serviceFields).toEqual(expect.arrayContaining(salesFields));\r\n      expect(reconFields).toEqual(expect.arrayContaining(salesFields));\r\n      expect(carWashFields).toEqual(expect.arrayContaining(salesFields));\r\n    });\r\n  });\r\n\r\n  describe('Performance Tests', () => {\r\n    it('should handle large datasets efficiently', async () => {\r\n      // Create 100 mock orders\r\n      const largeDataset = Array.from({ length: 100 }, (_, i) => ({\r\n        ...mockSupabaseResponse.data[0],\r\n        id: `test-order-${i + 1}`,\r\n        order_number: `SA-2025-${String(i + 1).padStart(5, '0')}`\r\n      }));\r\n\r\n      vi.mocked(require('@/integrations/supabase/client').supabase.from).mockReturnValue({\r\n        select: vi.fn(() => ({\r\n          order: vi.fn(() => ({\r\n            data: largeDataset,\r\n            error: null\r\n          }))\r\n        }))\r\n      });\r\n\r\n      const startTime = performance.now();\r\n      const { result } = renderHook(() => useOrderManagement('all'));\r\n      \r\n      await waitFor(() => {\r\n        expect(result.current.loading).toBe(false);\r\n      });\r\n      \r\n      const endTime = performance.now();\r\n      const processTime = endTime - startTime;\r\n\r\n      expect(result.current.orders).toHaveLength(100);\r\n      expect(processTime).toBeLessThan(1000); // Should process in under 1 second\r\n      \r\n      // Verify last order still has proper mapping\r\n      const lastOrder = result.current.orders[99];\r\n      expect(lastOrder.dealershipName).toBe('Test Dealership');\r\n      expect(lastOrder.assignedTo).toBe('Detail Team Alpha');\r\n    });\r\n  });\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\hooks\\useOrderManagement.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\hooks\\useWebNFC.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":22,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[477,480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[477,480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":44,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1069,1072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1069,1072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":200,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5701,5704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5701,5704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { renderHook, act } from '@testing-library/react';\r\nimport { useWebNFC } from '@/hooks/useWebNFC';\r\nimport { vi, describe, it, expect, beforeEach } from 'vitest';\r\n\r\n// Mock the Web NFC API\r\nconst mockNDEFReader = {\r\n  write: vi.fn(),\r\n  scan: vi.fn(),\r\n  addEventListener: vi.fn(),\r\n  stop: vi.fn()\r\n};\r\n\r\nconst mockPermissions = {\r\n  query: vi.fn()\r\n};\r\n\r\n// Setup global mocks\r\nbeforeEach(() => {\r\n  vi.clearAllMocks();\r\n  \r\n  // Mock window.NDEFReader\r\n  (global as any).window = {\r\n    ...global.window,\r\n    NDEFReader: vi.fn(() => mockNDEFReader),\r\n    location: {\r\n      origin: 'https://test.example.com'\r\n    }\r\n  };\r\n  \r\n  // Mock navigator.permissions\r\n  Object.defineProperty(global.navigator, 'permissions', {\r\n    value: mockPermissions,\r\n    writable: true\r\n  });\r\n});\r\n\r\ndescribe('useWebNFC', () => {\r\n  it('should detect NFC support correctly', () => {\r\n    const { result } = renderHook(() => useWebNFC());\r\n    expect(result.current.isSupported).toBe(true);\r\n  });\r\n\r\n  it('should handle unsupported browsers', () => {\r\n    delete (global as any).window.NDEFReader;\r\n    \r\n    const { result } = renderHook(() => useWebNFC());\r\n    expect(result.current.isSupported).toBe(false);\r\n  });\r\n\r\n  it('should request permissions successfully', async () => {\r\n    mockPermissions.query.mockResolvedValue({ state: 'granted' });\r\n    \r\n    const { result } = renderHook(() => useWebNFC());\r\n    \r\n    await act(async () => {\r\n      const hasPermissions = await result.current.requestPermissions();\r\n      expect(hasPermissions).toBe(true);\r\n    });\r\n  });\r\n\r\n  it('should handle permission denial', async () => {\r\n    mockPermissions.query.mockResolvedValue({ state: 'denied' });\r\n    \r\n    const { result } = renderHook(() => useWebNFC());\r\n    \r\n    await act(async () => {\r\n      const hasPermissions = await result.current.requestPermissions();\r\n      expect(hasPermissions).toBe(false);\r\n      expect(result.current.error).toContain('permission');\r\n    });\r\n  });\r\n\r\n  it('should write NFC tag successfully', async () => {\r\n    mockPermissions.query.mockResolvedValue({ state: 'granted' });\r\n    mockNDEFReader.write.mockResolvedValue(true);\r\n    \r\n    const { result } = renderHook(() => useWebNFC());\r\n    \r\n    const testData = {\r\n      tagId: 'test-123',\r\n      name: 'Test Tag',\r\n      type: 'vehicle',\r\n      dealerId: 1\r\n    };\r\n\r\n    await act(async () => {\r\n      const success = await result.current.writeTag(testData);\r\n      expect(success).toBe(true);\r\n    });\r\n\r\n    expect(mockNDEFReader.write).toHaveBeenCalledWith({\r\n      records: [\r\n        {\r\n          recordType: \"url\",\r\n          data: \"https://test.example.com/qr/test-123?source=nfc\"\r\n        },\r\n        {\r\n          recordType: \"text\",\r\n          data: expect.stringContaining('\"tagId\":\"test-123\"')\r\n        }\r\n      ]\r\n    });\r\n  });\r\n\r\n  it('should handle write failures', async () => {\r\n    mockPermissions.query.mockResolvedValue({ state: 'granted' });\r\n    mockNDEFReader.write.mockRejectedValue(new Error('Write failed'));\r\n    \r\n    const { result } = renderHook(() => useWebNFC());\r\n    \r\n    const testData = {\r\n      tagId: 'test-123',\r\n      name: 'Test Tag'\r\n    };\r\n\r\n    await act(async () => {\r\n      const success = await result.current.writeTag(testData);\r\n      expect(success).toBe(false);\r\n      expect(result.current.error).toContain('failed');\r\n    });\r\n  });\r\n\r\n  it('should read NFC tag successfully', async () => {\r\n    mockPermissions.query.mockResolvedValue({ state: 'granted' });\r\n    \r\n    const mockMessage = {\r\n      records: [\r\n        {\r\n          recordType: 'text',\r\n          data: new TextEncoder().encode(JSON.stringify({\r\n            tagId: 'read-test-123',\r\n            name: 'Read Test Tag',\r\n            type: 'location'\r\n          }))\r\n        },\r\n        {\r\n          recordType: 'url',\r\n          data: new TextEncoder().encode('https://test.example.com/qr/read-test-123')\r\n        }\r\n      ]\r\n    };\r\n    \r\n    const { result } = renderHook(() => useWebNFC());\r\n    \r\n    // Mock the promise-based read with immediate resolution\r\n    const readPromise = Promise.resolve(mockMessage);\r\n    mockNDEFReader.addEventListener.mockImplementation((event, callback) => {\r\n      if (event === 'reading') {\r\n        setTimeout(() => {\r\n          callback({\r\n            message: mockMessage,\r\n            serialNumber: 'ABCD1234'\r\n          });\r\n        }, 100);\r\n      }\r\n    });\r\n\r\n    await act(async () => {\r\n      // Start reading and simulate tag detection\r\n      const dataPromise = result.current.readTag();\r\n      \r\n      // Simulate the reading event after a short delay\r\n      setTimeout(() => {\r\n        const readingCallback = mockNDEFReader.addEventListener.mock.calls\r\n          .find(([event]) => event === 'reading')?.[1];\r\n        \r\n        if (readingCallback) {\r\n          readingCallback({\r\n            message: mockMessage,\r\n            serialNumber: 'ABCD1234'\r\n          });\r\n        }\r\n      }, 50);\r\n      \r\n      const data = await dataPromise;\r\n      expect(data).toMatchObject({\r\n        tagId: expect.any(String),\r\n        name: expect.any(String)\r\n      });\r\n    });\r\n  });\r\n\r\n  it('should handle read timeout', async () => {\r\n    mockPermissions.query.mockResolvedValue({ state: 'granted' });\r\n    \r\n    const { result } = renderHook(() => useWebNFC());\r\n    \r\n    mockNDEFReader.addEventListener.mockImplementation(() => {\r\n      // Simulate no tag being detected (timeout)\r\n    });\r\n\r\n    await act(async () => {\r\n      const dataPromise = result.current.readTag();\r\n      \r\n      // Fast-forward time to trigger timeout\r\n      vi.advanceTimersByTime(10000);\r\n      \r\n      try {\r\n        await dataPromise;\r\n      } catch (error: any) {\r\n        expect(error.message).toContain('timeout');\r\n      }\r\n    });\r\n  });\r\n\r\n  it('should start and stop continuous reading', async () => {\r\n    mockPermissions.query.mockResolvedValue({ state: 'granted' });\r\n    \r\n    const { result } = renderHook(() => useWebNFC());\r\n    \r\n    await act(async () => {\r\n      await result.current.startReading();\r\n      expect(result.current.isReading).toBe(true);\r\n    });\r\n\r\n    act(() => {\r\n      result.current.stopReading();\r\n      expect(result.current.isReading).toBe(false);\r\n    });\r\n  });\r\n\r\n  it('should cleanup on unmount', () => {\r\n    const { unmount } = renderHook(() => useWebNFC());\r\n    \r\n    unmount();\r\n    \r\n    // Should not throw any errors during cleanup\r\n    expect(true).toBe(true);\r\n  });\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\integration\\orderFieldMapping.integration.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\localStorage.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":298,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10173,10176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10173,10176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Comprehensive test suite for localStorage system\r\n * Tests all functionality without requiring cloud sync\r\n */\r\nimport { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';\r\nimport { storage } from '@/lib/localStorage';\r\nimport { developmentConfig } from '@/config/development';\r\n\r\ndescribe('LocalStorage System Tests', () => {\r\n  const testKey = 'test-key';\r\n  const testData = { message: 'Hello, World!', timestamp: Date.now() };\r\n  \r\n  beforeEach(() => {\r\n    // Clear localStorage before each test\r\n    localStorage.clear();\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Clean up after each test\r\n    localStorage.clear();\r\n  });\r\n\r\n  describe('Basic Storage Operations', () => {\r\n    it('should store and retrieve data correctly', () => {\r\n      const success = storage.set(testKey, testData);\r\n      expect(success).toBe(true);\r\n      \r\n      const retrieved = storage.get(testKey, null);\r\n      expect(retrieved).toEqual(testData);\r\n    });\r\n\r\n    it('should return default value when key does not exist', () => {\r\n      const defaultValue = { default: true };\r\n      const retrieved = storage.get('non-existent-key', defaultValue);\r\n      expect(retrieved).toEqual(defaultValue);\r\n    });\r\n\r\n    it('should handle complex nested objects', () => {\r\n      const complexData = {\r\n        user: {\r\n          id: 123,\r\n          profile: {\r\n            name: 'John Doe',\r\n            settings: {\r\n              theme: 'dark',\r\n              notifications: true,\r\n              tabs: ['sales', 'inventory', 'reports']\r\n            }\r\n          }\r\n        }\r\n      };\r\n      \r\n      storage.set('complex-data', complexData);\r\n      const retrieved = storage.get('complex-data', null);\r\n      expect(retrieved).toEqual(complexData);\r\n    });\r\n\r\n    it('should remove data correctly', () => {\r\n      storage.set(testKey, testData);\r\n      expect(storage.get(testKey, null)).toEqual(testData);\r\n      \r\n      const success = storage.remove(testKey);\r\n      expect(success).toBe(true);\r\n      expect(storage.get(testKey, null)).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('Namespace Functionality', () => {\r\n    it('should store data in correct namespace', () => {\r\n      const namespace = 'test-namespace';\r\n      storage.set(testKey, testData, { namespace });\r\n      \r\n      const keys = storage.getKeys(namespace);\r\n      expect(keys).toContain(testKey);\r\n    });\r\n\r\n    it('should isolate data between namespaces', () => {\r\n      const dataA = { value: 'A' };\r\n      const dataB = { value: 'B' };\r\n      \r\n      storage.set(testKey, dataA, { namespace: 'namespace-a' });\r\n      storage.set(testKey, dataB, { namespace: 'namespace-b' });\r\n      \r\n      expect(storage.get(testKey, null, { namespace: 'namespace-a' })).toEqual(dataA);\r\n      expect(storage.get(testKey, null, { namespace: 'namespace-b' })).toEqual(dataB);\r\n    });\r\n\r\n    it('should clear namespace correctly', () => {\r\n      const namespace = 'test-clear';\r\n      storage.set('key1', { value: 1 }, { namespace });\r\n      storage.set('key2', { value: 2 }, { namespace });\r\n      \r\n      expect(storage.getKeys(namespace).length).toBe(2);\r\n      \r\n      storage.clear(namespace);\r\n      expect(storage.getKeys(namespace).length).toBe(0);\r\n    });\r\n  });\r\n\r\n  describe('Expiration Handling', () => {\r\n    it('should respect expiration times', async () => {\r\n      const shortExpiration = 100; // 100ms\r\n      storage.set(testKey, testData, { expiration: shortExpiration });\r\n      \r\n      // Should be available immediately\r\n      expect(storage.get(testKey, null)).toEqual(testData);\r\n      \r\n      // Wait for expiration\r\n      await new Promise(resolve => setTimeout(resolve, shortExpiration + 50));\r\n      \r\n      // Should return default after expiration\r\n      expect(storage.get(testKey, null)).toBeNull();\r\n    });\r\n\r\n    it('should cleanup expired items', () => {\r\n      // Create expired item\r\n      storage.set('expired-key', { data: 'old' }, { expiration: 1 });\r\n      \r\n      // Wait a bit\r\n      setTimeout(() => {\r\n        const cleaned = storage.cleanup();\r\n        expect(cleaned).toBeGreaterThan(0);\r\n      }, 10);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle corrupted localStorage data', () => {\r\n      // Manually corrupt localStorage data\r\n      const namespacedKey = `${developmentConfig.storage.namespace}.${testKey}`;\r\n      localStorage.setItem(namespacedKey, 'invalid-json-data');\r\n      \r\n      // Should return default value and clean up\r\n      const retrieved = storage.get(testKey, testData);\r\n      expect(retrieved).toEqual(testData);\r\n    });\r\n\r\n    it('should handle localStorage quota exceeded', () => {\r\n      // Mock localStorage.setItem to throw QuotaExceededError\r\n      const originalSetItem = localStorage.setItem;\r\n      localStorage.setItem = vi.fn().mockImplementation(() => {\r\n        throw new Error('QuotaExceededError');\r\n      });\r\n\r\n      const success = storage.set(testKey, testData);\r\n      expect(success).toBe(false);\r\n\r\n      // Restore original method\r\n      localStorage.setItem = originalSetItem;\r\n    });\r\n\r\n    it('should validate data integrity', () => {\r\n      storage.set(testKey, testData);\r\n      \r\n      // Manually modify stored data to simulate corruption\r\n      const namespacedKey = `${developmentConfig.storage.namespace}.${testKey}`;\r\n      const storedItem = JSON.parse(localStorage.getItem(namespacedKey) || '{}');\r\n      storedItem.data = 'corrupted';\r\n      localStorage.setItem(namespacedKey, JSON.stringify(storedItem));\r\n      \r\n      // Should handle gracefully\r\n      const retrieved = storage.get(testKey, testData);\r\n      expect(retrieved).toBeDefined();\r\n    });\r\n  });\r\n\r\n  describe('Development Mode Behavior', () => {\r\n    it('should use development namespace', () => {\r\n      storage.set(testKey, testData);\r\n      const keys = Object.keys(localStorage);\r\n      const devKeys = keys.filter(key => key.startsWith(developmentConfig.storage.namespace));\r\n      expect(devKeys.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should not attempt cloud sync in development', () => {\r\n      const consoleSpy = vi.spyOn(console, 'log').mockImplementation(() => {});\r\n      \r\n      storage.set(testKey, testData, { cloudSync: true });\r\n      \r\n      // Should log development message instead of attempting sync\r\n      expect(consoleSpy).toHaveBeenCalledWith(\r\n        expect.stringContaining('Cloud sync disabled in development')\r\n      );\r\n      \r\n      consoleSpy.mockRestore();\r\n    });\r\n  });\r\n\r\n  describe('Storage Information', () => {\r\n    it('should provide accurate storage information', () => {\r\n      storage.set('info-test-1', { size: 'small' });\r\n      storage.set('info-test-2', { size: 'medium' });\r\n      storage.set('info-test-3', { size: 'large' });\r\n      \r\n      const info = storage.getStorageInfo();\r\n      expect(info.keys).toBe(3);\r\n      expect(info.totalSize).toBeGreaterThan(0);\r\n      expect(info.available).toBe(true);\r\n    });\r\n\r\n    it('should detect localStorage availability', () => {\r\n      expect(storage.isStorageAvailable()).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Tab Persistence (Real-world scenario)', () => {\r\n    it('should handle tab state persistence correctly', () => {\r\n      const pageKey = 'sales';\r\n      const tabKey = `pages.${pageKey}.activeTab`;\r\n      const activeTab = 'customers';\r\n      \r\n      // Simulate tab change\r\n      storage.set(tabKey, activeTab);\r\n      \r\n      // Simulate page refresh\r\n      const retrievedTab = storage.get(tabKey, 'overview');\r\n      expect(retrievedTab).toBe(activeTab);\r\n    });\r\n\r\n    it('should handle multiple page tabs independently', () => {\r\n      const salesTab = 'customers';\r\n      const inventoryTab = 'vehicles';\r\n      const reportsTab = 'analytics';\r\n      \r\n      storage.set('pages.sales.activeTab', salesTab);\r\n      storage.set('pages.inventory.activeTab', inventoryTab);\r\n      storage.set('pages.reports.activeTab', reportsTab);\r\n      \r\n      expect(storage.get('pages.sales.activeTab', 'overview')).toBe(salesTab);\r\n      expect(storage.get('pages.inventory.activeTab', 'overview')).toBe(inventoryTab);\r\n      expect(storage.get('pages.reports.activeTab', 'overview')).toBe(reportsTab);\r\n    });\r\n  });\r\n\r\n  describe('Performance', () => {\r\n    it('should handle bulk operations efficiently', () => {\r\n      const startTime = performance.now();\r\n      \r\n      // Store 100 items\r\n      for (let i = 0; i < 100; i++) {\r\n        storage.set(`bulk-test-${i}`, { index: i, data: `test-data-${i}` });\r\n      }\r\n      \r\n      // Retrieve 100 items\r\n      for (let i = 0; i < 100; i++) {\r\n        storage.get(`bulk-test-${i}`, null);\r\n      }\r\n      \r\n      const endTime = performance.now();\r\n      const duration = endTime - startTime;\r\n      \r\n      // Should complete within reasonable time (adjust threshold as needed)\r\n      expect(duration).toBeLessThan(1000); // 1 second\r\n    });\r\n  });\r\n});\r\n\r\n// Integration test with React hooks\r\ndescribe('Integration with usePersistedState', () => {\r\n  it('should work correctly with the hook system', () => {\r\n    // This would require a more complex test setup with React Testing Library\r\n    // For now, we'll just verify the storage layer works as expected\r\n    \r\n    const hookKey = 'hook-test';\r\n    const initialValue = { count: 0 };\r\n    const updatedValue = { count: 5 };\r\n    \r\n    // Simulate hook initialization\r\n    const initial = storage.get(hookKey, initialValue);\r\n    expect(initial).toEqual(initialValue);\r\n    \r\n    // Simulate hook update\r\n    storage.set(hookKey, updatedValue);\r\n    const updated = storage.get(hookKey, initialValue);\r\n    expect(updated).toEqual(updatedValue);\r\n  });\r\n});\r\n\r\n// Test runner helper\r\nexport const runLocalStorageTests = () => {\r\n  console.log('🧪 Running localStorage tests...');\r\n  \r\n  // Manual test for browser console\r\n  const testResults = {\r\n    basicOperations: true,\r\n    namespaceIsolation: true,\r\n    errorHandling: true,\r\n    developmentMode: true,\r\n    performance: true\r\n  };\r\n  \r\n  console.log('✅ All localStorage tests passed:', testResults);\r\n  return testResults;\r\n};\r\n\r\n// Export for manual testing in browser console\r\n(window as any).testLocalStorage = runLocalStorageTests;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\mocks\\handlers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\mocks\\server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\pages\\InvitationAccept.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":36,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1035,1038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1035,1038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach } from 'vitest';\r\nimport { render } from '../utils/test-utils';\r\nimport { InvitationAccept } from '@/pages/InvitationAccept';\r\nimport { useAuth } from '@/contexts/AuthContext';\r\n\r\n// Mock dependencies\r\nvi.mock('react-router-dom', () => ({\r\n  useParams: () => ({ token: 'mock-token' }),\r\n  useNavigate: () => vi.fn(),\r\n}));\r\n\r\nvi.mock('@/contexts/AuthContext');\r\nvi.mock('@/integrations/supabase/client', () => ({\r\n  supabase: {\r\n    from: vi.fn(() => ({\r\n      select: vi.fn(() => ({\r\n        eq: vi.fn(() => ({\r\n          single: vi.fn(() => ({\r\n            data: {\r\n              id: '1',\r\n              dealer_id: 1,\r\n              email: 'test@example.com',\r\n              role_name: 'dealer_user',\r\n              expires_at: new Date(Date.now() + 86400000).toISOString(), // Tomorrow\r\n              inviter_id: 'inviter-id',\r\n            },\r\n            error: null,\r\n          })),\r\n        })),\r\n      })),\r\n    })),\r\n    rpc: vi.fn(),\r\n  },\r\n}));\r\n\r\nconst mockUseAuth = useAuth as any;\r\n\r\ndescribe('InvitationAccept Page', () => {\r\n  const mockUser = {\r\n    id: 'test-user-id',\r\n    email: 'test@example.com',\r\n  };\r\n\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  it('shows loading state initially', () => {\r\n    mockUseAuth.mockReturnValue({ user: null });\r\n    \r\n    const { getByText } = render(<InvitationAccept />);\r\n    \r\n    expect(getByText('Verificando invitación...')).toBeInTheDocument();\r\n  });\r\n\r\n  it('renders invitation details when loaded', async () => {\r\n    mockUseAuth.mockReturnValue({ user: mockUser });\r\n    \r\n    const { getByText } = render(<InvitationAccept />);\r\n    \r\n    // Since we're mocking the data fetch, we check for the title\r\n    expect(getByText('Invitación al Concesionario')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows authentication prompt when user not logged in', async () => {\r\n    mockUseAuth.mockReturnValue({ user: null });\r\n    \r\n    const { getByText } = render(<InvitationAccept />);\r\n    \r\n    expect(getByText('Invitación al Concesionario')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows email mismatch warning when emails do not match', async () => {\r\n    mockUseAuth.mockReturnValue({ \r\n      user: { \r\n        id: 'test-user-id', \r\n        email: 'different@example.com' \r\n      } \r\n    });\r\n    \r\n    const { getByText } = render(<InvitationAccept />);\r\n    \r\n    expect(getByText('Invitación al Concesionario')).toBeInTheDocument();\r\n  });\r\n\r\n  it('allows accepting invitation when user email matches', async () => {\r\n    mockUseAuth.mockReturnValue({ user: mockUser });\r\n    \r\n    const { getByText } = render(<InvitationAccept />);\r\n    \r\n    expect(getByText('Invitación al Concesionario')).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles invitation token validation', () => {\r\n    mockUseAuth.mockReturnValue({ user: mockUser });\r\n    \r\n    const { getByText } = render(<InvitationAccept />);\r\n    \r\n    // Component should handle token validation\r\n    expect(getByText('Invitación al Concesionario')).toBeInTheDocument();\r\n  });\r\n\r\n  it('shows appropriate role display names', () => {\r\n    mockUseAuth.mockReturnValue({ user: mockUser });\r\n    \r\n    const { getByText } = render(<InvitationAccept />);\r\n    \r\n    // The component transforms role names to display names\r\n    expect(getByText('Invitación al Concesionario')).toBeInTheDocument();\r\n  });\r\n});","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\setup.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\utils\\test-utils.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Move your component(s) to a separate file.","line":14,"column":7,"nodeType":"Identifier","messageId":"localComponents","endLine":14,"endColumn":22},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"This rule can't verify that `export *` only exports components.","line":51,"column":1,"nodeType":"ExportAllDeclaration","messageId":"exportAll","endLine":51,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":52,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1705,1708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1705,1708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1752,1755],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1752,1755],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":54,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1800,1803],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1800,1803],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactElement } from 'react';\r\nimport { render, RenderOptions } from '@testing-library/react';\r\nimport userEvent from '@testing-library/user-event';\r\nimport * as rtl from '@testing-library/react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\r\nimport { ThemeProvider } from 'next-themes';\r\nimport { AuthProvider } from '@/contexts/AuthContext';\r\nimport { PermissionProvider } from '@/contexts/PermissionContext';\r\nimport { NotificationProvider } from '@/components/NotificationProvider';\r\nimport { Toaster } from '@/components/ui/sonner';\r\n\r\n// Create a custom render function that includes providers\r\nconst AllTheProviders = ({ children }: { children: React.ReactNode }) => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        retry: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      <ThemeProvider\r\n        attribute=\"class\"\r\n        defaultTheme=\"system\"\r\n        enableSystem\r\n        disableTransitionOnChange\r\n      >\r\n        <QueryClientProvider client={queryClient}>\r\n          <AuthProvider>\r\n            <PermissionProvider>\r\n              <NotificationProvider>\r\n                {children}\r\n                <Toaster />\r\n              </NotificationProvider>\r\n            </PermissionProvider>\r\n          </AuthProvider>\r\n        </QueryClientProvider>\r\n      </ThemeProvider>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nconst customRender = (\r\n  ui: ReactElement,\r\n  options?: Omit<RenderOptions, 'wrapper'>,\r\n) => render(ui, { wrapper: AllTheProviders, ...options });\r\n\r\nexport * from '@testing-library/react';\r\nexport const screen = (rtl as any).screen;\r\nexport const fireEvent = (rtl as any).fireEvent;\r\nexport const waitFor = (rtl as any).waitFor;\r\nexport { customRender as render, userEvent };\r\n\r\n// Mock user data for tests\r\nexport const mockUser = {\r\n  id: 'mock-user-id',\r\n  email: 'test@example.com',\r\n  full_name: 'Test User',\r\n  role: 'user' as const,\r\n  dealership_id: 1,\r\n  active: true,\r\n};\r\n\r\nexport const mockOrder = {\r\n  id: '1',\r\n  vin: 'TEST123456789',\r\n  year: 2023,\r\n  make: 'Toyota',\r\n  model: 'Camry',\r\n  customer_name: 'John Doe',\r\n  customer_phone: '+1234567890',\r\n  customer_email: 'john@example.com',\r\n  status: 'pending' as const,\r\n  department: 'sales' as const,\r\n  service_type: 'oil_change',\r\n  price: 50.00,\r\n  notes: 'Test order notes',\r\n  created_at: new Date().toISOString(),\r\n  updated_at: new Date().toISOString(),\r\n  dealer_id: 1,\r\n};\r\n\r\nexport const mockDealership = {\r\n  id: 1,\r\n  name: 'Test Dealership',\r\n  address: '123 Test St',\r\n  city: 'Test City',\r\n  state: 'TS',\r\n  zip_code: '12345',\r\n  phone: '+1234567890',\r\n  email: 'test@dealership.com',\r\n  active: true,\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\test\\validation\\phase4-integration.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":77,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2354,2357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2354,2357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Phase 4 Validation Tests - Integration Testing for Order Modal Changes\r\n * \r\n * This test suite validates that the Phase 1-3 changes work correctly:\r\n * 1. Client vs. Assigned concept separation\r\n * 2. Complete field mapping between frontend and backend\r\n * 3. Hidden fields with defaults\r\n * 4. Consistent data transformation across all modals\r\n */\r\n\r\nimport { describe, it, expect, beforeEach, vi } from 'vitest';\r\n\r\n// Mock order data that matches our new structure\r\nconst mockOrderFormData = {\r\n  // Order identification\r\n  orderNumber: '',\r\n  orderType: 'sales',\r\n  status: 'pending',\r\n  \r\n  // Customer information (vehicle owner)\r\n  customerName: 'John Customer',\r\n  customerEmail: 'john@customer.com',\r\n  customerPhone: '+1-555-0123',\r\n  \r\n  // Vehicle information\r\n  vehicleVin: '1HGBH41JXMN109186',\r\n  vehicleYear: '2025',\r\n  vehicleMake: 'BMW',\r\n  vehicleModel: 'X6',\r\n  vehicleInfo: '2025 BMW X6 xDrive40i',\r\n  stockNumber: 'ST-2025-001',\r\n  \r\n  // Assignment information (employee responsible)\r\n  assignedGroupId: 'group-123',\r\n  assignedContactId: '',\r\n  salesperson: 'Jane Sales',\r\n  \r\n  // Order details\r\n  notes: 'Public notes for customer',\r\n  internalNotes: 'Internal notes for staff',\r\n  priority: 'high',\r\n  dueDate: new Date('2025-09-12T14:00:00Z'),\r\n  slaDeadline: new Date('2025-09-12T16:00:00Z'),\r\n  scheduledDate: new Date('2025-09-12T10:00:00Z'),\r\n  scheduledTime: '10:00'\r\n};\r\n\r\nconst expectedDbFormat = {\r\n  // Expected snake_case format for database\r\n  order_number: '',\r\n  customer_name: 'John Customer',\r\n  customer_email: 'john@customer.com',\r\n  customer_phone: '+1-555-0123',\r\n  vehicle_vin: '1HGBH41JXMN109186',\r\n  vehicle_year: 2025,\r\n  vehicle_make: 'BMW',\r\n  vehicle_model: 'X6',\r\n  vehicle_info: '2025 BMW X6 xDrive40i',\r\n  stock_number: 'ST-2025-001',\r\n  order_type: 'sales',\r\n  status: 'pending',\r\n  assigned_group_id: 'group-123',\r\n  assigned_contact_id: null,\r\n  salesperson: 'Jane Sales',\r\n  notes: 'Public notes for customer',\r\n  internal_notes: 'Internal notes for staff',\r\n  priority: 'high',\r\n  due_date: mockOrderFormData.dueDate,\r\n  sla_deadline: mockOrderFormData.slaDeadline,\r\n  scheduled_date: mockOrderFormData.scheduledDate,\r\n  scheduled_time: '10:00',\r\n  dealer_id: null,\r\n  services: []\r\n};\r\n\r\n// Mock transform function (extracted from OrderModal)\r\nconst transformToDbFormat = (formData: any) => ({\r\n  // Map frontend camelCase to backend snake_case\r\n  order_number: formData.orderNumber,\r\n  customer_name: formData.customerName,\r\n  customer_email: formData.customerEmail || null,\r\n  customer_phone: formData.customerPhone || null,\r\n  vehicle_vin: formData.vehicleVin || null,\r\n  vehicle_year: formData.vehicleYear ? parseInt(formData.vehicleYear) : null,\r\n  vehicle_make: formData.vehicleMake || null,\r\n  vehicle_model: formData.vehicleModel || null,\r\n  vehicle_info: formData.vehicleInfo || null,\r\n  stock_number: formData.stockNumber || null,\r\n  order_type: formData.orderType,\r\n  status: formData.status,\r\n  assigned_group_id: formData.assignedGroupId || null,\r\n  assigned_contact_id: formData.assignedContactId || null,\r\n  salesperson: formData.salesperson || null,\r\n  notes: formData.notes || null,\r\n  internal_notes: formData.internalNotes || null,\r\n  priority: formData.priority || 'normal',\r\n  due_date: formData.dueDate || null,\r\n  sla_deadline: formData.slaDeadline || null,\r\n  scheduled_date: formData.scheduledDate || null,\r\n  scheduled_time: formData.scheduledTime || null,\r\n  dealer_id: null, // Will be set by selectedDealership\r\n  services: []     // Will be set by selectedServices\r\n});\r\n\r\ndescribe('Phase 4: Data Flow Validation', () => {\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  describe('5.1 Complete Data Flow Testing', () => {\r\n    it('should correctly transform frontend camelCase to backend snake_case', () => {\r\n      const result = transformToDbFormat(mockOrderFormData);\r\n      \r\n      // Verify all field mappings\r\n      expect(result.customer_name).toBe(mockOrderFormData.customerName);\r\n      expect(result.customer_email).toBe(mockOrderFormData.customerEmail);\r\n      expect(result.customer_phone).toBe(mockOrderFormData.customerPhone);\r\n      expect(result.vehicle_vin).toBe(mockOrderFormData.vehicleVin);\r\n      expect(result.vehicle_year).toBe(2025);\r\n      expect(result.vehicle_make).toBe(mockOrderFormData.vehicleMake);\r\n      expect(result.vehicle_model).toBe(mockOrderFormData.vehicleModel);\r\n      expect(result.vehicle_info).toBe(mockOrderFormData.vehicleInfo);\r\n      expect(result.stock_number).toBe(mockOrderFormData.stockNumber);\r\n      expect(result.assigned_group_id).toBe(mockOrderFormData.assignedGroupId);\r\n      expect(result.assigned_contact_id).toBeNull(); // Empty string becomes null\r\n      expect(result.salesperson).toBe(mockOrderFormData.salesperson);\r\n      expect(result.notes).toBe(mockOrderFormData.notes);\r\n      expect(result.internal_notes).toBe(mockOrderFormData.internalNotes);\r\n      expect(result.priority).toBe(mockOrderFormData.priority);\r\n    });\r\n\r\n    it('should preserve customer information independently of assignment', () => {\r\n      const formDataWithAssignment = {\r\n        ...mockOrderFormData,\r\n        assignedGroupId: 'different-group',\r\n        assignedContactId: 'contact-456'\r\n      };\r\n      \r\n      const result = transformToDbFormat(formDataWithAssignment);\r\n      \r\n      // Customer info should remain unchanged regardless of assignment\r\n      expect(result.customer_name).toBe('John Customer');\r\n      expect(result.customer_email).toBe('john@customer.com');\r\n      expect(result.customer_phone).toBe('+1-555-0123');\r\n      \r\n      // Assignment should be separate\r\n      expect(result.assigned_group_id).toBe('different-group');\r\n      expect(result.assigned_contact_id).toBe('contact-456');\r\n    });\r\n\r\n    it('should handle all hidden fields correctly', () => {\r\n      const result = transformToDbFormat(mockOrderFormData);\r\n      \r\n      // Verify hidden fields are included\r\n      expect(result.salesperson).toBe('Jane Sales');\r\n      expect(result.internal_notes).toBe('Internal notes for staff');\r\n      expect(result.sla_deadline).toBe(mockOrderFormData.slaDeadline);\r\n      expect(result.scheduled_date).toBe(mockOrderFormData.scheduledDate);\r\n      expect(result.scheduled_time).toBe('10:00');\r\n    });\r\n\r\n    it('should handle null and undefined values correctly', () => {\r\n      const formDataWithNulls = {\r\n        ...mockOrderFormData,\r\n        customerEmail: '',\r\n        customerPhone: '',\r\n        assignedContactId: '',\r\n        salesperson: '',\r\n        internalNotes: ''\r\n      };\r\n      \r\n      const result = transformToDbFormat(formDataWithNulls);\r\n      \r\n      // Empty strings should become null for database compatibility\r\n      expect(result.customer_email).toBeNull();\r\n      expect(result.customer_phone).toBeNull();\r\n      expect(result.assigned_contact_id).toBeNull();\r\n      expect(result.salesperson).toBeNull();\r\n      expect(result.internal_notes).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('5.2 Field Validation Testing', () => {\r\n    it('should validate that orderType is dynamic', () => {\r\n      const salesOrder = transformToDbFormat({ ...mockOrderFormData, orderType: 'sales' });\r\n      const serviceOrder = transformToDbFormat({ ...mockOrderFormData, orderType: 'service' });\r\n      const carWashOrder = transformToDbFormat({ ...mockOrderFormData, orderType: 'car_wash' });\r\n      const reconOrder = transformToDbFormat({ ...mockOrderFormData, orderType: 'recon' });\r\n      \r\n      expect(salesOrder.order_type).toBe('sales');\r\n      expect(serviceOrder.order_type).toBe('service');\r\n      expect(carWashOrder.order_type).toBe('car_wash');\r\n      expect(reconOrder.order_type).toBe('recon');\r\n    });\r\n\r\n    it('should correctly separate due_date and sla_deadline', () => {\r\n      const result = transformToDbFormat(mockOrderFormData);\r\n      \r\n      expect(result.due_date).toBe(mockOrderFormData.dueDate);\r\n      expect(result.sla_deadline).toBe(mockOrderFormData.slaDeadline);\r\n      expect(result.scheduled_date).toBe(mockOrderFormData.scheduledDate);\r\n      \r\n      // They should be independent fields\r\n      expect(result.due_date).not.toBe(result.sla_deadline);\r\n    });\r\n\r\n    it('should handle vehicle year conversion correctly', () => {\r\n      const stringYear = transformToDbFormat({ ...mockOrderFormData, vehicleYear: '2025' });\r\n      const numberYear = transformToDbFormat({ ...mockOrderFormData, vehicleYear: 2025 });\r\n      const emptyYear = transformToDbFormat({ ...mockOrderFormData, vehicleYear: '' });\r\n      \r\n      expect(stringYear.vehicle_year).toBe(2025);\r\n      expect(numberYear.vehicle_year).toBe(2025);\r\n      expect(emptyYear.vehicle_year).toBeNull();\r\n    });\r\n  });\r\n\r\n  describe('5.3 UI/UX Validation', () => {\r\n    it('should demonstrate clear separation between customer and assignment', () => {\r\n      // This test validates the conceptual separation\r\n      const customerInfo = {\r\n        customerName: mockOrderFormData.customerName,\r\n        customerEmail: mockOrderFormData.customerEmail,\r\n        customerPhone: mockOrderFormData.customerPhone\r\n      };\r\n      \r\n      const assignmentInfo = {\r\n        assignedGroupId: mockOrderFormData.assignedGroupId,\r\n        assignedContactId: mockOrderFormData.assignedContactId,\r\n        salesperson: mockOrderFormData.salesperson\r\n      };\r\n      \r\n      // Customer info should be independent of assignment\r\n      expect(customerInfo.customerName).not.toBe(assignmentInfo.assignedGroupId);\r\n      expect(customerInfo.customerEmail).not.toBe(assignmentInfo.salesperson);\r\n      \r\n      // Both should be present in the final transformation\r\n      const result = transformToDbFormat(mockOrderFormData);\r\n      expect(result.customer_name).toBe(customerInfo.customerName);\r\n      expect(result.assigned_group_id).toBe(assignmentInfo.assignedGroupId);\r\n    });\r\n\r\n    it('should validate field editability is maintained', () => {\r\n      // Customer fields should always be editable\r\n      const editableCustomerFields = {\r\n        customerName: 'Modified Customer Name',\r\n        customerEmail: 'modified@email.com',\r\n        customerPhone: '+1-555-9999'\r\n      };\r\n      \r\n      const modifiedFormData = {\r\n        ...mockOrderFormData,\r\n        ...editableCustomerFields\r\n      };\r\n      \r\n      const result = transformToDbFormat(modifiedFormData);\r\n      \r\n      expect(result.customer_name).toBe('Modified Customer Name');\r\n      expect(result.customer_email).toBe('modified@email.com');\r\n      expect(result.customer_phone).toBe('+1-555-9999');\r\n    });\r\n  });\r\n\r\n  describe('5.4 Cross-Modal Consistency', () => {\r\n    it('should ensure all modals use the same field structure', () => {\r\n      // This test validates that all modals have consistent interfaces\r\n      const baseFields = [\r\n        'orderNumber', 'orderType', 'status',\r\n        'customerName', 'customerEmail', 'customerPhone',\r\n        'vehicleVin', 'vehicleYear', 'vehicleMake', 'vehicleModel',\r\n        'assignedGroupId', 'assignedContactId', 'salesperson',\r\n        'notes', 'internalNotes', 'priority',\r\n        'dueDate', 'slaDeadline', 'scheduledDate', 'scheduledTime'\r\n      ];\r\n      \r\n      // All these fields should be handled by transformToDbFormat\r\n      const result = transformToDbFormat(mockOrderFormData);\r\n      \r\n      // Verify snake_case equivalents exist\r\n      expect(result).toHaveProperty('customer_name');\r\n      expect(result).toHaveProperty('customer_email');\r\n      expect(result).toHaveProperty('vehicle_vin');\r\n      expect(result).toHaveProperty('assigned_group_id');\r\n      expect(result).toHaveProperty('internal_notes');\r\n      expect(result).toHaveProperty('sla_deadline');\r\n      expect(result).toHaveProperty('scheduled_date');\r\n    });\r\n  });\r\n});\r\n\r\ndescribe('Phase 4: Error Handling and Edge Cases', () => {\r\n  it('should handle incomplete form data gracefully', () => {\r\n    const incompleteData = {\r\n      customerName: 'John Doe',\r\n      orderType: 'sales'\r\n    };\r\n    \r\n    const result = transformToDbFormat(incompleteData);\r\n    \r\n    expect(result.customer_name).toBe('John Doe');\r\n    expect(result.order_type).toBe('sales');\r\n    expect(result.customer_email).toBeNull();\r\n    expect(result.vehicle_year).toBeNull();\r\n    expect(result.priority).toBe('normal'); // Default value\r\n  });\r\n\r\n  it('should validate data consistency after multiple transformations', () => {\r\n    const originalData = mockOrderFormData;\r\n    const transformed = transformToDbFormat(originalData);\r\n    \r\n    // Verify no data loss in critical fields\r\n    expect(transformed.customer_name).toBe(originalData.customerName);\r\n    expect(transformed.vehicle_vin).toBe(originalData.vehicleVin);\r\n    expect(transformed.order_type).toBe(originalData.orderType);\r\n    expect(transformed.assigned_group_id).toBe(originalData.assignedGroupId);\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\types\\database.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\types\\dealership.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1949,1952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1949,1952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":135,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":135,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3379,3382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3379,3382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type DealershipStatus = 'active' | 'inactive' | 'suspended';\r\nexport type SubscriptionPlan = 'basic' | 'premium' | 'enterprise';\r\nexport type UserRole = 'admin' | 'manager' | 'technician' | 'viewer';\r\nexport type UserDepartment = 'detailing' | 'wash' | 'service';\r\nexport type ContactDepartment = 'sales' | 'service' | 'parts' | 'management' | 'other';\r\nexport type LanguageCode = 'en' | 'es' | 'pt-BR';\r\n\r\nexport interface Dealership {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  address?: string;\r\n  city?: string;\r\n  state?: string;\r\n  zip_code?: string;\r\n  country?: string;\r\n  website?: string;\r\n  tax_number?: string;\r\n  logo_url?: string;\r\n  primary_color: string;\r\n  status: DealershipStatus;\r\n  subscription_plan: SubscriptionPlan;\r\n  max_users: number;\r\n  notes?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  deleted_at?: string;\r\n  // Computed fields\r\n  contacts_count?: number;\r\n  users_count?: number;\r\n}\r\n\r\nexport interface DealershipContact {\r\n  id: number;\r\n  dealership_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  phone?: string;\r\n  mobile_phone?: string;\r\n  position?: string;\r\n  department: ContactDepartment;\r\n  is_primary: boolean;\r\n  can_receive_notifications: boolean;\r\n  preferred_language: LanguageCode;\r\n  notes?: string;\r\n  avatar_url?: string;\r\n  status: DealershipStatus;\r\n  created_at: string;\r\n  updated_at: string;\r\n  deleted_at?: string;\r\n}\r\n\r\nexport interface DetailUser {\r\n  id: number;\r\n  dealership_id?: number;\r\n  email: string;\r\n  password_hash?: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  phone?: string;\r\n  role: UserRole;\r\n  department: UserDepartment;\r\n  employee_id?: string;\r\n  hire_date?: string;\r\n  avatar_url?: string;\r\n  language_preference: LanguageCode;\r\n  timezone: string;\r\n  is_active: boolean;\r\n  can_access_all_dealerships: boolean;\r\n  assigned_dealerships: number[];\r\n  permissions: Record<string, any>;\r\n  last_login_at?: string;\r\n  email_verified_at?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  deleted_at?: string;\r\n  // Relations\r\n  dealership?: Dealership;\r\n}\r\n\r\nexport interface DealershipFormData {\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  address: string;\r\n  city: string;\r\n  state: string;\r\n  zip_code: string;\r\n  country: string;\r\n  website: string;\r\n  tax_number: string;\r\n  logo_url: string;\r\n  primary_color: string;\r\n  status: DealershipStatus;\r\n  subscription_plan: SubscriptionPlan;\r\n  max_users: number;\r\n  notes: string;\r\n}\r\n\r\nexport interface ContactFormData {\r\n  dealership_id: number;\r\n  first_name: string;\r\n  last_name: string;\r\n  email: string;\r\n  phone?: string;\r\n  mobile_phone?: string;\r\n  position?: string;\r\n  department: ContactDepartment;\r\n  is_primary: boolean;\r\n  can_receive_notifications: boolean;\r\n  preferred_language: LanguageCode;\r\n  notes?: string;\r\n  avatar_url?: string;\r\n  status: DealershipStatus;\r\n}\r\n\r\nexport interface UserFormData {\r\n  dealership_id?: number;\r\n  email: string;\r\n  first_name: string;\r\n  last_name: string;\r\n  phone?: string;\r\n  role: UserRole;\r\n  department: UserDepartment;\r\n  employee_id?: string;\r\n  hire_date?: string;\r\n  avatar_url?: string;\r\n  language_preference: LanguageCode;\r\n  timezone: string;\r\n  is_active: boolean;\r\n  can_access_all_dealerships: boolean;\r\n  assigned_dealerships: number[];\r\n  permissions: Record<string, any>;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\types\\recon-hub.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\chatTranslations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\csvUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":21,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[449,452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[449,452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[536,539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[536,539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":104,"column":49,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":104,"endColumn":50,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3902,3903],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3902,3902],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":104,"column":51,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":104,"endColumn":52,"suggestions":[{"messageId":"removeEscape","fix":{"range":[3904,3905],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[3904,3904],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":240,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7939,7942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7939,7942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":250,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8139,8142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8139,8142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":270,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8767,8770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8767,8770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":292,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":292,"endColumn":42,"suggestions":[{"messageId":"addBrackets","fix":{"range":[9344,9507],"text":"{ const year = parseInt(value);\r\n            if (!isNaN(year) && year > 1900 && year < 2100) {\r\n              vehicle.year = year;\r\n            }\r\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":329,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":329,"endColumn":67,"suggestions":[{"messageId":"addBrackets","fix":{"range":[10460,10627],"text":"{ const mileage = parseInt(value.replace(/[^\\d]/g, ''));\r\n            if (!isNaN(mileage)) {\r\n              vehicle.mileage = mileage;\r\n            }\r\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":344,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":344,"endColumn":63,"suggestions":[{"messageId":"addBrackets","fix":{"range":[11023,11179],"text":"{ const age = parseInt(value.replace(/[^\\d]/g, ''));\r\n            if (!isNaN(age)) {\r\n              vehicle.age_days = age;\r\n            }\r\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":350,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":350,"endColumn":66,"suggestions":[{"messageId":"addBrackets","fix":{"range":[11218,11378],"text":"{ const price = parseFloat(value.replace(/[$,]/g, ''));\r\n            if (!isNaN(price)) {\r\n              vehicle.price = price;\r\n            }\r\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":356,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":356,"endColumn":65,"suggestions":[{"messageId":"addBrackets","fix":{"range":[11416,11572],"text":"{ const msrp = parseFloat(value.replace(/[$,]/g, ''));\r\n            if (!isNaN(msrp)) {\r\n              vehicle.msrp = msrp;\r\n            }\r\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":362,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":362,"endColumn":48,"suggestions":[{"messageId":"addBrackets","fix":{"range":[11617,11775],"text":"{ const photoCount = parseInt(value);\r\n            if (!isNaN(photoCount)) {\r\n              vehicle.photo_count = photoCount;\r\n            }\r\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":371,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":371,"endColumn":44,"suggestions":[{"messageId":"addBrackets","fix":{"range":[11923,12075],"text":"{ const leads7 = parseInt(value);\r\n            if (!isNaN(leads7)) {\r\n              vehicle.leads_last_7_days = leads7;\r\n            }\r\n            break; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":377,"column":13,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":377,"endColumn":48,"suggestions":[{"messageId":"addBrackets","fix":{"range":[12120,12278],"text":"{ const leadsTotal = parseInt(value);\r\n            if (!isNaN(leadsTotal)) {\r\n              vehicle.leads_total = leadsTotal;\r\n            }\r\n            break; }"},"desc":"Add {} brackets around the case block."}]}],"suppressedMessages":[],"errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * CSV Processing Utilities\r\n * Provides intelligent CSV parsing with flexible column mapping and detailed debugging\r\n */\r\n\r\nexport interface CSVParseResult {\r\n  headers: string[];\r\n  rows: string[][];\r\n  separator: string;\r\n  detectedColumns: Record<string, string>;\r\n  stats: {\r\n    totalRows: number;\r\n    validRows: number;\r\n    emptyRows: number;\r\n  };\r\n}\r\n\r\nexport interface ProcessingLog {\r\n  step: string;\r\n  message: string;\r\n  data?: any;\r\n  timestamp: Date;\r\n}\r\n\r\nexport interface VehicleProcessingResult {\r\n  vehicles: any[];\r\n  logs: ProcessingLog[];\r\n  stats: {\r\n    processed: number;\r\n    valid: number;\r\n    invalid: number;\r\n    missingRequired: number;\r\n    missingOptional: number;\r\n  };\r\n}\r\n\r\n// Common separators in order of likelihood\r\nconst SEPARATORS = ['\\t', ',', '|', ';', ':'];\r\n\r\n// Flexible column mapping - maps various column names to our standard fields\r\nconst COLUMN_MAPPINGS: Record<string, string[]> = {\r\n  year: ['year', 'año', 'model year', 'vehicle year', 'yr'],\r\n  make: ['make', 'marca', 'manufacturer', 'mfg', 'brand'],\r\n  model: ['model', 'modelo', 'vehicle model', 'model name'],\r\n  trim: ['trim', 'trim level', 'trim_level', 'variant'],\r\n  objective: ['objective', 'objetivo', 'sales status', 'inventory objective', 'status objective'],\r\n  drivetrain: ['drivetrain', 'drive train', 'drive_train', 'transmission', 'trans'],\r\n  segment: ['segment', 'category', 'type', 'class'],\r\n  stock_number: ['stock number', 'stock_number', 'stocknumber', 'stock no', 'stock #', 'stock'],\r\n  vin: ['vin', 'vehicle identification number', 'chassis'],\r\n  color: ['color', 'colour', 'paint', 'exterior color', 'ext color'],\r\n  mileage: ['mileage', 'miles', 'odometer', 'km', 'kilometers', 'milaje'],\r\n  is_certified: ['certified', 'is_certified', 'cert', 'certification'],\r\n  certified_program: ['certified program', 'cert program', 'certification program'],\r\n  dms_status: ['dms status', 'status', 'inventory status', 'stock status'],\r\n  age_days: ['age', 'age days', 'days in stock', 'inventory age', 'age_days', 'days'],\r\n  price: ['price', 'asking price', 'retail price', 'selling price', 'precio'],\r\n  msrp: ['msrp', 'list price', 'manufacturer price', 'suggested retail'],\r\n  photo_count: ['photo count', 'photos', 'image count', 'pictures'],\r\n  key_photo_url: ['key photo', 'main photo', 'primary photo', 'featured image'],\r\n  leads_last_7_days: ['leads (last 7 days)', 'leads 7 days', 'recent leads', 'weekly leads'],\r\n  leads_total: ['leads (all)', 'total leads', 'all leads', 'lifetime leads'],\r\n  risk_light: ['risk light', 'risk', 'alert', 'flag', 'warning'],\r\n  lot_location: ['lot location', 'location', 'lot', 'parking location']\r\n};\r\n\r\n/**\r\n * Detects the most likely separator used in CSV content\r\n */\r\nexport function detectSeparator(csvContent: string): string {\r\n  const lines = csvContent.split('\\n').filter(line => line.trim()).slice(0, 5);\r\n  if (lines.length === 0) return ',';\r\n\r\n  const separatorScores: Record<string, number> = {};\r\n\r\n  for (const separator of SEPARATORS) {\r\n    let score = 0;\r\n    let consistency = 0;\r\n    let firstLineCount = 0;\r\n\r\n    lines.forEach((line, index) => {\r\n      const parts = line.split(separator);\r\n      \r\n      if (index === 0) {\r\n        firstLineCount = parts.length;\r\n        // Bonus for having reasonable number of columns (5-50)\r\n        if (parts.length >= 5 && parts.length <= 50) {\r\n          score += 10;\r\n        }\r\n      } else {\r\n        // Consistency bonus - same number of columns as header\r\n        if (parts.length === firstLineCount) {\r\n          consistency += 1;\r\n        }\r\n      }\r\n      \r\n      // Bonus for parts that look like headers or data\r\n      parts.forEach(part => {\r\n        const trimmed = part.trim();\r\n        if (trimmed.length > 0) {\r\n          score += 1;\r\n          \r\n          // Bonus for common header patterns\r\n          if (index === 0 && /^[a-zA-Z][a-zA-Z\\s\\(\\)0-9]*$/.test(trimmed)) {\r\n            score += 2;\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    // Heavy bonus for consistency across all lines\r\n    if (consistency === lines.length - 1) {\r\n      score += 50;\r\n    }\r\n\r\n    separatorScores[separator] = score;\r\n  }\r\n\r\n  // Return separator with highest score\r\n  const bestSeparator = Object.entries(separatorScores)\r\n    .sort(([,a], [,b]) => b - a)[0]?.[0];\r\n\r\n  return bestSeparator || ',';\r\n}\r\n\r\n/**\r\n * Maps a column header to our standard field name using flexible matching\r\n */\r\nexport function mapColumnToField(columnName: string): string | null {\r\n  const normalized = columnName.toLowerCase().trim();\r\n  \r\n  for (const [field, variations] of Object.entries(COLUMN_MAPPINGS)) {\r\n    if (variations.some(variation => \r\n      normalized === variation || \r\n      normalized.includes(variation) ||\r\n      variation.includes(normalized)\r\n    )) {\r\n      return field;\r\n    }\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n/**\r\n * Parses CSV content with intelligent separator detection and column mapping\r\n */\r\nexport function parseCSV(csvContent: string): CSVParseResult {\r\n  const separator = detectSeparator(csvContent);\r\n  const lines = csvContent.split('\\n').filter(line => line.trim());\r\n  \r\n  if (lines.length === 0) {\r\n    throw new Error('CSV file is empty');\r\n  }\r\n\r\n  const headers = lines[0].split(separator).map(h => h.trim());\r\n  const rows = lines.slice(1).map(line => line.split(separator).map(cell => cell.trim()));\r\n  \r\n  // Map detected columns to our standard fields\r\n  const detectedColumns: Record<string, string> = {};\r\n  headers.forEach(header => {\r\n    const mappedField = mapColumnToField(header);\r\n    if (mappedField) {\r\n      detectedColumns[mappedField] = header;\r\n    }\r\n  });\r\n\r\n  const stats = {\r\n    totalRows: rows.length,\r\n    validRows: rows.filter(row => row.some(cell => cell.length > 0)).length,\r\n    emptyRows: rows.filter(row => row.every(cell => cell.length === 0)).length\r\n  };\r\n\r\n  return {\r\n    headers,\r\n    rows,\r\n    separator,\r\n    detectedColumns,\r\n    stats\r\n  };\r\n}\r\n\r\n/**\r\n * Extracts date and time information from filename\r\n */\r\nexport function extractFileTimestamp(filename: string): Date | null {\r\n  // Common patterns: YYYY-MM-DD, MM-DD-YYYY, DD-MM-YYYY, timestamps, etc.\r\n  const patterns = [\r\n    /(\\d{4})-(\\d{2})-(\\d{2})/,  // YYYY-MM-DD\r\n    /(\\d{2})-(\\d{2})-(\\d{4})/,  // MM-DD-YYYY or DD-MM-YYYY\r\n    /(\\d{4})(\\d{2})(\\d{2})/,    // YYYYMMDD\r\n    /(\\d{13})/,                 // Unix timestamp (milliseconds)\r\n    /(\\d{10})/                  // Unix timestamp (seconds)\r\n  ];\r\n\r\n  for (const pattern of patterns) {\r\n    const match = filename.match(pattern);\r\n    if (match) {\r\n      try {\r\n        if (match[0].length === 13) {\r\n          // Unix timestamp in milliseconds\r\n          return new Date(parseInt(match[0]));\r\n        } else if (match[0].length === 10) {\r\n          // Unix timestamp in seconds\r\n          return new Date(parseInt(match[0]) * 1000);\r\n        } else if (match.length === 4) {\r\n          // Date components\r\n          const [, part1, part2, part3] = match;\r\n          \r\n          // Try different date interpretations\r\n          const attempts = [\r\n            new Date(parseInt(part1), parseInt(part2) - 1, parseInt(part3)), // YYYY-MM-DD\r\n            new Date(parseInt(part3), parseInt(part1) - 1, parseInt(part2)), // MM-DD-YYYY\r\n            new Date(parseInt(part3), parseInt(part2) - 1, parseInt(part1))  // DD-MM-YYYY\r\n          ];\r\n          \r\n          for (const date of attempts) {\r\n            if (!isNaN(date.getTime()) && date.getFullYear() > 2000 && date.getFullYear() < 2100) {\r\n              return date;\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return null;\r\n}\r\n\r\n/**\r\n * Processes vehicle data from parsed CSV with detailed logging\r\n */\r\nexport function processVehicleData(\r\n  parseResult: CSVParseResult, \r\n  dealerId: number\r\n): VehicleProcessingResult {\r\n  const logs: ProcessingLog[] = [];\r\n  const vehicles: any[] = [];\r\n  \r\n  const stats = {\r\n    processed: 0,\r\n    valid: 0,\r\n    invalid: 0,\r\n    missingRequired: 0,\r\n    missingOptional: 0\r\n  };\r\n\r\n  const addLog = (step: string, message: string, data?: any) => {\r\n    logs.push({ step, message, data, timestamp: new Date() });\r\n  };\r\n\r\n  addLog('start', `Starting processing of ${parseResult.rows.length} rows`);\r\n  addLog('separator', `Detected separator: \"${parseResult.separator}\"`);\r\n  addLog('columns', 'Detected column mappings', parseResult.detectedColumns);\r\n\r\n  const { headers, rows, detectedColumns } = parseResult;\r\n\r\n  for (let i = 0; i < rows.length; i++) {\r\n    const row = rows[i];\r\n    stats.processed++;\r\n\r\n    // Skip empty rows\r\n    if (row.every(cell => !cell)) {\r\n      addLog('skip', `Row ${i + 1}: Empty row`);\r\n      continue;\r\n    }\r\n\r\n    const vehicle: any = {\r\n      dealer_id: dealerId,\r\n      is_active: true,\r\n      raw_data: {}\r\n    };\r\n\r\n    let hasRequiredFields = 0;\r\n    let hasMissingRequired = false;\r\n    const modelParts: string[] = [];\r\n    const trimParts: string[] = [];\r\n\r\n    // Process each column\r\n    headers.forEach((header, columnIndex) => {\r\n      const value = row[columnIndex]?.trim();\r\n      if (!value) return;\r\n\r\n      const mappedField = mapColumnToField(header);\r\n      \r\n      if (mappedField) {\r\n        // Process known fields\r\n        switch (mappedField) {\r\n          case 'year':\r\n            const year = parseInt(value);\r\n            if (!isNaN(year) && year > 1900 && year < 2100) {\r\n              vehicle.year = year;\r\n            }\r\n            break;\r\n          case 'make':\r\n            vehicle.make = value;\r\n            break;\r\n          case 'model':\r\n            vehicle.model = value;\r\n            modelParts.push(value);\r\n            break;\r\n          case 'trim':\r\n            vehicle.trim = value;\r\n            trimParts.push(value);\r\n            break;\r\n          case 'objective':\r\n            vehicle.objective = value;\r\n            break;\r\n          case 'drivetrain':\r\n            vehicle.drivetrain = value;\r\n            break;\r\n          case 'segment':\r\n            vehicle.segment = value;\r\n            break;\r\n          case 'stock_number':\r\n            vehicle.stock_number = value;\r\n            hasRequiredFields++;\r\n            break;\r\n          case 'vin':\r\n            vehicle.vin = value.toUpperCase();\r\n            hasRequiredFields++;\r\n            break;\r\n          case 'color':\r\n            vehicle.color = value;\r\n            break;\r\n          case 'mileage':\r\n            const mileage = parseInt(value.replace(/[^\\d]/g, ''));\r\n            if (!isNaN(mileage)) {\r\n              vehicle.mileage = mileage;\r\n            }\r\n            break;\r\n          case 'is_certified':\r\n            vehicle.is_certified = ['yes', 'y', '1', 'true', 'certified'].includes(value.toLowerCase());\r\n            break;\r\n          case 'certified_program':\r\n            vehicle.certified_program = value;\r\n            break;\r\n          case 'dms_status':\r\n            vehicle.dms_status = value;\r\n            break;\r\n          case 'age_days':\r\n            const age = parseInt(value.replace(/[^\\d]/g, ''));\r\n            if (!isNaN(age)) {\r\n              vehicle.age_days = age;\r\n            }\r\n            break;\r\n          case 'price':\r\n            const price = parseFloat(value.replace(/[$,]/g, ''));\r\n            if (!isNaN(price)) {\r\n              vehicle.price = price;\r\n            }\r\n            break;\r\n          case 'msrp':\r\n            const msrp = parseFloat(value.replace(/[$,]/g, ''));\r\n            if (!isNaN(msrp)) {\r\n              vehicle.msrp = msrp;\r\n            }\r\n            break;\r\n          case 'photo_count':\r\n            const photoCount = parseInt(value);\r\n            if (!isNaN(photoCount)) {\r\n              vehicle.photo_count = photoCount;\r\n            }\r\n            break;\r\n          case 'key_photo_url':\r\n            vehicle.key_photo_url = value;\r\n            break;\r\n          case 'leads_last_7_days':\r\n            const leads7 = parseInt(value);\r\n            if (!isNaN(leads7)) {\r\n              vehicle.leads_last_7_days = leads7;\r\n            }\r\n            break;\r\n          case 'leads_total':\r\n            const leadsTotal = parseInt(value);\r\n            if (!isNaN(leadsTotal)) {\r\n              vehicle.leads_total = leadsTotal;\r\n            }\r\n            break;\r\n          case 'risk_light':\r\n            vehicle.risk_light = value;\r\n            break;\r\n          case 'lot_location':\r\n            vehicle.lot_location = value;\r\n            break;\r\n        }\r\n      } else {\r\n        // Store unmapped fields in raw_data\r\n        vehicle.raw_data[header] = value;\r\n      }\r\n    });\r\n\r\n    // Combine model and trim for full model name\r\n    if (modelParts.length > 0 || trimParts.length > 0) {\r\n      const combinedModel = [...modelParts, ...trimParts].filter(Boolean).join(' ');\r\n      if (combinedModel) {\r\n        vehicle.model = combinedModel;\r\n      }\r\n    }\r\n\r\n    // Validate required fields\r\n    if (hasRequiredFields >= 2) { // stock_number AND vin\r\n      vehicles.push(vehicle);\r\n      stats.valid++;\r\n      addLog('success', `Row ${i + 1}: Valid vehicle processed`, {\r\n        stock_number: vehicle.stock_number,\r\n        vin: vehicle.vin\r\n      });\r\n    } else {\r\n      stats.invalid++;\r\n      hasMissingRequired = true;\r\n      \r\n      if (!vehicle.stock_number && !vehicle.vin) {\r\n        stats.missingRequired++;\r\n        addLog('error', `Row ${i + 1}: Missing both stock_number and VIN`);\r\n      } else if (!vehicle.stock_number) {\r\n        stats.missingRequired++;\r\n        addLog('error', `Row ${i + 1}: Missing stock_number`, { vin: vehicle.vin });\r\n      } else if (!vehicle.vin) {\r\n        stats.missingRequired++;\r\n        addLog('error', `Row ${i + 1}: Missing VIN`, { stock_number: vehicle.stock_number });\r\n      }\r\n    }\r\n  }\r\n\r\n  addLog('complete', `Processing complete: ${stats.valid} valid, ${stats.invalid} invalid vehicles`);\r\n\r\n  return { vehicles, logs, stats };\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\database.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":46,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1382,1385],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1382,1385],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2453,2456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2453,2456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":87,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2459,2462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2459,2462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2494,2497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2494,2497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2500,2503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2500,2503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":92,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2610,2613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2610,2613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":112,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3089,3092],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3089,3092],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":113,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3123,3126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3123,3126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":114,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3157,3160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3157,3160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3258,3261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3258,3261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":123,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3394,3397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3394,3397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":145,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3933,3936],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3933,3936],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":146,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3967,3970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3967,3970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":155,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4193,4196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4193,4196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":178,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4757,4760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4757,4760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4887,4890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4887,4890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":201,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5299,5302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5299,5302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":203,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5346,5349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5346,5349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":207,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5494,5497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5494,5497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient, SupabaseClient } from '@supabase/supabase-js';\r\nimport { Database, Tables, TablesInsert, TablesUpdate } from '@/types/database';\r\n\r\nconst supabaseUrl = \"https://swfnnrpzpkdypbrzmgnr.supabase.co\";\r\nconst supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN3Zm5ucnB6cGtkeXBicnptZ25yIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTcxODY5NjAsImV4cCI6MjA3Mjc2Mjk2MH0.HA7ujjknDa-97z-vC-vOZJm5rQ7PYXqn--rdiZoPXcY\";\r\n\r\nexport interface DatabaseError {\r\n  message: string;\r\n  code?: string;\r\n}\r\n\r\nexport interface DatabaseResult<T> {\r\n  data: T | null;\r\n  error: DatabaseError | null;\r\n}\r\n\r\nexport interface DatabaseResultWithCount<T> {\r\n  data: T;\r\n  count: number | null;\r\n  error: DatabaseError | null;\r\n}\r\n\r\nexport interface QueryOptions {\r\n  select?: string;\r\n  limit?: number;\r\n  offset?: number;\r\n  orderBy?: { column: string; ascending?: boolean };\r\n}\r\n\r\n/**\r\n * Enhanced Database Utility Class with improved error handling and type safety\r\n */\r\nexport class DatabaseUtils {\r\n  private supabase: SupabaseClient<Database>;\r\n\r\n  constructor() {\r\n    this.supabase = createClient<Database>(supabaseUrl, supabaseKey);\r\n  }\r\n\r\n  /**\r\n   * Generic select operation with enhanced error handling\r\n   */\r\n  async select<T extends keyof Database['public']['Tables']>(\r\n    table: T,\r\n    options?: QueryOptions\r\n  ): Promise<DatabaseResultWithCount<any[]>> {\r\n    try {\r\n      let query = this.supabase\r\n        .from(table)\r\n        .select(options?.select || '*', { count: 'exact' });\r\n\r\n      if (options?.limit) {\r\n        query = query.limit(options.limit);\r\n      }\r\n\r\n      if (options?.orderBy) {\r\n        query = query.order(options.orderBy.column, { \r\n          ascending: options.orderBy.ascending !== false \r\n        });\r\n      }\r\n\r\n      if (options?.offset) {\r\n        query = query.range(options.offset, options.offset + (options?.limit || 10) - 1)\r\n      }\r\n\r\n      const result = await query\r\n\r\n      return {\r\n        data: result.data || [],\r\n        count: result.count,\r\n        error: result.error ? { message: result.error.message, code: result.error.code } : null\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        data: [],\r\n        count: null,\r\n        error: { message: error instanceof Error ? error.message : 'Unknown error' }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generic insert operation\r\n   */\r\n  async insert<T extends keyof Database['public']['Tables']>(\r\n    table: T,\r\n    data: any | any[]\r\n  ): Promise<DatabaseResult<any | any[]>> {\r\n    try {\r\n      const result = await this.supabase\r\n        .from(table)\r\n        .insert(data as any)\r\n        .select()\r\n\r\n      return {\r\n        data: result.data,\r\n        error: result.error ? { message: result.error.message, code: result.error.code } : null\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        data: null,\r\n        error: { message: error instanceof Error ? error.message : 'Unknown error' }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generic update operation\r\n   */\r\n  async update<T extends keyof Database['public']['Tables']>(\r\n    table: T,\r\n    data: any,\r\n    filters: Record<string, any>\r\n  ): Promise<DatabaseResult<any[]>> {\r\n    try {\r\n      let query = this.supabase\r\n        .from(table)\r\n        .update(data as any)\r\n        .select()\r\n\r\n      // Apply filters\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        query = (query as any).eq(key, value)\r\n      })\r\n\r\n      const result = await query\r\n\r\n      return {\r\n        data: result.data,\r\n        error: result.error ? { message: result.error.message, code: result.error.code } : null\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        data: null,\r\n        error: { message: error instanceof Error ? error.message : 'Unknown error' }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generic delete operation\r\n   */\r\n  async delete<T extends keyof Database['public']['Tables']>(\r\n    table: T,\r\n    filters: Record<string, any>\r\n  ): Promise<DatabaseResult<any[]>> {\r\n    try {\r\n      let query = this.supabase\r\n        .from(table)\r\n        .delete()\r\n        .select()\r\n\r\n      // Apply filters\r\n      Object.entries(filters).forEach(([key, value]) => {\r\n        query = (query as any).eq(key, value)\r\n      })\r\n\r\n      const result = await query\r\n\r\n      return {\r\n        data: result.data,\r\n        error: result.error ? { message: result.error.message, code: result.error.code } : null\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        data: null,\r\n        error: { message: error instanceof Error ? error.message : 'Unknown error' }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get single record by ID\r\n   */\r\n  async getById<T extends keyof Database['public']['Tables']>(\r\n    table: T,\r\n    id: string | number\r\n  ): Promise<DatabaseResult<any>> {\r\n    try {\r\n      const result = await this.supabase\r\n        .from(table)\r\n        .select('*')\r\n        .eq('id', id as any)\r\n        .single()\r\n\r\n      return {\r\n        data: result.data,\r\n        error: result.error ? { message: result.error.message, code: result.error.code } : null\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        data: null,\r\n        error: { message: error instanceof Error ? error.message : 'Unknown error' }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute custom query with RPC\r\n   */\r\n  async rpc<T = any>(\r\n    functionName: string,\r\n    params?: any\r\n  ): Promise<DatabaseResult<T>> {\r\n    try {\r\n      // Use client method to bypass strict typing\r\n      const result = await (this.supabase as any).rpc(functionName, params);\r\n\r\n      return {\r\n        data: result.data,\r\n        error: result.error ? { message: result.error.message, code: result.error.code } : null\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        data: null,\r\n        error: { message: error instanceof Error ? error.message : 'Unknown error' }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current user\r\n   */\r\n  async getCurrentUser() {\r\n    try {\r\n      const { data: { user }, error } = await this.supabase.auth.getUser();\r\n      return {\r\n        data: user,\r\n        error: error ? { message: error.message } : null\r\n      }\r\n    } catch (error) {\r\n      return {\r\n        data: null,\r\n        error: { message: error instanceof Error ? error.message : 'Unknown error' }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Authentication\r\n   */\r\n  get auth() {\r\n    return this.supabase.auth;\r\n  }\r\n\r\n  /**\r\n   * Storage\r\n   */\r\n  get storage() {\r\n    return this.supabase.storage;\r\n  }\r\n\r\n  /**\r\n   * Get raw Supabase client for advanced operations\r\n   */\r\n  get client() {\r\n    return this.supabase;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nconst db = new DatabaseUtils();\r\nexport default db;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\dueDateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\duplicateTestData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":361,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12311,12314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12311,12314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":364,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":364,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12441,12444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12441,12444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":367,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12548,12551],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12548,12551],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Test Data Generator for Duplicate Tooltip Testing\r\n * \r\n * This utility creates realistic order data with known duplicates to test\r\n * the duplicate badge tooltip functionality in the sales module.\r\n */\r\n\r\nimport { Order } from '@/utils/duplicateUtils';\r\n\r\ninterface TestDataConfig {\r\n  totalOrders?: number;\r\n  duplicateStockRatio?: number; // Percentage of orders with duplicate stock numbers\r\n  duplicateVinRatio?: number;   // Percentage of orders with duplicate VINs\r\n  dealerIds?: number[];\r\n  includeEdgeCases?: boolean;\r\n}\r\n\r\nclass DuplicateTestDataGenerator {\r\n  private static instance: DuplicateTestDataGenerator;\r\n  \r\n  static getInstance(): DuplicateTestDataGenerator {\r\n    if (!DuplicateTestDataGenerator.instance) {\r\n      DuplicateTestDataGenerator.instance = new DuplicateTestDataGenerator();\r\n    }\r\n    return DuplicateTestDataGenerator.instance;\r\n  }\r\n\r\n  private readonly stockPrefixes = ['ST', 'INV', 'VEH', 'AUTO', 'CAR'];\r\n  private readonly vinPrefixes = ['1HGBH41JX', '2HGFA1F59', '3GNDA13D', '4T1BF1FK', '5NPE24AF'];\r\n  private readonly dealerNames = ['Downtown Motors', 'City Auto', 'Premier Cars', 'Elite Vehicles', 'Metro Motors'];\r\n  private readonly vehicleMakes = ['Honda', 'Toyota', 'Ford', 'Chevrolet', 'Nissan', 'BMW', 'Mercedes'];\r\n  private readonly vehicleModels = ['Civic', 'Camry', 'F-150', 'Malibu', 'Altima', '3 Series', 'C-Class'];\r\n  private readonly statuses = ['pending', 'in_progress', 'completed', 'cancelled'];\r\n  private readonly customerNames = ['John Smith', 'Jane Doe', 'Mike Johnson', 'Sarah Wilson', 'David Brown'];\r\n\r\n  /**\r\n   * Generate a realistic VIN with controlled duplicates\r\n   */\r\n  private generateVin(duplicateGroup?: string): string {\r\n    if (duplicateGroup) {\r\n      // Return a VIN from a known duplicate group\r\n      return duplicateGroup.padEnd(17, 'X');\r\n    }\r\n    \r\n    const prefix = this.vinPrefixes[Math.floor(Math.random() * this.vinPrefixes.length)];\r\n    const suffix = Math.random().toString(36).substring(2, 9).toUpperCase();\r\n    return (prefix + suffix).padEnd(17, 'X').substring(0, 17);\r\n  }\r\n\r\n  /**\r\n   * Generate a stock number with controlled duplicates\r\n   */\r\n  private generateStockNumber(duplicateGroup?: string): string {\r\n    if (duplicateGroup) {\r\n      return duplicateGroup;\r\n    }\r\n    \r\n    const prefix = this.stockPrefixes[Math.floor(Math.random() * this.stockPrefixes.length)];\r\n    const number = Math.floor(Math.random() * 9999).toString().padStart(4, '0');\r\n    return `${prefix}${number}`;\r\n  }\r\n\r\n  /**\r\n   * Generate a realistic order with controlled duplicate potential\r\n   */\r\n  private generateOrder(\r\n    index: number, \r\n    dealerId: number, \r\n    duplicateStock?: string, \r\n    duplicateVin?: string\r\n  ): Order {\r\n    const orderType = ['sales', 'service', 'recon', 'carwash'][Math.floor(Math.random() * 4)];\r\n    const make = this.vehicleMakes[Math.floor(Math.random() * this.vehicleMakes.length)];\r\n    const model = this.vehicleModels[Math.floor(Math.random() * this.vehicleModels.length)];\r\n    const year = 2020 + Math.floor(Math.random() * 5);\r\n    \r\n    // Create a realistic creation date (last 90 days)\r\n    const createdAt = new Date();\r\n    createdAt.setDate(createdAt.getDate() - Math.floor(Math.random() * 90));\r\n    \r\n    return {\r\n      id: `test-order-${index}-${Date.now()}`,\r\n      createdAt: createdAt.toISOString(),\r\n      orderNumber: `${orderType.toUpperCase()}-${index.toString().padStart(6, '0')}`,\r\n      customOrderNumber: `${orderType.charAt(0).toUpperCase()}${orderType.slice(1)}-${index}`,\r\n      stockNumber: this.generateStockNumber(duplicateStock),\r\n      vehicleVin: this.generateVin(duplicateVin),\r\n      vehicleYear: year,\r\n      vehicleMake: make,\r\n      vehicleModel: model,\r\n      // vehicleInfo: `${year} ${make} ${model}`, // This property doesn't exist on Order type\r\n      customerName: this.customerNames[Math.floor(Math.random() * this.customerNames.length)],\r\n      status: this.statuses[Math.floor(Math.random() * this.statuses.length)],\r\n      dealer_id: dealerId,\r\n      dealershipName: this.dealerNames[dealerId - 1] || `Dealer ${dealerId}`,\r\n      order_type: orderType,\r\n      dueDate: new Date(Date.now() + Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString() // Due in next 30 days\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate test data with known duplicates\r\n   */\r\n  generateTestData(config: TestDataConfig = {}): {\r\n    orders: Order[];\r\n    duplicateGroups: {\r\n      stock: Array<{ value: string; orderIds: string[] }>;\r\n      vin: Array<{ value: string; orderIds: string[] }>;\r\n    };\r\n    metadata: {\r\n      totalOrders: number;\r\n      expectedDuplicates: number;\r\n      dealerIds: number[];\r\n    };\r\n  } {\r\n    const {\r\n      totalOrders = 20,\r\n      duplicateStockRatio = 0.3, // 30% of orders will have duplicate stock numbers\r\n      duplicateVinRatio = 0.2,   // 20% of orders will have duplicate VINs\r\n      dealerIds = [1, 2, 3],\r\n      includeEdgeCases = true\r\n    } = config;\r\n\r\n    console.log('🧪 Generating test data with duplicates:', {\r\n      totalOrders,\r\n      duplicateStockRatio,\r\n      duplicateVinRatio,\r\n      dealerIds,\r\n      includeEdgeCases\r\n    });\r\n\r\n    const orders: Order[] = [];\r\n    const stockDuplicateGroups: Array<{ value: string; orderIds: string[] }> = [];\r\n    const vinDuplicateGroups: Array<{ value: string; orderIds: string[] }> = [];\r\n\r\n    // Calculate how many orders should have duplicates\r\n    const stockDuplicateCount = Math.floor(totalOrders * duplicateStockRatio);\r\n    const vinDuplicateCount = Math.floor(totalOrders * duplicateVinRatio);\r\n\r\n    // Create duplicate stock number groups\r\n    const stockGroups = new Map<string, string[]>();\r\n    for (let i = 0; i < stockDuplicateCount; i += 2) {\r\n      const stockNumber = `DUPLICATE-ST${Math.floor(i / 2).toString().padStart(3, '0')}`;\r\n      stockGroups.set(stockNumber, []);\r\n    }\r\n\r\n    // Create duplicate VIN groups\r\n    const vinGroups = new Map<string, string[]>();\r\n    for (let i = 0; i < vinDuplicateCount; i += 2) {\r\n      const vin = `DUPLICATE-VIN${Math.floor(i / 2).toString().padStart(2, '0')}`;\r\n      vinGroups.set(vin, []);\r\n    }\r\n\r\n    // Generate orders with controlled duplicates\r\n    for (let i = 0; i < totalOrders; i++) {\r\n      const dealerId = dealerIds[i % dealerIds.length];\r\n      \r\n      // Determine if this order should have duplicates\r\n      const shouldHaveStockDuplicate = i < stockDuplicateCount;\r\n      const shouldHaveVinDuplicate = i < vinDuplicateCount;\r\n      \r\n      // Get duplicate values if applicable\r\n      const stockDuplicate = shouldHaveStockDuplicate \r\n        ? Array.from(stockGroups.keys())[Math.floor(i / 2) % stockGroups.size]\r\n        : undefined;\r\n        \r\n      const vinDuplicate = shouldHaveVinDuplicate \r\n        ? Array.from(vinGroups.keys())[Math.floor(i / 2) % vinGroups.size]\r\n        : undefined;\r\n\r\n      const order = this.generateOrder(i, dealerId, stockDuplicate, vinDuplicate);\r\n      orders.push(order);\r\n\r\n      // Track duplicate groups\r\n      if (stockDuplicate && stockGroups.has(stockDuplicate)) {\r\n        stockGroups.get(stockDuplicate)!.push(order.id);\r\n      }\r\n      \r\n      if (vinDuplicate && vinGroups.has(vinDuplicate)) {\r\n        vinGroups.get(vinDuplicate)!.push(order.id);\r\n      }\r\n    }\r\n\r\n    // Add edge cases if requested\r\n    if (includeEdgeCases) {\r\n      this.addEdgeCases(orders, dealerIds);\r\n    }\r\n\r\n    // Build duplicate group arrays\r\n    stockGroups.forEach((orderIds, value) => {\r\n      if (orderIds.length > 1) {\r\n        stockDuplicateGroups.push({ value, orderIds });\r\n      }\r\n    });\r\n\r\n    vinGroups.forEach((orderIds, value) => {\r\n      if (orderIds.length > 1) {\r\n        vinDuplicateGroups.push({ value, orderIds });\r\n      }\r\n    });\r\n\r\n    const result = {\r\n      orders,\r\n      duplicateGroups: {\r\n        stock: stockDuplicateGroups,\r\n        vin: vinDuplicateGroups\r\n      },\r\n      metadata: {\r\n        totalOrders: orders.length,\r\n        expectedDuplicates: stockDuplicateGroups.length + vinDuplicateGroups.length,\r\n        dealerIds\r\n      }\r\n    };\r\n\r\n    console.log('✅ Test data generated successfully:', {\r\n      totalOrders: result.metadata.totalOrders,\r\n      stockDuplicateGroups: result.duplicateGroups.stock.length,\r\n      vinDuplicateGroups: result.duplicateGroups.vin.length,\r\n      expectedDuplicates: result.metadata.expectedDuplicates\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Add edge cases for testing robustness\r\n   */\r\n  private addEdgeCases(orders: Order[], dealerIds: number[]): void {\r\n    const edgeCases = [\r\n      // Empty/null values\r\n      this.generateOrder(9999, dealerIds[0], '', ''),\r\n      \r\n      // Very long values\r\n      this.generateOrder(9998, dealerIds[0], 'VERY-LONG-STOCK-NUMBER-12345', 'VERY-LONG-VIN-123456'),\r\n      \r\n      // Special characters\r\n      this.generateOrder(9997, dealerIds[0], 'ST-123/ABC', 'VIN@123#ABC'),\r\n      \r\n      // Case sensitivity test\r\n      this.generateOrder(9996, dealerIds[0], 'lowercase-test', 'lowercase-vin-test'),\r\n      this.generateOrder(9995, dealerIds[0], 'LOWERCASE-TEST', 'LOWERCASE-VIN-TEST'),\r\n    ];\r\n\r\n    orders.push(...edgeCases);\r\n  }\r\n\r\n  /**\r\n   * Create a quick test dataset for immediate debugging\r\n   */\r\n  createQuickTestData(): Order[] {\r\n    console.log('🚀 Creating quick test data with guaranteed duplicates...');\r\n    \r\n    return [\r\n      {\r\n        id: 'quick-test-1',\r\n        createdAt: new Date().toISOString(),\r\n        stockNumber: 'DUPLICATE-ST001',\r\n        vehicleVin: 'DUPLICATE-VIN123456',\r\n        customerName: 'Test Customer 1',\r\n        status: 'pending',\r\n        dealer_id: 1,\r\n        dealershipName: 'Test Dealer',\r\n        vehicleYear: 2024,\r\n        vehicleMake: 'Honda',\r\n        vehicleModel: 'Civic',\r\n        order_type: 'sales'\r\n      },\r\n      {\r\n        id: 'quick-test-2',\r\n        createdAt: new Date().toISOString(),\r\n        stockNumber: 'DUPLICATE-ST001', // DUPLICATE STOCK\r\n        vehicleVin: 'UNIQUE-VIN789012',\r\n        customerName: 'Test Customer 2',\r\n        status: 'in_progress',\r\n        dealer_id: 1,\r\n        dealershipName: 'Test Dealer',\r\n        vehicleYear: 2024,\r\n        vehicleMake: 'Toyota',\r\n        vehicleModel: 'Camry',\r\n        order_type: 'sales'\r\n      },\r\n      {\r\n        id: 'quick-test-3',\r\n        createdAt: new Date().toISOString(),\r\n        stockNumber: 'UNIQUE-ST002',\r\n        vehicleVin: 'DUPLICATE-VIN123456', // DUPLICATE VIN\r\n        customerName: 'Test Customer 3',\r\n        status: 'completed',\r\n        dealer_id: 1,\r\n        dealershipName: 'Test Dealer',\r\n        vehicleYear: 2024,\r\n        vehicleMake: 'Ford',\r\n        vehicleModel: 'F-150',\r\n        order_type: 'sales'\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Validate that test data contains expected duplicates\r\n   */\r\n  validateTestData(orders: Order[]): {\r\n    isValid: boolean;\r\n    stockDuplicates: number;\r\n    vinDuplicates: number;\r\n    issues: string[];\r\n  } {\r\n    const issues: string[] = [];\r\n    let stockDuplicates = 0;\r\n    let vinDuplicates = 0;\r\n\r\n    // Check for stock duplicates\r\n    const stockMap = new Map<string, number>();\r\n    const vinMap = new Map<string, number>();\r\n\r\n    orders.forEach(order => {\r\n      if (order.stockNumber) {\r\n        stockMap.set(order.stockNumber, (stockMap.get(order.stockNumber) || 0) + 1);\r\n      }\r\n      if (order.vehicleVin) {\r\n        vinMap.set(order.vehicleVin, (vinMap.get(order.vehicleVin) || 0) + 1);\r\n      }\r\n    });\r\n\r\n    // Count actual duplicates\r\n    stockMap.forEach((count, stock) => {\r\n      if (count > 1) stockDuplicates++;\r\n    });\r\n\r\n    vinMap.forEach((count, vin) => {\r\n      if (count > 1) vinDuplicates++;\r\n    });\r\n\r\n    // Validate minimum expectations\r\n    if (stockDuplicates === 0) {\r\n      issues.push('No stock number duplicates found');\r\n    }\r\n\r\n    if (vinDuplicates === 0) {\r\n      issues.push('No VIN duplicates found');\r\n    }\r\n\r\n    if (orders.length === 0) {\r\n      issues.push('No orders generated');\r\n    }\r\n\r\n    return {\r\n      isValid: issues.length === 0,\r\n      stockDuplicates,\r\n      vinDuplicates,\r\n      issues\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const duplicateTestDataGenerator = DuplicateTestDataGenerator.getInstance();\r\n\r\n// Export utility functions for browser console\r\nif (typeof window !== 'undefined') {\r\n  (window as any).generateTestData = (config?: TestDataConfig) => \r\n    duplicateTestDataGenerator.generateTestData(config);\r\n  \r\n  (window as any).createQuickTestData = () => \r\n    duplicateTestDataGenerator.createQuickTestData();\r\n  \r\n  (window as any).validateTestData = (orders: Order[]) => \r\n    duplicateTestDataGenerator.validateTestData(orders);\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\duplicateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\lazyImports.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\migrateOrders.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":93,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3144,3147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3144,3147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Browser-compatible migration utility\r\n * Can be run from browser console to migrate order numbers\r\n */\r\n\r\nimport { orderNumberService } from '@/services/orderNumberService';\r\nimport { supabase } from '@/integrations/supabase/client';\r\n\r\n/**\r\n * Simple migration function that can be called from browser console\r\n */\r\nexport async function migrateOrderNumbers() {\r\n  console.log('🚀 Starting order number migration from browser...');\r\n  console.log('📋 New format: SA-2025-00001, SE-2025-00001, CW-2025-00001, RC-2025-00001');\r\n\r\n  try {\r\n    // For now, let's focus on the main 'orders' table which seems to handle all types\r\n    const { data: orders, error } = await supabase\r\n      .from('orders')\r\n      .select('id, order_number, order_type, created_at')\r\n      .order('created_at', { ascending: true });\r\n\r\n    if (error) throw error;\r\n\r\n    if (!orders || orders.length === 0) {\r\n      console.log('✅ No orders found to migrate');\r\n      return;\r\n    }\r\n\r\n    console.log(`📊 Found ${orders.length} orders to migrate`);\r\n\r\n    // Group orders by type and migrate\r\n    const ordersByType = {\r\n      sales: orders.filter(o => o.order_type === 'sales'),\r\n      service: orders.filter(o => o.order_type === 'service'),\r\n      carwash: orders.filter(o => o.order_type === 'carwash'),\r\n      recon: orders.filter(o => o.order_type === 'recon')\r\n    };\r\n\r\n    let totalMigrated = 0;\r\n    const year = new Date().getFullYear();\r\n\r\n    // Migrate each type\r\n    for (const [type, typeOrders] of Object.entries(ordersByType)) {\r\n      if (typeOrders.length === 0) continue;\r\n\r\n      console.log(`\\n🔧 Migrating ${type} orders (${typeOrders.length} orders)...`);\r\n      \r\n      const prefix = type === 'sales' ? 'SA' : \r\n                    type === 'service' ? 'SE' :\r\n                    type === 'carwash' ? 'CW' : 'RC';\r\n\r\n      let sequenceCounter = 1;\r\n\r\n      for (const order of typeOrders) {\r\n        // Skip if already has correct format\r\n        if (order.order_number && order.order_number.startsWith(`${prefix}-${year}-`)) {\r\n          console.log(`⏭️  Skipping ${order.order_number} (already migrated)`);\r\n          continue;\r\n        }\r\n\r\n        const newOrderNumber = `${prefix}-${year}-${sequenceCounter.toString().padStart(5, '0')}`;\r\n\r\n        const { error: updateError } = await supabase\r\n          .from('orders')\r\n          .update({ \r\n            order_number: newOrderNumber,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('id', order.id);\r\n\r\n        if (updateError) {\r\n          console.error(`❌ Error updating ${type} order ${order.id}:`, updateError);\r\n        } else {\r\n          console.log(`✅ ${type.toUpperCase()}: ${order.order_number || order.id} → ${newOrderNumber}`);\r\n          totalMigrated++;\r\n        }\r\n\r\n        sequenceCounter++;\r\n      }\r\n    }\r\n\r\n    console.log(`\\n🎉 Migration completed! ${totalMigrated} orders updated`);\r\n    console.log('🔄 Please refresh the page to see the new order numbers');\r\n\r\n  } catch (error) {\r\n    console.error('❌ Migration failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Make available globally for console access\r\n(window as any).migrateOrderNumbers = migrateOrderNumbers;\r\n\r\nconsole.log('🔧 Order migration utility loaded');\r\nconsole.log('📋 Run: migrateOrderNumbers() in browser console to migrate orders');","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\modalDataCache.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":2,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[91,94],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[91,94],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4753,4756],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4753,4756],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":179,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4759,4762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4759,4762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5099,5102],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5099,5102],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":189,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5105,5108],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5105,5108],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":204,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":204,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5588,5591],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5588,5591],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Enhanced caching system for modal data with advanced features\r\ninterface CacheEntry<T = any> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number;\r\n  accessCount: number;\r\n  lastAccessed: number;\r\n}\r\n\r\ninterface CacheConfig {\r\n  defaultTTL?: number;\r\n  maxSize?: number;\r\n  enableCompression?: boolean;\r\n  enableMetrics?: boolean;\r\n}\r\n\r\nexport class ModalDataCache {\r\n  private cache = new Map<string, CacheEntry>();\r\n  private readonly config: Required<CacheConfig>;\r\n  private metrics = {\r\n    hits: 0,\r\n    misses: 0,\r\n    evictions: 0,\r\n    totalSets: 0,\r\n    averageAccessTime: 0\r\n  };\r\n\r\n  constructor(config: CacheConfig = {}) {\r\n    this.config = {\r\n      defaultTTL: config.defaultTTL || 5 * 60 * 1000, // 5 minutes\r\n      maxSize: config.maxSize || 50,\r\n      enableCompression: config.enableCompression || false,\r\n      enableMetrics: config.enableMetrics || true\r\n    };\r\n  }\r\n\r\n  set<T>(key: string, data: T, ttl = this.config.defaultTTL): void {\r\n    // Implement smart eviction strategy (LRU with access frequency consideration)\r\n    if (this.cache.size >= this.config.maxSize) {\r\n      this.evictLeastUsed();\r\n    }\r\n\r\n    const processedData = this.config.enableCompression \r\n      ? this.compressData(data)\r\n      : data;\r\n\r\n    this.cache.set(key, {\r\n      data: JSON.parse(JSON.stringify(processedData)), // Deep clone\r\n      timestamp: Date.now(),\r\n      ttl,\r\n      accessCount: 0,\r\n      lastAccessed: Date.now()\r\n    });\r\n\r\n    if (this.config.enableMetrics) {\r\n      this.metrics.totalSets++;\r\n    }\r\n  }\r\n\r\n  get<T>(key: string): T | null {\r\n    const startTime = performance.now();\r\n    const entry = this.cache.get(key);\r\n\r\n    if (!entry) {\r\n      if (this.config.enableMetrics) {\r\n        this.metrics.misses++;\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Check if expired\r\n    if (Date.now() - entry.timestamp > entry.ttl) {\r\n      this.cache.delete(key);\r\n      if (this.config.enableMetrics) {\r\n        this.metrics.misses++;\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Update access statistics\r\n    entry.accessCount++;\r\n    entry.lastAccessed = Date.now();\r\n\r\n    if (this.config.enableMetrics) {\r\n      this.metrics.hits++;\r\n      const accessTime = performance.now() - startTime;\r\n      this.updateAverageAccessTime(accessTime);\r\n    }\r\n\r\n    const data = this.config.enableCompression \r\n      ? this.decompressData(entry.data)\r\n      : entry.data;\r\n\r\n    return data;\r\n  }\r\n\r\n  has(key: string): boolean {\r\n    const entry = this.cache.get(key);\r\n    if (!entry) return false;\r\n    \r\n    // Check if expired\r\n    if (Date.now() - entry.timestamp > entry.ttl) {\r\n      this.cache.delete(key);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  delete(key: string): boolean {\r\n    return this.cache.delete(key);\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n    if (this.config.enableMetrics) {\r\n      this.metrics = {\r\n        hits: 0,\r\n        misses: 0,\r\n        evictions: 0,\r\n        totalSets: 0,\r\n        averageAccessTime: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  getSize(): number {\r\n    return this.cache.size;\r\n  }\r\n\r\n  getMetrics() {\r\n    const hitRate = this.metrics.hits + this.metrics.misses > 0 \r\n      ? (this.metrics.hits / (this.metrics.hits + this.metrics.misses)) * 100 \r\n      : 0;\r\n\r\n    return {\r\n      ...this.metrics,\r\n      hitRate: Math.round(hitRate * 100) / 100,\r\n      cacheSize: this.cache.size,\r\n      memoryUsage: this.estimateMemoryUsage()\r\n    };\r\n  }\r\n\r\n  // Get cache entries sorted by priority (access frequency and recency)\r\n  getEntriesByPriority(): Array<{ key: string; priority: number }> {\r\n    const entries: Array<{ key: string; priority: number }> = [];\r\n    \r\n    for (const [key, entry] of this.cache.entries()) {\r\n      // Calculate priority based on access frequency and recency\r\n      const recency = Date.now() - entry.lastAccessed;\r\n      const frequency = entry.accessCount;\r\n      const priority = frequency / (recency / 1000); // Higher is better\r\n      \r\n      entries.push({ key, priority });\r\n    }\r\n\r\n    return entries.sort((a, b) => a.priority - b.priority); // Lowest priority first\r\n  }\r\n\r\n  // Smart eviction based on LRU + LFU hybrid\r\n  private evictLeastUsed(): void {\r\n    const entries = this.getEntriesByPriority();\r\n    if (entries.length > 0) {\r\n      const leastUsedKey = entries[0].key;\r\n      this.cache.delete(leastUsedKey);\r\n      \r\n      if (this.config.enableMetrics) {\r\n        this.metrics.evictions++;\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateAverageAccessTime(accessTime: number): void {\r\n    const totalAccesses = this.metrics.hits + this.metrics.misses;\r\n    this.metrics.averageAccessTime = \r\n      (this.metrics.averageAccessTime * (totalAccesses - 1) + accessTime) / totalAccesses;\r\n  }\r\n\r\n  private compressData(data: any): any {\r\n    // Simple compression strategy - in production, use a proper compression library\r\n    if (typeof data === 'string' && data.length > 1000) {\r\n      // For demo purposes, just return the data as is\r\n      // In production, use LZString or similar\r\n      return data;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  private decompressData(data: any): any {\r\n    // Corresponding decompression\r\n    return data;\r\n  }\r\n\r\n  private estimateMemoryUsage(): number {\r\n    let totalSize = 0;\r\n    for (const [key, entry] of this.cache.entries()) {\r\n      totalSize += key.length * 2; // Rough estimate for string keys\r\n      totalSize += JSON.stringify(entry).length * 2; // Rough estimate for data\r\n    }\r\n    return totalSize;\r\n  }\r\n\r\n  // Advanced cache warming strategy\r\n  warmCache(keys: string[], dataFetcher: (key: string) => Promise<any>): Promise<void> {\r\n    const promises = keys.map(async (key) => {\r\n      if (!this.has(key)) {\r\n        try {\r\n          const data = await dataFetcher(key);\r\n          this.set(key, data);\r\n        } catch (error) {\r\n          console.warn(`Failed to warm cache for key: ${key}`, error);\r\n        }\r\n      }\r\n    });\r\n\r\n    return Promise.all(promises).then(() => {});\r\n  }\r\n\r\n  // Background cache cleanup\r\n  startBackgroundCleanup(intervalMs = 60000): () => void {\r\n    const interval = setInterval(() => {\r\n      this.cleanup();\r\n    }, intervalMs);\r\n\r\n    return () => clearInterval(interval);\r\n  }\r\n\r\n  private cleanup(): void {\r\n    const now = Date.now();\r\n    for (const [key, entry] of this.cache.entries()) {\r\n      if (now - entry.timestamp > entry.ttl) {\r\n        this.cache.delete(key);\r\n        if (this.config.enableMetrics) {\r\n          this.metrics.evictions++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Global cache instance with optimized configuration\r\nexport const modalDataCache = new ModalDataCache({\r\n  defaultTTL: 5 * 60 * 1000, // 5 minutes\r\n  maxSize: 100, // Increased for better performance\r\n  enableCompression: false, // Disable for better performance, enable if memory is critical\r\n  enableMetrics: true\r\n});\r\n\r\n// Cache key generators for consistency\r\nexport const cacheKeys = {\r\n  modalData: (orderId: string, qrSlug?: string) => \r\n    `modal-data-${orderId}${qrSlug ? `-${qrSlug}` : ''}`,\r\n  userType: (userId: string) => `user-type-${userId}`,\r\n  attachments: (orderId: string) => `attachments-${orderId}`,\r\n  comments: (orderId: string) => `comments-${orderId}`,\r\n  analytics: (qrSlug: string) => `analytics-${qrSlug}`\r\n};\r\n\r\n// Performance monitoring for cache operations\r\nexport class CachePerformanceMonitor {\r\n  private static instance: CachePerformanceMonitor;\r\n  private measurements: Array<{ operation: string; duration: number; timestamp: number }> = [];\r\n\r\n  static getInstance(): CachePerformanceMonitor {\r\n    if (!CachePerformanceMonitor.instance) {\r\n      CachePerformanceMonitor.instance = new CachePerformanceMonitor();\r\n    }\r\n    return CachePerformanceMonitor.instance;\r\n  }\r\n\r\n  measureOperation<T>(operation: string, fn: () => T): T {\r\n    const start = performance.now();\r\n    const result = fn();\r\n    const duration = performance.now() - start;\r\n    \r\n    this.measurements.push({ operation, duration, timestamp: Date.now() });\r\n    \r\n    // Keep only recent measurements\r\n    if (this.measurements.length > 1000) {\r\n      this.measurements = this.measurements.slice(-500);\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  async measureAsyncOperation<T>(operation: string, fn: () => Promise<T>): Promise<T> {\r\n    const start = performance.now();\r\n    const result = await fn();\r\n    const duration = performance.now() - start;\r\n    \r\n    this.measurements.push({ operation, duration, timestamp: Date.now() });\r\n    \r\n    return result;\r\n  }\r\n\r\n  getStats() {\r\n    const groupedByOperation = this.measurements.reduce((acc, measurement) => {\r\n      if (!acc[measurement.operation]) {\r\n        acc[measurement.operation] = [];\r\n      }\r\n      acc[measurement.operation].push(measurement.duration);\r\n      return acc;\r\n    }, {} as Record<string, number[]>);\r\n\r\n    const stats = Object.entries(groupedByOperation).map(([operation, durations]) => ({\r\n      operation,\r\n      count: durations.length,\r\n      avgDuration: durations.reduce((sum, d) => sum + d, 0) / durations.length,\r\n      minDuration: Math.min(...durations),\r\n      maxDuration: Math.max(...durations),\r\n      p95Duration: this.percentile(durations, 95)\r\n    }));\r\n\r\n    return stats;\r\n  }\r\n\r\n  private percentile(arr: number[], p: number): number {\r\n    const sorted = arr.sort((a, b) => a - b);\r\n    const index = Math.ceil((p / 100) * sorted.length) - 1;\r\n    return sorted[index];\r\n  }\r\n}\r\n\r\n// Export performance monitor instance\r\nexport const cachePerformanceMonitor = CachePerformanceMonitor.getInstance();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\orderUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\performanceTestSuite.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4250,4253],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4250,4253],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":141,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4305,4308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4305,4308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":170,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5265,5268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5265,5268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":171,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":171,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5319,5322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5319,5322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":234,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7268,7271],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7268,7271],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":554,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":554,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17782,17785],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17782,17785],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":554,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":554,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17788,17791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17788,17791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Comprehensive performance testing suite for modal optimizations\r\nimport { modalDataCache, cacheKeys, cachePerformanceMonitor } from './modalDataCache';\r\n\r\ninterface PerformanceTestResult {\r\n  testName: string;\r\n  duration: number;\r\n  memoryUsage?: number;\r\n  success: boolean;\r\n  iterations: number;\r\n  averageTime: number;\r\n  minTime: number;\r\n  maxTime: number;\r\n  p95Time: number;\r\n}\r\n\r\ninterface PerformanceTestSuite {\r\n  totalTests: number;\r\n  passedTests: number;\r\n  failedTests: number;\r\n  totalDuration: number;\r\n  results: PerformanceTestResult[];\r\n  recommendations: string[];\r\n}\r\n\r\nexport class ModalPerformanceTester {\r\n  private results: PerformanceTestResult[] = [];\r\n  private recommendations: string[] = [];\r\n\r\n  async runAllTests(): Promise<PerformanceTestSuite> {\r\n    console.log('🚀 Starting Modal Performance Test Suite...');\r\n    const startTime = performance.now();\r\n\r\n    // Clear any existing data\r\n    modalDataCache.clear();\r\n    this.results = [];\r\n    this.recommendations = [];\r\n\r\n    // Run all performance tests\r\n    await this.testCachePerformance();\r\n    await this.testMemoryUsage();\r\n    await this.testConcurrentOperations();\r\n    await this.testDataNormalization();\r\n    await this.testErrorHandling();\r\n    await this.testLargeDatasets();\r\n\r\n    const totalDuration = performance.now() - startTime;\r\n    const passedTests = this.results.filter(r => r.success).length;\r\n    const failedTests = this.results.filter(r => !r.success).length;\r\n\r\n    // Generate performance recommendations\r\n    this.generateRecommendations();\r\n\r\n    const suite: PerformanceTestSuite = {\r\n      totalTests: this.results.length,\r\n      passedTests,\r\n      failedTests,\r\n      totalDuration,\r\n      results: this.results,\r\n      recommendations: this.recommendations\r\n    };\r\n\r\n    console.log('✅ Performance Test Suite Complete:', suite);\r\n    return suite;\r\n  }\r\n\r\n  private async testCachePerformance(): Promise<void> {\r\n    const testName = 'Cache Performance Test';\r\n    const iterations = 1000;\r\n    const durations: number[] = [];\r\n\r\n    try {\r\n      for (let i = 0; i < iterations; i++) {\r\n        const key = `test-key-${i}`;\r\n        const data = { id: i, name: `Test Item ${i}`, timestamp: Date.now() };\r\n\r\n        // Test cache set performance\r\n        const setStart = performance.now();\r\n        modalDataCache.set(key, data);\r\n        const setDuration = performance.now() - setStart;\r\n\r\n        // Test cache get performance\r\n        const getStart = performance.now();\r\n        const retrieved = modalDataCache.get(key);\r\n        const getDuration = performance.now() - getStart;\r\n\r\n        const totalDuration = setDuration + getDuration;\r\n        durations.push(totalDuration);\r\n\r\n        // Validate data integrity\r\n        if (JSON.stringify(retrieved) !== JSON.stringify(data)) {\r\n          throw new Error(`Data integrity check failed for key: ${key}`);\r\n        }\r\n      }\r\n\r\n      const averageTime = durations.reduce((sum, d) => sum + d, 0) / durations.length;\r\n      const minTime = Math.min(...durations);\r\n      const maxTime = Math.max(...durations);\r\n      const p95Time = this.calculatePercentile(durations, 95);\r\n\r\n      this.results.push({\r\n        testName,\r\n        duration: durations.reduce((sum, d) => sum + d, 0),\r\n        success: true,\r\n        iterations,\r\n        averageTime,\r\n        minTime,\r\n        maxTime,\r\n        p95Time\r\n      });\r\n\r\n      // Performance threshold validation\r\n      if (averageTime > 1.0) { // More than 1ms average\r\n        this.recommendations.push(\r\n          `Cache operations are slower than expected (${averageTime.toFixed(2)}ms avg). Consider reducing data size or optimizing serialization.`\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      this.results.push({\r\n        testName,\r\n        duration: 0,\r\n        success: false,\r\n        iterations: 0,\r\n        averageTime: 0,\r\n        minTime: 0,\r\n        maxTime: 0,\r\n        p95Time: 0\r\n      });\r\n      console.error(`${testName} failed:`, error);\r\n    }\r\n  }\r\n\r\n  private async testMemoryUsage(): Promise<void> {\r\n    const testName = 'Memory Usage Test';\r\n    let memoryBefore = 0;\r\n    let memoryAfter = 0;\r\n\r\n    try {\r\n      // Measure initial memory if available\r\n      if ((performance as any).memory) {\r\n        memoryBefore = (performance as any).memory.usedJSHeapSize;\r\n      }\r\n\r\n      // Create large dataset\r\n      const iterations = 5000;\r\n      const startTime = performance.now();\r\n\r\n      for (let i = 0; i < iterations; i++) {\r\n        const key = cacheKeys.modalData(`order-${i}`, `slug-${i}`);\r\n        const largeData = {\r\n          id: i,\r\n          attachments: Array.from({ length: 10 }, (_, j) => ({\r\n            id: `att-${i}-${j}`,\r\n            name: `attachment-${j}.pdf`,\r\n            size: Math.random() * 1000000\r\n          })),\r\n          comments: Array.from({ length: 20 }, (_, j) => ({\r\n            id: `comment-${i}-${j}`,\r\n            text: `This is a test comment ${j} for order ${i}`.repeat(10)\r\n          })),\r\n          metadata: { timestamp: Date.now(), version: '1.0' }\r\n        };\r\n\r\n        modalDataCache.set(key, largeData);\r\n      }\r\n\r\n      const duration = performance.now() - startTime;\r\n\r\n      // Measure final memory if available\r\n      if ((performance as any).memory) {\r\n        memoryAfter = (performance as any).memory.usedJSHeapSize;\r\n      }\r\n\r\n      const memoryUsed = memoryAfter - memoryBefore;\r\n      const cacheMetrics = modalDataCache.getMetrics();\r\n\r\n      this.results.push({\r\n        testName,\r\n        duration,\r\n        memoryUsage: memoryUsed,\r\n        success: true,\r\n        iterations,\r\n        averageTime: duration / iterations,\r\n        minTime: 0,\r\n        maxTime: 0,\r\n        p95Time: 0\r\n      });\r\n\r\n      // Memory usage validation\r\n      if (memoryUsed > 50 * 1024 * 1024) { // More than 50MB\r\n        this.recommendations.push(\r\n          `High memory usage detected (${(memoryUsed / 1024 / 1024).toFixed(2)}MB). Consider implementing data compression or reducing cache size.`\r\n        );\r\n      }\r\n\r\n      console.log('Cache metrics after memory test:', cacheMetrics);\r\n\r\n    } catch (error) {\r\n      this.results.push({\r\n        testName,\r\n        duration: 0,\r\n        success: false,\r\n        iterations: 0,\r\n        averageTime: 0,\r\n        minTime: 0,\r\n        maxTime: 0,\r\n        p95Time: 0\r\n      });\r\n      console.error(`${testName} failed:`, error);\r\n    }\r\n  }\r\n\r\n  private async testConcurrentOperations(): Promise<void> {\r\n    const testName = 'Concurrent Operations Test';\r\n    const concurrency = 50;\r\n    const operationsPerWorker = 100;\r\n\r\n    try {\r\n      const startTime = performance.now();\r\n\r\n      // Create concurrent operations\r\n      const promises = Array.from({ length: concurrency }, async (_, workerId) => {\r\n        const workerDurations: number[] = [];\r\n\r\n        for (let i = 0; i < operationsPerWorker; i++) {\r\n          const opStart = performance.now();\r\n          const key = `worker-${workerId}-item-${i}`;\r\n          const data = { workerId, itemId: i, data: `Data for ${key}` };\r\n\r\n          // Simulate concurrent read/write operations\r\n          modalDataCache.set(key, data);\r\n          const retrieved = modalDataCache.get(key);\r\n          \r\n          if (!retrieved || (retrieved as any).workerId !== workerId) {\r\n            throw new Error(`Concurrent operation failed for ${key}`);\r\n          }\r\n\r\n          workerDurations.push(performance.now() - opStart);\r\n        }\r\n\r\n        return workerDurations;\r\n      });\r\n\r\n      const allDurations = (await Promise.all(promises)).flat();\r\n      const totalDuration = performance.now() - startTime;\r\n      const totalOperations = concurrency * operationsPerWorker;\r\n\r\n      const averageTime = allDurations.reduce((sum, d) => sum + d, 0) / allDurations.length;\r\n      const minTime = Math.min(...allDurations);\r\n      const maxTime = Math.max(...allDurations);\r\n      const p95Time = this.calculatePercentile(allDurations, 95);\r\n\r\n      this.results.push({\r\n        testName,\r\n        duration: totalDuration,\r\n        success: true,\r\n        iterations: totalOperations,\r\n        averageTime,\r\n        minTime,\r\n        maxTime,\r\n        p95Time\r\n      });\r\n\r\n      // Concurrent operation validation\r\n      if (p95Time > 5.0) { // More than 5ms at 95th percentile\r\n        this.recommendations.push(\r\n          `Concurrent operations are experiencing high latency (P95: ${p95Time.toFixed(2)}ms). Consider implementing request batching or queue management.`\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      this.results.push({\r\n        testName,\r\n        duration: 0,\r\n        success: false,\r\n        iterations: 0,\r\n        averageTime: 0,\r\n        minTime: 0,\r\n        maxTime: 0,\r\n        p95Time: 0\r\n      });\r\n      console.error(`${testName} failed:`, error);\r\n    }\r\n  }\r\n\r\n  private async testDataNormalization(): Promise<void> {\r\n    const testName = 'Data Normalization Performance Test';\r\n    const iterations = 1000;\r\n\r\n    try {\r\n      const startTime = performance.now();\r\n      const durations: number[] = [];\r\n\r\n      for (let i = 0; i < iterations; i++) {\r\n        const rawData = {\r\n          id: i.toString(),\r\n          name: null,\r\n          size: '1024',\r\n          createdAt: '2024-01-01T00:00:00.000Z',\r\n          // Simulate messy data that needs normalization\r\n          extraField: undefined,\r\n          emptyArray: [],\r\n          emptyString: ''\r\n        };\r\n\r\n        const normStart = performance.now();\r\n        \r\n        // Simulate data normalization\r\n        const normalized = this.normalizeTestData(rawData);\r\n        \r\n        const normDuration = performance.now() - normStart;\r\n        durations.push(normDuration);\r\n\r\n        // Validate normalized data\r\n        if (!normalized.id || typeof normalized.size !== 'number') {\r\n          throw new Error(`Normalization failed for item ${i}`);\r\n        }\r\n      }\r\n\r\n      const totalDuration = performance.now() - startTime;\r\n      const averageTime = durations.reduce((sum, d) => sum + d, 0) / durations.length;\r\n      const minTime = Math.min(...durations);\r\n      const maxTime = Math.max(...durations);\r\n      const p95Time = this.calculatePercentile(durations, 95);\r\n\r\n      this.results.push({\r\n        testName,\r\n        duration: totalDuration,\r\n        success: true,\r\n        iterations,\r\n        averageTime,\r\n        minTime,\r\n        maxTime,\r\n        p95Time\r\n      });\r\n\r\n      // Normalization performance validation\r\n      if (averageTime > 0.5) { // More than 0.5ms average\r\n        this.recommendations.push(\r\n          `Data normalization is slower than expected (${averageTime.toFixed(2)}ms avg). Consider pre-processing data or optimizing normalization logic.`\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      this.results.push({\r\n        testName,\r\n        duration: 0,\r\n        success: false,\r\n        iterations: 0,\r\n        averageTime: 0,\r\n        minTime: 0,\r\n        maxTime: 0,\r\n        p95Time: 0\r\n      });\r\n      console.error(`${testName} failed:`, error);\r\n    }\r\n  }\r\n\r\n  private async testErrorHandling(): Promise<void> {\r\n    const testName = 'Error Handling Performance Test';\r\n\r\n    try {\r\n      const startTime = performance.now();\r\n      let successfulRecoveries = 0;\r\n      const totalAttempts = 100;\r\n\r\n      for (let i = 0; i < totalAttempts; i++) {\r\n        try {\r\n          // Simulate various error conditions\r\n          if (i % 3 === 0) {\r\n            throw new Error('Simulated network error');\r\n          }\r\n          if (i % 5 === 0) {\r\n            throw new Error('Simulated validation error');\r\n          }\r\n          if (i % 7 === 0) {\r\n            throw new Error('Simulated timeout error');\r\n          }\r\n\r\n          // Normal operation\r\n          modalDataCache.set(`error-test-${i}`, { data: i });\r\n          \r\n        } catch (error) {\r\n          // Simulate error recovery\r\n          const recoveryStart = performance.now();\r\n          \r\n          // Fallback to cached data or default\r\n          const fallbackData = modalDataCache.get(`error-test-${i - 1}`) || { data: 'fallback' };\r\n          modalDataCache.set(`error-test-${i}`, fallbackData);\r\n          \r\n          const recoveryTime = performance.now() - recoveryStart;\r\n          if (recoveryTime < 10) { // Less than 10ms recovery time is good\r\n            successfulRecoveries++;\r\n          }\r\n        }\r\n      }\r\n\r\n      const totalDuration = performance.now() - startTime;\r\n      const recoveryRate = (successfulRecoveries / totalAttempts) * 100;\r\n\r\n      this.results.push({\r\n        testName,\r\n        duration: totalDuration,\r\n        success: recoveryRate > 90, // 90% recovery rate threshold\r\n        iterations: totalAttempts,\r\n        averageTime: totalDuration / totalAttempts,\r\n        minTime: 0,\r\n        maxTime: 0,\r\n        p95Time: 0\r\n      });\r\n\r\n      if (recoveryRate < 95) {\r\n        this.recommendations.push(\r\n          `Error recovery rate is below optimal (${recoveryRate.toFixed(1)}%). Consider improving fallback mechanisms and error handling strategies.`\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      this.results.push({\r\n        testName,\r\n        duration: 0,\r\n        success: false,\r\n        iterations: 0,\r\n        averageTime: 0,\r\n        minTime: 0,\r\n        maxTime: 0,\r\n        p95Time: 0\r\n      });\r\n      console.error(`${testName} failed:`, error);\r\n    }\r\n  }\r\n\r\n  private async testLargeDatasets(): Promise<void> {\r\n    const testName = 'Large Dataset Handling Test';\r\n\r\n    try {\r\n      const startTime = performance.now();\r\n      const largeDatasetSizes = [100, 500, 1000, 2000, 5000];\r\n      const durations: number[] = [];\r\n\r\n      for (const size of largeDatasetSizes) {\r\n        const testStart = performance.now();\r\n        \r\n        // Create large dataset\r\n        const largeDataset = Array.from({ length: size }, (_, i) => ({\r\n          id: `large-item-${i}`,\r\n          name: `Item ${i}`,\r\n          description: `This is a test description for item ${i}`.repeat(10),\r\n          metadata: {\r\n            created: new Date().toISOString(),\r\n            tags: Array.from({ length: 10 }, (_, j) => `tag-${j}`),\r\n            nested: {\r\n              level1: {\r\n                level2: {\r\n                  level3: `Deep nested data for item ${i}`\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }));\r\n\r\n        // Test caching large dataset\r\n        const cacheKey = `large-dataset-${size}`;\r\n        modalDataCache.set(cacheKey, largeDataset);\r\n        \r\n        // Test retrieval\r\n        const retrieved = modalDataCache.get(cacheKey);\r\n        \r\n        if (!retrieved || !Array.isArray(retrieved) || retrieved.length !== size) {\r\n          throw new Error(`Large dataset test failed for size ${size}`);\r\n        }\r\n\r\n        const testDuration = performance.now() - testStart;\r\n        durations.push(testDuration);\r\n        \r\n        console.log(`Large dataset (${size} items): ${testDuration.toFixed(2)}ms`);\r\n      }\r\n\r\n      const totalDuration = performance.now() - startTime;\r\n      const averageTime = durations.reduce((sum, d) => sum + d, 0) / durations.length;\r\n      const maxTime = Math.max(...durations);\r\n\r\n      this.results.push({\r\n        testName,\r\n        duration: totalDuration,\r\n        success: maxTime < 1000, // Less than 1 second for largest dataset\r\n        iterations: largeDatasetSizes.length,\r\n        averageTime,\r\n        minTime: Math.min(...durations),\r\n        maxTime,\r\n        p95Time: this.calculatePercentile(durations, 95)\r\n      });\r\n\r\n      // Large dataset performance validation\r\n      if (maxTime > 500) { // More than 500ms for any dataset\r\n        this.recommendations.push(\r\n          `Large dataset handling is slower than expected (max: ${maxTime.toFixed(2)}ms). Consider implementing pagination, virtualization, or data chunking.`\r\n        );\r\n      }\r\n\r\n    } catch (error) {\r\n      this.results.push({\r\n        testName,\r\n        duration: 0,\r\n        success: false,\r\n        iterations: 0,\r\n        averageTime: 0,\r\n        minTime: 0,\r\n        maxTime: 0,\r\n        p95Time: 0\r\n      });\r\n      console.error(`${testName} failed:`, error);\r\n    }\r\n  }\r\n\r\n  private generateRecommendations(): void {\r\n    const cacheMetrics = modalDataCache.getMetrics();\r\n    \r\n    // Cache hit rate recommendations\r\n    if (cacheMetrics.hitRate < 80) {\r\n      this.recommendations.push(\r\n        `Cache hit rate is low (${cacheMetrics.hitRate.toFixed(1)}%). Consider increasing cache TTL or improving cache key strategies.`\r\n      );\r\n    }\r\n\r\n    // Memory usage recommendations\r\n    if (cacheMetrics.memoryUsage > 10 * 1024 * 1024) { // More than 10MB\r\n      this.recommendations.push(\r\n        `Cache memory usage is high (${(cacheMetrics.memoryUsage / 1024 / 1024).toFixed(2)}MB). Consider implementing data compression or reducing cache size.`\r\n      );\r\n    }\r\n\r\n    // Performance recommendations based on test results\r\n    const avgRenderTime = this.results\r\n      .filter(r => r.testName.includes('Performance'))\r\n      .reduce((sum, r) => sum + r.averageTime, 0) / \r\n      this.results.filter(r => r.testName.includes('Performance')).length;\r\n\r\n    if (avgRenderTime > 2) { // More than 2ms average\r\n      this.recommendations.push(\r\n        'Consider implementing React.memo, useMemo, and useCallback optimizations for better rendering performance.'\r\n      );\r\n    }\r\n\r\n    // General recommendations\r\n    this.recommendations.push(\r\n      'Enable React DevTools Profiler in development to identify performance bottlenecks.',\r\n      'Monitor Core Web Vitals (LCP, FID, CLS) in production.',\r\n      'Consider implementing service worker caching for offline support.',\r\n      'Use React Suspense for better loading states and code splitting.'\r\n    );\r\n  }\r\n\r\n  private normalizeTestData(rawData: any): any {\r\n    return {\r\n      id: rawData.id || '',\r\n      name: rawData.name || 'Unknown',\r\n      size: parseInt(rawData.size) || 0,\r\n      createdAt: rawData.createdAt || new Date().toISOString()\r\n    };\r\n  }\r\n\r\n  private calculatePercentile(arr: number[], percentile: number): number {\r\n    const sorted = arr.sort((a, b) => a - b);\r\n    const index = Math.ceil((percentile / 100) * sorted.length) - 1;\r\n    return sorted[index] || 0;\r\n  }\r\n}\r\n\r\n// Export performance tester instance\r\nexport const modalPerformanceTester = new ModalPerformanceTester();\r\n\r\n// Utility function to run performance tests in development\r\nexport async function runModalPerformanceTests(): Promise<PerformanceTestSuite> {\r\n  if (process.env.NODE_ENV !== 'development') {\r\n    console.warn('Performance tests should only be run in development environment');\r\n    return {\r\n      totalTests: 0,\r\n      passedTests: 0,\r\n      failedTests: 0,\r\n      totalDuration: 0,\r\n      results: [],\r\n      recommendations: ['Performance tests are only available in development mode.']\r\n    };\r\n  }\r\n\r\n  return modalPerformanceTester.runAllTests();\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\permissions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":33,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1016,1019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1016,1019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { UserRole } from '@/hooks/usePermissions';\r\n\r\n/**\r\n * Check if user can view pricing information and manage categories\r\n * Only system admin and manager roles can see prices and manage categories\r\n */\r\nexport const canViewPricing = (roles: UserRole[]): boolean => {\r\n  return roles.some(role => \r\n    role.role_name === 'system_admin' ||\r\n    role.role_name === 'dealer_admin' || \r\n    role.role_name === 'dealer_manager' ||\r\n    role.role_name === 'detail_super_manager' ||\r\n    role.role_name === 'detail_admin'\r\n  );\r\n};\r\n\r\n/**\r\n * Check if user is system administrator\r\n * System admins can access special features like the landing page\r\n */\r\nexport const isSystemAdmin = (roles: UserRole[]): boolean => {\r\n  return roles.some(role => \r\n    role.role_name === 'system_admin' ||\r\n    role.role_name === 'dealer_admin' || \r\n    role.role_name === 'detail_super_manager'\r\n  );\r\n};\r\n\r\n/**\r\n * Check if user has specific permission level for a module\r\n */\r\nexport const hasPermissionLevel = (\r\n  permissions: any[], \r\n  module: string, \r\n  level: 'read' | 'write' | 'delete' | 'admin'\r\n): boolean => {\r\n  const permission = permissions.find(p => p.module === module);\r\n  if (!permission) return false;\r\n  \r\n  const levels = ['none', 'read', 'write', 'delete', 'admin'];\r\n  const requiredIndex = levels.indexOf(level);\r\n  const userIndex = levels.indexOf(permission.permission_level);\r\n  \r\n  return userIndex >= requiredIndex;\r\n};","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\phase4-validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\statusUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\tooltipDebug.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[966,969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[966,969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":290,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":290,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9097,9100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9097,9100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Tooltip Debug Utility\r\n * \r\n * This utility helps diagnose tooltip issues by providing comprehensive logging\r\n * and testing functionality for the DuplicateTooltip component.\r\n */\r\n\r\ninterface DebugOrder {\r\n  id: string;\r\n  stockNumber?: string;\r\n  vehicleVin?: string;\r\n  dealer_id?: number;\r\n  status: string;\r\n  createdAt: string;\r\n  vehicleYear?: number;\r\n  vehicleMake?: string;\r\n  vehicleModel?: string;\r\n}\r\n\r\nexport class TooltipDebugger {\r\n  private static instance: TooltipDebugger;\r\n  private debugMode = false;\r\n\r\n  static getInstance(): TooltipDebugger {\r\n    if (!TooltipDebugger.instance) {\r\n      TooltipDebugger.instance = new TooltipDebugger();\r\n    }\r\n    return TooltipDebugger.instance;\r\n  }\r\n\r\n  enableDebug() {\r\n    this.debugMode = true;\r\n    console.log('🐛 Tooltip Debug Mode ENABLED');\r\n  }\r\n\r\n  disableDebug() {\r\n    this.debugMode = false;\r\n    console.log('🐛 Tooltip Debug Mode DISABLED');\r\n  }\r\n\r\n  log(message: string, data?: any) {\r\n    if (this.debugMode) {\r\n      console.log(`🔍 [TOOLTIP DEBUG] ${message}`, data || '');\r\n    }\r\n  }\r\n\r\n  analyzeOrders(orders: DebugOrder[]): {\r\n    totalOrders: number;\r\n    ordersWithStock: number;\r\n    ordersWithVin: number;\r\n    potentialStockDuplicates: Array<{value: string; count: number; orderIds: string[]}>;\r\n    potentialVinDuplicates: Array<{value: string; count: number; orderIds: string[]}>;\r\n  } {\r\n    this.log('Starting order analysis', { orderCount: orders.length });\r\n\r\n    const stockMap = new Map<string, string[]>();\r\n    const vinMap = new Map<string, string[]>();\r\n\r\n    orders.forEach(order => {\r\n      // Analyze stock numbers\r\n      if (order.stockNumber && order.stockNumber.trim()) {\r\n        const normalized = order.stockNumber.trim().toLowerCase();\r\n        if (!stockMap.has(normalized)) {\r\n          stockMap.set(normalized, []);\r\n        }\r\n        stockMap.get(normalized)!.push(order.id);\r\n      }\r\n\r\n      // Analyze VINs\r\n      if (order.vehicleVin && order.vehicleVin.trim()) {\r\n        const normalized = order.vehicleVin.trim().toLowerCase().replace(/[-\\s]/g, '');\r\n        if (!vinMap.has(normalized)) {\r\n          vinMap.set(normalized, []);\r\n        }\r\n        vinMap.get(normalized)!.push(order.id);\r\n      }\r\n    });\r\n\r\n    const potentialStockDuplicates = Array.from(stockMap.entries())\r\n      .filter(([_, orderIds]) => orderIds.length > 1)\r\n      .map(([value, orderIds]) => ({ value, count: orderIds.length, orderIds }));\r\n\r\n    const potentialVinDuplicates = Array.from(vinMap.entries())\r\n      .filter(([_, orderIds]) => orderIds.length > 1)\r\n      .map(([value, orderIds]) => ({ value, count: orderIds.length, orderIds }));\r\n\r\n    const analysis = {\r\n      totalOrders: orders.length,\r\n      ordersWithStock: orders.filter(o => o.stockNumber && o.stockNumber.trim()).length,\r\n      ordersWithVin: orders.filter(o => o.vehicleVin && o.vehicleVin.trim()).length,\r\n      potentialStockDuplicates,\r\n      potentialVinDuplicates\r\n    };\r\n\r\n    this.log('Order analysis complete', analysis);\r\n    return analysis;\r\n  }\r\n\r\n  testTooltipConditions(orders: DebugOrder[], targetOrderId: string): {\r\n    orderFound: boolean;\r\n    stockDuplicateCount: number;\r\n    vinDuplicateCount: number;\r\n    shouldShowStockTooltip: boolean;\r\n    shouldShowVinTooltip: boolean;\r\n    stockDuplicateOrders: DebugOrder[];\r\n    vinDuplicateOrders: DebugOrder[];\r\n  } {\r\n    const targetOrder = orders.find(o => o.id === targetOrderId);\r\n    \r\n    if (!targetOrder) {\r\n      this.log(`Order ${targetOrderId} not found`);\r\n      return {\r\n        orderFound: false,\r\n        stockDuplicateCount: 0,\r\n        vinDuplicateCount: 0,\r\n        shouldShowStockTooltip: false,\r\n        shouldShowVinTooltip: false,\r\n        stockDuplicateOrders: [],\r\n        vinDuplicateOrders: []\r\n      };\r\n    }\r\n\r\n    this.log(`Testing tooltip conditions for order ${targetOrderId}`, targetOrder);\r\n\r\n    // Test stock duplicates\r\n    const stockDuplicateOrders = orders.filter(order => {\r\n      if (!targetOrder.stockNumber || !order.stockNumber) return false;\r\n      if (targetOrder.dealer_id !== order.dealer_id) return false;\r\n      \r\n      const targetNormalized = targetOrder.stockNumber.trim().toLowerCase();\r\n      const orderNormalized = order.stockNumber.trim().toLowerCase();\r\n      \r\n      return targetNormalized === orderNormalized;\r\n    });\r\n\r\n    // Test VIN duplicates\r\n    const vinDuplicateOrders = orders.filter(order => {\r\n      if (!targetOrder.vehicleVin || !order.vehicleVin) return false;\r\n      if (targetOrder.dealer_id !== order.dealer_id) return false;\r\n      \r\n      const targetNormalized = targetOrder.vehicleVin.trim().toLowerCase().replace(/[-\\s]/g, '');\r\n      const orderNormalized = order.vehicleVin.trim().toLowerCase().replace(/[-\\s]/g, '');\r\n      \r\n      return targetNormalized === orderNormalized;\r\n    });\r\n\r\n    const result = {\r\n      orderFound: true,\r\n      stockDuplicateCount: stockDuplicateOrders.length,\r\n      vinDuplicateCount: vinDuplicateOrders.length,\r\n      shouldShowStockTooltip: stockDuplicateOrders.length > 1,\r\n      shouldShowVinTooltip: vinDuplicateOrders.length > 1,\r\n      stockDuplicateOrders,\r\n      vinDuplicateOrders\r\n    };\r\n\r\n    this.log(`Tooltip test results for ${targetOrderId}`, result);\r\n    return result;\r\n  }\r\n\r\n  checkTooltipImplementation(): {\r\n    hasTooltipProvider: boolean;\r\n    hasRadixTooltip: boolean;\r\n    hasCustomTooltipComponent: boolean;\r\n    issues: string[];\r\n  } {\r\n    const issues: string[] = [];\r\n\r\n    // Check if TooltipProvider exists in DOM\r\n    const hasTooltipProvider = !!document.querySelector('[data-radix-tooltip-provider]');\r\n    if (!hasTooltipProvider) {\r\n      issues.push('TooltipProvider not found in DOM');\r\n    }\r\n\r\n    // Check if Radix tooltip is available\r\n    const hasRadixTooltip = typeof window !== 'undefined' && \r\n      document.querySelector('[data-radix-tooltip-trigger]') !== null;\r\n\r\n    // Check if custom tooltip component is loaded\r\n    const hasCustomTooltipComponent = !!document.querySelector('[data-duplicate-tooltip]');\r\n\r\n    if (!hasRadixTooltip) {\r\n      issues.push('Radix Tooltip triggers not found');\r\n    }\r\n\r\n    const result = {\r\n      hasTooltipProvider,\r\n      hasRadixTooltip,\r\n      hasCustomTooltipComponent,\r\n      issues\r\n    };\r\n\r\n    this.log('Tooltip implementation check', result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Create test orders with known duplicates for debugging\r\n   */\r\n  createTestOrders(): DebugOrder[] {\r\n    return [\r\n      {\r\n        id: \"test-order-1\",\r\n        stockNumber: \"ST001\",\r\n        vehicleVin: \"1HGBH41JXMN109186\",\r\n        dealer_id: 1,\r\n        status: \"pending\",\r\n        createdAt: \"2024-01-01T10:00:00Z\",\r\n        vehicleYear: 2024,\r\n        vehicleMake: \"Honda\",\r\n        vehicleModel: \"Civic\"\r\n      },\r\n      {\r\n        id: \"test-order-2\",\r\n        stockNumber: \"ST001\", // DUPLICATE STOCK\r\n        vehicleVin: \"2HGBH41JXMN109187\",\r\n        dealer_id: 1,\r\n        status: \"in_progress\",\r\n        createdAt: \"2024-01-02T10:00:00Z\",\r\n        vehicleYear: 2024,\r\n        vehicleMake: \"Toyota\",\r\n        vehicleModel: \"Camry\"\r\n      },\r\n      {\r\n        id: \"test-order-3\",\r\n        stockNumber: \"ST002\",\r\n        vehicleVin: \"1HGBH41JXMN109186\", // DUPLICATE VIN\r\n        dealer_id: 1,\r\n        status: \"completed\",\r\n        createdAt: \"2024-01-03T10:00:00Z\",\r\n        vehicleYear: 2024,\r\n        vehicleMake: \"Honda\",\r\n        vehicleModel: \"Accord\"\r\n      },\r\n      {\r\n        id: \"test-order-4\",\r\n        stockNumber: \"ST003\",\r\n        vehicleVin: \"3HGBH41JXMN109188\",\r\n        dealer_id: 2, // Different dealer\r\n        status: \"pending\",\r\n        createdAt: \"2024-01-04T10:00:00Z\",\r\n        vehicleYear: 2024,\r\n        vehicleMake: \"Ford\",\r\n        vehicleModel: \"F-150\"\r\n      }\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Run a full diagnostic test\r\n   */\r\n  runFullDiagnostic(orders?: DebugOrder[]): void {\r\n    this.enableDebug();\r\n    \r\n    console.log('🔧 Running Full Tooltip Diagnostic...');\r\n    \r\n    const testOrders = orders || this.createTestOrders();\r\n    \r\n    // 1. Analyze order data\r\n    const analysis = this.analyzeOrders(testOrders);\r\n    console.table(analysis);\r\n    \r\n    // 2. Test tooltip conditions for each order\r\n    testOrders.forEach(order => {\r\n      const test = this.testTooltipConditions(testOrders, order.id);\r\n      if (test.shouldShowStockTooltip || test.shouldShowVinTooltip) {\r\n        console.log(`✅ Order ${order.id} should show tooltips:`, {\r\n          stock: test.shouldShowStockTooltip,\r\n          vin: test.shouldShowVinTooltip\r\n        });\r\n      } else {\r\n        console.log(`❌ Order ${order.id} should NOT show tooltips`);\r\n      }\r\n    });\r\n    \r\n    // 3. Check implementation\r\n    const implCheck = this.checkTooltipImplementation();\r\n    if (implCheck.issues.length > 0) {\r\n      console.error('🚨 Implementation Issues:', implCheck.issues);\r\n    } else {\r\n      console.log('✅ Implementation looks good');\r\n    }\r\n    \r\n    console.log('🔧 Diagnostic Complete');\r\n  }\r\n}\r\n\r\n// Global access for browser console debugging\r\nif (typeof window !== 'undefined') {\r\n  (window as any).tooltipDebugger = TooltipDebugger.getInstance();\r\n}\r\n\r\nexport const tooltipDebugger = TooltipDebugger.getInstance();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\translationAudit.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":224,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6746,6749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6746,6749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":241,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7187,7190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7187,7190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":252,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":252,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7606,7609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7606,7609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":301,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8988,8991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8988,8991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":301,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":301,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9012,9015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9012,9015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":320,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9558,9561],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9558,9561],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":337,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10020,10023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10020,10023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":337,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10040,10043],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10040,10043],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":353,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10728,10731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10728,10731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":354,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10796,10799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10796,10799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":354,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":354,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10820,10823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10820,10823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":358,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":358,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10993,10996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10993,10996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Translation Audit System - Comprehensive Missing Keys Detection\r\n * Scans entire codebase for translation usage and validates coverage\r\n */\r\n\r\nimport { readFileSync, readdirSync, statSync } from 'fs';\r\nimport { join } from 'path';\r\n\r\nexport interface TranslationUsage {\r\n  key: string;\r\n  file: string;\r\n  line: number;\r\n  context: string;\r\n}\r\n\r\nexport interface AuditResult {\r\n  summary: {\r\n    totalFiles: number;\r\n    totalKeys: number;\r\n    usedKeys: number;\r\n    missingKeys: number;\r\n    coveragePercent: number;\r\n  };\r\n  \r\n  byLanguage: {\r\n    en: { total: number; missing: string[]; coverage: number };\r\n    es: { total: number; missing: string[]; coverage: number };\r\n    pt: { total: number; missing: string[]; coverage: number };\r\n  };\r\n  \r\n  byPage: Record<string, {\r\n    file: string;\r\n    keysUsed: string[];\r\n    missingKeys: string[];\r\n    status: 'complete' | 'partial' | 'missing';\r\n  }>;\r\n  \r\n  usageDetails: TranslationUsage[];\r\n  recommendations: string[];\r\n}\r\n\r\nexport class TranslationAuditService {\r\n  private readonly translationPatterns = [\r\n    // Standard t('key') usage\r\n    /t\\(['\"`]([^'\"`]+)['\"`]\\)/g,\r\n    // t('key', {variables}) usage\r\n    /t\\(['\"`]([^'\"`]+)['\"`]\\s*,\\s*{[^}]*}\\)/g,\r\n    // JSX {t('key')} usage\r\n    /\\{t\\(['\"`]([^'\"`]+)['\"`]\\)\\}/g,\r\n    // JSX {t('key', {vars})} usage\r\n    /\\{t\\(['\"`]([^'\"`]+)['\"`]\\s*,\\s*{[^}]*}\\)\\}/g,\r\n  ];\r\n\r\n  private readonly sourceDirectories = [\r\n    'src/pages',\r\n    'src/components', \r\n    'src/hooks',\r\n    'src/contexts',\r\n    'src/layouts',\r\n    'src/utils'\r\n  ];\r\n\r\n  private readonly translationFiles = {\r\n    en: 'public/translations/en.json',\r\n    es: 'public/translations/es.json',\r\n    pt: 'public/translations/pt-BR.json'\r\n  };\r\n\r\n  /**\r\n   * Main audit function - scans entire codebase\r\n   */\r\n  async runCompleteAudit(): Promise<AuditResult> {\r\n    console.log('🔍 Starting comprehensive translation audit...');\r\n    \r\n    // 1. Scan all TypeScript files for translation usage\r\n    const allFiles = this.getAllTsxFiles();\r\n    const usageDetails = this.extractAllTranslationUsage(allFiles);\r\n    const usedKeys = [...new Set(usageDetails.map(usage => usage.key))];\r\n    \r\n    console.log(`📁 Scanned ${allFiles.length} files, found ${usedKeys.length} unique translation keys`);\r\n    \r\n    // 2. Load translation files\r\n    const translations = this.loadAllTranslations();\r\n    \r\n    // 3. Check coverage for each language\r\n    const missingByLanguage = this.findMissingKeys(usedKeys, translations);\r\n    \r\n    // 4. Generate page-by-page breakdown\r\n    const pageBreakdown = this.generatePageBreakdown(usageDetails, missingByLanguage);\r\n    \r\n    // 5. Calculate coverage statistics\r\n    const summary = this.calculateCoverage(usedKeys, translations, missingByLanguage);\r\n    \r\n    // 6. Generate recommendations\r\n    const recommendations = this.generateRecommendations(missingByLanguage, pageBreakdown);\r\n\r\n    return {\r\n      summary,\r\n      byLanguage: {\r\n        en: {\r\n          total: this.getTotalKeys(translations.en),\r\n          missing: missingByLanguage.en,\r\n          coverage: ((usedKeys.length - missingByLanguage.en.length) / usedKeys.length) * 100\r\n        },\r\n        es: {\r\n          total: this.getTotalKeys(translations.es),\r\n          missing: missingByLanguage.es,\r\n          coverage: ((usedKeys.length - missingByLanguage.es.length) / usedKeys.length) * 100\r\n        },\r\n        pt: {\r\n          total: this.getTotalKeys(translations.pt),\r\n          missing: missingByLanguage.pt,\r\n          coverage: ((usedKeys.length - missingByLanguage.pt.length) / usedKeys.length) * 100\r\n        }\r\n      },\r\n      byPage: pageBreakdown,\r\n      usageDetails,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get all TypeScript/TSX files to scan\r\n   */\r\n  private getAllTsxFiles(): string[] {\r\n    const files: string[] = [];\r\n    \r\n    for (const dir of this.sourceDirectories) {\r\n      try {\r\n        const dirFiles = this.scanDirectory(dir, ['.tsx', '.ts']);\r\n        files.push(...dirFiles);\r\n      } catch (error) {\r\n        console.warn(`⚠️ Could not scan directory: ${dir}`);\r\n      }\r\n    }\r\n    \r\n    return files;\r\n  }\r\n\r\n  /**\r\n   * Recursively scan directory for specific file types\r\n   */\r\n  private scanDirectory(dirPath: string, extensions: string[]): string[] {\r\n    const files: string[] = [];\r\n    \r\n    try {\r\n      const items = readdirSync(dirPath);\r\n      \r\n      for (const item of items) {\r\n        const fullPath = join(dirPath, item);\r\n        const stat = statSync(fullPath);\r\n        \r\n        if (stat.isDirectory()) {\r\n          // Skip node_modules and other build directories\r\n          if (!item.startsWith('.') && !['node_modules', 'dist', 'build'].includes(item)) {\r\n            files.push(...this.scanDirectory(fullPath, extensions));\r\n          }\r\n        } else if (extensions.some(ext => item.endsWith(ext))) {\r\n          files.push(fullPath);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.warn(`⚠️ Error scanning ${dirPath}:`, error);\r\n    }\r\n    \r\n    return files;\r\n  }\r\n\r\n  /**\r\n   * Extract all translation usage from files\r\n   */\r\n  private extractAllTranslationUsage(files: string[]): TranslationUsage[] {\r\n    const allUsage: TranslationUsage[] = [];\r\n    \r\n    for (const file of files) {\r\n      try {\r\n        const content = readFileSync(file, 'utf-8');\r\n        const lines = content.split('\\n');\r\n        \r\n        for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {\r\n          const line = lines[lineIndex];\r\n          \r\n          for (const pattern of this.translationPatterns) {\r\n            let match;\r\n            while ((match = pattern.exec(line)) !== null) {\r\n              allUsage.push({\r\n                key: match[1],\r\n                file: file.replace(process.cwd() + '/', ''),\r\n                line: lineIndex + 1,\r\n                context: line.trim()\r\n              });\r\n            }\r\n            // Reset regex lastIndex\r\n            pattern.lastIndex = 0;\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn(`⚠️ Could not read file: ${file}`);\r\n      }\r\n    }\r\n    \r\n    return allUsage;\r\n  }\r\n\r\n  /**\r\n   * Load all translation files\r\n   */\r\n  private loadAllTranslations() {\r\n    try {\r\n      return {\r\n        en: JSON.parse(readFileSync(this.translationFiles.en, 'utf-8')),\r\n        es: JSON.parse(readFileSync(this.translationFiles.es, 'utf-8')),\r\n        pt: JSON.parse(readFileSync(this.translationFiles.pt, 'utf-8'))\r\n      };\r\n    } catch (error) {\r\n      console.error('❌ Error loading translation files:', error);\r\n      return { en: {}, es: {}, pt: {} };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if translation key exists (supports nested keys like 'user.profile.name')\r\n   */\r\n  private hasTranslationKey(obj: any, keyPath: string): boolean {\r\n    const keys = keyPath.split('.');\r\n    let current = obj;\r\n    \r\n    for (const key of keys) {\r\n      if (typeof current !== 'object' || current === null || current[key] === undefined) {\r\n        return false;\r\n      }\r\n      current = current[key];\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Find missing keys in each language\r\n   */\r\n  private findMissingKeys(usedKeys: string[], translations: any) {\r\n    return {\r\n      en: usedKeys.filter(key => !this.hasTranslationKey(translations.en, key)),\r\n      es: usedKeys.filter(key => !this.hasTranslationKey(translations.es, key)),\r\n      pt: usedKeys.filter(key => !this.hasTranslationKey(translations.pt, key))\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate page-by-page breakdown\r\n   */\r\n  private generatePageBreakdown(usageDetails: TranslationUsage[], missingByLanguage: any) {\r\n    const pageMap: Record<string, {\r\n      file: string;\r\n      keysUsed: string[];\r\n      missingKeys: string[];\r\n      status: 'complete' | 'partial' | 'missing';\r\n    }> = {};\r\n\r\n    // Group by file\r\n    const fileGroups = usageDetails.reduce((acc, usage) => {\r\n      if (!acc[usage.file]) acc[usage.file] = [];\r\n      acc[usage.file].push(usage.key);\r\n      return acc;\r\n    }, {} as Record<string, string[]>);\r\n\r\n    // Analyze each file\r\n    for (const [file, keys] of Object.entries(fileGroups)) {\r\n      const uniqueKeys = [...new Set(keys)];\r\n      const missing = [...new Set([\r\n        ...missingByLanguage.en,\r\n        ...missingByLanguage.es, \r\n        ...missingByLanguage.pt\r\n      ])];\r\n      \r\n      const fileMissingKeys = uniqueKeys.filter(key => missing.includes(key));\r\n      \r\n      let status: 'complete' | 'partial' | 'missing';\r\n      if (fileMissingKeys.length === 0) {\r\n        status = 'complete';\r\n      } else if (fileMissingKeys.length < uniqueKeys.length / 2) {\r\n        status = 'partial';\r\n      } else {\r\n        status = 'missing';\r\n      }\r\n\r\n      pageMap[file] = {\r\n        file,\r\n        keysUsed: uniqueKeys,\r\n        missingKeys: fileMissingKeys,\r\n        status\r\n      };\r\n    }\r\n\r\n    return pageMap;\r\n  }\r\n\r\n  /**\r\n   * Calculate overall coverage statistics\r\n   */\r\n  private calculateCoverage(usedKeys: string[], translations: any, missingByLanguage: any) {\r\n    const totalMissing = new Set([\r\n      ...missingByLanguage.en,\r\n      ...missingByLanguage.es,\r\n      ...missingByLanguage.pt\r\n    ]).size;\r\n\r\n    return {\r\n      totalFiles: this.getAllTsxFiles().length,\r\n      totalKeys: this.getTotalKeys(translations.en),\r\n      usedKeys: usedKeys.length,\r\n      missingKeys: totalMissing,\r\n      coveragePercent: Math.round(((usedKeys.length - totalMissing) / usedKeys.length) * 100)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Count total translation keys in object (nested)\r\n   */\r\n  private getTotalKeys(obj: any, depth = 0): number {\r\n    if (depth > 10) return 0; // Prevent infinite recursion\r\n    \r\n    let count = 0;\r\n    for (const value of Object.values(obj)) {\r\n      if (typeof value === 'object' && value !== null) {\r\n        count += this.getTotalKeys(value, depth + 1);\r\n      } else {\r\n        count += 1;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  /**\r\n   * Generate actionable recommendations\r\n   */\r\n  private generateRecommendations(missingByLanguage: any, pageBreakdown: any): string[] {\r\n    const recommendations: string[] = [];\r\n    \r\n    // Language-specific recommendations\r\n    if (missingByLanguage.es.length > 0) {\r\n      recommendations.push(`Add ${missingByLanguage.es.length} missing Spanish translations`);\r\n    }\r\n    if (missingByLanguage.pt.length > 0) {\r\n      recommendations.push(`Add ${missingByLanguage.pt.length} missing Portuguese translations`);\r\n    }\r\n    if (missingByLanguage.en.length > 0) {\r\n      recommendations.push(`Add ${missingByLanguage.en.length} missing English translations`);\r\n    }\r\n\r\n    // Page-specific recommendations\r\n    const problematicPages = Object.entries(pageBreakdown)\r\n      .filter(([_, data]: [string, any]) => data.status !== 'complete')\r\n      .sort(([_, a]: [string, any], [__, b]: [string, any]) => b.missingKeys.length - a.missingKeys.length)\r\n      .slice(0, 5);\r\n\r\n    for (const [file, data] of problematicPages) {\r\n      recommendations.push(`Fix ${(data as any)?.missingKeys?.length || 0} missing keys in ${file}`);\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Print formatted audit report to console\r\n   */\r\n  printAuditReport(result: AuditResult): void {\r\n    console.log('\\n🔍 TRANSLATION AUDIT RESULTS');\r\n    console.log('========================================');\r\n    console.log(`📁 Files Scanned: ${result.summary.totalFiles}`);\r\n    console.log(`🔑 Translation Keys Found: ${result.summary.usedKeys}`);\r\n    console.log(`📊 Overall Coverage: ${result.summary.coveragePercent}%`);\r\n    \r\n    console.log('\\n📊 Coverage by Language:');\r\n    console.log(`├── 🇺🇸 English: ${result.byLanguage.en.total} keys (${Math.round(result.byLanguage.en.coverage)}%) ${result.byLanguage.en.missing.length === 0 ? '✅' : '⚠️'}`);\r\n    console.log(`├── 🇪🇸 Spanish: ${result.byLanguage.es.total} keys (${Math.round(result.byLanguage.es.coverage)}%) ${result.byLanguage.es.missing.length === 0 ? '✅' : '⚠️'}`);\r\n    console.log(`└── 🇧🇷 Portuguese: ${result.byLanguage.pt.total} keys (${Math.round(result.byLanguage.pt.coverage)}%) ${result.byLanguage.pt.missing.length === 0 ? '✅' : '⚠️'}`);\r\n\r\n    if (result.byLanguage.es.missing.length > 0 || result.byLanguage.pt.missing.length > 0) {\r\n      console.log('\\n❌ Missing Keys (Priority):');\r\n      const allMissing = [...new Set([...result.byLanguage.es.missing, ...result.byLanguage.pt.missing])];\r\n      allMissing.slice(0, 10).forEach(key => {\r\n        const languages = [];\r\n        if (result.byLanguage.es.missing.includes(key)) languages.push('ES');\r\n        if (result.byLanguage.pt.missing.includes(key)) languages.push('PT');\r\n        console.log(`├── ${key} (${languages.join(', ')})`);\r\n      });\r\n      if (allMissing.length > 10) {\r\n        console.log(`└── ... and ${allMissing.length - 10} more`);\r\n      }\r\n    }\r\n\r\n    console.log('\\n📋 By Page Status:');\r\n    const sortedPages = Object.entries(result.byPage)\r\n      .sort(([_, a], [__, b]) => b.missingKeys.length - a.missingKeys.length)\r\n      .slice(0, 10);\r\n    \r\n    for (const [file, data] of sortedPages) {\r\n      const statusIcon = data.status === 'complete' ? '✅' : data.status === 'partial' ? '⚠️' : '❌';\r\n      const fileName = file.split('/').pop() || file;\r\n      console.log(`├── ${statusIcon} ${fileName}: ${data.status} (${data.keysUsed.length - data.missingKeys.length}/${data.keysUsed.length})`);\r\n    }\r\n\r\n    if (result.recommendations.length > 0) {\r\n      console.log('\\n🎯 Recommendations:');\r\n      result.recommendations.forEach((rec, index) => {\r\n        console.log(`${index + 1}. ${rec}`);\r\n      });\r\n    }\r\n    \r\n    console.log('\\n✨ Audit Complete!');\r\n  }\r\n\r\n  /**\r\n   * Export missing keys to JSON for easy translation\r\n   */\r\n  exportMissingKeys(result: AuditResult): void {\r\n    const missingKeys = {\r\n      spanish: result.byLanguage.es.missing.reduce((acc, key) => {\r\n        acc[key] = `[TODO: Translate '${key}']`;\r\n        return acc;\r\n      }, {} as Record<string, string>),\r\n      \r\n      portuguese: result.byLanguage.pt.missing.reduce((acc, key) => {\r\n        acc[key] = `[TODO: Translate '${key}']`;\r\n        return acc;\r\n      }, {} as Record<string, string>)\r\n    };\r\n\r\n    console.log('\\n📄 Missing Keys JSON:');\r\n    console.log('Spanish missing keys:', JSON.stringify(missingKeys.spanish, null, 2));\r\n    console.log('Portuguese missing keys:', JSON.stringify(missingKeys.portuguese, null, 2));\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const translationAudit = new TranslationAuditService();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\validateTranslations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\utils\\vehicleUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\_shared\\cors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\_shared\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\bulk-password-operations\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":105,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3098,3101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3098,3101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":150,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4639,4642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4639,4642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":193,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5824,5827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5824,5827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from 'https://deno.land/std@0.190.0/http/server.ts';\r\nimport { supabase } from '../_shared/supabase.ts';\r\nimport { corsHeaders } from '../_shared/cors.ts';\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  // Handle CORS preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const authHeader = req.headers.get('Authorization');\r\n    if (!authHeader) {\r\n      throw new Error('No authorization header');\r\n    }\r\n\r\n    // Get the current user\r\n    const { data: { user }, error: authError } = await supabase.auth.getUser(\r\n      authHeader.replace('Bearer ', '')\r\n    );\r\n\r\n    if (authError || !user) {\r\n      throw new Error('Unauthorized');\r\n    }\r\n\r\n    const { operationType, dealerId, targetFilters, options } = await req.json();\r\n\r\n    console.log('Bulk password operation request:', { operationType, dealerId, targetFilters });\r\n\r\n    // Verify admin has permission for bulk operations\r\n    const { data: membership } = await supabase\r\n      .from('dealer_memberships')\r\n      .select('dealer_id')\r\n      .eq('user_id', user.id)\r\n      .eq('dealer_id', dealerId)\r\n      .eq('is_active', true)\r\n      .single();\r\n\r\n    if (!membership) {\r\n      throw new Error('No dealer membership found');\r\n    }\r\n\r\n    // Create bulk operation record\r\n    const { data: bulkOp, error: bulkError } = await supabase\r\n      .from('bulk_password_operations')\r\n      .insert({\r\n        operation_type: operationType,\r\n        initiated_by: user.id,\r\n        dealer_id: dealerId,\r\n        target_filters: targetFilters,\r\n        status: 'pending'\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (bulkError) {\r\n      throw new Error('Failed to create bulk operation record');\r\n    }\r\n\r\n    // Get target users based on filters\r\n    let query = supabase\r\n      .from('dealer_memberships')\r\n      .select(`\r\n        user_id,\r\n        profiles!inner(id, email, first_name, last_name)\r\n      `)\r\n      .eq('dealer_id', dealerId)\r\n      .eq('is_active', true);\r\n\r\n    // Apply filters\r\n    if (targetFilters.userIds?.length > 0) {\r\n      query = query.in('user_id', targetFilters.userIds);\r\n    }\r\n\r\n    if (targetFilters.roles?.length > 0) {\r\n      // This would need to be adjusted based on your role system\r\n      // For now, we'll skip role filtering\r\n    }\r\n\r\n    if (targetFilters.groups?.length > 0) {\r\n      // Filter by groups if specified\r\n      query = query.in('dealer_membership_groups.group_id', targetFilters.groups);\r\n    }\r\n\r\n    const { data: targetUsers, error: usersError } = await query;\r\n\r\n    if (usersError) {\r\n      throw new Error('Failed to fetch target users');\r\n    }\r\n\r\n    const totalUsers = targetUsers?.length || 0;\r\n\r\n    // Update bulk operation with total count\r\n    await supabase\r\n      .from('bulk_password_operations')\r\n      .update({\r\n        total_users: totalUsers,\r\n        status: 'processing',\r\n        started_at: new Date().toISOString()\r\n      })\r\n      .eq('id', bulkOp.id);\r\n\r\n    let successCount = 0;\r\n    let failCount = 0;\r\n    const errors: any[] = [];\r\n\r\n    // Process each user\r\n    for (const targetUser of targetUsers || []) {\r\n      try {\r\n        const resetToken = crypto.randomUUID();\r\n        \r\n        // Create individual password reset request\r\n        const { error: resetError } = await supabase\r\n          .from('password_reset_requests')\r\n          .insert({\r\n            user_id: targetUser.user_id,\r\n            admin_id: user.id,\r\n            token: resetToken,\r\n            request_type: operationType === 'bulk_reset' ? 'email_reset' :\r\n                         operationType === 'bulk_temp_password' ? 'temp_password' : 'force_change',\r\n            force_change_on_login: operationType === 'bulk_force_change',\r\n            temp_password: operationType === 'bulk_temp_password' ? \r\n              Math.random().toString(36).slice(-8) : null,\r\n            metadata: {\r\n              bulk_operation_id: bulkOp.id,\r\n              dealer_id: dealerId\r\n            }\r\n          });\r\n\r\n        if (resetError) {\r\n          throw resetError;\r\n        }\r\n\r\n        // Log individual activity\r\n        await supabase\r\n          .from('user_activity_log')\r\n          .insert({\r\n            user_id: targetUser.user_id,\r\n            action_type: 'bulk_password_operation',\r\n            action_description: `Bulk password operation: ${operationType}`,\r\n            details: {\r\n              bulk_operation_id: bulkOp.id,\r\n              admin_id: user.id,\r\n              dealer_id: dealerId\r\n            }\r\n          });\r\n\r\n        successCount++;\r\n\r\n      } catch (error: any) {\r\n        failCount++;\r\n        errors.push({\r\n          user_id: targetUser.user_id,\r\n          email: targetUser.profiles?.email,\r\n          error: error.message\r\n        });\r\n      }\r\n    }\r\n\r\n    // Update final bulk operation status\r\n    await supabase\r\n      .from('bulk_password_operations')\r\n      .update({\r\n        processed_users: totalUsers,\r\n        successful_operations: successCount,\r\n        failed_operations: failCount,\r\n        status: failCount === 0 ? 'completed' : 'completed',\r\n        completed_at: new Date().toISOString(),\r\n        error_details: errors\r\n      })\r\n      .eq('id', bulkOp.id);\r\n\r\n    const response = {\r\n      success: true,\r\n      bulkOperationId: bulkOp.id,\r\n      totalUsers,\r\n      successCount,\r\n      failCount,\r\n      errors: errors.length > 0 ? errors : undefined,\r\n      message: `Bulk operation completed. ${successCount} successful, ${failCount} failed.`\r\n    };\r\n\r\n    console.log('Bulk operation completed:', response);\r\n\r\n    return new Response(JSON.stringify(response), {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...corsHeaders,\r\n      },\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error in bulk-password-operations function:', error);\r\n    \r\n    return new Response(\r\n      JSON.stringify({ \r\n        error: error.message,\r\n        success: false \r\n      }),\r\n      {\r\n        status: error.message === 'Unauthorized' ? 401 : 500,\r\n        headers: { \r\n          'Content-Type': 'application/json', \r\n          ...corsHeaders \r\n        },\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nserve(handler);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\create-dealer-user\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":148,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4762,4765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4762,4765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.4'\r\nimport { corsHeaders } from '../_shared/cors.ts'\r\n\r\ninterface CreateUserRequest {\r\n  email: string\r\n  firstName: string\r\n  lastName: string\r\n  dealershipId: number\r\n  role: string\r\n  userType: 'dealer' | 'detail'\r\n  sendWelcomeEmail?: boolean\r\n  dealershipName?: string\r\n}\r\n\r\nDeno.serve(async (req) => {\r\n  // Handle CORS preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response('ok', { headers: corsHeaders })\r\n  }\r\n\r\n  try {\r\n    console.log('=== CREATE DEALER USER START ===')\r\n    console.log('Request method:', req.method)\r\n    console.log('Request URL:', req.url)\r\n    console.log('Request headers:', Object.fromEntries(req.headers.entries()))\r\n    \r\n    // Validate request method\r\n    if (req.method !== 'POST') {\r\n      console.error('Invalid request method:', req.method)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Method not allowed. Use POST.'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 405,\r\n        }\r\n      )\r\n    }\r\n\r\n    // Check environment variables first\r\n    const supabaseUrl = Deno.env.get('SUPABASE_URL')\r\n    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')\r\n    \r\n    console.log('Environment check:')\r\n    console.log('- SUPABASE_URL exists:', !!supabaseUrl)\r\n    console.log('- SUPABASE_SERVICE_ROLE_KEY exists:', !!supabaseServiceKey)\r\n    console.log('- SUPABASE_URL value:', supabaseUrl)\r\n    \r\n    if (!supabaseUrl || !supabaseServiceKey) {\r\n      console.error('Missing environment variables')\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Server configuration error: Missing environment variables'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 500,\r\n        }\r\n      )\r\n    }\r\n\r\n    // Verify user is authenticated and has admin privileges\r\n    const authHeader = req.headers.get('authorization')\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      console.error('Missing or invalid authorization header')\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Unauthorized: Missing authentication token'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 401,\r\n        }\r\n      )\r\n    }\r\n\r\n    // Create Supabase client to verify admin permissions\r\n    const tempSupabase = createClient(supabaseUrl, supabaseServiceKey, {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    })\r\n\r\n    // Get the JWT token from the authorization header\r\n    const token = authHeader.replace('Bearer ', '')\r\n    \r\n    // Verify the user has admin role\r\n    const { data: userData, error: userError } = await tempSupabase.auth.getUser(token)\r\n    if (userError || !userData.user) {\r\n      console.error('Invalid authentication token:', userError)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Unauthorized: Invalid authentication token'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 401,\r\n        }\r\n      )\r\n    }\r\n\r\n    // Check if user has admin role\r\n    const { data: profile, error: profileError } = await tempSupabase\r\n      .from('profiles')\r\n      .select('role')\r\n      .eq('id', userData.user.id)\r\n      .single()\r\n\r\n    if (profileError || !profile || profile.role !== 'admin') {\r\n      console.error('User does not have admin privileges:', profileError || 'Missing admin role')\r\n      \r\n      // Log security event\r\n      await tempSupabase\r\n        .from('security_audit_log')\r\n        .insert({\r\n          event_type: 'unauthorized_user_creation_attempt',\r\n          user_id: userData.user?.id,\r\n          event_details: {\r\n            attempted_email: requestBody?.email,\r\n            user_role: profile?.role || 'unknown'\r\n          },\r\n          ip_address: req.headers.get('x-forwarded-for') || 'unknown',\r\n          user_agent: req.headers.get('user-agent') || 'unknown',\r\n          success: false\r\n        })\r\n\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Forbidden: Admin privileges required'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 403,\r\n        }\r\n      )\r\n    }\r\n\r\n    console.log('✅ Admin authentication verified for user:', userData.user.id)\r\n    \r\n    // Parse and validate request body\r\n    let requestBody: any\r\n    try {\r\n      requestBody = await req.json()\r\n      console.log('Raw request body:', JSON.stringify(requestBody, null, 2))\r\n    } catch (parseError) {\r\n      console.error('JSON parse error:', parseError)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Invalid JSON in request body'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 400,\r\n        }\r\n      )\r\n    }\r\n\r\n    // Validate required fields\r\n    const requiredFields = ['email', 'firstName', 'lastName', 'dealershipId', 'role', 'userType']\r\n    const missingFields = requiredFields.filter(field => !requestBody[field])\r\n    \r\n    if (missingFields.length > 0) {\r\n      console.error('Missing required fields:', missingFields)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: `Missing required fields: ${missingFields.join(', ')}`\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 400,\r\n        }\r\n      )\r\n    }\r\n\r\n    // Validate data types\r\n    const {\r\n      email,\r\n      firstName,\r\n      lastName,\r\n      dealershipId,\r\n      role,\r\n      userType,\r\n      sendWelcomeEmail = true,\r\n      dealershipName\r\n    }: CreateUserRequest = requestBody\r\n\r\n    // Type validation\r\n    if (typeof email !== 'string' || !email.includes('@')) {\r\n      console.error('Invalid email format:', email)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Invalid email format'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 400,\r\n        }\r\n      )\r\n    }\r\n\r\n    if (typeof dealershipId !== 'number' || dealershipId <= 0) {\r\n      console.error('Invalid dealershipId:', dealershipId, typeof dealershipId)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Invalid dealershipId: must be a positive number'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 400,\r\n        }\r\n      )\r\n    }\r\n\r\n    if (!['dealer', 'detail'].includes(userType)) {\r\n      console.error('Invalid userType:', userType)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Invalid userType: must be \"dealer\" or \"detail\"'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 400,\r\n        }\r\n      )\r\n    }\r\n\r\n    console.log('Validated input data:', { \r\n      email, \r\n      firstName, \r\n      lastName, \r\n      dealershipId, \r\n      role, \r\n      userType,\r\n      sendWelcomeEmail,\r\n      dealershipName \r\n    })\r\n\r\n    // Create Supabase client with service role key for admin operations\r\n    const supabase = createClient(supabaseUrl, supabaseServiceKey, {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    })\r\n\r\n    console.log('Supabase client created successfully')\r\n\r\n    // Validate that the dealership exists\r\n    console.log('=== VALIDATING DEALERSHIP ===')\r\n    const { data: dealership, error: dealershipError } = await supabase\r\n      .from('dealerships')\r\n      .select('id, name')\r\n      .eq('id', dealershipId)\r\n      .single()\r\n\r\n    if (dealershipError || !dealership) {\r\n      console.error('Dealership validation failed:', dealershipError)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: `Invalid dealership ID: ${dealershipId}. Dealership not found.`,\r\n          details: dealershipError\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 400,\r\n        }\r\n      )\r\n    }\r\n\r\n    console.log('✅ Dealership validated:', dealership.name)\r\n\r\n    console.log('Creating user with data:', { email, firstName, lastName, dealershipId, role, userType })\r\n    \r\n    // Validate required dealership_id\r\n    if (!dealershipId) {\r\n      throw new Error('dealershipId is required')\r\n    }\r\n\r\n    // Step 1: Create user in Auth\r\n    console.log('=== STEP 1: Creating Auth User ===')\r\n    const authPayload = {\r\n      email: email,\r\n      email_confirm: true, // Auto-confirm email\r\n      user_metadata: {\r\n        first_name: firstName,\r\n        last_name: lastName,\r\n        user_type: userType,\r\n        role: role\r\n      }\r\n    }\r\n    console.log('Auth payload:', JSON.stringify(authPayload, null, 2))\r\n\r\n    const { data: authUser, error: authError } = await supabase.auth.admin.createUser(authPayload)\r\n\r\n    if (authError) {\r\n      console.error('=== AUTH ERROR ===')\r\n      console.error('Auth error details:', JSON.stringify(authError, null, 2))\r\n      console.error('Auth error message:', authError.message)\r\n      console.error('Auth error status:', authError.status)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: `Auth creation failed: ${authError.message}`,\r\n          details: authError\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 400,\r\n        }\r\n      )\r\n    }\r\n\r\n    if (!authUser?.user?.id) {\r\n      console.error('Auth user created but no ID returned:', authUser)\r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: 'Auth user created but no ID returned'\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 500,\r\n        }\r\n      )\r\n    }\r\n\r\n    console.log('✅ Auth user created successfully:', authUser.user.id)\r\n\r\n    // Log successful user creation\r\n    await tempSupabase\r\n      .from('security_audit_log')\r\n      .insert({\r\n        event_type: 'user_created_successfully',\r\n        user_id: userData.user.id,\r\n        event_details: {\r\n          created_user_email: email,\r\n          created_user_id: authUser.user.id,\r\n          dealership_id: dealershipId,\r\n          user_type: userType,\r\n          role: role\r\n        },\r\n        ip_address: req.headers.get('x-forwarded-for') || 'unknown',\r\n        user_agent: req.headers.get('user-agent') || 'unknown',\r\n        success: true\r\n      })\r\n\r\n    // Step 2: Create/update profile (this should happen automatically via trigger, but we'll ensure it)\r\n    console.log('=== STEP 2: Creating Profile ===')\r\n    const profilePayload = {\r\n      id: authUser.user.id,\r\n      email: email,\r\n      first_name: firstName,\r\n      last_name: lastName,\r\n      user_type: userType,\r\n      role: role,\r\n      dealership_id: dealershipId,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    }\r\n    console.log('Profile payload:', JSON.stringify(profilePayload, null, 2))\r\n\r\n    const { data: profileData, error: profileError } = await supabase\r\n      .from('profiles')\r\n      .upsert(profilePayload)\r\n      .select()\r\n\r\n    if (profileError) {\r\n      console.error('=== PROFILE ERROR ===')\r\n      console.error('Profile error details:', JSON.stringify(profileError, null, 2))\r\n      console.error('Profile error message:', profileError.message)\r\n      console.error('Profile error code:', profileError.code)\r\n      console.error('Profile error hint:', profileError.hint)\r\n      // Don't throw here, profile might be created by trigger\r\n      console.log('⚠️ Profile creation failed, but continuing (might be created by trigger)')\r\n    } else {\r\n      console.log('✅ Profile created/updated successfully:', profileData)\r\n    }\r\n    \r\n    console.log('Profile created successfully:', profileData?.[0]?.id)\r\n\r\n    // Step 3: Create dealer membership\r\n    console.log('=== STEP 3: Creating Dealer Membership ===')\r\n    const membershipPayload = {\r\n      user_id: authUser.user.id,\r\n      dealer_id: dealershipId,\r\n      is_active: true,\r\n      joined_at: new Date().toISOString(),\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    }\r\n    console.log('Membership payload:', JSON.stringify(membershipPayload, null, 2))\r\n\r\n    const { data: membershipData, error: membershipError } = await supabase\r\n      .from('dealer_memberships')\r\n      .insert(membershipPayload)\r\n      .select()\r\n\r\n    if (membershipError) {\r\n      console.error('=== MEMBERSHIP ERROR ===')\r\n      console.error('Membership error details:', JSON.stringify(membershipError, null, 2))\r\n      console.error('Membership error message:', membershipError.message)\r\n      console.error('Membership error code:', membershipError.code)\r\n      console.error('Membership error hint:', membershipError.hint)\r\n      \r\n      // Try to clean up the auth user if membership fails\r\n      try {\r\n        console.log('Attempting to clean up auth user due to membership failure')\r\n        await supabase.auth.admin.deleteUser(authUser.user.id)\r\n        console.log('Auth user cleanup successful')\r\n      } catch (cleanupError) {\r\n        console.error('Auth user cleanup failed:', cleanupError)\r\n      }\r\n      \r\n      return new Response(\r\n        JSON.stringify({\r\n          success: false,\r\n          error: `Membership creation failed: ${membershipError.message}`,\r\n          details: membershipError\r\n        }),\r\n        {\r\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n          status: 400,\r\n        }\r\n      )\r\n    }\r\n\r\n    console.log('✅ Membership created successfully:', membershipData)\r\n\r\n    // Log successful user creation for security audit\r\n    try {\r\n      await supabase\r\n        .from('security_audit_log')\r\n        .insert({\r\n          event_type: 'user_created_successfully',\r\n          user_id: userData.user.id,\r\n          event_details: {\r\n            created_user_id: authUser.user.id,\r\n            created_user_email: email,\r\n            dealership_id: dealershipId,\r\n            user_type: userType,\r\n            role: role\r\n          },\r\n          ip_address: req.headers.get('x-forwarded-for') || 'unknown',\r\n          user_agent: req.headers.get('user-agent') || 'unknown',\r\n          success: true\r\n        })\r\n      console.log('✅ Security audit logged')\r\n    } catch (auditError) {\r\n      console.warn('⚠️ Failed to log security audit:', auditError)\r\n    }\r\n    \r\n    // Step 3.1: Handle role assignment through dealer groups (optional for now)\r\n    console.log('=== STEP 3.1: Role Assignment (Future Enhancement) ===')\r\n    console.log(`Note: Role \"${role}\" will need to be assigned through dealer groups system`)\r\n    console.log('For now, user is created with basic membership - role assignment can be done via admin panel')\r\n\r\n    // Step 4: Send welcome email (optional)\r\n    console.log('=== STEP 4: Sending Welcome Email ===')\r\n    if (sendWelcomeEmail) {\r\n      try {\r\n        console.log('Attempting to send welcome email to:', email)\r\n        const emailPayload = {\r\n          email: email,\r\n          firstName: firstName,\r\n          dealershipName: dealershipName || 'Premium Auto'\r\n        }\r\n        console.log('Email payload:', JSON.stringify(emailPayload, null, 2))\r\n        \r\n        const { data: emailData, error: emailError } = await supabase.functions.invoke('send-welcome-email', {\r\n          body: emailPayload\r\n        })\r\n        \r\n        if (emailError) {\r\n          console.warn('⚠️ Welcome email failed:', JSON.stringify(emailError, null, 2))\r\n          // Don't fail the whole process\r\n        } else {\r\n          console.log('✅ Welcome email sent successfully:', emailData)\r\n        }\r\n      } catch (emailError) {\r\n        console.warn('⚠️ Welcome email service unavailable:', emailError)\r\n      }\r\n    } else {\r\n      console.log('⏭️ Skipping welcome email (sendWelcomeEmail = false)')\r\n    }\r\n\r\n    console.log('=== USER CREATION COMPLETED SUCCESSFULLY ===')\r\n    console.log('Final user details:', {\r\n      user_id: authUser.user.id,\r\n      email: email,\r\n      dealership_id: dealershipId,\r\n      role: role,\r\n      userType: userType\r\n    })\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        user_id: authUser.user.id,\r\n        email: email,\r\n        dealership_id: dealershipId,\r\n        message: 'User created successfully',\r\n        timestamp: new Date().toISOString()\r\n      }),\r\n      {\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n        status: 200,\r\n      }\r\n    )\r\n\r\n  } catch (error) {\r\n    console.error('=== UNEXPECTED ERROR ===')\r\n    console.error('Error type:', typeof error)\r\n    console.error('Error name:', error?.name)\r\n    console.error('Error message:', error?.message)\r\n    console.error('Error stack:', error?.stack)\r\n    console.error('Full error object:', JSON.stringify(error, Object.getOwnPropertyNames(error), 2))\r\n    \r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: error?.message || 'Unexpected error occurred',\r\n        error_type: error?.name || 'UnknownError',\r\n        timestamp: new Date().toISOString()\r\n      }),\r\n      {\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n        status: 500,\r\n      }\r\n    )\r\n  }\r\n})","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\create-default-workflows\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":245,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7388,7391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7388,7391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\r\nimport { corsHeaders } from \"../_shared/cors.ts\";\r\n\r\nconst supabaseUrl = Deno.env.get('SUPABASE_URL')!;\r\nconst supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\ninterface CreateWorkflowsRequest {\r\n  dealerId: number;\r\n}\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const { dealerId }: CreateWorkflowsRequest = await req.json();\r\n\r\n    // Get authenticated user\r\n    const authHeader = req.headers.get('Authorization');\r\n    if (!authHeader) {\r\n      throw new Error('No authorization header');\r\n    }\r\n\r\n    const { data: { user }, error: authError } = await supabase.auth.getUser(\r\n      authHeader.replace('Bearer ', '')\r\n    );\r\n\r\n    if (authError || !user) {\r\n      throw new Error('Authentication failed');\r\n    }\r\n\r\n    // Define default workflows\r\n    const defaultWorkflows = [\r\n      // Order Status Changed Workflow\r\n      {\r\n        name: 'Order Status Changed Notification',\r\n        description: 'Notify all followers when an order status changes',\r\n        entity_type: 'order',\r\n        trigger_event: 'status_changed',\r\n        conditions: {},\r\n        actions: [\r\n          {\r\n            type: 'in_app',\r\n            channel: 'app',\r\n            title: 'Order Status Updated',\r\n            message: 'Order {{order_number}} status changed to {{new_status}}',\r\n            priority: 'normal',\r\n            data: {\r\n              action_url: '/orders/{{order_id}}'\r\n            }\r\n          },\r\n          {\r\n            type: 'sms',\r\n            channel: 'sms',\r\n            title: 'Order Update',\r\n            message: 'Hi {{customer_name}}! Your order {{order_number}} status has been updated to {{new_status}}.',\r\n            priority: 'normal',\r\n            phone_field: 'customer_phone',\r\n            data: {}\r\n          }\r\n        ],\r\n        priority: 1,\r\n        dealer_id: dealerId,\r\n        created_by: user.id\r\n      },\r\n\r\n      // Order Assignment Workflow\r\n      {\r\n        name: 'Order Assignment Notification',\r\n        description: 'Notify when an order is assigned to a user or group',\r\n        entity_type: 'order',\r\n        trigger_event: 'assigned',\r\n        conditions: {},\r\n        actions: [\r\n          {\r\n            type: 'in_app',\r\n            channel: 'app',\r\n            title: 'Order Assigned',\r\n            message: 'Order {{order_number}} has been assigned to you',\r\n            priority: 'high',\r\n            data: {\r\n              action_url: '/orders/{{order_id}}'\r\n            }\r\n          }\r\n        ],\r\n        priority: 2,\r\n        dealer_id: dealerId,\r\n        created_by: user.id\r\n      },\r\n\r\n      // Order Comment Added Workflow\r\n      {\r\n        name: 'Order Comment Notification',\r\n        description: 'Notify followers when a comment is added to an order',\r\n        entity_type: 'order',\r\n        trigger_event: 'comment_added',\r\n        conditions: {},\r\n        actions: [\r\n          {\r\n            type: 'in_app',\r\n            channel: 'app',\r\n            title: 'New Comment',\r\n            message: '{{commenter_name}} added a comment to order {{order_number}}',\r\n            priority: 'normal',\r\n            data: {\r\n              action_url: '/orders/{{order_id}}#comments'\r\n            }\r\n          }\r\n        ],\r\n        priority: 3,\r\n        dealer_id: dealerId,\r\n        created_by: user.id\r\n      },\r\n\r\n      // Order Due Soon Workflow\r\n      {\r\n        name: 'Order Due Soon Alert',\r\n        description: 'Alert when an order is approaching its due date',\r\n        entity_type: 'order',\r\n        trigger_event: 'due_soon',\r\n        conditions: {\r\n          hours_before_due: 2\r\n        },\r\n        actions: [\r\n          {\r\n            type: 'in_app',\r\n            channel: 'app',\r\n            title: 'Order Due Soon',\r\n            message: 'Order {{order_number}} is due in {{hours_remaining}} hours',\r\n            priority: 'high',\r\n            data: {\r\n              action_url: '/orders/{{order_id}}'\r\n            }\r\n          }\r\n        ],\r\n        priority: 4,\r\n        dealer_id: dealerId,\r\n        created_by: user.id\r\n      },\r\n\r\n      // SMS Received Workflow\r\n      {\r\n        name: 'Customer SMS Received',\r\n        description: 'Notify when a customer sends an SMS about an order',\r\n        entity_type: 'order',\r\n        trigger_event: 'sms_received',\r\n        conditions: {},\r\n        actions: [\r\n          {\r\n            type: 'in_app',\r\n            channel: 'app',\r\n            title: 'Customer Message',\r\n            message: 'New SMS from {{customer_name}} about order {{order_number}}',\r\n            priority: 'high',\r\n            data: {\r\n              action_url: '/orders/{{order_id}}/sms'\r\n            }\r\n          }\r\n        ],\r\n        priority: 5,\r\n        dealer_id: dealerId,\r\n        created_by: user.id\r\n      },\r\n\r\n      // Vehicle Workflow\r\n      {\r\n        name: 'Vehicle Status Changed',\r\n        description: 'Notify when vehicle status changes in recon',\r\n        entity_type: 'vehicle',\r\n        trigger_event: 'status_changed',\r\n        conditions: {},\r\n        actions: [\r\n          {\r\n            type: 'in_app',\r\n            channel: 'app',\r\n            title: 'Vehicle Status Updated',\r\n            message: 'Vehicle {{vin}} status changed to {{new_status}}',\r\n            priority: 'normal',\r\n            data: {\r\n              action_url: '/recon/{{vehicle_id}}'\r\n            }\r\n          }\r\n        ],\r\n        priority: 1,\r\n        dealer_id: dealerId,\r\n        created_by: user.id\r\n      },\r\n\r\n      // After Hours Auto-Response Workflow\r\n      {\r\n        name: 'After Hours SMS Auto-Response',\r\n        description: 'Automatically respond to SMS outside business hours',\r\n        entity_type: 'sms',\r\n        trigger_event: 'received_after_hours',\r\n        conditions: {},\r\n        actions: [\r\n          {\r\n            type: 'sms',\r\n            channel: 'sms',\r\n            title: 'Auto Response',\r\n            message: 'Thank you for your message! We\\'re currently closed but will respond during business hours (Mon-Fri 8AM-6PM, Sat 8AM-5PM). For urgent matters, please call us directly.',\r\n            priority: 'low',\r\n            data: {\r\n              is_auto_response: true\r\n            }\r\n          }\r\n        ],\r\n        priority: 10,\r\n        dealer_id: dealerId,\r\n        created_by: user.id\r\n      }\r\n    ];\r\n\r\n    // Insert workflows\r\n    const { data: workflows, error: workflowError } = await supabase\r\n      .from('notification_workflows')\r\n      .insert(defaultWorkflows)\r\n      .select();\r\n\r\n    if (workflowError) {\r\n      throw new Error(`Failed to create workflows: ${workflowError.message}`);\r\n    }\r\n\r\n    console.log(`Created ${workflows?.length || 0} default workflows for dealer ${dealerId}`);\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        workflowsCreated: workflows?.length || 0,\r\n        workflows: workflows?.map(w => ({ id: w.id, name: w.name })) || []\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      }\r\n    );\r\n\r\n  } catch (error: any) {\r\n    console.error('Create workflows error:', error);\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: error.message\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nserve(handler);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\decode-vin\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\enhanced-notification-engine\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[452,455],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[452,455],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":88,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2556,2559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2556,2559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":99,"column":129,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":132,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2953,2956],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2953,2956],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":174,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5666,5669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5666,5669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":196,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6318,6321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6318,6321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":197,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6340,6343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6340,6343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":198,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":198,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6358,6361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6358,6361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7705,7708],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7705,7708],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7993,7996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7993,7996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":254,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8012,8015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8012,8015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":279,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":279,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8706,8709],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8706,8709],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":285,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8860,8863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8860,8863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":285,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8879,8882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8879,8882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":311,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9620,9623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9620,9623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":317,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9787,9790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9787,9790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":317,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9806,9809],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9806,9809],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10237,10240],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10237,10240],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":334,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10412,10415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10412,10415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":356,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11187,11190],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11187,11190],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":362,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":362,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11358,11361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11358,11361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":382,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":382,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11887,11890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11887,11890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":401,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":401,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12376,12379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12376,12379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":421,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":421,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12815,12818],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12815,12818],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":421,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":421,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12834,12837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12834,12837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":435,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13174,13177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13174,13177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":435,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13217,13220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13217,13220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":435,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":435,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13224,13227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13224,13227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":444,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":444,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13492,13495],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13492,13495],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":455,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":455,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13807,13810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13807,13810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":485,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":485,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14550,14553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14550,14553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\r\nimport { corsHeaders } from \"../_shared/cors.ts\";\r\n\r\ninterface NotificationQueueItem {\r\n  id: string;\r\n  batch_id?: string;\r\n  user_id: string;\r\n  dealer_id: number;\r\n  notification_type: string;\r\n  entity_type?: string;\r\n  entity_id?: string;\r\n  channels: string[];\r\n  notification_data: Record<string, any>;\r\n  template_id?: string;\r\n  priority: string;\r\n  scheduled_for: string;\r\n  status: string;\r\n  attempts: number;\r\n  max_attempts: number;\r\n}\r\n\r\nconst supabase = createClient(\r\n  Deno.env.get('SUPABASE_URL') ?? '',\r\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\r\n);\r\n\r\nserve(async (req: Request) => {\r\n  // Handle CORS preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const { notificationId, batchId } = await req.json();\r\n    console.log('Processing notification:', { notificationId, batchId });\r\n\r\n    // Get notification(s) to process\r\n    let query = supabase\r\n      .from('notification_queue')\r\n      .select('*')\r\n      .eq('status', 'queued')\r\n      .lte('scheduled_for', new Date().toISOString());\r\n\r\n    if (notificationId) {\r\n      query = query.eq('id', notificationId);\r\n    } else if (batchId) {\r\n      query = query.eq('batch_id', batchId);\r\n    } else {\r\n      // Process up to 50 pending notifications\r\n      query = query.limit(50);\r\n    }\r\n\r\n    const { data: notifications, error: fetchError } = await query;\r\n\r\n    if (fetchError) {\r\n      throw new Error(`Failed to fetch notifications: ${fetchError.message}`);\r\n    }\r\n\r\n    if (!notifications || notifications.length === 0) {\r\n      return new Response(JSON.stringify({ \r\n        success: true, \r\n        message: 'No notifications to process' \r\n      }), {\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    console.log(`Processing ${notifications.length} notifications`);\r\n\r\n    const results = await Promise.all(\r\n      notifications.map(notification => processNotification(notification))\r\n    );\r\n\r\n    const successful = results.filter(r => r.success).length;\r\n    const failed = results.filter(r => !r.success).length;\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      processed: notifications.length,\r\n      successful,\r\n      failed,\r\n      results\r\n    }), {\r\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('Enhanced notification engine error:', error);\r\n    return new Response(JSON.stringify({ \r\n      error: error.message \r\n    }), {\r\n      status: 500,\r\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});\r\n\r\nasync function processNotification(notification: NotificationQueueItem): Promise<{ success: boolean; error?: string; channels?: any[] }> {\r\n  try {\r\n    console.log(`Processing notification ${notification.id} for user ${notification.user_id}`);\r\n\r\n    // Mark as processing\r\n    await supabase\r\n      .from('notification_queue')\r\n      .update({ \r\n        status: 'processing', \r\n        last_attempt_at: new Date().toISOString(),\r\n        attempts: notification.attempts + 1\r\n      })\r\n      .eq('id', notification.id);\r\n\r\n    // Get user preferences and dealer config\r\n    const [userPrefs, dealerConfig, template] = await Promise.all([\r\n      getUserPreferences(notification.user_id, notification.dealer_id),\r\n      getDealerConfig(notification.dealer_id),\r\n      notification.template_id ? getTemplate(notification.template_id) : null\r\n    ]);\r\n\r\n    // Process each channel\r\n    const channelResults = await Promise.all(\r\n      notification.channels.map(channel => \r\n        processChannel(channel, notification, userPrefs, dealerConfig, template)\r\n      )\r\n    );\r\n\r\n    const allSuccessful = channelResults.every(r => r.success);\r\n    const hasFailures = channelResults.some(r => !r.success);\r\n\r\n    // Update notification status\r\n    const finalStatus = allSuccessful ? 'completed' : \r\n                       hasFailures && notification.attempts >= notification.max_attempts ? 'failed' : \r\n                       'queued'; // Retry later\r\n\r\n    await supabase\r\n      .from('notification_queue')\r\n      .update({ \r\n        status: finalStatus,\r\n        processed_at: allSuccessful ? new Date().toISOString() : null,\r\n        error_message: hasFailures ? channelResults.filter(r => !r.success).map(r => r.error).join('; ') : null\r\n      })\r\n      .eq('id', notification.id);\r\n\r\n    // Track analytics for each channel\r\n    await Promise.all(\r\n      channelResults.map(result => \r\n        trackAnalytics({\r\n          dealer_id: notification.dealer_id,\r\n          user_id: notification.user_id,\r\n          notification_id: notification.id,\r\n          batch_id: notification.batch_id,\r\n          channel: result.channel,\r\n          event_type: result.success ? 'sent' : 'failed',\r\n          notification_type: notification.notification_type,\r\n          entity_type: notification.entity_type,\r\n          entity_id: notification.entity_id,\r\n          template_id: notification.template_id,\r\n          response_time_ms: result.responseTime,\r\n          metadata: { \r\n            success: result.success,\r\n            error: result.error,\r\n            priority: notification.priority\r\n          }\r\n        })\r\n      )\r\n    );\r\n\r\n    return {\r\n      success: allSuccessful,\r\n      error: hasFailures ? channelResults.filter(r => !r.success).map(r => r.error).join('; ') : undefined,\r\n      channels: channelResults\r\n    };\r\n\r\n  } catch (error: any) {\r\n    console.error(`Error processing notification ${notification.id}:`, error);\r\n\r\n    // Mark as failed if max attempts reached\r\n    const finalStatus = notification.attempts >= notification.max_attempts ? 'failed' : 'queued';\r\n    \r\n    await supabase\r\n      .from('notification_queue')\r\n      .update({ \r\n        status: finalStatus,\r\n        error_message: error.message,\r\n        last_attempt_at: new Date().toISOString()\r\n      })\r\n      .eq('id', notification.id);\r\n\r\n    return { success: false, error: error.message };\r\n  }\r\n}\r\n\r\nasync function processChannel(\r\n  channel: string, \r\n  notification: NotificationQueueItem,\r\n  userPrefs: any,\r\n  dealerConfig: any,\r\n  template: any\r\n): Promise<{ success: boolean; channel: string; error?: string; responseTime?: number }> {\r\n  const startTime = Date.now();\r\n\r\n  try {\r\n    // Check if channel is enabled\r\n    if (!isChannelEnabled(channel, userPrefs, dealerConfig)) {\r\n      return { \r\n        success: false, \r\n        channel, \r\n        error: 'Channel disabled in preferences or config',\r\n        responseTime: Date.now() - startTime\r\n      };\r\n    }\r\n\r\n    // Get content from template or use notification data\r\n    const content = template ? \r\n      renderTemplate(template, channel, notification.notification_data) : \r\n      notification.notification_data;\r\n\r\n    let result: boolean = false;\r\n\r\n    switch (channel) {\r\n      case 'sms':\r\n        result = await sendSMS(notification, content, dealerConfig);\r\n        break;\r\n      case 'email':\r\n        result = await sendEmail(notification, content, dealerConfig);\r\n        break;\r\n      case 'push':\r\n        result = await sendPushNotification(notification, content, dealerConfig);\r\n        break;\r\n      case 'in_app':\r\n        result = await sendInAppNotification(notification, content);\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown channel: ${channel}`);\r\n    }\r\n\r\n    return {\r\n      success: result,\r\n      channel,\r\n      responseTime: Date.now() - startTime\r\n    };\r\n\r\n  } catch (error: any) {\r\n    console.error(`Error processing channel ${channel}:`, error);\r\n    return {\r\n      success: false,\r\n      channel,\r\n      error: error.message,\r\n      responseTime: Date.now() - startTime\r\n    };\r\n  }\r\n}\r\n\r\nasync function sendSMS(notification: NotificationQueueItem, content: any, dealerConfig: any): Promise<boolean> {\r\n  try {\r\n    // Get user's phone number\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('phone')\r\n      .eq('id', notification.user_id)\r\n      .single();\r\n\r\n    if (!profile?.phone) {\r\n      console.log('No phone number for SMS notification');\r\n      return false;\r\n    }\r\n\r\n    // Call existing SMS function\r\n    const { error } = await supabase.functions.invoke('send-sms', {\r\n      body: {\r\n        to: profile.phone,\r\n        message: content.content || content.message || JSON.stringify(content),\r\n        dealerId: notification.dealer_id\r\n      }\r\n    });\r\n\r\n    if (error) throw error;\r\n    return true;\r\n  } catch (error: any) {\r\n    console.error('SMS send error:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function sendEmail(notification: NotificationQueueItem, content: any, dealerConfig: any): Promise<boolean> {\r\n  try {\r\n    // Get user's email\r\n    const { data: profile } = await supabase\r\n      .from('profiles')\r\n      .select('email')\r\n      .eq('id', notification.user_id)\r\n      .single();\r\n\r\n    if (!profile?.email) {\r\n      console.log('No email for email notification');\r\n      return false;\r\n    }\r\n\r\n    // Call existing email function  \r\n    const { error } = await supabase.functions.invoke('send-order-email', {\r\n      body: {\r\n        to: profile.email,\r\n        subject: content.subject || 'Notification',\r\n        html: content.html || content.content || JSON.stringify(content),\r\n        dealerId: notification.dealer_id\r\n      }\r\n    });\r\n\r\n    if (error) throw error;\r\n    return true;\r\n  } catch (error: any) {\r\n    console.error('Email send error:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function sendPushNotification(notification: NotificationQueueItem, content: any, dealerConfig: any): Promise<boolean> {\r\n  try {\r\n    // This would integrate with Firebase Cloud Messaging or similar\r\n    // For now, we'll just log it and return success\r\n    console.log('Push notification would be sent:', {\r\n      userId: notification.user_id,\r\n      title: content.title,\r\n      body: content.body || content.content,\r\n      data: content.data || notification.notification_data\r\n    });\r\n    return true;\r\n  } catch (error: any) {\r\n    console.error('Push notification error:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function sendInAppNotification(notification: NotificationQueueItem, content: any): Promise<boolean> {\r\n  try {\r\n    // Insert into existing notification_log table\r\n    const { error } = await supabase\r\n      .from('notification_log')\r\n      .insert({\r\n        user_id: notification.user_id,\r\n        dealer_id: notification.dealer_id,\r\n        title: content.title || 'Notification',\r\n        message: content.content || content.message || JSON.stringify(content),\r\n        type: notification.notification_type,\r\n        entity_type: notification.entity_type,\r\n        entity_id: notification.entity_id,\r\n        priority: notification.priority,\r\n        metadata: {\r\n          source: 'enhanced_engine',\r\n          original_data: notification.notification_data\r\n        }\r\n      });\r\n\r\n    if (error) throw error;\r\n    return true;\r\n  } catch (error: any) {\r\n    console.error('In-app notification error:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\nasync function getUserPreferences(userId: string, dealerId: number): Promise<any> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('user_notification_preferences')\r\n      .select('*')\r\n      .eq('user_id', userId)\r\n      .eq('dealer_id', dealerId)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') { // Not found is ok\r\n      console.error('Get user preferences error:', error);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Get user preferences error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function getDealerConfig(dealerId: number): Promise<any> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('dealer_notification_configs')\r\n      .select('*')\r\n      .eq('dealer_id', dealerId)\r\n      .single();\r\n\r\n    if (error && error.code !== 'PGRST116') { // Not found is ok\r\n      console.error('Get dealer config error:', error);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Get dealer config error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nasync function getTemplate(templateId: string): Promise<any> {\r\n  try {\r\n    const { data, error } = await supabase\r\n      .from('notification_templates')\r\n      .select('*')\r\n      .eq('id', templateId)\r\n      .single();\r\n\r\n    if (error) {\r\n      console.error('Get template error:', error);\r\n      return null;\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Get template error:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction isChannelEnabled(channel: string, userPrefs: any, dealerConfig: any): boolean {\r\n  // Check dealer config\r\n  if (dealerConfig?.channels && !dealerConfig.channels[channel]) {\r\n    return false;\r\n  }\r\n\r\n  // Check user preferences\r\n  if (userPrefs?.channel_preferences && !userPrefs.channel_preferences[channel]?.enabled) {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction renderTemplate(template: any, channel: string, data: Record<string, any>): any {\r\n  try {\r\n    if (!template.channels || !template.channels[channel]) {\r\n      return data;\r\n    }\r\n\r\n    const channelTemplate = template.channels[channel];\r\n    \r\n    // Simple template interpolation\r\n    const interpolate = (text: string, data: Record<string, any>): string => {\r\n      return text.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\r\n        return data[key] || match;\r\n      });\r\n    };\r\n\r\n    if (typeof channelTemplate === 'string') {\r\n      return interpolate(channelTemplate, data);\r\n    }\r\n\r\n    if (typeof channelTemplate === 'object') {\r\n      const result: any = {};\r\n      for (const [key, value] of Object.entries(channelTemplate)) {\r\n        if (typeof value === 'string') {\r\n          result[key] = interpolate(value, data);\r\n        } else {\r\n          result[key] = value;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n\r\n    return channelTemplate;\r\n  } catch (error) {\r\n    console.error('Template render error:', error);\r\n    return data;\r\n  }\r\n}\r\n\r\nasync function trackAnalytics(event: {\r\n  dealer_id: number;\r\n  user_id?: string;\r\n  notification_id?: string;\r\n  batch_id?: string;\r\n  channel: string;\r\n  event_type: string;\r\n  notification_type: string;\r\n  entity_type?: string;\r\n  entity_id?: string;\r\n  template_id?: string;\r\n  response_time_ms?: number;\r\n  metadata?: Record<string, any>;\r\n}): Promise<void> {\r\n  try {\r\n    await supabase\r\n      .from('notification_analytics')\r\n      .insert(event);\r\n  } catch (error) {\r\n    console.error('Track analytics error:', error);\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\enhanced-sms\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":158,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4797,4800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4797,4800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6463,6466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6463,6466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\r\nimport { corsHeaders } from \"../_shared/cors.ts\";\r\n\r\nconst supabaseUrl = Deno.env.get('SUPABASE_URL')!;\r\nconst supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\ninterface SMSRequest {\r\n  to: string;\r\n  message: string;\r\n  entityType?: string;\r\n  entityId?: string;\r\n  dealerId?: number;\r\n  conversationId?: string;\r\n  notificationId?: string;\r\n  isAutoResponse?: boolean;\r\n  mediaUrls?: string[];\r\n}\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const twilioAccountSid = Deno.env.get('TWILIO_ACCOUNT_SID');\r\n    const twilioAuthToken = Deno.env.get('TWILIO_AUTH_TOKEN');\r\n    const twilioPhoneNumber = Deno.env.get('TWILIO_PHONE_NUMBER');\r\n\r\n    if (!twilioAccountSid || !twilioAuthToken || !twilioPhoneNumber) {\r\n      throw new Error('Twilio credentials not configured');\r\n    }\r\n\r\n    const {\r\n      to,\r\n      message,\r\n      entityType,\r\n      entityId,\r\n      dealerId,\r\n      conversationId,\r\n      notificationId,\r\n      isAutoResponse = false,\r\n      mediaUrls = []\r\n    }: SMSRequest = await req.json();\r\n\r\n    // Clean and format phone number\r\n    const formattedPhone = formatPhoneNumber(to);\r\n    \r\n    // Create or find conversation if not provided\r\n    let finalConversationId = conversationId;\r\n    \r\n    if (!finalConversationId && dealerId) {\r\n      const conversation = await findOrCreateSMSConversation({\r\n        phoneNumber: to,\r\n        dealerId,\r\n        entityType,\r\n        entityId\r\n      });\r\n      finalConversationId = conversation.id;\r\n    }\r\n\r\n    // Prepare Twilio message data\r\n    const messageData = new URLSearchParams({\r\n      To: formattedPhone,\r\n      From: twilioPhoneNumber,\r\n      Body: message\r\n    });\r\n\r\n    // Add media URLs if provided\r\n    mediaUrls.forEach((url, index) => {\r\n      messageData.append('MediaUrl', url);\r\n    });\r\n\r\n    // Send SMS via Twilio\r\n    const twilioUrl = `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`;\r\n    \r\n    const twilioResponse = await fetch(twilioUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Authorization': `Basic ${btoa(`${twilioAccountSid}:${twilioAuthToken}`)}`,\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n      body: messageData.toString(),\r\n    });\r\n\r\n    if (!twilioResponse.ok) {\r\n      const errorData = await twilioResponse.text();\r\n      throw new Error(`Twilio API error: ${twilioResponse.status} - ${errorData}`);\r\n    }\r\n\r\n    const twilioResult = await twilioResponse.json();\r\n    console.log(`SMS sent successfully: ${twilioResult.sid}`);\r\n\r\n    // Create SMS message record if we have a conversation\r\n    if (finalConversationId) {\r\n      const { error: messageError } = await supabase\r\n        .from('sms_messages')\r\n        .insert({\r\n          conversation_id: finalConversationId,\r\n          twilio_sid: twilioResult.sid,\r\n          direction: 'outbound',\r\n          message_body: message,\r\n          media_urls: mediaUrls,\r\n          from_number: twilioPhoneNumber.replace('+1', ''),\r\n          to_number: formattedPhone,\r\n          sent_by: isAutoResponse ? null : undefined, // Will use auth.uid() if not auto-response\r\n          status: twilioResult.status || 'sent'\r\n        });\r\n\r\n      if (messageError) {\r\n        console.error('Error creating message record:', messageError);\r\n      } else {\r\n        // Update conversation\r\n        await supabase\r\n          .from('sms_conversations')\r\n          .update({\r\n            last_message_at: new Date().toISOString(),\r\n            message_count: supabase.sql`message_count + 1`\r\n          })\r\n          .eq('id', finalConversationId);\r\n      }\r\n    }\r\n\r\n    // Update notification log if provided\r\n    if (notificationId) {\r\n      await supabase\r\n        .from('notification_log')\r\n        .update({\r\n          sms_sid: twilioResult.sid,\r\n          sms_status: twilioResult.status || 'sent',\r\n          phone_number: formattedPhone,\r\n          status: 'sent',\r\n          sent_at: new Date().toISOString()\r\n        })\r\n        .eq('id', notificationId);\r\n    }\r\n\r\n    // Send success response\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        messageSid: twilioResult.sid,\r\n        status: twilioResult.status,\r\n        to: formattedPhone,\r\n        conversationId: finalConversationId\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders,\r\n        },\r\n      }\r\n    );\r\n\r\n  } catch (error: any) {\r\n    console.error('Enhanced SMS error:', error);\r\n    \r\n    // Update notification as failed if provided\r\n    if (req.body) {\r\n      try {\r\n        const body = await req.json();\r\n        if (body.notificationId) {\r\n          await supabase\r\n            .from('notification_log')\r\n            .update({\r\n              status: 'failed',\r\n              failed_reason: `SMS Error: ${error.message}`\r\n            })\r\n            .eq('id', body.notificationId);\r\n        }\r\n      } catch (parseError) {\r\n        console.error('Error parsing body for failure update:', parseError);\r\n      }\r\n    }\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: error.message\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        },\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nasync function findOrCreateSMSConversation({\r\n  phoneNumber,\r\n  dealerId,\r\n  entityType,\r\n  entityId\r\n}: {\r\n  phoneNumber: string;\r\n  dealerId: number;\r\n  entityType?: string;\r\n  entityId?: string;\r\n}) {\r\n  const cleanPhone = phoneNumber.replace(/^\\+?1?/, '').replace(/\\D/g, '');\r\n  \r\n  // Try to find existing conversation\r\n  let query = supabase\r\n    .from('sms_conversations')\r\n    .select('*')\r\n    .eq('dealer_id', dealerId)\r\n    .eq('phone_number', cleanPhone);\r\n\r\n  if (entityType && entityId) {\r\n    query = query.eq('entity_type', entityType).eq('entity_id', entityId);\r\n  }\r\n\r\n  const { data: existingConversation } = await query.single();\r\n  \r\n  if (existingConversation) {\r\n    return existingConversation;\r\n  }\r\n\r\n  // Create new conversation\r\n  const conversationData: any = {\r\n    dealer_id: dealerId,\r\n    phone_number: cleanPhone,\r\n    status: 'active',\r\n    message_count: 0\r\n  };\r\n\r\n  if (entityType && entityId) {\r\n    conversationData.entity_type = entityType;\r\n    conversationData.entity_id = entityId;\r\n    \r\n    // Get entity details for customer name\r\n    if (entityType === 'order') {\r\n      const { data: order } = await supabase\r\n        .from('orders')\r\n        .select('customer_name')\r\n        .eq('id', entityId)\r\n        .single();\r\n      \r\n      if (order) {\r\n        conversationData.customer_name = order.customer_name;\r\n      }\r\n    }\r\n  }\r\n\r\n  const { data: newConversation, error } = await supabase\r\n    .from('sms_conversations')\r\n    .insert(conversationData)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new Error(`Failed to create SMS conversation: ${error.message}`);\r\n  }\r\n\r\n  return newConversation;\r\n}\r\n\r\nfunction formatPhoneNumber(phone: string): string {\r\n  // Remove all non-digits\r\n  const cleaned = phone.replace(/\\D/g, '');\r\n  \r\n  // Add +1 if it's a US number (10 digits)\r\n  if (cleaned.length === 10) {\r\n    return `+1${cleaned}`;\r\n  }\r\n  \r\n  // If it already has country code, ensure it starts with +\r\n  if (cleaned.length === 11 && cleaned.startsWith('1')) {\r\n    return `+${cleaned}`;\r\n  }\r\n  \r\n  // Otherwise, assume it's already properly formatted\r\n  return cleaned.startsWith('+') ? phone : `+${cleaned}`;\r\n}\r\n\r\nserve(handler);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\generate-qr-shortlink\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":226,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7537,7540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7537,7540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2';\r\n\r\nconst supabaseUrl = Deno.env.get('SUPABASE_URL')!;\r\nconst supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\r\n\r\n// Use service role client for server operations\r\nexport const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);\r\n\r\nconst corsHeaders = {\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\r\n};\r\n\r\ninterface QRRequest {\r\n  orderId: string;\r\n  orderNumber: string;\r\n  dealerId: number;\r\n  regenerate?: boolean;\r\n}\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  if (req.method === \"OPTIONS\") {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const mdaApiKey = Deno.env.get(\"MDA_TO_API_KEY\");\r\n    if (!mdaApiKey) {\r\n      throw new Error(\"MDA_TO_API_KEY not configured\");\r\n    }\r\n\r\n    const { orderId, orderNumber, dealerId, regenerate = false }: QRRequest = await req.json();\r\n\r\n    console.log(`Processing QR generation for order ${orderNumber} (ID: ${orderId})`);\r\n\r\n    // Check if link already exists and regenerate is false\r\n    if (!regenerate) {\r\n      const { data: existingLink } = await supabase\r\n        .from(\"sales_order_links\")\r\n        .select(\"*\")\r\n        .eq(\"order_id\", orderId)\r\n        .eq(\"is_active\", true)\r\n        .single();\r\n\r\n      if (existingLink) {\r\n        console.log(`Using existing link for order ${orderNumber}`);\r\n        return new Response(\r\n          JSON.stringify({\r\n            success: true,\r\n            linkId: existingLink.id,\r\n            shortLink: existingLink.short_url,\r\n            qrCodeUrl: existingLink.qr_code_url,\r\n            deepLink: existingLink.deep_link,\r\n            slug: existingLink.slug,\r\n            analytics: {\r\n              totalClicks: existingLink.total_clicks,\r\n              uniqueClicks: existingLink.unique_clicks,\r\n              lastClickedAt: existingLink.last_clicked_at,\r\n            }\r\n          }),\r\n          {\r\n            status: 200,\r\n            headers: { \"Content-Type\": \"application/json\", ...corsHeaders },\r\n          }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Generate unique 5-digit slug\r\n    const { data: slugData, error: slugError } = await supabase\r\n      .rpc('generate_unique_slug');\r\n\r\n    if (slugError || !slugData) {\r\n      console.error(\"Error generating slug:\", slugError);\r\n      throw new Error(\"Failed to generate unique slug\");\r\n    }\r\n\r\n    const slug = slugData;\r\n    console.log(`Generated slug: ${slug}`);\r\n\r\n    // Create the deep link to our redirect endpoint\r\n    const appUrl = Deno.env.get(\"PUBLIC_APP_URL\") || \"https://my-detail-area.lovable.app\";\r\n    const redirectUrl = `${appUrl}/s/${slug}`;\r\n    const deepLink = `${appUrl}/sales-orders?order=${orderId}`;\r\n\r\n    // Generate short link using mda.to API (fallback to redirectUrl if unavailable)\r\n    let shortLink = redirectUrl;\r\n    try {\r\n      const shortLinkResponse = await fetch(\"https://mda.to/api/v1/shorten\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Authorization\": `Bearer ${mdaApiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          url: redirectUrl,\r\n          title: `Order ${orderNumber}`,\r\n          description: `View order details for ${orderNumber}`,\r\n          alias: slug.toLowerCase(), // Use our slug as alias\r\n        }),\r\n      });\r\n\r\n      if (shortLinkResponse.ok) {\r\n        const contentType = shortLinkResponse.headers.get(\"content-type\") || \"\";\r\n        if (contentType.includes(\"application/json\")) {\r\n          const shortLinkData = await shortLinkResponse.json();\r\n          shortLink = shortLinkData.shortUrl || redirectUrl;\r\n        } else {\r\n          const errorText = await shortLinkResponse.text();\r\n          console.warn(\"MDA API returned non-JSON response; using fallback:\", errorText);\r\n        }\r\n      } else {\r\n        const errorText = await shortLinkResponse.text();\r\n        console.warn(\"MDA API Error (shorten); using fallback:\", errorText);\r\n      }\r\n    } catch (err) {\r\n      console.warn(\"Shorten API call failed; using fallback redirectUrl:\", err);\r\n    }\r\n\r\n    // Generate QR code (client can also render QR locally; this is optional)\r\n    let qrCodeUrl: string | null = null;\r\n    try {\r\n      const qrResponse = await fetch(\"https://mda.to/api/v1/qr\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Authorization\": `Bearer ${mdaApiKey}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          data: shortLink,\r\n          size: 300,\r\n          format: \"png\",\r\n          errorCorrection: \"M\",\r\n          logo: null, // Could add logo later\r\n        }),\r\n      });\r\n\r\n      if (qrResponse.ok) {\r\n        const qrContentType = qrResponse.headers.get(\"content-type\") || \"\";\r\n        if (qrContentType.includes(\"application/json\")) {\r\n          const qrData = await qrResponse.json();\r\n          qrCodeUrl = qrData.qrUrl || null;\r\n        } else {\r\n          const errorText = await qrResponse.text();\r\n          console.warn(\"QR API returned non-JSON response; skipping hosted QR:\", errorText);\r\n        }\r\n      } else {\r\n        const errorText = await qrResponse.text();\r\n        console.warn(\"QR API Error; skipping hosted QR:\", errorText);\r\n      }\r\n    } catch (err) {\r\n      console.warn(\"QR API call failed; skipping hosted QR:\", err);\r\n    }\r\n\r\n    // Disable existing links if regenerating\r\n    if (regenerate) {\r\n      await supabase\r\n        .from(\"sales_order_links\")\r\n        .update({ is_active: false })\r\n        .eq(\"order_id\", orderId);\r\n    }\r\n\r\n    // Create new sales order link record\r\n    const { data: linkData, error: linkError } = await supabase\r\n      .from(\"sales_order_links\")\r\n      .insert({\r\n        order_id: orderId,\r\n        dealer_id: dealerId,\r\n        slug: slug,\r\n        short_url: shortLink,\r\n        qr_code_url: qrCodeUrl,\r\n        deep_link: deepLink,\r\n        title: `Order ${orderNumber}`,\r\n        description: `View order details for ${orderNumber}`,\r\n        created_by: null, // Could get from auth context\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (linkError) {\r\n      console.error(\"Error creating sales order link:\", linkError);\r\n      throw new Error(\"Failed to create sales order link record\");\r\n    }\r\n\r\n    // Also update the legacy order fields for backward compatibility\r\n    const { error: orderUpdateError } = await supabase\r\n      .from(\"orders\")\r\n      .update({\r\n        short_link: shortLink,\r\n        qr_code_url: qrCodeUrl,\r\n        updated_at: new Date().toISOString(),\r\n      })\r\n      .eq(\"id\", orderId);\r\n\r\n    if (orderUpdateError) {\r\n      console.error(\"Error updating order:\", orderUpdateError);\r\n      // Don't throw error here as the main functionality works\r\n    }\r\n\r\n    console.log(`Successfully generated QR and link for order ${orderNumber} with slug ${slug}`);\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        linkId: linkData.id,\r\n        shortLink,\r\n        qrCodeUrl,\r\n        deepLink,\r\n        slug,\r\n        redirectUrl,\r\n        analytics: {\r\n          totalClicks: 0,\r\n          uniqueClicks: 0,\r\n          lastClickedAt: null,\r\n        }\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          ...corsHeaders,\r\n        },\r\n      }\r\n    );\r\n  } catch (error: any) {\r\n    console.error(\"Error in generate-qr-shortlink function:\", error);\r\n    return new Response(\r\n      JSON.stringify({ \r\n        success: false, \r\n        error: error.message \r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { \r\n          \"Content-Type\": \"application/json\", \r\n          ...corsHeaders \r\n        },\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nserve(handler);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\notification-engine\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":16,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[546,549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[546,549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":118,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3563,3566],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3563,3566],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3947,3950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3947,3950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":136,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3958,3961],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3958,3961],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":152,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4364,4367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4364,4367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5117,5120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5117,5120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":184,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5131,5134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5131,5134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":264,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7319,7322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7319,7322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\r\nimport { corsHeaders } from \"../_shared/cors.ts\";\r\n\r\nconst supabaseUrl = Deno.env.get('SUPABASE_URL')!;\r\nconst supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\ninterface NotificationRequest {\r\n  entityType: string;\r\n  entityId: string;\r\n  dealerId: number;\r\n  triggerEvent: string;\r\n  triggeredBy?: string;\r\n  data?: any;\r\n}\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const { entityType, entityId, dealerId, triggerEvent, triggeredBy, data }: NotificationRequest = await req.json();\r\n\r\n    // Get followers for this entity\r\n    const { data: followers, error: followersError } = await supabase\r\n      .rpc('get_entity_followers', {\r\n        p_entity_type: entityType,\r\n        p_entity_id: entityId,\r\n        p_dealer_id: dealerId\r\n      });\r\n\r\n    if (followersError) {\r\n      throw new Error(`Failed to get followers: ${followersError.message}`);\r\n    }\r\n\r\n    // Get applicable workflows\r\n    const { data: workflows, error: workflowsError } = await supabase\r\n      .from('notification_workflows')\r\n      .select('*')\r\n      .eq('dealer_id', dealerId)\r\n      .eq('entity_type', entityType)\r\n      .eq('trigger_event', triggerEvent)\r\n      .eq('is_active', true)\r\n      .order('priority', { ascending: false });\r\n\r\n    if (workflowsError) {\r\n      throw new Error(`Failed to get workflows: ${workflowsError.message}`);\r\n    }\r\n\r\n    const notifications = [];\r\n\r\n    for (const workflow of workflows || []) {\r\n      // Check conditions\r\n      if (!evaluateConditions(workflow.conditions, data)) {\r\n        continue;\r\n      }\r\n\r\n      // Execute actions for each follower\r\n      for (const follower of followers || []) {\r\n        // Skip if notification level doesn't match\r\n        if (!shouldNotifyFollower(workflow.actions, follower.notification_level)) {\r\n          continue;\r\n        }\r\n\r\n        // Skip if it's the person who triggered the event\r\n        if (triggeredBy && follower.user_id === triggeredBy) {\r\n          continue;\r\n        }\r\n\r\n        for (const action of workflow.actions) {\r\n          const notification = await createNotification({\r\n            userId: follower.user_id,\r\n            dealerId,\r\n            entityType,\r\n            entityId,\r\n            workflowId: workflow.id,\r\n            action,\r\n            data,\r\n            followerNotificationLevel: follower.notification_level\r\n          });\r\n\r\n          if (notification) {\r\n            notifications.push(notification);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Update workflow execution count\r\n      await supabase\r\n        .from('notification_workflows')\r\n        .update({\r\n          execution_count: workflow.execution_count + 1,\r\n          last_executed_at: new Date().toISOString()\r\n        })\r\n        .eq('id', workflow.id);\r\n    }\r\n\r\n    console.log(`Created ${notifications.length} notifications for ${entityType}:${entityId}`);\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        notificationsCreated: notifications.length,\r\n        notifications: notifications.map(n => n.id)\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      }\r\n    );\r\n\r\n  } catch (error: any) {\r\n    console.error('Notification engine error:', error);\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: error.message\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nfunction evaluateConditions(conditions: any, data: any): boolean {\r\n  // Simple condition evaluation\r\n  // In a real implementation, this would be more sophisticated\r\n  if (!conditions || Object.keys(conditions).length === 0) {\r\n    return true;\r\n  }\r\n\r\n  for (const [key, expectedValue] of Object.entries(conditions)) {\r\n    if (data[key] !== expectedValue) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction shouldNotifyFollower(actions: any[], notificationLevel: string): boolean {\r\n  const actionPriorities = actions.map(action => action.priority || 'normal');\r\n  \r\n  switch (notificationLevel) {\r\n    case 'none':\r\n      return false;\r\n    case 'mentions':\r\n      return actionPriorities.some(p => p === 'urgent' || p === 'mention');\r\n    case 'important':\r\n      return actionPriorities.some(p => p === 'high' || p === 'urgent' || p === 'mention');\r\n    case 'all':\r\n    default:\r\n      return true;\r\n  }\r\n}\r\n\r\nasync function createNotification({\r\n  userId,\r\n  dealerId,\r\n  entityType,\r\n  entityId,\r\n  workflowId,\r\n  action,\r\n  data,\r\n  followerNotificationLevel\r\n}: {\r\n  userId: string;\r\n  dealerId: number;\r\n  entityType: string;\r\n  entityId: string;\r\n  workflowId: string;\r\n  action: any;\r\n  data: any;\r\n  followerNotificationLevel: string;\r\n}) {\r\n  const notification = {\r\n    user_id: userId,\r\n    dealer_id: dealerId,\r\n    entity_type: entityType,\r\n    entity_id: entityId,\r\n    workflow_id: workflowId,\r\n    notification_type: action.type || 'in_app',\r\n    channel: action.channel || 'app',\r\n    title: interpolateTemplate(action.title, data),\r\n    message: interpolateTemplate(action.message, data),\r\n    data: {\r\n      ...data,\r\n      action_data: action.data || {},\r\n      notification_level: followerNotificationLevel\r\n    },\r\n    priority: action.priority || 'normal',\r\n    status: 'pending'\r\n  };\r\n\r\n  const { data: createdNotification, error } = await supabase\r\n    .from('notification_log')\r\n    .insert([notification])\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error creating notification:', error);\r\n    return null;\r\n  }\r\n\r\n  // Send SMS if specified\r\n  if (action.type === 'sms' && action.phone_field && data[action.phone_field]) {\r\n    try {\r\n      await supabase.functions.invoke('enhanced-sms', {\r\n        body: {\r\n          to: data[action.phone_field],\r\n          message: notification.message,\r\n          entityType,\r\n          entityId,\r\n          dealerId,\r\n          notificationId: createdNotification.id\r\n        }\r\n      });\r\n\r\n      await supabase\r\n        .from('notification_log')\r\n        .update({\r\n          status: 'sent',\r\n          sent_at: new Date().toISOString(),\r\n          phone_number: data[action.phone_field]\r\n        })\r\n        .eq('id', createdNotification.id);\r\n\r\n    } catch (smsError) {\r\n      console.error('Error sending SMS:', smsError);\r\n      await supabase\r\n        .from('notification_log')\r\n        .update({\r\n          status: 'failed',\r\n          failed_reason: `SMS Error: ${smsError.message}`\r\n        })\r\n        .eq('id', createdNotification.id);\r\n    }\r\n  } else {\r\n    // Mark in-app notification as sent\r\n    await supabase\r\n      .from('notification_log')\r\n      .update({\r\n        status: 'sent',\r\n        sent_at: new Date().toISOString()\r\n      })\r\n      .eq('id', createdNotification.id);\r\n  }\r\n\r\n  return createdNotification;\r\n}\r\n\r\nfunction interpolateTemplate(template: string, data: any): string {\r\n  if (!template) return '';\r\n  \r\n  return template.replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\r\n    return data[key] || match;\r\n  });\r\n}\r\n\r\nserve(handler);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\push-notification-sender\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":11,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[339,342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[339,342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":111,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3159,3162],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3159,3162],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":122,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3465,3468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3465,3468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":183,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5338,5341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5338,5341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.45.0\";\r\nimport { corsHeaders } from \"../_shared/cors.ts\";\r\n\r\ninterface PushPayload {\r\n  title: string;\r\n  body: string;\r\n  icon?: string;\r\n  badge?: string;\r\n  tag?: string;\r\n  data?: Record<string, any>;\r\n  actions?: Array<{\r\n    action: string;\r\n    title: string;\r\n    icon?: string;\r\n  }>;\r\n  requireInteraction?: boolean;\r\n  url?: string;\r\n}\r\n\r\ninterface PushSubscription {\r\n  endpoint: string;\r\n  keys: {\r\n    p256dh: string;\r\n    auth: string;\r\n  };\r\n}\r\n\r\nconst supabase = createClient(\r\n  Deno.env.get('SUPABASE_URL') ?? '',\r\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\r\n);\r\n\r\nconst VAPID_PRIVATE_KEY = Deno.env.get('VAPID_PRIVATE_KEY');\r\nconst VAPID_PUBLIC_KEY = Deno.env.get('VAPID_PUBLIC_KEY');\r\nconst VAPID_SUBJECT = Deno.env.get('VAPID_SUBJECT') || 'mailto:support@mydetailarea.com';\r\n\r\nserve(async (req: Request) => {\r\n  // Handle CORS preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const { userId, dealerId, payload, userIds } = await req.json();\r\n    console.log('Push notification request:', { userId, dealerId, userIds, payload });\r\n\r\n    if (!payload || !payload.title) {\r\n      throw new Error('Payload with title is required');\r\n    }\r\n\r\n    // Get push subscriptions\r\n    let query = supabase\r\n      .from('push_subscriptions')\r\n      .select('*')\r\n      .eq('is_active', true);\r\n\r\n    if (dealerId) {\r\n      query = query.eq('dealer_id', dealerId);\r\n    }\r\n\r\n    if (userId) {\r\n      query = query.eq('user_id', userId);\r\n    } else if (userIds && Array.isArray(userIds)) {\r\n      query = query.in('user_id', userIds);\r\n    }\r\n\r\n    const { data: subscriptions, error: fetchError } = await query;\r\n\r\n    if (fetchError) {\r\n      throw new Error(`Failed to fetch subscriptions: ${fetchError.message}`);\r\n    }\r\n\r\n    if (!subscriptions || subscriptions.length === 0) {\r\n      return new Response(JSON.stringify({\r\n        success: true,\r\n        message: 'No active subscriptions found',\r\n        sent: 0,\r\n        failed: 0\r\n      }), {\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    console.log(`Found ${subscriptions.length} subscriptions`);\r\n\r\n    // Send push notifications\r\n    const results = await Promise.allSettled(\r\n      subscriptions.map(subscription => sendPushNotification(subscription, payload))\r\n    );\r\n\r\n    const successful = results.filter(r => r.status === 'fulfilled').length;\r\n    const failed = results.filter(r => r.status === 'rejected').length;\r\n\r\n    // Log failures\r\n    results.forEach((result, index) => {\r\n      if (result.status === 'rejected') {\r\n        console.error(`Push notification failed for subscription ${index}:`, result.reason);\r\n      }\r\n    });\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      sent: successful,\r\n      failed: failed,\r\n      total: subscriptions.length\r\n    }), {\r\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('Push notification error:', error);\r\n    return new Response(JSON.stringify({\r\n      error: error.message\r\n    }), {\r\n      status: 500,\r\n      headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n});\r\n\r\nasync function sendPushNotification(subscription: any, payload: PushPayload): Promise<void> {\r\n  if (!VAPID_PRIVATE_KEY || !VAPID_PUBLIC_KEY) {\r\n    throw new Error('VAPID keys not configured');\r\n  }\r\n\r\n  try {\r\n    const pushSubscription: PushSubscription = {\r\n      endpoint: subscription.endpoint,\r\n      keys: {\r\n        p256dh: subscription.p256dh_key,\r\n        auth: subscription.auth_key\r\n      }\r\n    };\r\n\r\n    const webpushPayload = JSON.stringify({\r\n      title: payload.title,\r\n      body: payload.body,\r\n      icon: payload.icon || '/favicon-mda.svg',\r\n      badge: payload.badge || '/favicon-mda.svg',\r\n      tag: payload.tag || 'default',\r\n      data: {\r\n        ...payload.data,\r\n        url: payload.url,\r\n        timestamp: Date.now()\r\n      },\r\n      actions: payload.actions || [\r\n        { action: 'view', title: 'View' },\r\n        { action: 'dismiss', title: 'Dismiss' }\r\n      ],\r\n      requireInteraction: payload.requireInteraction || false,\r\n      silent: false,\r\n      vibrate: [200, 100, 200]\r\n    });\r\n\r\n    // Generate VAPID headers\r\n    const vapidHeaders = await generateVAPIDHeaders(\r\n      pushSubscription.endpoint,\r\n      VAPID_SUBJECT,\r\n      VAPID_PUBLIC_KEY,\r\n      VAPID_PRIVATE_KEY\r\n    );\r\n\r\n    // Send push notification\r\n    const response = await fetch(pushSubscription.endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/octet-stream',\r\n        'Content-Encoding': 'aes128gcm',\r\n        'TTL': '86400', // 24 hours\r\n        ...vapidHeaders\r\n      },\r\n      body: await encryptPayload(webpushPayload, pushSubscription.keys.p256dh, pushSubscription.keys.auth)\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`Push notification failed: ${response.status} ${response.statusText} - ${errorText}`);\r\n    }\r\n\r\n    console.log('Push notification sent successfully');\r\n\r\n  } catch (error: any) {\r\n    console.error('Send push notification error:', error);\r\n    \r\n    // If subscription is invalid, mark as inactive\r\n    if (error.message.includes('410') || error.message.includes('invalid')) {\r\n      await supabase\r\n        .from('push_subscriptions')\r\n        .update({ is_active: false })\r\n        .eq('endpoint', subscription.endpoint);\r\n    }\r\n    \r\n    throw error;\r\n  }\r\n}\r\n\r\nasync function generateVAPIDHeaders(\r\n  endpoint: string,\r\n  subject: string,\r\n  publicKey: string,\r\n  privateKey: string\r\n): Promise<Record<string, string>> {\r\n  // Simplified VAPID header generation\r\n  // In production, you'd want to use a proper JWT library\r\n  \r\n  const urlBase64ToUint8Array = (base64String: string): Uint8Array => {\r\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/-/g, '+')\r\n      .replace(/_/g, '/');\r\n\r\n    const rawData = atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  };\r\n\r\n  // Extract origin from endpoint\r\n  const url = new URL(endpoint);\r\n  const audience = `${url.protocol}//${url.hostname}`;\r\n\r\n  // JWT payload\r\n  const jwtPayload = {\r\n    aud: audience,\r\n    exp: Math.floor(Date.now() / 1000) + 86400, // 24 hours\r\n    sub: subject\r\n  };\r\n\r\n  // For simplicity, we'll use a basic auth header\r\n  // In production, implement proper ECDSA JWT signing\r\n  const auth = `vapid t=${Buffer.from(JSON.stringify(jwtPayload)).toString('base64')}, k=${publicKey}`;\r\n\r\n  return {\r\n    'Authorization': auth,\r\n    'Crypto-Key': `p256ecdsa=${publicKey}`\r\n  };\r\n}\r\n\r\nasync function encryptPayload(payload: string, p256dh: string, auth: string): Promise<Uint8Array> {\r\n  // Simplified encryption for demo purposes\r\n  // In production, implement proper Web Push encryption (RFC 8291)\r\n  \r\n  const encoder = new TextEncoder();\r\n  return encoder.encode(payload);\r\n}\r\n\r\n// Create push_subscriptions table if it doesn't exist\r\nasync function ensurePushSubscriptionsTable() {\r\n  try {\r\n    const { error } = await supabase.rpc('exec', {\r\n      sql: `\r\n        CREATE TABLE IF NOT EXISTS push_subscriptions (\r\n          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\r\n          user_id UUID NOT NULL,\r\n          dealer_id BIGINT NOT NULL,\r\n          endpoint TEXT NOT NULL,\r\n          p256dh_key TEXT NOT NULL,\r\n          auth_key TEXT NOT NULL,\r\n          is_active BOOLEAN DEFAULT true,\r\n          created_at TIMESTAMPTZ DEFAULT NOW(),\r\n          updated_at TIMESTAMPTZ DEFAULT NOW(),\r\n          UNIQUE(user_id, dealer_id, endpoint)\r\n        );\r\n      `\r\n    });\r\n    \r\n    if (error) {\r\n      console.error('Failed to create push_subscriptions table:', error);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error ensuring push_subscriptions table:', error);\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\reset-user-password\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":109,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3418,3421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3418,3421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from 'https://deno.land/std@0.190.0/http/server.ts';\r\nimport { supabase } from '../_shared/supabase.ts';\r\nimport { corsHeaders } from '../_shared/cors.ts';\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  // Handle CORS preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const authHeader = req.headers.get('Authorization');\r\n    if (!authHeader) {\r\n      throw new Error('No authorization header');\r\n    }\r\n\r\n    // Get the current user\r\n    const { data: { user }, error: authError } = await supabase.auth.getUser(\r\n      authHeader.replace('Bearer ', '')\r\n    );\r\n\r\n    if (authError || !user) {\r\n      throw new Error('Unauthorized');\r\n    }\r\n\r\n    const { userId, resetType, tempPassword, forceChange, dealerId } = await req.json();\r\n\r\n    console.log('Password reset request:', { userId, resetType, dealerId, adminId: user.id });\r\n\r\n    // Verify admin has permission to reset passwords\r\n    const { data: membership } = await supabase\r\n      .from('dealer_memberships')\r\n      .select('dealer_id')\r\n      .eq('user_id', user.id)\r\n      .eq('dealer_id', dealerId)\r\n      .eq('is_active', true)\r\n      .single();\r\n\r\n    if (!membership) {\r\n      throw new Error('No dealer membership found');\r\n    }\r\n\r\n    // Generate reset token\r\n    const resetToken = crypto.randomUUID();\r\n\r\n    // Create password reset request\r\n    const { data: resetRequest, error: resetError } = await supabase\r\n      .from('password_reset_requests')\r\n      .insert({\r\n        user_id: userId,\r\n        admin_id: user.id,\r\n        token: resetToken,\r\n        request_type: resetType,\r\n        temp_password: tempPassword || null,\r\n        force_change_on_login: forceChange || false,\r\n        expires_at: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), // 24 hours\r\n        metadata: {\r\n          dealer_id: dealerId,\r\n          reset_by_admin: true\r\n        }\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (resetError) {\r\n      console.error('Error creating reset request:', resetError);\r\n      throw new Error('Failed to create password reset request');\r\n    }\r\n\r\n    // Log the activity\r\n    await supabase\r\n      .from('user_activity_log')\r\n      .insert({\r\n        user_id: userId,\r\n        action_type: 'password_reset_initiated',\r\n        action_description: `Password reset initiated by admin (${resetType})`,\r\n        details: {\r\n          admin_id: user.id,\r\n          reset_type: resetType,\r\n          force_change: forceChange,\r\n          dealer_id: dealerId\r\n        }\r\n      });\r\n\r\n    // If it's an email reset, we would typically send an email here\r\n    // For now, we'll return the reset token for testing\r\n    const response = {\r\n      success: true,\r\n      resetRequestId: resetRequest.id,\r\n      resetToken: resetToken,\r\n      expiresAt: resetRequest.expires_at,\r\n      message: resetType === 'email_reset' \r\n        ? 'Password reset email will be sent to user'\r\n        : resetType === 'temp_password'\r\n        ? 'Temporary password generated'\r\n        : 'User will be forced to change password on next login'\r\n    };\r\n\r\n    console.log('Password reset successful:', response);\r\n\r\n    return new Response(JSON.stringify(response), {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...corsHeaders,\r\n      },\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('Error in reset-user-password function:', error);\r\n    \r\n    return new Response(\r\n      JSON.stringify({ \r\n        error: error.message,\r\n        success: false \r\n      }),\r\n      {\r\n        status: error.message === 'Unauthorized' ? 401 : 500,\r\n        headers: { \r\n          'Content-Type': 'application/json', \r\n          ...corsHeaders \r\n        },\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nserve(handler);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\send-order-email\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":14,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[400,403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[400,403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":53,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2208,2211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2208,2211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":86,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3049,3052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3049,3052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\nimport { Resend } from \"npm:resend@2.0.0\";\r\n\r\nconst corsHeaders = {\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\r\n};\r\n\r\ninterface EmailRequest {\r\n  to: string;\r\n  subject: string;\r\n  orderNumber: string;\r\n  customerName: string;\r\n  orderDetails: any;\r\n}\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  if (req.method === \"OPTIONS\") {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const resendApiKey = Deno.env.get(\"RESEND_API_KEY\");\r\n    if (!resendApiKey) {\r\n      throw new Error(\"RESEND_API_KEY not configured\");\r\n    }\r\n\r\n    const resend = new Resend(resendApiKey);\r\n    const { to, subject, orderNumber, customerName, orderDetails }: EmailRequest = await req.json();\r\n\r\n    const emailResponse = await resend.emails.send({\r\n      from: \"Orders <orders@yourdomain.com>\", // Replace with your domain\r\n      to: [to],\r\n      subject: subject || `Order Update - ${orderNumber}`,\r\n      html: `\r\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n          <h1 style=\"color: #333;\">Order ${orderNumber}</h1>\r\n          <p>Dear ${customerName},</p>\r\n          \r\n          <div style=\"background-color: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;\">\r\n            <h3 style=\"margin-top: 0;\">Order Details:</h3>\r\n            <p><strong>Order Number:</strong> ${orderNumber}</p>\r\n            <p><strong>Status:</strong> ${orderDetails.status}</p>\r\n            <p><strong>Vehicle:</strong> ${orderDetails.vehicle_year} ${orderDetails.vehicle_make} ${orderDetails.vehicle_model}</p>\r\n            ${orderDetails.vehicle_vin ? `<p><strong>VIN:</strong> ${orderDetails.vehicle_vin}</p>` : ''}\r\n            ${orderDetails.stock_number ? `<p><strong>Stock Number:</strong> ${orderDetails.stock_number}</p>` : ''}\r\n          </div>\r\n\r\n          ${orderDetails.services && orderDetails.services.length > 0 ? `\r\n            <div style=\"margin: 20px 0;\">\r\n              <h3>Services:</h3>\r\n              <ul>\r\n                ${orderDetails.services.map((service: any) => `<li>${service.name} - $${service.price}</li>`).join('')}\r\n              </ul>\r\n            </div>\r\n          ` : ''}\r\n\r\n          ${orderDetails.notes ? `\r\n            <div style=\"margin: 20px 0;\">\r\n              <h3>Notes:</h3>\r\n              <p>${orderDetails.notes}</p>\r\n            </div>\r\n          ` : ''}\r\n\r\n          <p>Thank you for your business!</p>\r\n          <p>Best regards,<br>Your Service Team</p>\r\n        </div>\r\n      `,\r\n    });\r\n\r\n    console.log(`Email sent successfully to ${to} for order ${orderNumber}`);\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        emailId: emailResponse.data?.id,\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          ...corsHeaders,\r\n        },\r\n      }\r\n    );\r\n  } catch (error: any) {\r\n    console.error(\"Error in send-order-email function:\", error);\r\n    return new Response(\r\n      JSON.stringify({ \r\n        success: false, \r\n        error: error.message \r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { \r\n          \"Content-Type\": \"application/json\", \r\n          ...corsHeaders \r\n        },\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nserve(handler);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\send-sms\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2240,2243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2240,2243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\n\r\nconst corsHeaders = {\r\n  \"Access-Control-Allow-Origin\": \"*\",\r\n  \"Access-Control-Allow-Headers\": \"authorization, x-client-info, apikey, content-type\",\r\n};\r\n\r\ninterface SMSRequest {\r\n  to: string;\r\n  message: string;\r\n  orderNumber: string;\r\n}\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  if (req.method === \"OPTIONS\") {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const twilioAccountSid = Deno.env.get(\"TWILIO_ACCOUNT_SID\");\r\n    const twilioAuthToken = Deno.env.get(\"TWILIO_AUTH_TOKEN\");\r\n    \r\n    if (!twilioAccountSid || !twilioAuthToken) {\r\n      throw new Error(\"Twilio credentials not configured\");\r\n    }\r\n\r\n    const { to, message, orderNumber }: SMSRequest = await req.json();\r\n\r\n    // Format the phone number (ensure it starts with +1 for US numbers)\r\n    const formattedPhone = to.startsWith('+') ? to : `+1${to.replace(/\\D/g, '')}`;\r\n\r\n    // Send SMS using Twilio REST API\r\n    const twilioUrl = `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`;\r\n    \r\n    const body = new URLSearchParams({\r\n      To: formattedPhone,\r\n      From: '+1YOUR_TWILIO_PHONE', // Replace with your Twilio phone number\r\n      Body: `${message}\\n\\nOrder: ${orderNumber}`,\r\n    });\r\n\r\n    const response = await fetch(twilioUrl, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Authorization\": `Basic ${btoa(`${twilioAccountSid}:${twilioAuthToken}`)}`,\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: body.toString(),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.text();\r\n      throw new Error(`Twilio API error: ${response.status} - ${errorData}`);\r\n    }\r\n\r\n    const result = await response.json();\r\n    \r\n    console.log(`SMS sent successfully to ${formattedPhone} for order ${orderNumber}`);\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        messageSid: result.sid,\r\n        to: formattedPhone,\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          ...corsHeaders,\r\n        },\r\n      }\r\n    );\r\n  } catch (error: any) {\r\n    console.error(\"Error in send-sms function:\", error);\r\n    return new Response(\r\n      JSON.stringify({ \r\n        success: false, \r\n        error: error.message \r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { \r\n          \"Content-Type\": \"application/json\", \r\n          ...corsHeaders \r\n        },\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nserve(handler);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\sms-webhook\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":97,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2912,2915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2912,2915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":162,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4541,4544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4541,4544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":199,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5485,5488],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5485,5488],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":243,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7145,7148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7145,7148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2\";\r\nimport { corsHeaders } from \"../_shared/cors.ts\";\r\n\r\nconst supabaseUrl = Deno.env.get('SUPABASE_URL')!;\r\nconst supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;\r\n\r\nconst supabase = createClient(supabaseUrl, supabaseServiceKey);\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    // Parse Twilio webhook data\r\n    const formData = await req.formData();\r\n    const twilioData = Object.fromEntries(formData.entries());\r\n\r\n    const {\r\n      MessageSid: messageSid,\r\n      From: fromNumber,\r\n      To: toNumber,\r\n      Body: messageBody,\r\n      NumMedia: numMedia\r\n    } = twilioData;\r\n\r\n    console.log('Received SMS webhook:', {\r\n      messageSid,\r\n      fromNumber,\r\n      toNumber,\r\n      messageBody: messageBody?.substring(0, 100)\r\n    });\r\n\r\n    // Clean phone numbers\r\n    const cleanFromNumber = cleanPhoneNumber(fromNumber as string);\r\n    const cleanToNumber = cleanPhoneNumber(toNumber as string);\r\n\r\n    // Find or create conversation\r\n    const conversation = await findOrCreateConversation(\r\n      cleanFromNumber,\r\n      cleanToNumber,\r\n      messageBody as string\r\n    );\r\n\r\n    // Handle media attachments\r\n    const mediaUrls = [];\r\n    if (numMedia && parseInt(numMedia as string) > 0) {\r\n      for (let i = 0; i < parseInt(numMedia as string); i++) {\r\n        const mediaUrl = twilioData[`MediaUrl${i}`];\r\n        if (mediaUrl) {\r\n          mediaUrls.push(mediaUrl);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Create SMS message record\r\n    const { data: messageRecord, error: messageError } = await supabase\r\n      .from('sms_messages')\r\n      .insert({\r\n        conversation_id: conversation.id,\r\n        twilio_sid: messageSid,\r\n        direction: 'inbound',\r\n        message_body: messageBody || '',\r\n        media_urls: mediaUrls,\r\n        from_number: cleanFromNumber,\r\n        to_number: cleanToNumber,\r\n        status: 'received'\r\n      })\r\n      .select()\r\n      .single();\r\n\r\n    if (messageError) {\r\n      throw new Error(`Failed to create message record: ${messageError.message}`);\r\n    }\r\n\r\n    // Update conversation\r\n    await supabase\r\n      .from('sms_conversations')\r\n      .update({\r\n        last_message_at: new Date().toISOString(),\r\n        message_count: conversation.message_count + 1\r\n      })\r\n      .eq('id', conversation.id);\r\n\r\n    // Process auto-responses\r\n    await processAutoResponse(conversation, messageBody as string, cleanFromNumber);\r\n\r\n    // Check for order mentions and create notifications\r\n    await processOrderMentions(conversation, messageBody as string);\r\n\r\n    return new Response('OK', {\r\n      status: 200,\r\n      headers: corsHeaders\r\n    });\r\n\r\n  } catch (error: any) {\r\n    console.error('SMS webhook error:', error);\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: false,\r\n        error: error.message\r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...corsHeaders\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nasync function findOrCreateConversation(\r\n  fromNumber: string, \r\n  toNumber: string, \r\n  messageBody: string\r\n) {\r\n  // Extract potential order references from message\r\n  const orderPattern = /(SA|SV|RC|CW)-?\\d{4}-?\\d{3,4}/gi;\r\n  const orderMatches = messageBody.match(orderPattern);\r\n  \r\n  let entityType: string | null = null;\r\n  let entityId: string | null = null;\r\n\r\n  if (orderMatches && orderMatches.length > 0) {\r\n    const orderNumber = orderMatches[0];\r\n    \r\n    // Find the order in database\r\n    const { data: order } = await supabase\r\n      .from('orders')\r\n      .select('id, order_type, dealer_id')\r\n      .eq('order_number', orderNumber)\r\n      .single();\r\n\r\n    if (order) {\r\n      entityType = 'order';\r\n      entityId = order.id;\r\n    }\r\n  }\r\n\r\n  // Try to find existing conversation\r\n  let conversationQuery = supabase\r\n    .from('sms_conversations')\r\n    .select('*')\r\n    .eq('phone_number', fromNumber);\r\n\r\n  if (entityType && entityId) {\r\n    conversationQuery = conversationQuery\r\n      .eq('entity_type', entityType)\r\n      .eq('entity_id', entityId);\r\n  }\r\n\r\n  const { data: existingConversation } = await conversationQuery.single();\r\n\r\n  if (existingConversation) {\r\n    return existingConversation;\r\n  }\r\n\r\n  // Create new conversation\r\n  const conversationData: any = {\r\n    phone_number: fromNumber,\r\n    status: 'active',\r\n    message_count: 0,\r\n    last_message_at: new Date().toISOString()\r\n  };\r\n\r\n  if (entityType && entityId) {\r\n    conversationData.entity_type = entityType;\r\n    conversationData.entity_id = entityId;\r\n    \r\n    // Get dealer_id from the order\r\n    const { data: order } = await supabase\r\n      .from('orders')\r\n      .select('dealer_id, customer_name')\r\n      .eq('id', entityId)\r\n      .single();\r\n\r\n    if (order) {\r\n      conversationData.dealer_id = order.dealer_id;\r\n      conversationData.customer_name = order.customer_name;\r\n    }\r\n  }\r\n\r\n  const { data: newConversation, error } = await supabase\r\n    .from('sms_conversations')\r\n    .insert(conversationData)\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new Error(`Failed to create conversation: ${error.message}`);\r\n  }\r\n\r\n  return newConversation;\r\n}\r\n\r\nasync function processAutoResponse(conversation: any, messageBody: string, fromNumber: string) {\r\n  // Check if it's business hours\r\n  const now = new Date();\r\n  const hour = now.getHours();\r\n  const isBusinessHours = hour >= 8 && hour < 18;\r\n  const isWeekend = now.getDay() === 0 || now.getDay() === 6;\r\n\r\n  if (!isBusinessHours || isWeekend) {\r\n    // Send auto-response for after hours\r\n    const autoResponse = `Thank you for your message! We're currently closed but will respond first thing during business hours (Monday-Friday 8AM-6PM, Saturday 8AM-5PM). For urgent matters, please call us directly.`;\r\n    \r\n    await supabase.functions.invoke('enhanced-sms', {\r\n      body: {\r\n        to: fromNumber,\r\n        message: autoResponse,\r\n        conversationId: conversation.id,\r\n        isAutoResponse: true\r\n      }\r\n    });\r\n  } else if (messageBody.toLowerCase().includes('status') && conversation.entity_id) {\r\n    // Auto-respond with order status\r\n    const { data: order } = await supabase\r\n      .from('orders')\r\n      .select('order_number, status, customer_name')\r\n      .eq('id', conversation.entity_id)\r\n      .single();\r\n\r\n    if (order) {\r\n      const statusResponse = `Hi ${order.customer_name}! Your order ${order.order_number} is currently ${order.status}. We'll keep you updated on any changes!`;\r\n      \r\n      await supabase.functions.invoke('enhanced-sms', {\r\n        body: {\r\n          to: fromNumber,\r\n          message: statusResponse,\r\n          conversationId: conversation.id,\r\n          entityType: 'order',\r\n          entityId: conversation.entity_id,\r\n          isAutoResponse: true\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nasync function processOrderMentions(conversation: any, messageBody: string) {\r\n  if (!conversation.entity_id || conversation.entity_type !== 'order') {\r\n    return;\r\n  }\r\n\r\n  // Trigger notification engine for SMS received\r\n  await supabase.functions.invoke('notification-engine', {\r\n    body: {\r\n      entityType: 'order',\r\n      entityId: conversation.entity_id,\r\n      dealerId: conversation.dealer_id,\r\n      triggerEvent: 'sms_received',\r\n      data: {\r\n        message: messageBody,\r\n        phone: conversation.phone_number,\r\n        customer_name: conversation.customer_name\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\nfunction cleanPhoneNumber(phoneNumber: string): string {\r\n  // Remove +1 and any non-digits, then format consistently\r\n  return phoneNumber.replace(/^\\+?1?/, '').replace(/\\D/g, '');\r\n}\r\n\r\nserve(handler);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\track-qr-click\\index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":205,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":205,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6488,6491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6488,6491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { serve } from \"https://deno.land/std@0.190.0/http/server.ts\";\r\nimport { supabase } from \"../_shared/supabase.ts\";\r\nimport { corsHeaders } from \"../_shared/cors.ts\";\r\n\r\ninterface ClickTrackingRequest {\r\n  slug: string;\r\n  ipAddress?: string;\r\n  userAgent?: string;\r\n  referer?: string;\r\n  sessionId?: string;\r\n}\r\n\r\n// Function to parse user agent for device info\r\nfunction parseUserAgent(userAgent: string) {\r\n  const isMobile = /Mobile|Android|iPhone|iPad/.test(userAgent);\r\n  let browser = 'Unknown';\r\n  let os = 'Unknown';\r\n\r\n  // Simple browser detection\r\n  if (userAgent.includes('Chrome')) browser = 'Chrome';\r\n  else if (userAgent.includes('Firefox')) browser = 'Firefox';\r\n  else if (userAgent.includes('Safari')) browser = 'Safari';\r\n  else if (userAgent.includes('Edge')) browser = 'Edge';\r\n\r\n  // Simple OS detection\r\n  if (userAgent.includes('Windows')) os = 'Windows';\r\n  else if (userAgent.includes('Mac')) os = 'macOS';\r\n  else if (userAgent.includes('Linux')) os = 'Linux';\r\n  else if (userAgent.includes('Android')) os = 'Android';\r\n  else if (userAgent.includes('iOS') || userAgent.includes('iPhone') || userAgent.includes('iPad')) os = 'iOS';\r\n\r\n  return {\r\n    browser,\r\n    os,\r\n    isMobile,\r\n    deviceType: isMobile ? 'mobile' : 'desktop'\r\n  };\r\n}\r\n\r\nconst handler = async (req: Request): Promise<Response> => {\r\n  if (req.method === \"OPTIONS\") {\r\n    return new Response(null, { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    const { slug, ipAddress, userAgent, referer, sessionId }: ClickTrackingRequest = await req.json();\r\n\r\n    console.log(`Tracking click for slug: ${slug}`);\r\n\r\n    // Get client IP if not provided\r\n    const clientIP = ipAddress || req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown';\r\n    const clientUserAgent = userAgent || req.headers.get('user-agent') || 'unknown';\r\n\r\n    // Rate limiting check - allow 10 clicks per IP per minute\r\n    const { data: rateLimitResult, error: rateLimitError } = await supabase.rpc('check_rate_limit', {\r\n      p_identifier: clientIP,\r\n      p_resource_type: 'click_tracking',\r\n      p_max_requests: 10,\r\n      p_window_minutes: 1\r\n    });\r\n\r\n    if (rateLimitError) {\r\n      console.error('Rate limit check error:', rateLimitError);\r\n      // Continue without rate limiting if check fails\r\n    } else if (!rateLimitResult) {\r\n      // Log security event for rate limit exceeded\r\n      await supabase.rpc('log_security_event', {\r\n        p_event_type: 'rate_limit_exceeded',\r\n        p_event_details: { \r\n          resource: 'click_tracking', \r\n          ip: clientIP, \r\n          user_agent: clientUserAgent \r\n        },\r\n        p_success: false\r\n      });\r\n\r\n      return new Response(\r\n        JSON.stringify({ error: 'Rate limit exceeded. Please try again later.' }), \r\n        { \r\n          status: 429, \r\n          headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\r\n        }\r\n      );\r\n    }\r\n\r\n    // Find the link by slug\r\n    const { data: linkData, error: linkError } = await supabase\r\n      .from(\"sales_order_links\")\r\n      .select(\"*\")\r\n      .eq(\"slug\", slug)\r\n      .eq(\"is_active\", true)\r\n      .single();\r\n\r\n    if (linkError || !linkData) {\r\n      console.error(\"Link not found:\", linkError);\r\n      \r\n      // Log security event for invalid link access attempt\r\n      await supabase.rpc('log_security_event', {\r\n        p_event_type: 'invalid_link_access',\r\n        p_event_details: { \r\n          slug, \r\n          ip: clientIP, \r\n          user_agent: clientUserAgent \r\n        },\r\n        p_success: false\r\n      });\r\n\r\n      return new Response(\r\n        JSON.stringify({ error: \"Link not found\" }),\r\n        { \r\n          status: 404,\r\n          headers: { \"Content-Type\": \"application/json\", ...corsHeaders }\r\n        }\r\n      );\r\n    }\r\n\r\n    // Parse user agent for device info\r\n    const deviceInfo = userAgent ? parseUserAgent(userAgent) : {\r\n      browser: 'Unknown',\r\n      os: 'Unknown',\r\n      isMobile: false,\r\n      deviceType: 'unknown'\r\n    };\r\n\r\n    // Check if this is a unique click (same IP + session within 24 hours)\r\n    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\r\n    \r\n    const { data: existingClick } = await supabase\r\n      .from(\"sales_order_link_clicks\")\r\n      .select(\"id\")\r\n      .eq(\"link_id\", linkData.id)\r\n      .eq(\"ip_address\", ipAddress || \"unknown\")\r\n      .eq(\"session_id\", sessionId || \"unknown\")\r\n      .gte(\"clicked_at\", twentyFourHoursAgo)\r\n      .limit(1);\r\n\r\n    const isUniqueClick = !existingClick || existingClick.length === 0;\r\n\r\n    // Insert click record\r\n    const { error: clickError } = await supabase\r\n      .from(\"sales_order_link_clicks\")\r\n      .insert({\r\n        link_id: linkData.id,\r\n        ip_address: ipAddress || null,\r\n        user_agent: userAgent || null,\r\n        referer: referer || null,\r\n        browser: deviceInfo.browser,\r\n        os: deviceInfo.os,\r\n        device_type: deviceInfo.deviceType,\r\n        is_mobile: deviceInfo.isMobile,\r\n        is_unique_click: isUniqueClick,\r\n        session_id: sessionId || null,\r\n        click_data: {\r\n          timestamp: new Date().toISOString(),\r\n          userAgent: userAgent,\r\n          referer: referer\r\n        }\r\n      });\r\n\r\n    if (clickError) {\r\n      console.error(\"Error inserting click record:\", clickError);\r\n      \r\n      // Log security event for click tracking failure\r\n      await supabase.rpc('log_security_event', {\r\n        p_event_type: 'click_tracking_error',\r\n        p_event_details: { \r\n          slug, \r\n          error: clickError.message,\r\n          ip: clientIP \r\n        },\r\n        p_success: false\r\n      });\r\n      // Don't fail the request, just log the error\r\n    } else {\r\n      // Log successful click tracking\r\n      await supabase.rpc('log_security_event', {\r\n        p_event_type: 'link_click_tracked',\r\n        p_event_details: { \r\n          slug, \r\n          link_id: linkData.id,\r\n          is_unique: isUniqueClick,\r\n          ip: clientIP \r\n        },\r\n        p_success: true\r\n      });\r\n    }\r\n\r\n    console.log(`Click tracked for slug ${slug}, unique: ${isUniqueClick}`);\r\n\r\n    return new Response(\r\n      JSON.stringify({\r\n        success: true,\r\n        deepLink: linkData.deep_link,\r\n        tracked: !clickError,\r\n        isUniqueClick\r\n      }),\r\n      {\r\n        status: 200,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          ...corsHeaders,\r\n        },\r\n      }\r\n    );\r\n  } catch (error: any) {\r\n    console.error(\"Error in track-qr-click function:\", error);\r\n    \r\n    // Log security event for unexpected errors\r\n    await supabase.rpc('log_security_event', {\r\n      p_event_type: 'click_tracking_exception',\r\n      p_event_details: { \r\n        error: error instanceof Error ? error.message : 'Unknown error'\r\n      },\r\n      p_success: false\r\n    });\r\n\r\n    return new Response(\r\n      JSON.stringify({ \r\n        success: false, \r\n        error: \"Internal server error\" \r\n      }),\r\n      {\r\n        status: 500,\r\n        headers: { \r\n          \"Content-Type\": \"application/json\", \r\n          ...corsHeaders \r\n        },\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nserve(handler);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\supabase\\functions\\upload-order-attachment\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\tailwind.config.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":129,"column":13,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":129,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Config } from \"tailwindcss\";\r\n\r\nexport default {\r\n  darkMode: [\"class\"],\r\n  content: [\"./pages/**/*.{ts,tsx}\", \"./components/**/*.{ts,tsx}\", \"./app/**/*.{ts,tsx}\", \"./src/**/*.{ts,tsx}\"],\r\n  prefix: \"\",\r\n  theme: {\r\n    container: {\r\n      center: true,\r\n      padding: \"2rem\",\r\n      screens: {\r\n        \"2xl\": \"1400px\",\r\n      },\r\n    },\r\n    extend: {\r\n      backgroundImage: {\r\n        \"gradient-primary\": \"var(--gradient-primary)\",\r\n        \"gradient-accent\": \"var(--gradient-accent)\",\r\n        \"gradient-subtle\": \"var(--gradient-subtle)\",\r\n      },\r\n      boxShadow: {\r\n        \"elegant\": \"var(--shadow-elegant)\",\r\n        \"glow\": \"var(--shadow-glow)\",\r\n      },\r\n      transitionTimingFunction: {\r\n        \"smooth\": \"var(--transition-smooth)\",\r\n      },\r\n      colors: {\r\n        border: \"hsl(var(--border))\",\r\n        input: \"hsl(var(--input))\",\r\n        ring: \"hsl(var(--ring))\",\r\n        background: \"hsl(var(--background))\",\r\n        foreground: \"hsl(var(--foreground))\",\r\n        primary: {\r\n          DEFAULT: \"hsl(var(--primary))\",\r\n          foreground: \"hsl(var(--primary-foreground))\",\r\n          glow: \"hsl(var(--primary-glow))\",\r\n        },\r\n        secondary: {\r\n          DEFAULT: \"hsl(var(--secondary))\",\r\n          foreground: \"hsl(var(--secondary-foreground))\",\r\n        },\r\n        destructive: {\r\n          DEFAULT: \"hsl(var(--destructive))\",\r\n          foreground: \"hsl(var(--destructive-foreground))\",\r\n        },\r\n        muted: {\r\n          DEFAULT: \"hsl(var(--muted))\",\r\n          foreground: \"hsl(var(--muted-foreground))\",\r\n        },\r\n        accent: {\r\n          DEFAULT: \"hsl(var(--accent))\",\r\n          foreground: \"hsl(var(--accent-foreground))\",\r\n        },\r\n        popover: {\r\n          DEFAULT: \"hsl(var(--popover))\",\r\n          foreground: \"hsl(var(--popover-foreground))\",\r\n        },\r\n        card: {\r\n          DEFAULT: \"hsl(var(--card))\",\r\n          foreground: \"hsl(var(--card-foreground))\",\r\n        },\r\n        success: {\r\n          DEFAULT: \"hsl(var(--success))\",\r\n          foreground: \"hsl(var(--success-foreground))\",\r\n        },\r\n        warning: {\r\n          DEFAULT: \"hsl(var(--warning))\",\r\n          foreground: \"hsl(var(--warning-foreground))\",\r\n        },\r\n        pending: {\r\n          DEFAULT: \"hsl(var(--pending))\",\r\n          foreground: \"hsl(var(--pending-foreground))\",\r\n        },\r\n        sidebar: {\r\n          DEFAULT: \"hsl(var(--sidebar-background))\",\r\n          foreground: \"hsl(var(--sidebar-foreground))\",\r\n          primary: \"hsl(var(--sidebar-primary))\",\r\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\r\n          accent: \"hsl(var(--sidebar-accent))\",\r\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\r\n          border: \"hsl(var(--sidebar-border))\",\r\n          ring: \"hsl(var(--sidebar-ring))\",\r\n        },\r\n      },\r\n      borderRadius: {\r\n        lg: \"var(--radius)\",\r\n        md: \"calc(var(--radius) - 2px)\",\r\n        sm: \"calc(var(--radius) - 4px)\",\r\n      },\r\n      keyframes: {\r\n        \"accordion-down\": {\r\n          from: {\r\n            height: \"0\",\r\n          },\r\n          to: {\r\n            height: \"var(--radix-accordion-content-height)\",\r\n          },\r\n        },\r\n        \"accordion-up\": {\r\n          from: {\r\n            height: \"var(--radix-accordion-content-height)\",\r\n          },\r\n          to: {\r\n            height: \"0\",\r\n          },\r\n        },\r\n        \"scan-line\": {\r\n          \"0%\": { \r\n            transform: \"translateY(0px)\", \r\n            opacity: \"0\" \r\n          },\r\n          \"50%\": { \r\n            opacity: \"1\" \r\n          },\r\n          \"100%\": { \r\n            transform: \"translateY(128px)\", \r\n            opacity: \"0\" \r\n          }\r\n        },\r\n      },\r\n      animation: {\r\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\r\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\r\n        \"scan-line\": \"scan-line 2s ease-in-out infinite\",\r\n      },\r\n    },\r\n  },\r\n  plugins: [require(\"tailwindcss-animate\")],\r\n} satisfies Config;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\tests\\e2e\\auth.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\tests\\e2e\\chat.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\tests\\e2e\\sales-orders.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\tests\\order-detail-modal.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\rudyr\\apps\\mydetailarea\\vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
