 import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

  const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
  const supabaseServiceRoleKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

  // Use service role client for server operations
  export const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);

  const corsHeaders = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "authorization, x-client-info, apikey, content-type",
  };

  interface QRRequest {
    orderId: string;
    orderNumber: string;
    dealerId: number;
    regenerate?: boolean;
    auto_generated?: boolean;
    retry_generation?: boolean;
  }

  const handler = async (req: Request): Promise<Response> => {
    if (req.method === "OPTIONS") {
      return new Response(null, { headers: corsHeaders });
    }

    // Declare variables at handler level to be available in catch block
    let orderId = '';
    let auto_generated = false;
    let retry_generation = false;

    try {
      const mdaApiKey = Deno.env.get("MDA_TO_API_KEY");
      if (!mdaApiKey) {
        throw new Error("MDA_TO_API_KEY not configured");
      }

      const {
        orderId: orderIdFromRequest,
        orderNumber,
        dealerId,
        regenerate = false,
        auto_generated: autoGenerated = false,
        retry_generation: retryGeneration = false
      }: QRRequest = await req.json();

      // Assign to handler-level variables
      orderId = orderIdFromRequest;
      auto_generated = autoGenerated;
      retry_generation = retryGeneration;

      console.log(`Processing QR generation for order ${orderNumber} (ID: ${orderId})`);
      console.log(`Context: auto_generated=${auto_generated}, regenerate=${regenerate}, retry=${retry_generation}`);

      // Update QR generation status to 'generating' for auto-generated requests
      if (auto_generated || retry_generation) {
        await supabase.rpc('update_qr_status_only', {
          p_order_id: orderId,
          p_status: 'generating',
          p_increment_attempts: true
        });
      }

      // Generate new links
      console.log(`Generating QR for order ${orderNumber}`);

      // Generate unique 5-digit slug
      const { data: slugData, error: slugError } = await supabase
        .rpc('generate_unique_slug');

      if (slugError || !slugData) {
        console.error("Error generating slug:", slugError);
        throw new Error("Failed to generate unique slug");
      }

      const slug = slugData;
      console.log(`Generated slug: ${slug}`);

      // Create the deep link to our redirect endpoint
      // Use BASE_URL from environment variables (configured in Supabase Dashboard)
      const appUrl = Deno.env.get("BASE_URL") || "https://app.mydetailarea.com";
      const redirectUrl = `${appUrl}/sales?order=${orderId}`;
      const deepLink = redirectUrl; // Same as redirect URL - direct redirect

      console.log(`Using app URL: ${appUrl}`);
      console.log(`Redirect URL will be: ${redirectUrl}`);

      // Generate short link using mda.to API
      let shortLink = `https://mda.to/${slug.toLowerCase()}`;

      console.log(`üîó Creating shortlink with mda.to API`);
      console.log(`üîë API Key configured: ${mdaApiKey ? 'Yes' : 'No'}`);

      try {
        // Use correct mda.to API endpoint from official docs
        const shortLinkResponse = await fetch("https://mda.to/api/url/add", {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${mdaApiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            url: redirectUrl,
            custom: slug, // Keep uppercase for consistency
            status: "private",
            description: `Order ${orderNumber} - MDA System`
          }),
        });

        if (shortLinkResponse.ok) {
          const shortLinkData = await shortLinkResponse.json();

          if (shortLinkData.error === 0) {
            // Success response from mda.to API
            shortLink = shortLinkData.data?.shorturl || `https://mda.to/${slug}`;
            console.log(`‚úÖ mda.to API success: ${shortLink}`);
          } else {
            // API returned error
            console.warn(`‚ö†Ô∏è mda.to API error: ${shortLinkData.message || 'Unknown error'}`);
            console.log(`üîÑ Using fallback URL`);
          }
        } else {
          const errorText = await shortLinkResponse.text();
          console.error(`‚ùå mda.to API HTTP ${shortLinkResponse.status}: ${errorText}`);
          console.log(`üîÑ Using fallback URL`);
        }
      } catch (err: any) {
        console.error("‚ùå mda.to API call failed:", err.message || err);
        console.log(`üîÑ Using fallback URL`);
      }

      // Ensure shortlink is properly formatted
      if (!shortLink.startsWith('https://mda.to/')) {
        shortLink = `https://mda.to/${slug}`;
      }

      console.log(`üéØ Final shortLink: ${shortLink}`);

      // Skip QR image generation - will be generated locally in frontend
      const qrCodeUrl: string | null = null;

      console.log('‚úÖ QR generation completed');

      // Create response data
      const orderData = {
        id: orderId,
        short_link: shortLink,
        qr_code_url: qrCodeUrl,
        qr_scan_count: 0,
        updated_at: new Date().toISOString()
      };

      // Update QR generation status to completed for auto-generated requests
      if (auto_generated || retry_generation) {
        await supabase.rpc('update_qr_status_only', {
          p_order_id: orderId,
          p_status: 'completed',
          p_increment_attempts: false
        });
      }

      console.log(`Successfully generated QR and link for order ${orderNumber} with slug ${slug}`);

      return new Response(
        JSON.stringify({
          success: true,
          linkId: orderData.id,
          shortLink,
          qrCodeUrl,
          deepLink,
          slug,
          redirectUrl,
          analytics: {
            totalClicks: orderData.qr_scan_count || 0,
            uniqueClicks: Math.floor((orderData.qr_scan_count || 0) * 0.7),
            lastClickedAt: orderData.updated_at,
          }
        }),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders,
          },
        }
      );
    } catch (error: any) {
      console.error("Error in generate-qr-shortlink function:", error);

      // Update QR generation status to failed for auto-generated requests
      if (auto_generated || retry_generation) {
        try {
          await supabase.rpc('update_qr_status_only', {
            p_order_id: orderId,
            p_status: 'failed',
            p_increment_attempts: false
          });
        } catch (statusError) {
          console.error("Failed to update QR generation status:", statusError);
        }
      }

      return new Response(
        JSON.stringify({
          success: false,
          error: error.message,
          context: {
            auto_generated: auto_generated || false,
            retry_generation: retry_generation || false
          }
        }),
        {
          status: 500,
          headers: {
            "Content-Type": "application/json",
            ...corsHeaders
          },
        }
      );
    }
  };

  serve(handler);
